
==================== FINAL INTERFACE ====================
2018-10-29 09:29:08.1814074 UTC

interface Multilinear-0.8.0.0-4dpV53DlxV5EwwV6FZreVP:Multilinear.Matrix 8022
  interface hash: 46fa93967a95b1b6050983801f2c0f7d
  ABI hash: 78fc362adbb8a1c848ec5fb665ae478a
  export-list hash: eabae68ca3c48c4711163f217178f5ac
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: 4e8964e2102b5f84d5f0729e134505fa
  sig of: Nothing
  used TH splices: False
  where
exports:
  Multilinear.Matrix.const
  Multilinear.Matrix.fromCSV
  Multilinear.Matrix.fromIndices
  Multilinear.Matrix.randomDouble
  Multilinear.Matrix.randomDoubleSeed
  Multilinear.Matrix.randomInt
  Multilinear.Matrix.randomIntSeed
  Multilinear.Matrix.toCSV
module dependencies: Multilinear Multilinear.Generic
                     Multilinear.Index Multilinear.Index.Finite
                     Multilinear.Index.Infinite Multilinear.Tensor
package dependencies: MonadRandom-0.5.1 Win32-2.5.4.1 aeson-1.2.4.0
                      array-0.5.2.0 attoparsec-0.13.2.2 attoparsec-enumerator-0.3.4
                      base-4.10.1.0 base-compat-0.9.3 base-orphans-0.6 bifunctors-5.5.2
                      binary-0.8.5.1 bytestring-0.10.8.2 cereal-0.5.5.0
                      cereal-vector-0.2.0.1 comonad-5.0.3 containers-0.5.10.2
                      csv-enumerator-0.10.2.0 deepseq-1.4.3.0 directory-1.3.0.2
                      distributive-0.5.3 dlist-0.8.0.4 either-4.5 enumerator-0.4.20
                      exceptions-0.8.3 filepath-1.4.1.2 free-4.12.4 ghc-boot-th-8.2.2
                      ghc-prim-0.5.1.1 hashable-1.2.6.1 integer-gmp-1.0.1.0
                      integer-logarithms-1.0.2 math-functions-0.2.1.0 mmorph-1.1.0
                      monad-control-1.0.2.2 mtl-2.2.1 mwc-random-0.13.6.0 pretty-1.1.3.3
                      primitive-0.6.3.0 random-1.1 safe-0.3.15 scientific-0.3.5.2
                      semigroupoids-5.2.1 statistics-0.14.0.2 stm-2.4.5.0 tagged-0.8.5
                      template-haskell-2.12.0.0 text-1.2.2.2 time-1.8.0.2
                      time-locale-compat-0.1.1.3 transformers-0.5.2.0
                      transformers-base-0.4.4 unix-compat-0.5.0.1
                      unordered-containers-0.2.8.0 uuid-types-1.0.3 vector-0.12.0.1
                      vector-algorithms-0.7.0.1 vector-th-unbox-0.2.1.6 zlib-0.6.1.2
orphans: cereal-vector-0.2.0.1:Data.Vector.Serialize
         stm-2.4.5.0:Control.Monad.STM
         attoparsec-0.13.2.2:Data.Attoparsec.Text.Internal
         attoparsec-0.13.2.2:Data.Attoparsec.ByteString.Char8
         time-1.8.0.2:Data.Time.Format.Parse
         time-1.8.0.2:Data.Time.LocalTime.Internal.ZonedTime
         time-1.8.0.2:Data.Time.LocalTime.Internal.LocalTime
         time-1.8.0.2:Data.Time.Calendar.Gregorian
         hashable-1.2.6.1:Data.Hashable.Generic text-1.2.2.2:Data.Text.Lazy
         text-1.2.2.2:Data.Text binary-0.8.5.1:Data.Binary.Generic
         text-1.2.2.2:Data.Text.Show
         bytestring-0.10.8.2:Data.ByteString.Builder
         vector-0.12.0.1:Data.Vector.Unboxed
         vector-0.12.0.1:Data.Vector.Fusion.Bundle
         transformers-0.5.2.0:Control.Monad.Trans.Error
         base-4.10.1.0:GHC.Float base-4.10.1.0:GHC.Base
family instance modules: MonadRandom-0.5.1:Control.Monad.Trans.Random.Lazy
                         Multilinear-0.8.0.0-4dpV53DlxV5EwwV6FZreVP:Multilinear.Generic
                         Multilinear-0.8.0.0-4dpV53DlxV5EwwV6FZreVP:Multilinear.Index
                         Multilinear-0.8.0.0-4dpV53DlxV5EwwV6FZreVP:Multilinear.Index.Finite
                         Multilinear-0.8.0.0-4dpV53DlxV5EwwV6FZreVP:Multilinear.Index.Infinite
                         aeson-1.2.4.0:Data.Aeson.Types.Internal
                         attoparsec-0.13.2.2:Data.Attoparsec.Internal.Types
                         base-4.10.1.0:Control.Applicative base-4.10.1.0:Data.Complex
                         base-4.10.1.0:Data.Either base-4.10.1.0:Data.Functor.Compose
                         base-4.10.1.0:Data.Functor.Const
                         base-4.10.1.0:Data.Functor.Identity
                         base-4.10.1.0:Data.Functor.Product base-4.10.1.0:Data.Functor.Sum
                         base-4.10.1.0:Data.List.NonEmpty base-4.10.1.0:Data.Monoid
                         base-4.10.1.0:Data.Semigroup base-4.10.1.0:Data.Type.Equality
                         base-4.10.1.0:Data.Version base-4.10.1.0:Data.Void
                         base-4.10.1.0:GHC.Exts base-4.10.1.0:GHC.Generics
                         base-4.10.1.0:GHC.IO.Exception base-4.10.1.0:GHC.TypeLits
                         base-4.10.1.0:GHC.TypeNats bifunctors-5.5.2:Data.Bifunctor.Biff
                         bifunctors-5.5.2:Data.Bifunctor.Clown
                         bifunctors-5.5.2:Data.Bifunctor.Flip
                         bifunctors-5.5.2:Data.Bifunctor.Join
                         bifunctors-5.5.2:Data.Bifunctor.Joker
                         bifunctors-5.5.2:Data.Bifunctor.Product
                         bifunctors-5.5.2:Data.Bifunctor.Tannen
                         bifunctors-5.5.2:Data.Bifunctor.Wrapped
                         containers-0.5.10.2:Data.IntMap.Internal
                         containers-0.5.10.2:Data.IntSet.Internal
                         containers-0.5.10.2:Data.Map.Internal
                         containers-0.5.10.2:Data.Sequence.Internal
                         containers-0.5.10.2:Data.Set.Internal containers-0.5.10.2:Data.Tree
                         dlist-0.8.0.4:Data.DList either-4.5:Control.Monad.Trans.Either
                         ghc-boot-th-8.2.2:GHC.ForeignSrcLang.Type
                         ghc-boot-th-8.2.2:GHC.LanguageExtensions.Type
                         math-functions-0.2.1.0:Numeric.Sum
                         monad-control-1.0.2.2:Control.Monad.Trans.Control
                         mwc-random-0.13.6.0:System.Random.MWC
                         pretty-1.1.3.3:Text.PrettyPrint.Annotated.HughesPJ
                         pretty-1.1.3.3:Text.PrettyPrint.HughesPJ
                         primitive-0.6.3.0:Control.Monad.Primitive
                         primitive-0.6.3.0:Data.Primitive.Array
                         primitive-0.6.3.0:Data.Primitive.ByteArray tagged-0.8.5:Data.Tagged
                         template-haskell-2.12.0.0:Language.Haskell.TH.Syntax
                         text-1.2.2.2:Data.Text text-1.2.2.2:Data.Text.Lazy
                         unordered-containers-0.2.8.0:Data.HashMap.Base
                         unordered-containers-0.2.8.0:Data.HashSet
                         uuid-types-1.0.3:Data.UUID.Types.Internal
                         uuid-types-1.0.3:Data.UUID.Types.Internal.Builder
                         vector-0.12.0.1:Data.Vector vector-0.12.0.1:Data.Vector.Primitive
                         vector-0.12.0.1:Data.Vector.Storable
                         vector-0.12.0.1:Data.Vector.Unboxed
                         vector-0.12.0.1:Data.Vector.Unboxed.Base
                         zlib-0.6.1.2:Codec.Compression.Zlib.Stream
import  -/  Multilinear 4c6d471e83f8257782aa106e88cffd2a
  exports: 67d691b487a9d31758cbc46d5c37211f
  order 806177fbc9d308915c14ca9fa98400e6
import  -/  Multilinear.Generic 35d6137e116dc30a68e3019328f60c00
  exports: 6803917b9ea3c5897cebb5b68db2f4c4
  Err d5ed70a4458652705d7936ab019ae051
  FiniteTensor e25764918ce693c395c93af606e25c0a
  SimpleFinite afa5b94884dee232bd70a9b786e63e17
  Tensor 3435455de223a292a66afccee7caf4fd
  _standardize 1289665b7078452bbea28c36f93a5184
  tensorScalars 3435455de223a292a66afccee7caf4fd
  tensorsFinite 3435455de223a292a66afccee7caf4fd
import  -/  Multilinear.Index.Finite 14058e0dbe724865308af46da8e8471d
  exports: dd8397fb15c17dfad021d67ccd8dbbd7
  Contravariant b2c5ac150b965b89b109a782c43a3104
  Covariant 4de9bf5cc02a239b0c32f9bdce91e559
import  -/  Multilinear.Tensor dbc76d7c390453a030e3ba2f2e982ba6
  exports: 60023a59918e2264950b46b2648956fb
  const ba4c2865386ec367d1f78fbc1d6f2a8c
  fromIndices f9bcb57f98be706faf4a91f595b5e74d
  randomDouble c4d38165e87e69d1092bbf8f62d2b06c
  randomDoubleSeed 3bb674fce61d9809b86d13a17ad6e083
  randomInt 8213f7cf070960693ea8d9231c856177
  randomIntSeed acdc0f2ba598b6cc029b1eb22150dcc4
import  -/  base-4.10.1.0:Control.Exception 10a93951a12b353c5e2f1a6633fdc96a
import  -/  base-4.10.1.0:Control.Exception.Base 0428c9e06e604617a0f7b58a9c69e0a7
import  -/  base-4.10.1.0:Data.Either 79b3aa7621c39f085b8b2cedd9d3b61b
import  -/  base-4.10.1.0:Data.Foldable 4349255461f1285ad885cd2301205c36
import  -/  base-4.10.1.0:Data.Functor b59a97e639e05373a94999f9bb899676
import  -/  base-4.10.1.0:GHC.Base 8f949d675e49677c272f02ab7a85fe18
import  -/  base-4.10.1.0:GHC.Exception 4d53fc5d47ee70e037dcc7a598df700e
import  -/  base-4.10.1.0:GHC.List 1bb0adf79553530dc898796596e53188
import  -/  base-4.10.1.0:GHC.Num bee60808f8127e4cda82dd422aa1c6c0
import  -/  base-4.10.1.0:Prelude a93a9400cc0c816c2ee5f39399baa7a0
import  -/  cereal-0.5.5.0:Data.Serialize f70ff631324190008ca0c94a4bb1a7d9
import  -/  csv-enumerator-0.10.2.0:Data.CSV.Enumerator 39cda2723cbaad790578a20a9972aebe
import  -/  csv-enumerator-0.10.2.0:Data.CSV.Enumerator.Types 2ea68c44f31292b7a6d5585804737f1a
import  -/  deepseq-1.4.3.0:Control.DeepSeq 73f0c395dfad5422d021d16f9a5d4a09
import  -/  either-4.5:Control.Monad.Trans.Either 92ceeab29a4c772761f5a438d6f764e3
import  -/  ghc-prim-0.5.1.1:GHC.Classes 64ad5910d03ab188ab9b4adef7487b1e
import  -/  ghc-prim-0.5.1.1:GHC.Types b1fd0716441595db508c1a74387bf394
import  -/  primitive-0.6.3.0:Control.Monad.Primitive d7ec88f5da3cb11dddf5094b31188f58
import  -/  statistics-0.14.0.2:Statistics.Distribution 8fdcebe1659cddad7300a9b663ff7a10
import  -/  vector-0.12.0.1:Data.Vector c6f234ddb312dfcee4741885ac2bd9d4
2f63234837d843045eabda1dcece5669
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module
                   Multilinear.Matrix.$trModule3
                   Multilinear.Matrix.$trModule1) -}
2bd423de26740acfcb36f41d202a2617
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Multilinear.Matrix.$trModule2) -}
62daa0423ac799ef213cf4c54b52d000
  $trModule2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Multilinear.Matrix"#) -}
1c01cbc10b5a2eaebf9edb3febcfe8df
  $trModule3 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Multilinear.Matrix.$trModule4) -}
9a28dc94f5b186e6a7120fa9852e390e
  $trModule4 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("Multilinear-0.8.0.0-4dpV53DlxV5EwwV6FZreVP"#) -}
80450026c7838a8a0e11686ebe9c15b1
  const ::
    GHC.Num.Num a =>
    GHC.Base.String
    -> GHC.Types.Int
    -> GHC.Types.Int
    -> a
    -> Multilinear.Generic.Tensor a
  {- Arity: 5, Strictness: <L,A><S,1*U><L,U><L,U><L,U>,
     Inline: (sat-args=3),
     Unfolding: InlineRule (4, False, False)
                (\ @ a
                   ($dNum :: GHC.Num.Num a)
                   (ds :: [GHC.Types.Char])
                   (us :: GHC.Types.Int)
                   (ds1 :: GHC.Types.Int) ->
                 case ds of wild {
                   []
                   -> \ (ds2 :: a) ->
                      Multilinear.Generic.Err @ a Multilinear.Matrix.invalidIndices
                   : u ds2
                   -> case ds2 of wild1 {
                        []
                        -> \ (ds3 :: a) ->
                           Multilinear.Generic.Err @ a Multilinear.Matrix.invalidIndices
                        : d ds3
                        -> case ds3 of wild2 {
                             []
                             -> Multilinear.Tensor.const
                                  @ a
                                  $dNum
                                  (GHC.Base.build
                                     @ GHC.Types.Char
                                     (\ @ a1
                                        (c :: GHC.Types.Char -> a1 -> a1)[OneShot]
                                        (n :: a1)[OneShot] ->
                                      c u n),
                                   GHC.Base.build
                                     @ GHC.Types.Int
                                     (\ @ a1
                                        (c :: GHC.Types.Int -> a1 -> a1)[OneShot]
                                        (n :: a1)[OneShot] ->
                                      c us n))
                                  (GHC.Base.build
                                     @ GHC.Types.Char
                                     (\ @ a1
                                        (c :: GHC.Types.Char -> a1 -> a1)[OneShot]
                                        (n :: a1)[OneShot] ->
                                      c d n),
                                   GHC.Base.build
                                     @ GHC.Types.Int
                                     (\ @ a1
                                        (c :: GHC.Types.Int -> a1 -> a1)[OneShot]
                                        (n :: a1)[OneShot] ->
                                      c ds1 n))
                             : ipv ipv1
                             -> \ (ds4 :: a) ->
                                Multilinear.Generic.Err
                                  @ a
                                  Multilinear.Matrix.invalidIndices } } }) -}
0425d456957a9b33fe7b848238bcd408
  const1 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("Indices and its sizes not compatible with structure of matrix!"#) -}
8877f4228af6c315e53f1e1d36309036
  deserializationError :: GHC.Base.String
  {- Unfolding: (GHC.CString.unpackCString#
                   Multilinear.Matrix.fromCSV1) -}
fd9c6abbe6a6a0f4d99c2f72623d4f6d
  fromCSV ::
    (GHC.Num.Num a, Control.DeepSeq.NFData a,
     Data.Serialize.Serialize a) =>
    GHC.Base.String
    -> GHC.Base.String
    -> GHC.Types.Char
    -> Control.Monad.Trans.Either.EitherT
         GHC.Exception.SomeException
         GHC.Types.IO
         (Multilinear.Generic.Tensor a)
  {- Arity: 7,
     Strictness: <L,A><L,A><L,U(A,C(C1(C1(C1(C1(C1(U)))))))><S,1*U><L,U><L,1*U(U)><S,U>,
     Inline: (sat-args=1),
     Unfolding: InlineRule (4, False, False)
                (\ @ a
                   ($dNum :: GHC.Num.Num a)
                   ($dNFData :: Control.DeepSeq.NFData a)
                   ($dSerialize :: Data.Serialize.Serialize a)
                   (x :: GHC.Base.String) ->
                 case x of wild {
                   []
                   -> (\ (ds :: GHC.Base.String)
                         (ds1 :: GHC.Types.Char)
                         (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                       (# s,
                          Data.Either.Right
                            @ GHC.Exception.SomeException
                            @ (Multilinear.Generic.Tensor a)
                            (Multilinear.Generic.Err @ a Multilinear.Matrix.invalidIndices) #))
                        `cast`
                      (<GHC.Base.String>_R
                       ->_R <GHC.Types.Char>_R
                       ->_R Trans
                                (Sym (GHC.Types.N:IO[0]
                                          <Data.Either.Either
                                             GHC.Exception.SomeException
                                             (Multilinear.Generic.Tensor a)>_R))
                                (Sym (Control.Monad.Trans.Either.N:EitherT[0]
                                          <GHC.Exception.SomeException>_N
                                          <GHC.Types.IO>_R
                                          <Multilinear.Generic.Tensor a>_N)))
                   : u ds
                   -> case ds of wild1 {
                        []
                        -> (\ (ds1 :: GHC.Base.String)
                              (ds2 :: GHC.Types.Char)
                              (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                            (# s,
                               Data.Either.Right
                                 @ GHC.Exception.SomeException
                                 @ (Multilinear.Generic.Tensor a)
                                 (Multilinear.Generic.Err @ a Multilinear.Matrix.invalidIndices) #))
                             `cast`
                           (<GHC.Base.String>_R
                            ->_R <GHC.Types.Char>_R
                            ->_R Trans
                                     (Sym (GHC.Types.N:IO[0]
                                               <Data.Either.Either
                                                  GHC.Exception.SomeException
                                                  (Multilinear.Generic.Tensor a)>_R))
                                     (Sym (Control.Monad.Trans.Either.N:EitherT[0]
                                               <GHC.Exception.SomeException>_N
                                               <GHC.Types.IO>_R
                                               <Multilinear.Generic.Tensor a>_N)))
                        : d ds1
                        -> case ds1 of wild2 {
                             []
                             -> (\ (fileName :: GHC.Base.String)
                                   (separator :: GHC.Types.Char)
                                   (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                                 case (Data.CSV.Enumerator.$fCSVeable[]_$citerCSV
                                         @ [[Data.ByteString.Internal.ByteString]]
                                         (Data.CSV.Enumerator.Types.$WCSVS
                                            separator
                                            (GHC.Base.Just @ GHC.Types.Char (GHC.Types.C# '"'#))
                                            (GHC.Base.Just @ GHC.Types.Char (GHC.Types.C# '"'#))
                                            separator)
                                         (\ (acc :: [[Data.ByteString.Internal.ByteString]])
                                            (ds2 :: Data.CSV.Enumerator.ParsedRow
                                                      [Data.ByteString.Internal.ByteString])
                                            (eta :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                                          case ds2 of wild3 {
                                            Data.CSV.Enumerator.ParsedRow ds3
                                            -> case ds3 of wild4 {
                                                 GHC.Base.Nothing
                                                 -> (# eta,
                                                       Data.Enumerator.Internal.Yield
                                                         @ Data.ByteString.Internal.ByteString
                                                         @ GHC.Types.IO
                                                         @ [[Data.ByteString.Internal.ByteString]]
                                                         acc
                                                         Data.CSV.Enumerator.$fCSVeableMap4 #)
                                                 GHC.Base.Just r1
                                                 -> (# eta,
                                                       Data.Enumerator.Internal.Yield
                                                         @ Data.ByteString.Internal.ByteString
                                                         @ GHC.Types.IO
                                                         @ [[Data.ByteString.Internal.ByteString]]
                                                         (GHC.Types.:
                                                            @ [Data.ByteString.Internal.ByteString]
                                                            r1
                                                            acc)
                                                         Data.CSV.Enumerator.$fCSVeableMap4 #) }
                                            Data.CSV.Enumerator.EOF
                                            -> (# eta,
                                                  Data.Enumerator.Internal.Yield
                                                    @ Data.ByteString.Internal.ByteString
                                                    @ GHC.Types.IO
                                                    @ [[Data.ByteString.Internal.ByteString]]
                                                    acc
                                                    Data.CSV.Enumerator.$fCSVeableMap4 #) })
                                           `cast`
                                         (<[[Data.ByteString.Internal.ByteString]]>_R
                                          ->_R <Data.CSV.Enumerator.ParsedRow
                                                  [Data.ByteString.Internal.ByteString]>_R
                                          ->_R Trans
                                                   (Sym (GHC.Types.N:IO[0]
                                                             <Data.Enumerator.Internal.Step
                                                                Data.ByteString.Internal.ByteString
                                                                GHC.Types.IO
                                                                [[Data.ByteString.Internal.ByteString]]>_R))
                                                   (Sym (Data.Enumerator.Internal.N:Iteratee[0]
                                                             <Data.ByteString.Internal.ByteString>_N
                                                             <GHC.Types.IO>_N
                                                             <[[Data.ByteString.Internal.ByteString]]>_N)))
                                         (GHC.Types.[] @ [Data.ByteString.Internal.ByteString]))
                                        `cast`
                                      (Trans
                                           (Data.Enumerator.Internal.N:Iteratee[0]
                                                <Data.ByteString.Internal.ByteString>_N
                                                <GHC.Types.IO>_N
                                                <[[Data.ByteString.Internal.ByteString]]>_N)
                                           (GHC.Types.N:IO[0]
                                                <Data.Enumerator.Internal.Step
                                                   Data.ByteString.Internal.ByteString
                                                   GHC.Types.IO
                                                   [[Data.ByteString.Internal.ByteString]]>_R))
                                        s of ds2 { (#,#) ipv ipv1 ->
                                 case (Data.Enumerator.Binary.enumFileRange
                                         @ [[Data.ByteString.Internal.ByteString]]
                                         fileName
                                         (GHC.Base.Nothing @ GHC.Integer.Type.Integer)
                                         (GHC.Base.Nothing @ GHC.Integer.Type.Integer)
                                         ipv1)
                                        `cast`
                                      (Trans
                                           (Data.Enumerator.Internal.N:Iteratee[0]
                                                <Data.ByteString.Internal.ByteString>_N
                                                <GHC.Types.IO>_N
                                                <[[Data.ByteString.Internal.ByteString]]>_N)
                                           (GHC.Types.N:IO[0]
                                                <Data.Enumerator.Internal.Step
                                                   Data.ByteString.Internal.ByteString
                                                   GHC.Types.IO
                                                   [[Data.ByteString.Internal.ByteString]]>_R))
                                        ipv of ds3 { (#,#) ipv2 ipv3 ->
                                 case (Data.Enumerator.Internal.enumEOF
                                         @ GHC.Types.IO
                                         @ Data.ByteString.Internal.ByteString
                                         @ [[Data.ByteString.Internal.ByteString]]
                                         GHC.Base.$fMonadIO
                                         ipv3)
                                        `cast`
                                      (Trans
                                           (Data.Enumerator.Internal.N:Iteratee[0]
                                                <Data.ByteString.Internal.ByteString>_N
                                                <GHC.Types.IO>_N
                                                <[[Data.ByteString.Internal.ByteString]]>_N)
                                           (GHC.Types.N:IO[0]
                                                <Data.Enumerator.Internal.Step
                                                   Data.ByteString.Internal.ByteString
                                                   GHC.Types.IO
                                                   [[Data.ByteString.Internal.ByteString]]>_R))
                                        ipv2 of ds4 { (#,#) ipv4 ipv5 ->
                                 let {
                                   $j :: GHC.Prim.State# GHC.Prim.RealWorld
                                         -> Data.Either.Either
                                              GHC.Exception.SomeException
                                              [[Data.ByteString.Internal.ByteString]]
                                         -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                               Data.Either.Either
                                                 GHC.Exception.SomeException
                                                 (Multilinear.Generic.Tensor a) #)
                                     <join 2> {- Arity: 2 -}
                                   = \ (ipv7 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot]
                                       (ipv8 :: Data.Either.Either
                                                  GHC.Exception.SomeException
                                                  [[Data.ByteString.Internal.ByteString]])[OneShot] ->
                                     case ipv8 of wild3 {
                                       Data.Either.Left l
                                       -> (# ipv7,
                                             Data.Either.Left
                                               @ GHC.Exception.SomeException
                                               @ (Multilinear.Generic.Tensor a)
                                               l #)
                                       Data.Either.Right r
                                       -> let {
                                            components :: [[Data.Either.Either GHC.Base.String a]]
                                            = GHC.Base.build
                                                @ [Data.Either.Either GHC.Base.String a]
                                                (\ @ b1
                                                   (c :: [Data.Either.Either GHC.Base.String a]
                                                         -> b1 -> b1)[OneShot]
                                                   (n :: b1)[OneShot] ->
                                                 GHC.Base.foldr
                                                   @ [Data.ByteString.Internal.ByteString]
                                                   @ b1
                                                   (GHC.Base.mapFB
                                                      @ [Data.Either.Either GHC.Base.String a]
                                                      @ b1
                                                      @ [Data.ByteString.Internal.ByteString]
                                                      c
                                                      (GHC.Base.map
                                                         @ Data.ByteString.Internal.ByteString
                                                         @ (Data.Either.Either GHC.Base.String a)
                                                         (Data.Serialize.decode @ a $dSerialize)))
                                                   n
                                                   r)
                                          } in
                                          let {
                                            rows :: GHC.Types.Int
                                            = GHC.Base.foldr
                                                @ [Data.Either.Either GHC.Base.String a]
                                                @ (GHC.Types.Int -> GHC.Types.Int)
                                                (GHC.List.lengthFB
                                                   @ [Data.Either.Either GHC.Base.String a])
                                                GHC.List.idLength
                                                components
                                                (GHC.Types.I# 0#)
                                          } in
                                          let {
                                            columns :: GHC.Types.Int
                                            = case GHC.Classes.gtInt
                                                     rows
                                                     (GHC.Types.I# 0#) of wild4 {
                                                GHC.Types.False -> GHC.Types.I# 0#
                                                GHC.Types.True
                                                -> GHC.Base.foldr
                                                     @ (Data.Either.Either GHC.Base.String a)
                                                     @ (GHC.Types.Int -> GHC.Types.Int)
                                                     (\ (ds5 :: Data.Either.Either
                                                                  GHC.Base.String a)
                                                        (ds6 :: GHC.Types.Int
                                                                -> GHC.Types.Int)[OneShot] ->
                                                      case ds5 of wild5 {
                                                        Data.Either.Left ipv9 -> ds6
                                                        Data.Either.Right a2
                                                        -> GHC.List.lengthFB @ a a2 ds6 })
                                                     GHC.List.idLength
                                                     (GHC.List.head
                                                        @ [Data.Either.Either GHC.Base.String a]
                                                        components)
                                                     (GHC.Types.I# 0#) }
                                          } in
                                          case GHC.Classes.gtInt rows (GHC.Types.I# 0#) of wild4 {
                                            GHC.Types.False
                                            -> (# ipv7,
                                                  Data.Either.Left
                                                    @ GHC.Exception.SomeException
                                                    @ (Multilinear.Generic.Tensor a)
                                                    (GHC.Exception.SomeException
                                                       @ Control.Exception.Base.TypeError
                                                       Control.Exception.Base.$fExceptionTypeError
                                                       Multilinear.Matrix.deserializationError
                                                         `cast`
                                                       (Sym (Control.Exception.Base.N:TypeError[0]))) #)
                                            GHC.Types.True
                                            -> case GHC.Classes.gtInt
                                                      columns
                                                      (GHC.Types.I# 0#) of wild5 {
                                                 GHC.Types.False
                                                 -> (# ipv7,
                                                       Data.Either.Left
                                                         @ GHC.Exception.SomeException
                                                         @ (Multilinear.Generic.Tensor a)
                                                         (GHC.Exception.SomeException
                                                            @ Control.Exception.Base.TypeError
                                                            Control.Exception.Base.$fExceptionTypeError
                                                            Multilinear.Matrix.deserializationError
                                                              `cast`
                                                            (Sym (Control.Exception.Base.N:TypeError[0]))) #)
                                                 GHC.Types.True
                                                 -> (# ipv7,
                                                       Data.Either.Right
                                                         @ GHC.Exception.SomeException
                                                         @ (Multilinear.Generic.Tensor a)
                                                         (Multilinear.Generic.FiniteTensor
                                                            @ a
                                                            (Multilinear.Index.Finite.Contravariant
                                                               rows
                                                               (GHC.Base.build
                                                                  @ GHC.Types.Char
                                                                  (\ @ a1
                                                                     (c :: GHC.Types.Char
                                                                           -> a1 -> a1)[OneShot]
                                                                     (n :: a1)[OneShot] ->
                                                                   c u n)))
                                                            (let {
                                                               f :: [GHC.Types.Char]
                                                               = GHC.Base.build
                                                                   @ GHC.Types.Char
                                                                   (\ @ a1
                                                                      (c :: GHC.Types.Char
                                                                            -> a1 -> a1)[OneShot]
                                                                      (n :: a1)[OneShot] ->
                                                                    c d n)
                                                             } in
                                                             let {
                                                               f1 :: Multilinear.Index.Finite.Index
                                                               = Multilinear.Index.Finite.Covariant
                                                                   columns
                                                                   f
                                                             } in
                                                             Data.Vector.Generic.new
                                                               @ Data.Vector.Vector
                                                               @ (Multilinear.Generic.Tensor a)
                                                               (Data.Vector.$fVectorVectora
                                                                  @ (Multilinear.Generic.Tensor a))
                                                               (Data.Vector.Generic.New.unstream
                                                                  @ Data.Vector.Vector
                                                                  @ (Multilinear.Generic.Tensor a)
                                                                  (Data.Vector.$fVectorVectora
                                                                     @ (Multilinear.Generic.Tensor
                                                                          a))
                                                                  (Data.Vector.Fusion.Bundle.inplace
                                                                     @ [Data.Either.Either
                                                                          GHC.Base.String a]
                                                                     @ (Multilinear.Generic.Tensor
                                                                          a)
                                                                     @ Data.Vector.Vector
                                                                     (\ @ m :: * -> *
                                                                        ($dMonad :: GHC.Base.Monad
                                                                                      m)[OneShot] ->
                                                                      Data.Vector.Fusion.Stream.Monadic.mapM
                                                                        @ m
                                                                        @ [Data.Either.Either
                                                                             GHC.Base.String a]
                                                                        @ (Multilinear.Generic.Tensor
                                                                             a)
                                                                        $dMonad
                                                                        (let {
                                                                           f2 :: Multilinear.Generic.Tensor
                                                                                   a
                                                                                 -> m (Multilinear.Generic.Tensor
                                                                                         a)
                                                                           = GHC.Base.return
                                                                               @ m
                                                                               $dMonad
                                                                               @ (Multilinear.Generic.Tensor
                                                                                    a)
                                                                         } in
                                                                         \ (x1 :: [Data.Either.Either
                                                                                     GHC.Base.String
                                                                                     a]) ->
                                                                         f2
                                                                           (Multilinear.Generic.SimpleFinite
                                                                              @ a
                                                                              f1
                                                                              (Data.Vector.Generic.new
                                                                                 @ Data.Vector.Vector
                                                                                 @ a
                                                                                 (Data.Vector.$fVectorVectora
                                                                                    @ a)
                                                                                 (Data.Vector.Generic.New.unstream
                                                                                    @ Data.Vector.Vector
                                                                                    @ a
                                                                                    (Data.Vector.$fVectorVectora
                                                                                       @ a)
                                                                                    (Data.Vector.Fusion.Bundle.Monadic.unsafeFromList
                                                                                       @ Data.Vector.Fusion.Util.Id
                                                                                       @ a
                                                                                       @ Data.Vector.Vector
                                                                                       Data.Vector.Fusion.Util.$fMonadId
                                                                                       Data.Vector.Fusion.Bundle.Size.Unknown
                                                                                       (GHC.Base.build
                                                                                          @ a
                                                                                          (\ @ a1
                                                                                             (c :: a
                                                                                                   -> a1
                                                                                                   -> a1)[OneShot]
                                                                                             (n :: a1)[OneShot] ->
                                                                                           GHC.Base.foldr
                                                                                             @ (Data.Either.Either
                                                                                                  GHC.Base.String
                                                                                                  a)
                                                                                             @ a1
                                                                                             (\ (ds5 :: Data.Either.Either
                                                                                                          GHC.Base.String
                                                                                                          a)
                                                                                                (ds6 :: a1)[OneShot] ->
                                                                                              case ds5 of wild6 {
                                                                                                Data.Either.Left ipv9
                                                                                                -> ds6
                                                                                                Data.Either.Right a2
                                                                                                -> c a2
                                                                                                     ds6 })
                                                                                             n
                                                                                             x1))))))))
                                                                     (GHC.Base.id
                                                                        @ Data.Vector.Fusion.Bundle.Size.Size)
                                                                     (Data.Vector.Fusion.Bundle.Monadic.unsafeFromList
                                                                        @ Data.Vector.Fusion.Util.Id
                                                                        @ [Data.Either.Either
                                                                             GHC.Base.String a]
                                                                        @ Data.Vector.Vector
                                                                        Data.Vector.Fusion.Util.$fMonadId
                                                                        Data.Vector.Fusion.Bundle.Size.Unknown
                                                                        components))))) #) } } }
                                 } in
                                 case ipv5 of wild3 {
                                   Data.Enumerator.Internal.Continue ds5
                                   -> case Data.Enumerator.run2
                                      ret_ty (# GHC.Prim.State# GHC.Prim.RealWorld,
                                                Data.Either.Either
                                                  GHC.Exception.SomeException
                                                  (Multilinear.Generic.Tensor a) #)
                                      of {}
                                   Data.Enumerator.Internal.Yield x1 ds5
                                   -> $j
                                        ipv4
                                        (Data.Either.Right
                                           @ GHC.Exception.SomeException
                                           @ [[Data.ByteString.Internal.ByteString]]
                                           (GHC.List.reverse
                                              @ [Data.ByteString.Internal.ByteString]
                                              x1))
                                   Data.Enumerator.Internal.Error err
                                   -> $j
                                        ipv4
                                        (Data.Either.Left
                                           @ GHC.Exception.SomeException
                                           @ [[Data.ByteString.Internal.ByteString]]
                                           err) } } } })
                                  `cast`
                                (<GHC.Base.String>_R
                                 ->_R <GHC.Types.Char>_R
                                 ->_R Trans
                                          (Sym (GHC.Types.N:IO[0]
                                                    <Data.Either.Either
                                                       GHC.Exception.SomeException
                                                       (Multilinear.Generic.Tensor a)>_R))
                                          (Sym (Control.Monad.Trans.Either.N:EitherT[0]
                                                    <GHC.Exception.SomeException>_N
                                                    <GHC.Types.IO>_R
                                                    <Multilinear.Generic.Tensor a>_N)))
                             : ipv ipv1
                             -> (\ (ds2 :: GHC.Base.String)
                                   (ds3 :: GHC.Types.Char)
                                   (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                                 (# s,
                                    Data.Either.Right
                                      @ GHC.Exception.SomeException
                                      @ (Multilinear.Generic.Tensor a)
                                      (Multilinear.Generic.Err
                                         @ a
                                         Multilinear.Matrix.invalidIndices) #))
                                  `cast`
                                (<GHC.Base.String>_R
                                 ->_R <GHC.Types.Char>_R
                                 ->_R Trans
                                          (Sym (GHC.Types.N:IO[0]
                                                    <Data.Either.Either
                                                       GHC.Exception.SomeException
                                                       (Multilinear.Generic.Tensor a)>_R))
                                          (Sym (Control.Monad.Trans.Either.N:EitherT[0]
                                                    <GHC.Exception.SomeException>_N
                                                    <GHC.Types.IO>_R
                                                    <Multilinear.Generic.Tensor a>_N))) } } }) -}
390830cfa3c3bef8f1de90e3ebec225f
  fromCSV1 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("Components deserialization error!"#) -}
6f7f283056749e654d395e5183d0c8cb
  fromIndices ::
    GHC.Num.Num a =>
    GHC.Base.String
    -> GHC.Types.Int
    -> GHC.Types.Int
    -> (GHC.Types.Int -> GHC.Types.Int -> a)
    -> Multilinear.Generic.Tensor a
  {- Arity: 5, Strictness: <L,A><S,1*U><L,U><L,U><L,C(C1(U))>,
     Inline: (sat-args=4),
     Unfolding: InlineRule (5, False, False)
                (\ @ a
                   ($dNum :: GHC.Num.Num a)
                   (ds :: [GHC.Types.Char])
                   (us :: GHC.Types.Int)
                   (ds1 :: GHC.Types.Int)
                   (f :: GHC.Types.Int -> GHC.Types.Int -> a) ->
                 case ds of wild {
                   [] -> Multilinear.Generic.Err @ a Multilinear.Matrix.invalidIndices
                   : u ds2
                   -> case ds2 of wild1 {
                        [] -> Multilinear.Generic.Err @ a Multilinear.Matrix.invalidIndices
                        : d ds3
                        -> case ds3 of wild2 {
                             []
                             -> Multilinear.Tensor.fromIndices
                                  @ a
                                  $dNum
                                  (GHC.Base.build
                                     @ GHC.Types.Char
                                     (\ @ a1
                                        (c :: GHC.Types.Char -> a1 -> a1)[OneShot]
                                        (n :: a1)[OneShot] ->
                                      c u n),
                                   GHC.Base.build
                                     @ GHC.Types.Int
                                     (\ @ a1
                                        (c :: GHC.Types.Int -> a1 -> a1)[OneShot]
                                        (n :: a1)[OneShot] ->
                                      c us n))
                                  (GHC.Base.build
                                     @ GHC.Types.Char
                                     (\ @ a1
                                        (c :: GHC.Types.Char -> a1 -> a1)[OneShot]
                                        (n :: a1)[OneShot] ->
                                      c d n),
                                   GHC.Base.build
                                     @ GHC.Types.Int
                                     (\ @ a1
                                        (c :: GHC.Types.Int -> a1 -> a1)[OneShot]
                                        (n :: a1)[OneShot] ->
                                      c ds1 n))
                                  (\ (ds4 :: [GHC.Types.Int]) (ds5 :: [GHC.Types.Int])[OneShot] ->
                                   let {
                                     fail :: GHC.Prim.Void# -> a <join 1> {- Arity: 1 -}
                                     = \ (ds6 :: GHC.Prim.Void#)[OneShot] ->
                                       Control.Exception.Base.patError
                                         @ 'GHC.Types.LiftedRep
                                         @ a
                                         "src\\Multilinear\\Matrix.hs:58:72-92|lambda"#
                                   } in
                                   case ds4 of wild3 {
                                     [] -> fail GHC.Prim.void#
                                     : ui ds6
                                     -> case ds6 of wild4 {
                                          []
                                          -> case ds5 of wild5 {
                                               [] -> fail GHC.Prim.void#
                                               : di ds7
                                               -> case ds7 of wild6 {
                                                    [] -> f ui di
                                                    : ipv ipv1 -> fail GHC.Prim.void# } }
                                          : ipv ipv1 -> fail GHC.Prim.void# } })
                             : ipv ipv1
                             -> Multilinear.Generic.Err
                                  @ a
                                  Multilinear.Matrix.invalidIndices } } }) -}
e777de088ca1eb74133843e0ccaa17d8
  invalidIndices :: GHC.Base.String
  {- Unfolding: (GHC.CString.unpackCString#
                   Multilinear.Matrix.const1) -}
ebc7076b5de6ac5cb6bc60769429ab82
  randomDouble ::
    Statistics.Distribution.ContGen d =>
    GHC.Base.String
    -> GHC.Types.Int
    -> GHC.Types.Int
    -> d
    -> GHC.Types.IO (Multilinear.Generic.Tensor GHC.Types.Double)
  {- Arity: 6,
     Strictness: <L,U(A,C(C1(C1(U))))><S,1*U><L,U><L,U><L,U><S,U>,
     Inline: (sat-args=3),
     Unfolding: InlineRule (4, False, False)
                (\ @ d
                   ($dContGen :: Statistics.Distribution.ContGen d)
                   (ds :: [GHC.Types.Char])
                   (us :: GHC.Types.Int)
                   (ds1 :: GHC.Types.Int) ->
                 case ds of wild {
                   []
                   -> (\ (ds2 :: d) (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                       (# s,
                          Multilinear.Generic.Err
                            @ GHC.Types.Double
                            Multilinear.Matrix.invalidIndices #))
                        `cast`
                      (<d>_R
                       ->_R Sym (GHC.Types.N:IO[0]
                                     <Multilinear.Generic.Tensor GHC.Types.Double>_R))
                   : u ds2
                   -> case ds2 of wild1 {
                        []
                        -> (\ (ds3 :: d) (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                            (# s,
                               Multilinear.Generic.Err
                                 @ GHC.Types.Double
                                 Multilinear.Matrix.invalidIndices #))
                             `cast`
                           (<d>_R
                            ->_R Sym (GHC.Types.N:IO[0]
                                          <Multilinear.Generic.Tensor GHC.Types.Double>_R))
                        : d1 ds3
                        -> case ds3 of wild2 {
                             []
                             -> Multilinear.Tensor.randomDouble
                                  @ d
                                  $dContGen
                                  (GHC.Base.build
                                     @ GHC.Types.Char
                                     (\ @ a
                                        (c :: GHC.Types.Char -> a -> a)[OneShot]
                                        (n :: a)[OneShot] ->
                                      c u n),
                                   GHC.Base.build
                                     @ GHC.Types.Int
                                     (\ @ a
                                        (c :: GHC.Types.Int -> a -> a)[OneShot]
                                        (n :: a)[OneShot] ->
                                      c us n))
                                  (GHC.Base.build
                                     @ GHC.Types.Char
                                     (\ @ a
                                        (c :: GHC.Types.Char -> a -> a)[OneShot]
                                        (n :: a)[OneShot] ->
                                      c d1 n),
                                   GHC.Base.build
                                     @ GHC.Types.Int
                                     (\ @ a
                                        (c :: GHC.Types.Int -> a -> a)[OneShot]
                                        (n :: a)[OneShot] ->
                                      c ds1 n))
                             : ipv ipv1
                             -> (\ (ds4 :: d) (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                                 (# s,
                                    Multilinear.Generic.Err
                                      @ GHC.Types.Double
                                      Multilinear.Matrix.invalidIndices #))
                                  `cast`
                                (<d>_R
                                 ->_R Sym (GHC.Types.N:IO[0]
                                               <Multilinear.Generic.Tensor
                                                  GHC.Types.Double>_R)) } } }) -}
61df272183b751411ced1fbece863396
  randomDoubleSeed ::
    (Statistics.Distribution.ContGen d,
     Control.Monad.Primitive.PrimMonad m) =>
    GHC.Base.String
    -> GHC.Types.Int
    -> GHC.Types.Int
    -> d
    -> GHC.Types.Int
    -> m (Multilinear.Generic.Tensor GHC.Types.Double)
  {- Arity: 5,
     Strictness: <L,U(A,C(C1(C1(U))))><L,U(U(U,U,U,U,U),U)><S,1*U><L,U><L,U>,
     Inline: (sat-args=3),
     Unfolding: InlineRule (5, False, False)
                (\ @ d
                   @ m :: * -> *
                   ($dContGen :: Statistics.Distribution.ContGen d)
                   ($dPrimMonad :: Control.Monad.Primitive.PrimMonad m) ->
                 let {
                   $dMonad :: GHC.Base.Monad m
                   = Control.Monad.Primitive.$p1PrimMonad @ m $dPrimMonad
                 } in
                 \ (ds :: [GHC.Types.Char])
                   (us :: GHC.Types.Int)
                   (ds1 :: GHC.Types.Int) ->
                 case ds of wild {
                   []
                   -> \ (ds2 :: d) (ds3 :: GHC.Types.Int) ->
                      GHC.Base.return
                        @ m
                        $dMonad
                        @ (Multilinear.Generic.Tensor GHC.Types.Double)
                        (Multilinear.Generic.Err
                           @ GHC.Types.Double
                           Multilinear.Matrix.invalidIndices)
                   : u ds2
                   -> case ds2 of wild1 {
                        []
                        -> \ (ds3 :: d) (ds4 :: GHC.Types.Int) ->
                           GHC.Base.return
                             @ m
                             $dMonad
                             @ (Multilinear.Generic.Tensor GHC.Types.Double)
                             (Multilinear.Generic.Err
                                @ GHC.Types.Double
                                Multilinear.Matrix.invalidIndices)
                        : d1 ds3
                        -> case ds3 of wild2 {
                             []
                             -> Multilinear.Tensor.randomDoubleSeed
                                  @ d
                                  @ m
                                  $dContGen
                                  $dPrimMonad
                                  (GHC.Base.build
                                     @ GHC.Types.Char
                                     (\ @ a
                                        (c :: GHC.Types.Char -> a -> a)[OneShot]
                                        (n :: a)[OneShot] ->
                                      c u n),
                                   GHC.Base.build
                                     @ GHC.Types.Int
                                     (\ @ a
                                        (c :: GHC.Types.Int -> a -> a)[OneShot]
                                        (n :: a)[OneShot] ->
                                      c us n))
                                  (GHC.Base.build
                                     @ GHC.Types.Char
                                     (\ @ a
                                        (c :: GHC.Types.Char -> a -> a)[OneShot]
                                        (n :: a)[OneShot] ->
                                      c d1 n),
                                   GHC.Base.build
                                     @ GHC.Types.Int
                                     (\ @ a
                                        (c :: GHC.Types.Int -> a -> a)[OneShot]
                                        (n :: a)[OneShot] ->
                                      c ds1 n))
                             : ipv ipv1
                             -> \ (ds4 :: d) (ds5 :: GHC.Types.Int) ->
                                GHC.Base.return
                                  @ m
                                  $dMonad
                                  @ (Multilinear.Generic.Tensor GHC.Types.Double)
                                  (Multilinear.Generic.Err
                                     @ GHC.Types.Double
                                     Multilinear.Matrix.invalidIndices) } } }) -}
b31db124dd31b87ad9b662a0346ac0f3
  randomInt ::
    Statistics.Distribution.DiscreteGen d =>
    GHC.Base.String
    -> GHC.Types.Int
    -> GHC.Types.Int
    -> d
    -> GHC.Types.IO (Multilinear.Generic.Tensor GHC.Types.Int)
  {- Arity: 6,
     Strictness: <L,U(A,A,C(C1(C1(U))))><S,1*U><L,U><L,U><L,U><S,U>,
     Inline: (sat-args=3),
     Unfolding: InlineRule (4, False, False)
                (\ @ d
                   ($dDiscreteGen :: Statistics.Distribution.DiscreteGen d)
                   (ds :: [GHC.Types.Char])
                   (us :: GHC.Types.Int)
                   (ds1 :: GHC.Types.Int) ->
                 case ds of wild {
                   []
                   -> (\ (ds2 :: d) (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                       (# s,
                          Multilinear.Generic.Err
                            @ GHC.Types.Int
                            Multilinear.Matrix.invalidIndices #))
                        `cast`
                      (<d>_R
                       ->_R Sym (GHC.Types.N:IO[0]
                                     <Multilinear.Generic.Tensor GHC.Types.Int>_R))
                   : u ds2
                   -> case ds2 of wild1 {
                        []
                        -> (\ (ds3 :: d) (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                            (# s,
                               Multilinear.Generic.Err
                                 @ GHC.Types.Int
                                 Multilinear.Matrix.invalidIndices #))
                             `cast`
                           (<d>_R
                            ->_R Sym (GHC.Types.N:IO[0]
                                          <Multilinear.Generic.Tensor GHC.Types.Int>_R))
                        : d1 ds3
                        -> case ds3 of wild2 {
                             []
                             -> Multilinear.Tensor.randomInt
                                  @ d
                                  $dDiscreteGen
                                  (GHC.Base.build
                                     @ GHC.Types.Char
                                     (\ @ a
                                        (c :: GHC.Types.Char -> a -> a)[OneShot]
                                        (n :: a)[OneShot] ->
                                      c u n),
                                   GHC.Base.build
                                     @ GHC.Types.Int
                                     (\ @ a
                                        (c :: GHC.Types.Int -> a -> a)[OneShot]
                                        (n :: a)[OneShot] ->
                                      c us n))
                                  (GHC.Base.build
                                     @ GHC.Types.Char
                                     (\ @ a
                                        (c :: GHC.Types.Char -> a -> a)[OneShot]
                                        (n :: a)[OneShot] ->
                                      c d1 n),
                                   GHC.Base.build
                                     @ GHC.Types.Int
                                     (\ @ a
                                        (c :: GHC.Types.Int -> a -> a)[OneShot]
                                        (n :: a)[OneShot] ->
                                      c ds1 n))
                             : ipv ipv1
                             -> (\ (ds4 :: d) (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                                 (# s,
                                    Multilinear.Generic.Err
                                      @ GHC.Types.Int
                                      Multilinear.Matrix.invalidIndices #))
                                  `cast`
                                (<d>_R
                                 ->_R Sym (GHC.Types.N:IO[0]
                                               <Multilinear.Generic.Tensor
                                                  GHC.Types.Int>_R)) } } }) -}
82382d6e92dfeeab9616c8eab42b09bb
  randomIntSeed ::
    (Statistics.Distribution.DiscreteGen d,
     Control.Monad.Primitive.PrimMonad m) =>
    GHC.Base.String
    -> GHC.Types.Int
    -> GHC.Types.Int
    -> d
    -> GHC.Types.Int
    -> m (Multilinear.Generic.Tensor GHC.Types.Int)
  {- Arity: 5,
     Strictness: <L,U(A,A,C(C1(C1(U))))><L,U(U(U,U,U,U,U),U)><S,1*U><L,U><L,U>,
     Inline: (sat-args=3),
     Unfolding: InlineRule (5, False, False)
                (\ @ d
                   @ m :: * -> *
                   ($dDiscreteGen :: Statistics.Distribution.DiscreteGen d)
                   ($dPrimMonad :: Control.Monad.Primitive.PrimMonad m) ->
                 let {
                   $dMonad :: GHC.Base.Monad m
                   = Control.Monad.Primitive.$p1PrimMonad @ m $dPrimMonad
                 } in
                 \ (ds :: [GHC.Types.Char])
                   (us :: GHC.Types.Int)
                   (ds1 :: GHC.Types.Int) ->
                 case ds of wild {
                   []
                   -> \ (ds2 :: d) (ds3 :: GHC.Types.Int) ->
                      GHC.Base.return
                        @ m
                        $dMonad
                        @ (Multilinear.Generic.Tensor GHC.Types.Int)
                        (Multilinear.Generic.Err
                           @ GHC.Types.Int
                           Multilinear.Matrix.invalidIndices)
                   : u ds2
                   -> case ds2 of wild1 {
                        []
                        -> \ (ds3 :: d) (ds4 :: GHC.Types.Int) ->
                           GHC.Base.return
                             @ m
                             $dMonad
                             @ (Multilinear.Generic.Tensor GHC.Types.Int)
                             (Multilinear.Generic.Err
                                @ GHC.Types.Int
                                Multilinear.Matrix.invalidIndices)
                        : d1 ds3
                        -> case ds3 of wild2 {
                             []
                             -> Multilinear.Tensor.randomIntSeed
                                  @ d
                                  @ m
                                  $dDiscreteGen
                                  $dPrimMonad
                                  (GHC.Base.build
                                     @ GHC.Types.Char
                                     (\ @ a
                                        (c :: GHC.Types.Char -> a -> a)[OneShot]
                                        (n :: a)[OneShot] ->
                                      c u n),
                                   GHC.Base.build
                                     @ GHC.Types.Int
                                     (\ @ a
                                        (c :: GHC.Types.Int -> a -> a)[OneShot]
                                        (n :: a)[OneShot] ->
                                      c us n))
                                  (GHC.Base.build
                                     @ GHC.Types.Char
                                     (\ @ a
                                        (c :: GHC.Types.Char -> a -> a)[OneShot]
                                        (n :: a)[OneShot] ->
                                      c d1 n),
                                   GHC.Base.build
                                     @ GHC.Types.Int
                                     (\ @ a
                                        (c :: GHC.Types.Int -> a -> a)[OneShot]
                                        (n :: a)[OneShot] ->
                                      c ds1 n))
                             : ipv ipv1
                             -> \ (ds4 :: d) (ds5 :: GHC.Types.Int) ->
                                GHC.Base.return
                                  @ m
                                  $dMonad
                                  @ (Multilinear.Generic.Tensor GHC.Types.Int)
                                  (Multilinear.Generic.Err
                                     @ GHC.Types.Int
                                     Multilinear.Matrix.invalidIndices) } } }) -}
57dc17c7a53b2860554b3a5483956322
  toCSV ::
    (GHC.Num.Num a, Control.DeepSeq.NFData a,
     Data.Serialize.Serialize a) =>
    Multilinear.Generic.Tensor a
    -> GHC.Base.String -> GHC.Types.Char -> GHC.Types.IO GHC.Types.Int
  {- Arity: 4, Strictness: <L,A><L,A><L,U(C(U(A,U)),A)><S,U>,
     Inline: (sat-args=1),
     Unfolding: InlineRule (4, False, False)
                (\ @ a
                   ($dNum :: GHC.Num.Num a)
                   ($dNFData :: Control.DeepSeq.NFData a)
                   ($dSerialize :: Data.Serialize.Serialize a)
                   (t :: Multilinear.Generic.Tensor a) ->
                 case Multilinear.Generic.$fMultilinearTensora_$corder
                        @ a
                        $dNum
                        t of wild { (,) ds ds1 ->
                 case ds of wild1 { GHC.Types.I# ds2 ->
                 case ds2 of ds3 {
                   DEFAULT
                   -> (\ (ds4 :: GHC.Base.String)
                         (ds5 :: GHC.Types.Char)
                         (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                       (# s, GHC.Types.I# 0# #))
                        `cast`
                      (<GHC.Base.String>_R
                       ->_R <GHC.Types.Char>_R
                       ->_R Sym (GHC.Types.N:IO[0] <GHC.Types.Int>_R))
                   1#
                   -> case ds1 of wild2 { GHC.Types.I# ds4 ->
                      case ds4 of ds5 {
                        DEFAULT
                        -> (\ (ds6 :: GHC.Base.String)
                              (ds7 :: GHC.Types.Char)
                              (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                            (# s, GHC.Types.I# 0# #))
                             `cast`
                           (<GHC.Base.String>_R
                            ->_R <GHC.Types.Char>_R
                            ->_R Sym (GHC.Types.N:IO[0] <GHC.Types.Int>_R))
                        1#
                        -> (\ (fileName :: GHC.Base.String)
                              (separator :: GHC.Types.Char) ->
                            Data.CSV.Enumerator.writeCSVFile1
                              @ [Data.ByteString.Internal.ByteString]
                              Data.CSV.Enumerator.$fCSVeable[]
                              (Data.CSV.Enumerator.Types.$WCSVS
                                 separator
                                 (GHC.Base.Just @ GHC.Types.Char (GHC.Types.C# '"'#))
                                 (GHC.Base.Just @ GHC.Types.Char (GHC.Types.C# '"'#))
                                 separator)
                              fileName
                              (GHC.Base.build
                                 @ [Data.ByteString.Internal.ByteString]
                                 (\ @ b1
                                    (c :: [Data.ByteString.Internal.ByteString]
                                          -> b1 -> b1)[OneShot]
                                    (n :: b1)[OneShot] ->
                                  Data.Vector.Fusion.Bundle.toListFB
                                    @ [a]
                                    @ b1
                                    @ Data.Vector.Vector
                                    (GHC.Base.mapFB
                                       @ [Data.ByteString.Internal.ByteString]
                                       @ b1
                                       @ [a]
                                       c
                                       (GHC.Base.map
                                          @ a
                                          @ Data.ByteString.Internal.ByteString
                                          (Data.Serialize.encode @ a $dSerialize)))
                                    n
                                    (Data.Vector.Fusion.Bundle.inplace
                                       @ (Multilinear.Generic.Tensor a)
                                       @ [a]
                                       @ Data.Vector.Vector
                                       (\ @ m :: * -> * ($dMonad :: GHC.Base.Monad m)[OneShot] ->
                                        Data.Vector.Fusion.Stream.Monadic.mapM
                                          @ m
                                          @ (Multilinear.Generic.Tensor a)
                                          @ [a]
                                          $dMonad
                                          (let {
                                             f1 :: [a] -> m [a] = GHC.Base.return @ m $dMonad @ [a]
                                           } in
                                           \ (x :: Multilinear.Generic.Tensor a) ->
                                           f1
                                             (GHC.Base.build
                                                @ a
                                                (\ @ b
                                                   (c1 :: a -> b -> b)[OneShot]
                                                   (n1 :: b)[OneShot] ->
                                                 Data.Vector.Fusion.Bundle.toListFB
                                                   @ a
                                                   @ b
                                                   @ Data.Vector.Vector
                                                   c1
                                                   n1
                                                   (Data.Vector.Generic.stream
                                                      @ Data.Vector.Vector
                                                      @ a
                                                      (Data.Vector.$fVectorVectora @ a)
                                                      (case x of wild3 {
                                                         DEFAULT
                                                         -> Multilinear.Generic.$fMultilinearTensora10
                                                              @ a
                                                         Multilinear.Generic.SimpleFinite ds6 ds7
                                                         -> ds7 }))))))
                                       (GHC.Base.id @ Data.Vector.Fusion.Bundle.Size.Size)
                                       (Data.Vector.Generic.stream
                                          @ Data.Vector.Vector
                                          @ (Multilinear.Generic.Tensor a)
                                          (Data.Vector.$fVectorVectora
                                             @ (Multilinear.Generic.Tensor a))
                                          (case Multilinear.Generic._standardize
                                                  @ a
                                                  $dNum
                                                  t of wild3 {
                                             DEFAULT
                                             -> Multilinear.Generic.$fMultilinearTensora11 @ a
                                             Multilinear.Generic.FiniteTensor ds6 ds7 -> ds7 }))))))
                             `cast`
                           (<GHC.Base.String>_R
                            ->_R <GHC.Types.Char>_R
                            ->_R Sym (GHC.Types.N:IO[0] <GHC.Types.Int>_R)) } } } } }) -}
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: none
require own pkg trusted: False


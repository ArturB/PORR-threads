
==================== FINAL INTERFACE ====================
2018-10-29 09:28:53.2945755 UTC

interface Multilinear-0.8.0.0-4dpV53DlxV5EwwV6FZreVP:Multilinear.Parallel.NVector 8022
  interface hash: 7c60f0f7468111f0b134c8957d18e19f
  ABI hash: bee4497752a1e3290774aa78c8f36716
  export-list hash: f36b2d7945fccee2f1a6ffb6bbf10ce4
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: 59ed47a3b8192ebebdfb3aef0ae9b82a
  sig of: Nothing
  used TH splices: False
  where
exports:
  Multilinear.Parallel.NVector.const
  Multilinear.Parallel.NVector.fromIndices
  Multilinear.Parallel.NVector.randomDouble
  Multilinear.Parallel.NVector.randomDoubleSeed
  Multilinear.Parallel.NVector.randomInt
  Multilinear.Parallel.NVector.randomIntSeed
module dependencies: Multilinear Multilinear.Index
                     Multilinear.Index.Finite Multilinear.Index.Infinite
                     Multilinear.Parallel.Generic
package dependencies: MonadRandom-0.5.1 Win32-2.5.4.1 aeson-1.2.4.0
                      array-0.5.2.0 attoparsec-0.13.2.2 base-4.10.1.0 base-compat-0.9.3
                      base-orphans-0.6 bifunctors-5.5.2 binary-0.8.5.1
                      bytestring-0.10.8.2 cereal-0.5.5.0 cereal-vector-0.2.0.1
                      comonad-5.0.3 containers-0.5.10.2 deepseq-1.4.3.0
                      distributive-0.5.3 dlist-0.8.0.4 either-4.5 exceptions-0.8.3
                      free-4.12.4 ghc-boot-th-8.2.2 ghc-prim-0.5.1.1 hashable-1.2.6.1
                      integer-gmp-1.0.1.0 integer-logarithms-1.0.2 math-functions-0.2.1.0
                      mmorph-1.1.0 monad-control-1.0.2.2 mtl-2.2.1 mwc-random-0.13.6.0
                      pretty-1.1.3.3 primitive-0.6.3.0 random-1.1 scientific-0.3.5.2
                      semigroupoids-5.2.1 statistics-0.14.0.2 stm-2.4.5.0 tagged-0.8.5
                      template-haskell-2.12.0.0 text-1.2.2.2 time-1.8.0.2
                      time-locale-compat-0.1.1.3 transformers-0.5.2.0
                      transformers-base-0.4.4 unordered-containers-0.2.8.0
                      uuid-types-1.0.3 vector-0.12.0.1 vector-algorithms-0.7.0.1
                      vector-th-unbox-0.2.1.6 zlib-0.6.1.2
orphans: cereal-vector-0.2.0.1:Data.Vector.Serialize
         stm-2.4.5.0:Control.Monad.STM
         attoparsec-0.13.2.2:Data.Attoparsec.Text.Internal
         attoparsec-0.13.2.2:Data.Attoparsec.ByteString.Char8
         time-1.8.0.2:Data.Time.Format.Parse
         time-1.8.0.2:Data.Time.LocalTime.Internal.ZonedTime
         time-1.8.0.2:Data.Time.LocalTime.Internal.LocalTime
         time-1.8.0.2:Data.Time.Calendar.Gregorian
         hashable-1.2.6.1:Data.Hashable.Generic text-1.2.2.2:Data.Text.Lazy
         text-1.2.2.2:Data.Text binary-0.8.5.1:Data.Binary.Generic
         text-1.2.2.2:Data.Text.Show
         bytestring-0.10.8.2:Data.ByteString.Builder
         vector-0.12.0.1:Data.Vector.Unboxed
         vector-0.12.0.1:Data.Vector.Fusion.Bundle
         transformers-0.5.2.0:Control.Monad.Trans.Error
         base-4.10.1.0:GHC.Float base-4.10.1.0:GHC.Base
family instance modules: MonadRandom-0.5.1:Control.Monad.Trans.Random.Lazy
                         Multilinear-0.8.0.0-4dpV53DlxV5EwwV6FZreVP:Multilinear.Index
                         Multilinear-0.8.0.0-4dpV53DlxV5EwwV6FZreVP:Multilinear.Index.Finite
                         Multilinear-0.8.0.0-4dpV53DlxV5EwwV6FZreVP:Multilinear.Index.Infinite
                         Multilinear-0.8.0.0-4dpV53DlxV5EwwV6FZreVP:Multilinear.Parallel.Generic
                         aeson-1.2.4.0:Data.Aeson.Types.Internal
                         attoparsec-0.13.2.2:Data.Attoparsec.Internal.Types
                         base-4.10.1.0:Control.Applicative base-4.10.1.0:Data.Complex
                         base-4.10.1.0:Data.Either base-4.10.1.0:Data.Functor.Compose
                         base-4.10.1.0:Data.Functor.Const
                         base-4.10.1.0:Data.Functor.Identity
                         base-4.10.1.0:Data.Functor.Product base-4.10.1.0:Data.Functor.Sum
                         base-4.10.1.0:Data.List.NonEmpty base-4.10.1.0:Data.Monoid
                         base-4.10.1.0:Data.Semigroup base-4.10.1.0:Data.Type.Equality
                         base-4.10.1.0:Data.Version base-4.10.1.0:Data.Void
                         base-4.10.1.0:GHC.Exts base-4.10.1.0:GHC.Generics
                         base-4.10.1.0:GHC.IO.Exception base-4.10.1.0:GHC.TypeLits
                         base-4.10.1.0:GHC.TypeNats bifunctors-5.5.2:Data.Bifunctor.Biff
                         bifunctors-5.5.2:Data.Bifunctor.Clown
                         bifunctors-5.5.2:Data.Bifunctor.Flip
                         bifunctors-5.5.2:Data.Bifunctor.Join
                         bifunctors-5.5.2:Data.Bifunctor.Joker
                         bifunctors-5.5.2:Data.Bifunctor.Product
                         bifunctors-5.5.2:Data.Bifunctor.Tannen
                         bifunctors-5.5.2:Data.Bifunctor.Wrapped
                         containers-0.5.10.2:Data.IntMap.Internal
                         containers-0.5.10.2:Data.IntSet.Internal
                         containers-0.5.10.2:Data.Map.Internal
                         containers-0.5.10.2:Data.Sequence.Internal
                         containers-0.5.10.2:Data.Set.Internal containers-0.5.10.2:Data.Tree
                         dlist-0.8.0.4:Data.DList either-4.5:Control.Monad.Trans.Either
                         ghc-boot-th-8.2.2:GHC.ForeignSrcLang.Type
                         ghc-boot-th-8.2.2:GHC.LanguageExtensions.Type
                         math-functions-0.2.1.0:Numeric.Sum
                         monad-control-1.0.2.2:Control.Monad.Trans.Control
                         mwc-random-0.13.6.0:System.Random.MWC
                         pretty-1.1.3.3:Text.PrettyPrint.Annotated.HughesPJ
                         pretty-1.1.3.3:Text.PrettyPrint.HughesPJ
                         primitive-0.6.3.0:Control.Monad.Primitive
                         primitive-0.6.3.0:Data.Primitive.Array
                         primitive-0.6.3.0:Data.Primitive.ByteArray tagged-0.8.5:Data.Tagged
                         template-haskell-2.12.0.0:Language.Haskell.TH.Syntax
                         text-1.2.2.2:Data.Text text-1.2.2.2:Data.Text.Lazy
                         unordered-containers-0.2.8.0:Data.HashMap.Base
                         unordered-containers-0.2.8.0:Data.HashSet
                         uuid-types-1.0.3:Data.UUID.Types.Internal
                         uuid-types-1.0.3:Data.UUID.Types.Internal.Builder
                         vector-0.12.0.1:Data.Vector vector-0.12.0.1:Data.Vector.Primitive
                         vector-0.12.0.1:Data.Vector.Storable
                         vector-0.12.0.1:Data.Vector.Unboxed
                         vector-0.12.0.1:Data.Vector.Unboxed.Base
                         zlib-0.6.1.2:Codec.Compression.Zlib.Stream
import  -/  Multilinear.Index.Finite 14058e0dbe724865308af46da8e8471d
  exports: dd8397fb15c17dfad021d67ccd8dbbd7
  Contravariant b2c5ac150b965b89b109a782c43a3104
import  -/  Multilinear.Parallel.Generic f23a439373b62180b1906db0009929de
  exports: 7e7125be253e345ccbc04ad40f246cce
  Err ee3db5ed100d2c960be14e059df90d59
  FiniteTensor 5c2602ac62188b22cd29dda0414c8346
  SimpleFinite 64a7cdc5b1215f2dc982a3dd051efaf2
  Tensor 240d50eb0b5d150a5b80ad3cd9ebc3f9
import  -/  base-4.10.1.0:Data.Traversable 628fa37db91b4136b7a9e05a8791a45d
import  -/  base-4.10.1.0:GHC.Base 8f949d675e49677c272f02ab7a85fe18
import  -/  base-4.10.1.0:GHC.Num bee60808f8127e4cda82dd422aa1c6c0
import  -/  base-4.10.1.0:GHC.Real 183566a07f0c201dd54a6bc28c33ed14
import  -/  base-4.10.1.0:Prelude a93a9400cc0c816c2ee5f39399baa7a0
import  -/  ghc-prim-0.5.1.1:GHC.Types b1fd0716441595db508c1a74387bf394
import  -/  mwc-random-0.13.6.0:System.Random.MWC 24ec0f491652a7e7f547994c54c5c3e7
import  -/  primitive-0.6.3.0:Control.Monad.Primitive d7ec88f5da3cb11dddf5094b31188f58
import  -/  statistics-0.14.0.2:Statistics.Distribution 8fdcebe1659cddad7300a9b663ff7a10
import  -/  vector-0.12.0.1:Data.Vector c6f234ddb312dfcee4741885ac2bd9d4
aea5e74927cf3d47ba8c5f3c727cf543
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module
                   Multilinear.Parallel.NVector.$trModule3
                   Multilinear.Parallel.NVector.$trModule1) -}
a5b614b6ba7b5f4408d8363a2d0b3c94
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Multilinear.Parallel.NVector.$trModule2) -}
fb5a982dfa9c37c99b83d350a5da6b4a
  $trModule2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Multilinear.Parallel.NVector"#) -}
45143237cb3b5b906b7021533451cd1b
  $trModule3 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Multilinear.Parallel.NVector.$trModule4) -}
13c44f91909d24e145b965829dedb2b8
  $trModule4 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("Multilinear-0.8.0.0-4dpV53DlxV5EwwV6FZreVP"#) -}
09b0c2282af5f3ced955b35ac53db93c
  $wconst ::
    GHC.Base.String
    -> [GHC.Types.Int] -> a -> Multilinear.Parallel.Generic.Tensor a
  {- Arity: 3, Strictness: <S,1*U><L,U><L,U>, Inline: [0],
     Unfolding(loop-breaker): <stable> (\ @ a
                                          (w :: GHC.Base.String)
                                          (w1 :: [GHC.Types.Int])
                                          (w2 :: a) ->
                                        case w of wild {
                                          []
                                          -> Multilinear.Parallel.Generic.Err
                                               @ a
                                               Multilinear.Parallel.NVector.invalidIndices
                                          : d ds
                                          -> let {
                                               fail :: GHC.Prim.Void#
                                                       -> Multilinear.Parallel.Generic.Tensor a
                                                 <join 1> {- Arity: 1 -}
                                               = \ (ds1 :: GHC.Prim.Void#)[OneShot] ->
                                                 case w1 of wild1 {
                                                   []
                                                   -> Multilinear.Parallel.Generic.Err
                                                        @ a
                                                        Multilinear.Parallel.NVector.invalidIndices
                                                   : s size
                                                   -> Multilinear.Parallel.Generic.FiniteTensor
                                                        @ a
                                                        (Multilinear.Index.Finite.Contravariant
                                                           s
                                                           (GHC.Types.:
                                                              @ GHC.Types.Char
                                                              d
                                                              (GHC.Types.[] @ GHC.Types.Char)))
                                                        (let {
                                                           x :: Multilinear.Parallel.Generic.Tensor
                                                                  a
                                                           = Multilinear.Parallel.NVector.$wconst
                                                               @ a
                                                               ds
                                                               size
                                                               w2
                                                         } in
                                                         case GHC.Magic.runRW#
                                                                @ ('GHC.Types.TupleRep
                                                                     '['GHC.Types.TupleRep '[],
                                                                       'GHC.Types.LiftedRep])
                                                                @ (# GHC.Prim.State#
                                                                       GHC.Prim.RealWorld,
                                                                     Data.Vector.Vector
                                                                       (Multilinear.Parallel.Generic.Tensor
                                                                          a) #)
                                                                (\ (s1 :: GHC.Prim.State#
                                                                            GHC.Prim.RealWorld)[OneShot] ->
                                                                 case s of wild2 { GHC.Types.I# x1 ->
                                                                 let {
                                                                   $j :: GHC.Prim.Int#
                                                                         -> (# GHC.Prim.State#
                                                                                 GHC.Prim.RealWorld,
                                                                               Data.Vector.Vector
                                                                                 (Multilinear.Parallel.Generic.Tensor
                                                                                    a) #)
                                                                     <join 1> {- Arity: 1 -}
                                                                   = \ (n# :: GHC.Prim.Int#)[OneShot] ->
                                                                     case GHC.Prim.newArray#
                                                                            @ (Multilinear.Parallel.Generic.Tensor
                                                                                 a)
                                                                            @ (Control.Monad.Primitive.PrimState
                                                                                 (GHC.ST.ST
                                                                                    GHC.Prim.RealWorld))
                                                                            n#
                                                                            (Data.Vector.Mutable.uninitialised
                                                                               @ (Multilinear.Parallel.Generic.Tensor
                                                                                    a))
                                                                            s1
                                                                              `cast`
                                                                            (Nth:2
                                                                                 (Nth:2
                                                                                      (Trans
                                                                                           (<GHC.ST.STRep
                                                                                               GHC.Prim.RealWorld
                                                                                               (Data.Primitive.Array.MutableArray
                                                                                                  (Control.Monad.Primitive.PrimState
                                                                                                     (GHC.ST.ST
                                                                                                        GHC.Prim.RealWorld))
                                                                                                  (Multilinear.Parallel.Generic.Tensor
                                                                                                     a))>_R
                                                                                            ->_R Sym (GHC.ST.N:ST[0]
                                                                                                          <GHC.Prim.RealWorld>_N
                                                                                                          <Data.Primitive.Array.MutableArray
                                                                                                             (Control.Monad.Primitive.PrimState
                                                                                                                (GHC.ST.ST
                                                                                                                   GHC.Prim.RealWorld))
                                                                                                             (Multilinear.Parallel.Generic.Tensor
                                                                                                                a)>_R))
                                                                                           (((GHC.Prim.State#
                                                                                                (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                                          <GHC.Prim.RealWorld>_N)))_R
                                                                                             ->_R ((#,#)
                                                                                                     <'GHC.Types.TupleRep
                                                                                                        '[]>_R
                                                                                                     <'GHC.Types.LiftedRep>_R
                                                                                                     (GHC.Prim.State#
                                                                                                        (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                                                  <GHC.Prim.RealWorld>_N)))_R
                                                                                                     <Data.Primitive.Array.MutableArray
                                                                                                        (Control.Monad.Primitive.PrimState
                                                                                                           (GHC.ST.ST
                                                                                                              GHC.Prim.RealWorld))
                                                                                                        (Multilinear.Parallel.Generic.Tensor
                                                                                                           a)>_R)_R)
                                                                                            ->_R <GHC.ST.ST
                                                                                                    GHC.Prim.RealWorld
                                                                                                    (Data.Primitive.Array.MutableArray
                                                                                                       (Control.Monad.Primitive.PrimState
                                                                                                          (GHC.ST.ST
                                                                                                             GHC.Prim.RealWorld))
                                                                                                       (Multilinear.Parallel.Generic.Tensor
                                                                                                          a))>_R)))) of ds2 { (#,#) ipv ipv5 ->
                                                                     letrec {
                                                                       foldlM'_loop :: GHC.Types.SPEC
                                                                                       -> GHC.Types.Int
                                                                                       -> GHC.Types.Bool
                                                                                       -> GHC.ST.ST
                                                                                            GHC.Prim.RealWorld
                                                                                            GHC.Types.Int
                                                                         {- Arity: 3 -}
                                                                       = \ (ds4 :: GHC.Types.SPEC)
                                                                           (z :: GHC.Types.Int)
                                                                           (s7 :: GHC.Types.Bool) ->
                                                                         case ds4 of ds5 { DEFAULT ->
                                                                         case z of z1 { GHC.Types.I# ipv6 ->
                                                                         (\ (s8 :: GHC.Prim.State#
                                                                                     GHC.Prim.RealWorld) ->
                                                                          case s7 of wild3 {
                                                                            GHC.Types.False
                                                                            -> (# s8, z1 #)
                                                                            GHC.Types.True
                                                                            -> letrec {
                                                                                 do_set :: GHC.Types.Int
                                                                                           -> GHC.ST.ST
                                                                                                GHC.Prim.RealWorld
                                                                                                ()
                                                                                   {- Arity: 1 -}
                                                                                 = \ (i :: GHC.Types.Int) ->
                                                                                   case i of wild4 { GHC.Types.I# y ->
                                                                                   case GHC.Prim.tagToEnum#
                                                                                          @ GHC.Types.Bool
                                                                                          (GHC.Prim.<#
                                                                                             (GHC.Prim.*#
                                                                                                2#
                                                                                                y)
                                                                                             n#) of wild5 {
                                                                                     GHC.Types.False
                                                                                     -> (\ (s# :: GHC.Prim.State#
                                                                                                    (Control.Monad.Primitive.PrimState
                                                                                                       (GHC.ST.ST
                                                                                                          GHC.Prim.RealWorld))) ->
                                                                                         case GHC.Prim.copyMutableArray#
                                                                                                @ (Control.Monad.Primitive.PrimState
                                                                                                     (GHC.ST.ST
                                                                                                        GHC.Prim.RealWorld))
                                                                                                @ (Multilinear.Parallel.Generic.Tensor
                                                                                                     a)
                                                                                                ipv5
                                                                                                ipv6
                                                                                                ipv5
                                                                                                (GHC.Prim.+#
                                                                                                   ipv6
                                                                                                   y)
                                                                                                (GHC.Prim.-#
                                                                                                   n#
                                                                                                   y)
                                                                                                s# of s'# { DEFAULT ->
                                                                                         (# s'#,
                                                                                            GHC.Tuple.() #) })
                                                                                          `cast`
                                                                                        (Trans
                                                                                             (Nth:2
                                                                                                  (Trans
                                                                                                       (((GHC.Prim.State#
                                                                                                            (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                                                 <GHC.Prim.RealWorld>_N))_R
                                                                                                         ->_R ((#,#)
                                                                                                                 <'GHC.Types.TupleRep
                                                                                                                    '[]>_R
                                                                                                                 <'GHC.Types.LiftedRep>_R
                                                                                                                 (GHC.Prim.State#
                                                                                                                    (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                                                         <GHC.Prim.RealWorld>_N))_R
                                                                                                                 <()>_R)_R)
                                                                                                        ->_R <GHC.ST.ST
                                                                                                                GHC.Prim.RealWorld
                                                                                                                ()>_R)
                                                                                                       (<GHC.ST.STRep
                                                                                                           GHC.Prim.RealWorld
                                                                                                           ()>_R
                                                                                                        ->_R GHC.ST.N:ST[0]
                                                                                                                 <GHC.Prim.RealWorld>_N
                                                                                                                 <()>_R)))
                                                                                             (Nth:3
                                                                                                  (Trans
                                                                                                       (<GHC.ST.STRep
                                                                                                           GHC.Prim.RealWorld
                                                                                                           ()>_R
                                                                                                        ->_R Sym (GHC.ST.N:ST[0]
                                                                                                                      <GHC.Prim.RealWorld>_N
                                                                                                                      <()>_R))
                                                                                                       (((GHC.Prim.State#
                                                                                                            (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                                                      <GHC.Prim.RealWorld>_N)))_R
                                                                                                         ->_R ((#,#)
                                                                                                                 <'GHC.Types.TupleRep
                                                                                                                    '[]>_R
                                                                                                                 <'GHC.Types.LiftedRep>_R
                                                                                                                 (GHC.Prim.State#
                                                                                                                    (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                                                              <GHC.Prim.RealWorld>_N)))_R
                                                                                                                 <()>_R)_R)
                                                                                                        ->_R <GHC.ST.ST
                                                                                                                GHC.Prim.RealWorld
                                                                                                                ()>_R))))
                                                                                     GHC.Types.True
                                                                                     -> (\ (s2 :: GHC.Prim.State#
                                                                                                    GHC.Prim.RealWorld) ->
                                                                                         case GHC.Prim.copyMutableArray#
                                                                                                @ (Control.Monad.Primitive.PrimState
                                                                                                     (GHC.ST.ST
                                                                                                        GHC.Prim.RealWorld))
                                                                                                @ (Multilinear.Parallel.Generic.Tensor
                                                                                                     a)
                                                                                                ipv5
                                                                                                ipv6
                                                                                                ipv5
                                                                                                (GHC.Prim.+#
                                                                                                   ipv6
                                                                                                   y)
                                                                                                y
                                                                                                s2
                                                                                                  `cast`
                                                                                                (Nth:2
                                                                                                     (Nth:2
                                                                                                          (Trans
                                                                                                               (<GHC.ST.STRep
                                                                                                                   GHC.Prim.RealWorld
                                                                                                                   ()>_R
                                                                                                                ->_R Sym (GHC.ST.N:ST[0]
                                                                                                                              <GHC.Prim.RealWorld>_N
                                                                                                                              <()>_R))
                                                                                                               (((GHC.Prim.State#
                                                                                                                    (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                                                              <GHC.Prim.RealWorld>_N)))_R
                                                                                                                 ->_R ((#,#)
                                                                                                                         <'GHC.Types.TupleRep
                                                                                                                            '[]>_R
                                                                                                                         <'GHC.Types.LiftedRep>_R
                                                                                                                         (GHC.Prim.State#
                                                                                                                            (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                                                                      <GHC.Prim.RealWorld>_N)))_R
                                                                                                                         <()>_R)_R)
                                                                                                                ->_R <GHC.ST.ST
                                                                                                                        GHC.Prim.RealWorld
                                                                                                                        ()>_R)))) of s'# { DEFAULT ->
                                                                                         (do_set
                                                                                            (GHC.Types.I#
                                                                                               (GHC.Prim.*#
                                                                                                  2#
                                                                                                  y)))
                                                                                           `cast`
                                                                                         (GHC.ST.N:ST[0]
                                                                                              <GHC.Prim.RealWorld>_N
                                                                                              <()>_R)
                                                                                           s'#
                                                                                             `cast`
                                                                                           (Nth:2
                                                                                                (Nth:3
                                                                                                     (Nth:2
                                                                                                          (Trans
                                                                                                               (((GHC.Prim.State#
                                                                                                                    (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                                                         <GHC.Prim.RealWorld>_N))_R
                                                                                                                 ->_R ((#,#)
                                                                                                                         <'GHC.Types.TupleRep
                                                                                                                            '[]>_R
                                                                                                                         <'GHC.Types.LiftedRep>_R
                                                                                                                         (GHC.Prim.State#
                                                                                                                            (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                                                                 <GHC.Prim.RealWorld>_N))_R
                                                                                                                         <()>_R)_R)
                                                                                                                ->_R <GHC.ST.ST
                                                                                                                        GHC.Prim.RealWorld
                                                                                                                        ()>_R)
                                                                                                               (<GHC.ST.STRep
                                                                                                                   GHC.Prim.RealWorld
                                                                                                                   ()>_R
                                                                                                                ->_R GHC.ST.N:ST[0]
                                                                                                                         <GHC.Prim.RealWorld>_N
                                                                                                                         <()>_R))))) })
                                                                                          `cast`
                                                                                        (Sym (GHC.ST.N:ST[0]
                                                                                                  <GHC.Prim.RealWorld>_N
                                                                                                  <()>_R)) } }
                                                                               } in
                                                                               case n# of wild4 {
                                                                                 DEFAULT
                                                                                 -> case GHC.Prim.writeArray#
                                                                                           @ (Control.Monad.Primitive.PrimState
                                                                                                (GHC.ST.ST
                                                                                                   GHC.Prim.RealWorld))
                                                                                           @ (Multilinear.Parallel.Generic.Tensor
                                                                                                a)
                                                                                           ipv5
                                                                                           ipv6
                                                                                           x
                                                                                           s8
                                                                                             `cast`
                                                                                           (Nth:2
                                                                                                (Nth:2
                                                                                                     (Trans
                                                                                                          (<GHC.ST.STRep
                                                                                                              GHC.Prim.RealWorld
                                                                                                              ()>_R
                                                                                                           ->_R Sym (GHC.ST.N:ST[0]
                                                                                                                         <GHC.Prim.RealWorld>_N
                                                                                                                         <()>_R))
                                                                                                          (((GHC.Prim.State#
                                                                                                               (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                                                         <GHC.Prim.RealWorld>_N)))_R
                                                                                                            ->_R ((#,#)
                                                                                                                    <'GHC.Types.TupleRep
                                                                                                                       '[]>_R
                                                                                                                    <'GHC.Types.LiftedRep>_R
                                                                                                                    (GHC.Prim.State#
                                                                                                                       (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                                                                 <GHC.Prim.RealWorld>_N)))_R
                                                                                                                    <()>_R)_R)
                                                                                                           ->_R <GHC.ST.ST
                                                                                                                   GHC.Prim.RealWorld
                                                                                                                   ()>_R)))) of s'# { DEFAULT ->
                                                                                    case (do_set
                                                                                            (GHC.Types.I#
                                                                                               1#))
                                                                                           `cast`
                                                                                         (GHC.ST.N:ST[0]
                                                                                              <GHC.Prim.RealWorld>_N
                                                                                              <()>_R)
                                                                                           s'#
                                                                                             `cast`
                                                                                           (Nth:2
                                                                                                (Nth:3
                                                                                                     (Nth:2
                                                                                                          (Trans
                                                                                                               (((GHC.Prim.State#
                                                                                                                    (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                                                         <GHC.Prim.RealWorld>_N))_R
                                                                                                                 ->_R ((#,#)
                                                                                                                         <'GHC.Types.TupleRep
                                                                                                                            '[]>_R
                                                                                                                         <'GHC.Types.LiftedRep>_R
                                                                                                                         (GHC.Prim.State#
                                                                                                                            (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                                                                 <GHC.Prim.RealWorld>_N))_R
                                                                                                                         <()>_R)_R)
                                                                                                                ->_R <GHC.ST.ST
                                                                                                                        GHC.Prim.RealWorld
                                                                                                                        ()>_R)
                                                                                                               (<GHC.ST.STRep
                                                                                                                   GHC.Prim.RealWorld
                                                                                                                   ()>_R
                                                                                                                ->_R GHC.ST.N:ST[0]
                                                                                                                         <GHC.Prim.RealWorld>_N
                                                                                                                         <()>_R))))) of ds3 { (#,#) ipv7 ipv8 ->
                                                                                    (foldlM'_loop
                                                                                       GHC.Types.SPEC
                                                                                       (GHC.Types.I#
                                                                                          (GHC.Prim.+#
                                                                                             ipv6
                                                                                             wild4))
                                                                                       GHC.Types.False)
                                                                                      `cast`
                                                                                    (GHC.ST.N:ST[0]
                                                                                         <GHC.Prim.RealWorld>_N
                                                                                         <GHC.Types.Int>_R)
                                                                                      ipv7 } }
                                                                                 0#
                                                                                 -> (foldlM'_loop
                                                                                       GHC.Types.SPEC
                                                                                       (GHC.Types.I#
                                                                                          ipv6)
                                                                                       GHC.Types.False)
                                                                                      `cast`
                                                                                    (GHC.ST.N:ST[0]
                                                                                         <GHC.Prim.RealWorld>_N
                                                                                         <GHC.Types.Int>_R)
                                                                                      s8 } })
                                                                           `cast`
                                                                         (Sym (GHC.ST.N:ST[0]
                                                                                   <GHC.Prim.RealWorld>_N
                                                                                   <GHC.Types.Int>_R)) } }
                                                                     } in
                                                                     case (foldlM'_loop
                                                                             GHC.Types.SPEC
                                                                             (GHC.Types.I# 0#)
                                                                             GHC.Types.True)
                                                                            `cast`
                                                                          (GHC.ST.N:ST[0]
                                                                               <GHC.Prim.RealWorld>_N
                                                                               <GHC.Types.Int>_R)
                                                                            ipv
                                                                              `cast`
                                                                            (Nth:2
                                                                                 (Nth:3
                                                                                      (Nth:2
                                                                                           (Trans
                                                                                                (((GHC.Prim.State#
                                                                                                     (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                                          <GHC.Prim.RealWorld>_N))_R
                                                                                                  ->_R ((#,#)
                                                                                                          <'GHC.Types.TupleRep
                                                                                                             '[]>_R
                                                                                                          <'GHC.Types.LiftedRep>_R
                                                                                                          (GHC.Prim.State#
                                                                                                             (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                                                  <GHC.Prim.RealWorld>_N))_R
                                                                                                          <Data.Primitive.Array.MutableArray
                                                                                                             (Control.Monad.Primitive.PrimState
                                                                                                                (GHC.ST.ST
                                                                                                                   GHC.Prim.RealWorld))
                                                                                                             (Multilinear.Parallel.Generic.Tensor
                                                                                                                a)>_R)_R)
                                                                                                 ->_R <GHC.ST.ST
                                                                                                         GHC.Prim.RealWorld
                                                                                                         (Data.Primitive.Array.MutableArray
                                                                                                            (Control.Monad.Primitive.PrimState
                                                                                                               (GHC.ST.ST
                                                                                                                  GHC.Prim.RealWorld))
                                                                                                            (Multilinear.Parallel.Generic.Tensor
                                                                                                               a))>_R)
                                                                                                (<GHC.ST.STRep
                                                                                                    GHC.Prim.RealWorld
                                                                                                    (Data.Primitive.Array.MutableArray
                                                                                                       (Control.Monad.Primitive.PrimState
                                                                                                          (GHC.ST.ST
                                                                                                             GHC.Prim.RealWorld))
                                                                                                       (Multilinear.Parallel.Generic.Tensor
                                                                                                          a))>_R
                                                                                                 ->_R GHC.ST.N:ST[0]
                                                                                                          <GHC.Prim.RealWorld>_N
                                                                                                          <Data.Primitive.Array.MutableArray
                                                                                                             (Control.Monad.Primitive.PrimState
                                                                                                                (GHC.ST.ST
                                                                                                                   GHC.Prim.RealWorld))
                                                                                                             (Multilinear.Parallel.Generic.Tensor
                                                                                                                a)>_R))))) of ds3 { (#,#) ipv6 ipv7 ->
                                                                     case ipv7 of dt { GHC.Types.I# dt1 ->
                                                                     case GHC.Prim.unsafeFreezeArray#
                                                                            @ (Control.Monad.Primitive.PrimState
                                                                                 (GHC.ST.ST
                                                                                    GHC.Prim.RealWorld))
                                                                            @ (Multilinear.Parallel.Generic.Tensor
                                                                                 a)
                                                                            ipv5
                                                                            ipv6
                                                                              `cast`
                                                                            (Nth:2
                                                                                 (Nth:2
                                                                                      (Trans
                                                                                           (<GHC.ST.STRep
                                                                                               GHC.Prim.RealWorld
                                                                                               (Data.Primitive.Array.Array
                                                                                                  (Multilinear.Parallel.Generic.Tensor
                                                                                                     a))>_R
                                                                                            ->_R Sym (GHC.ST.N:ST[0]
                                                                                                          <GHC.Prim.RealWorld>_N
                                                                                                          <Data.Primitive.Array.Array
                                                                                                             (Multilinear.Parallel.Generic.Tensor
                                                                                                                a)>_R))
                                                                                           (((GHC.Prim.State#
                                                                                                (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                                          <GHC.Prim.RealWorld>_N)))_R
                                                                                             ->_R ((#,#)
                                                                                                     <'GHC.Types.TupleRep
                                                                                                        '[]>_R
                                                                                                     <'GHC.Types.LiftedRep>_R
                                                                                                     (GHC.Prim.State#
                                                                                                        (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                                                  <GHC.Prim.RealWorld>_N)))_R
                                                                                                     <Data.Primitive.Array.Array
                                                                                                        (Multilinear.Parallel.Generic.Tensor
                                                                                                           a)>_R)_R)
                                                                                            ->_R <GHC.ST.ST
                                                                                                    GHC.Prim.RealWorld
                                                                                                    (Data.Primitive.Array.Array
                                                                                                       (Multilinear.Parallel.Generic.Tensor
                                                                                                          a))>_R)))) of ds4 { (#,#) ipv9 ipv10 ->
                                                                     (# ipv9
                                                                          `cast`
                                                                        (Nth:2
                                                                             (Nth:3
                                                                                  (Nth:2
                                                                                       (Trans
                                                                                            (((GHC.Prim.State#
                                                                                                 (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                                      <GHC.Prim.RealWorld>_N))_R
                                                                                              ->_R ((#,#)
                                                                                                      <'GHC.Types.TupleRep
                                                                                                         '[]>_R
                                                                                                      <'GHC.Types.LiftedRep>_R
                                                                                                      (GHC.Prim.State#
                                                                                                         (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                                              <GHC.Prim.RealWorld>_N))_R
                                                                                                      <Data.Primitive.Array.Array
                                                                                                         (Multilinear.Parallel.Generic.Tensor
                                                                                                            a)>_R)_R)
                                                                                             ->_R <GHC.ST.ST
                                                                                                     GHC.Prim.RealWorld
                                                                                                     (Data.Primitive.Array.Array
                                                                                                        (Multilinear.Parallel.Generic.Tensor
                                                                                                           a))>_R)
                                                                                            (<GHC.ST.STRep
                                                                                                GHC.Prim.RealWorld
                                                                                                (Data.Primitive.Array.Array
                                                                                                   (Multilinear.Parallel.Generic.Tensor
                                                                                                      a))>_R
                                                                                             ->_R GHC.ST.N:ST[0]
                                                                                                      <GHC.Prim.RealWorld>_N
                                                                                                      <Data.Primitive.Array.Array
                                                                                                         (Multilinear.Parallel.Generic.Tensor
                                                                                                            a)>_R))))),
                                                                        Data.Vector.Vector
                                                                          @ (Multilinear.Parallel.Generic.Tensor
                                                                               a)
                                                                          0#
                                                                          dt1
                                                                          ipv10 #) } } } }
                                                                 } in
                                                                 case GHC.Prim.tagToEnum#
                                                                        @ GHC.Types.Bool
                                                                        (GHC.Prim.<=#
                                                                           x1
                                                                           0#) of wild3 {
                                                                   GHC.Types.False -> $j x1
                                                                   GHC.Types.True
                                                                   -> $j
                                                                        0# } }) of ds2 { (#,#) ipv5 ipv6 ->
                                                         ipv6 }) }
                                             } in
                                             case ds of wild1 {
                                               []
                                               -> case w1 of wild2 {
                                                    [] -> fail GHC.Prim.void#
                                                    : s ds1
                                                    -> case ds1 of wild3 {
                                                         []
                                                         -> Multilinear.Parallel.Generic.SimpleFinite
                                                              @ a
                                                              (Multilinear.Index.Finite.Contravariant
                                                                 s
                                                                 (GHC.Types.:
                                                                    @ GHC.Types.Char
                                                                    d
                                                                    (GHC.Types.[]
                                                                       @ GHC.Types.Char)))
                                                              (case s of n1 { GHC.Types.I# ipv ->
                                                               case GHC.Magic.runRW#
                                                                      @ ('GHC.Types.TupleRep
                                                                           '['GHC.Types.TupleRep
                                                                               '[],
                                                                             'GHC.Types.LiftedRep])
                                                                      @ (# GHC.Prim.State#
                                                                             GHC.Prim.RealWorld,
                                                                           Data.Vector.Vector a #)
                                                                      (\ (s1 :: GHC.Prim.State#
                                                                                  GHC.Prim.RealWorld)[OneShot] ->
                                                                       let {
                                                                         $j :: GHC.Prim.Int#
                                                                               -> (# GHC.Prim.State#
                                                                                       GHC.Prim.RealWorld,
                                                                                     Data.Vector.Vector
                                                                                       a #)
                                                                           <join 1> {- Arity: 1 -}
                                                                         = \ (n# :: GHC.Prim.Int#)[OneShot] ->
                                                                           case GHC.Prim.newArray#
                                                                                  @ a
                                                                                  @ (Control.Monad.Primitive.PrimState
                                                                                       (GHC.ST.ST
                                                                                          GHC.Prim.RealWorld))
                                                                                  n#
                                                                                  (Data.Vector.Mutable.uninitialised
                                                                                     @ a)
                                                                                  s1
                                                                                    `cast`
                                                                                  (Nth:2
                                                                                       (Nth:2
                                                                                            (Trans
                                                                                                 (<GHC.ST.STRep
                                                                                                     GHC.Prim.RealWorld
                                                                                                     (Data.Primitive.Array.MutableArray
                                                                                                        (Control.Monad.Primitive.PrimState
                                                                                                           (GHC.ST.ST
                                                                                                              GHC.Prim.RealWorld))
                                                                                                        a)>_R
                                                                                                  ->_R Sym (GHC.ST.N:ST[0]
                                                                                                                <GHC.Prim.RealWorld>_N
                                                                                                                <Data.Primitive.Array.MutableArray
                                                                                                                   (Control.Monad.Primitive.PrimState
                                                                                                                      (GHC.ST.ST
                                                                                                                         GHC.Prim.RealWorld))
                                                                                                                   a>_R))
                                                                                                 (((GHC.Prim.State#
                                                                                                      (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                                                <GHC.Prim.RealWorld>_N)))_R
                                                                                                   ->_R ((#,#)
                                                                                                           <'GHC.Types.TupleRep
                                                                                                              '[]>_R
                                                                                                           <'GHC.Types.LiftedRep>_R
                                                                                                           (GHC.Prim.State#
                                                                                                              (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                                                        <GHC.Prim.RealWorld>_N)))_R
                                                                                                           <Data.Primitive.Array.MutableArray
                                                                                                              (Control.Monad.Primitive.PrimState
                                                                                                                 (GHC.ST.ST
                                                                                                                    GHC.Prim.RealWorld))
                                                                                                              a>_R)_R)
                                                                                                  ->_R <GHC.ST.ST
                                                                                                          GHC.Prim.RealWorld
                                                                                                          (Data.Primitive.Array.MutableArray
                                                                                                             (Control.Monad.Primitive.PrimState
                                                                                                                (GHC.ST.ST
                                                                                                                   GHC.Prim.RealWorld))
                                                                                                             a)>_R)))) of ds2 { (#,#) ipv5 ipv6 ->
                                                                           letrec {
                                                                             foldlM'_loop :: GHC.Types.SPEC
                                                                                             -> GHC.Types.Int
                                                                                             -> GHC.Types.Int
                                                                                             -> GHC.ST.ST
                                                                                                  GHC.Prim.RealWorld
                                                                                                  GHC.Types.Int
                                                                               {- Arity: 3 -}
                                                                             = \ (ds4 :: GHC.Types.SPEC)
                                                                                 (z :: GHC.Types.Int)
                                                                                 (s7 :: GHC.Types.Int) ->
                                                                               case ds4 of ds5 { DEFAULT ->
                                                                               case z of z1 { GHC.Types.I# ipv7 ->
                                                                               (\ (s8 :: GHC.Prim.State#
                                                                                           GHC.Prim.RealWorld) ->
                                                                                case s7 of wild4 { GHC.Types.I# x ->
                                                                                case GHC.Prim.tagToEnum#
                                                                                       @ GHC.Types.Bool
                                                                                       (GHC.Prim.<#
                                                                                          x
                                                                                          ipv) of wild5 {
                                                                                  GHC.Types.False
                                                                                  -> (# s8, z1 #)
                                                                                  GHC.Types.True
                                                                                  -> case GHC.Prim.writeArray#
                                                                                            @ (Control.Monad.Primitive.PrimState
                                                                                                 (GHC.ST.ST
                                                                                                    GHC.Prim.RealWorld))
                                                                                            @ a
                                                                                            ipv6
                                                                                            ipv7
                                                                                            w2
                                                                                            s8
                                                                                              `cast`
                                                                                            (Nth:2
                                                                                                 (Nth:2
                                                                                                      (Trans
                                                                                                           (<GHC.ST.STRep
                                                                                                               GHC.Prim.RealWorld
                                                                                                               ()>_R
                                                                                                            ->_R Sym (GHC.ST.N:ST[0]
                                                                                                                          <GHC.Prim.RealWorld>_N
                                                                                                                          <()>_R))
                                                                                                           (((GHC.Prim.State#
                                                                                                                (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                                                          <GHC.Prim.RealWorld>_N)))_R
                                                                                                             ->_R ((#,#)
                                                                                                                     <'GHC.Types.TupleRep
                                                                                                                        '[]>_R
                                                                                                                     <'GHC.Types.LiftedRep>_R
                                                                                                                     (GHC.Prim.State#
                                                                                                                        (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                                                                  <GHC.Prim.RealWorld>_N)))_R
                                                                                                                     <()>_R)_R)
                                                                                                            ->_R <GHC.ST.ST
                                                                                                                    GHC.Prim.RealWorld
                                                                                                                    ()>_R)))) of s'# { DEFAULT ->
                                                                                     (foldlM'_loop
                                                                                        GHC.Types.SPEC
                                                                                        (GHC.Types.I#
                                                                                           (GHC.Prim.+#
                                                                                              ipv7
                                                                                              1#))
                                                                                        (GHC.Types.I#
                                                                                           (GHC.Prim.+#
                                                                                              x
                                                                                              1#)))
                                                                                       `cast`
                                                                                     (GHC.ST.N:ST[0]
                                                                                          <GHC.Prim.RealWorld>_N
                                                                                          <GHC.Types.Int>_R)
                                                                                       s'#
                                                                                         `cast`
                                                                                       (Nth:2
                                                                                            (Nth:3
                                                                                                 (Nth:2
                                                                                                      (Trans
                                                                                                           (((GHC.Prim.State#
                                                                                                                (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                                                     <GHC.Prim.RealWorld>_N))_R
                                                                                                             ->_R ((#,#)
                                                                                                                     <'GHC.Types.TupleRep
                                                                                                                        '[]>_R
                                                                                                                     <'GHC.Types.LiftedRep>_R
                                                                                                                     (GHC.Prim.State#
                                                                                                                        (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                                                             <GHC.Prim.RealWorld>_N))_R
                                                                                                                     <()>_R)_R)
                                                                                                            ->_R <GHC.ST.ST
                                                                                                                    GHC.Prim.RealWorld
                                                                                                                    ()>_R)
                                                                                                           (<GHC.ST.STRep
                                                                                                               GHC.Prim.RealWorld
                                                                                                               ()>_R
                                                                                                            ->_R GHC.ST.N:ST[0]
                                                                                                                     <GHC.Prim.RealWorld>_N
                                                                                                                     <()>_R))))) } } })
                                                                                 `cast`
                                                                               (Sym (GHC.ST.N:ST[0]
                                                                                         <GHC.Prim.RealWorld>_N
                                                                                         <GHC.Types.Int>_R)) } }
                                                                           } in
                                                                           case (foldlM'_loop
                                                                                   GHC.Types.SPEC
                                                                                   (GHC.Types.I# 0#)
                                                                                   (GHC.Types.I#
                                                                                      0#))
                                                                                  `cast`
                                                                                (GHC.ST.N:ST[0]
                                                                                     <GHC.Prim.RealWorld>_N
                                                                                     <GHC.Types.Int>_R)
                                                                                  ipv5
                                                                                    `cast`
                                                                                  (Nth:2
                                                                                       (Nth:3
                                                                                            (Nth:2
                                                                                                 (Trans
                                                                                                      (((GHC.Prim.State#
                                                                                                           (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                                                <GHC.Prim.RealWorld>_N))_R
                                                                                                        ->_R ((#,#)
                                                                                                                <'GHC.Types.TupleRep
                                                                                                                   '[]>_R
                                                                                                                <'GHC.Types.LiftedRep>_R
                                                                                                                (GHC.Prim.State#
                                                                                                                   (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                                                        <GHC.Prim.RealWorld>_N))_R
                                                                                                                <Data.Primitive.Array.MutableArray
                                                                                                                   (Control.Monad.Primitive.PrimState
                                                                                                                      (GHC.ST.ST
                                                                                                                         GHC.Prim.RealWorld))
                                                                                                                   a>_R)_R)
                                                                                                       ->_R <GHC.ST.ST
                                                                                                               GHC.Prim.RealWorld
                                                                                                               (Data.Primitive.Array.MutableArray
                                                                                                                  (Control.Monad.Primitive.PrimState
                                                                                                                     (GHC.ST.ST
                                                                                                                        GHC.Prim.RealWorld))
                                                                                                                  a)>_R)
                                                                                                      (<GHC.ST.STRep
                                                                                                          GHC.Prim.RealWorld
                                                                                                          (Data.Primitive.Array.MutableArray
                                                                                                             (Control.Monad.Primitive.PrimState
                                                                                                                (GHC.ST.ST
                                                                                                                   GHC.Prim.RealWorld))
                                                                                                             a)>_R
                                                                                                       ->_R GHC.ST.N:ST[0]
                                                                                                                <GHC.Prim.RealWorld>_N
                                                                                                                <Data.Primitive.Array.MutableArray
                                                                                                                   (Control.Monad.Primitive.PrimState
                                                                                                                      (GHC.ST.ST
                                                                                                                         GHC.Prim.RealWorld))
                                                                                                                   a>_R))))) of ds3 { (#,#) ipv7 ipv8 ->
                                                                           case ipv8 of dt { GHC.Types.I# dt1 ->
                                                                           case GHC.Prim.unsafeFreezeArray#
                                                                                  @ (Control.Monad.Primitive.PrimState
                                                                                       (GHC.ST.ST
                                                                                          GHC.Prim.RealWorld))
                                                                                  @ a
                                                                                  ipv6
                                                                                  ipv7
                                                                                    `cast`
                                                                                  (Nth:2
                                                                                       (Nth:2
                                                                                            (Trans
                                                                                                 (<GHC.ST.STRep
                                                                                                     GHC.Prim.RealWorld
                                                                                                     (Data.Primitive.Array.Array
                                                                                                        a)>_R
                                                                                                  ->_R Sym (GHC.ST.N:ST[0]
                                                                                                                <GHC.Prim.RealWorld>_N
                                                                                                                <Data.Primitive.Array.Array
                                                                                                                   a>_R))
                                                                                                 (((GHC.Prim.State#
                                                                                                      (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                                                <GHC.Prim.RealWorld>_N)))_R
                                                                                                   ->_R ((#,#)
                                                                                                           <'GHC.Types.TupleRep
                                                                                                              '[]>_R
                                                                                                           <'GHC.Types.LiftedRep>_R
                                                                                                           (GHC.Prim.State#
                                                                                                              (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                                                        <GHC.Prim.RealWorld>_N)))_R
                                                                                                           <Data.Primitive.Array.Array
                                                                                                              a>_R)_R)
                                                                                                  ->_R <GHC.ST.ST
                                                                                                          GHC.Prim.RealWorld
                                                                                                          (Data.Primitive.Array.Array
                                                                                                             a)>_R)))) of ds4 { (#,#) ipv9 ipv10 ->
                                                                           (# ipv9
                                                                                `cast`
                                                                              (Nth:2
                                                                                   (Nth:3
                                                                                        (Nth:2
                                                                                             (Trans
                                                                                                  (((GHC.Prim.State#
                                                                                                       (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                                            <GHC.Prim.RealWorld>_N))_R
                                                                                                    ->_R ((#,#)
                                                                                                            <'GHC.Types.TupleRep
                                                                                                               '[]>_R
                                                                                                            <'GHC.Types.LiftedRep>_R
                                                                                                            (GHC.Prim.State#
                                                                                                               (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                                                    <GHC.Prim.RealWorld>_N))_R
                                                                                                            <Data.Primitive.Array.Array
                                                                                                               a>_R)_R)
                                                                                                   ->_R <GHC.ST.ST
                                                                                                           GHC.Prim.RealWorld
                                                                                                           (Data.Primitive.Array.Array
                                                                                                              a)>_R)
                                                                                                  (<GHC.ST.STRep
                                                                                                      GHC.Prim.RealWorld
                                                                                                      (Data.Primitive.Array.Array
                                                                                                         a)>_R
                                                                                                   ->_R GHC.ST.N:ST[0]
                                                                                                            <GHC.Prim.RealWorld>_N
                                                                                                            <Data.Primitive.Array.Array
                                                                                                               a>_R))))),
                                                                              Data.Vector.Vector
                                                                                @ a
                                                                                0#
                                                                                dt1
                                                                                ipv10 #) } } } }
                                                                       } in
                                                                       case GHC.Prim.tagToEnum#
                                                                              @ GHC.Types.Bool
                                                                              (GHC.Prim.<=#
                                                                                 ipv
                                                                                 0#) of wild4 {
                                                                         GHC.Types.False -> $j ipv
                                                                         GHC.Types.True
                                                                         -> $j
                                                                              0# }) of ds2 { (#,#) ipv5 ipv6 ->
                                                               ipv6 } })
                                                         : ipv ipv5 -> fail GHC.Prim.void# } }
                                               : ipv ipv5 -> fail GHC.Prim.void# } }) -}
996724d88a586232e35879d6484bec7d
  $wfromIndices ::
    GHC.Base.String
    -> [GHC.Types.Int]
    -> ([GHC.Types.Int] -> a)
    -> Multilinear.Parallel.Generic.Tensor a
  {- Arity: 3, Strictness: <S,1*U><L,U><L,C(U)>, Inline: [0],
     Unfolding(loop-breaker): <stable> (\ @ a
                                          (w :: GHC.Base.String)
                                          (w1 :: [GHC.Types.Int])
                                          (w2 :: [GHC.Types.Int] -> a) ->
                                        case w of wild {
                                          []
                                          -> Multilinear.Parallel.Generic.Err
                                               @ a
                                               Multilinear.Parallel.NVector.invalidIndices
                                          : d ds
                                          -> let {
                                               fail :: GHC.Prim.Void#
                                                       -> Multilinear.Parallel.Generic.Tensor a
                                                 <join 1> {- Arity: 1 -}
                                               = \ (ds1 :: GHC.Prim.Void#)[OneShot] ->
                                                 case w1 of wild1 {
                                                   []
                                                   -> Multilinear.Parallel.Generic.Err
                                                        @ a
                                                        Multilinear.Parallel.NVector.invalidIndices
                                                   : s size
                                                   -> Multilinear.Parallel.Generic.FiniteTensor
                                                        @ a
                                                        (Multilinear.Index.Finite.Contravariant
                                                           s
                                                           (GHC.Types.:
                                                              @ GHC.Types.Char
                                                              d
                                                              (GHC.Types.[] @ GHC.Types.Char)))
                                                        (case s of n1 { GHC.Types.I# ipv ->
                                                         case GHC.Magic.runRW#
                                                                @ ('GHC.Types.TupleRep
                                                                     '['GHC.Types.TupleRep '[],
                                                                       'GHC.Types.LiftedRep])
                                                                @ (# GHC.Prim.State#
                                                                       GHC.Prim.RealWorld,
                                                                     Data.Vector.Vector
                                                                       (Multilinear.Parallel.Generic.Tensor
                                                                          a) #)
                                                                (\ (s1 :: GHC.Prim.State#
                                                                            GHC.Prim.RealWorld)[OneShot] ->
                                                                 let {
                                                                   $j :: GHC.Prim.Int#
                                                                         -> (# GHC.Prim.State#
                                                                                 GHC.Prim.RealWorld,
                                                                               Data.Vector.Vector
                                                                                 (Multilinear.Parallel.Generic.Tensor
                                                                                    a) #)
                                                                     <join 1> {- Arity: 1 -}
                                                                   = \ (n# :: GHC.Prim.Int#)[OneShot] ->
                                                                     case GHC.Prim.newArray#
                                                                            @ (Multilinear.Parallel.Generic.Tensor
                                                                                 a)
                                                                            @ (Control.Monad.Primitive.PrimState
                                                                                 (GHC.ST.ST
                                                                                    GHC.Prim.RealWorld))
                                                                            n#
                                                                            (Data.Vector.Mutable.uninitialised
                                                                               @ (Multilinear.Parallel.Generic.Tensor
                                                                                    a))
                                                                            s1
                                                                              `cast`
                                                                            (Nth:2
                                                                                 (Nth:2
                                                                                      (Trans
                                                                                           (<GHC.ST.STRep
                                                                                               GHC.Prim.RealWorld
                                                                                               (Data.Primitive.Array.MutableArray
                                                                                                  (Control.Monad.Primitive.PrimState
                                                                                                     (GHC.ST.ST
                                                                                                        GHC.Prim.RealWorld))
                                                                                                  (Multilinear.Parallel.Generic.Tensor
                                                                                                     a))>_R
                                                                                            ->_R Sym (GHC.ST.N:ST[0]
                                                                                                          <GHC.Prim.RealWorld>_N
                                                                                                          <Data.Primitive.Array.MutableArray
                                                                                                             (Control.Monad.Primitive.PrimState
                                                                                                                (GHC.ST.ST
                                                                                                                   GHC.Prim.RealWorld))
                                                                                                             (Multilinear.Parallel.Generic.Tensor
                                                                                                                a)>_R))
                                                                                           (((GHC.Prim.State#
                                                                                                (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                                          <GHC.Prim.RealWorld>_N)))_R
                                                                                             ->_R ((#,#)
                                                                                                     <'GHC.Types.TupleRep
                                                                                                        '[]>_R
                                                                                                     <'GHC.Types.LiftedRep>_R
                                                                                                     (GHC.Prim.State#
                                                                                                        (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                                                  <GHC.Prim.RealWorld>_N)))_R
                                                                                                     <Data.Primitive.Array.MutableArray
                                                                                                        (Control.Monad.Primitive.PrimState
                                                                                                           (GHC.ST.ST
                                                                                                              GHC.Prim.RealWorld))
                                                                                                        (Multilinear.Parallel.Generic.Tensor
                                                                                                           a)>_R)_R)
                                                                                            ->_R <GHC.ST.ST
                                                                                                    GHC.Prim.RealWorld
                                                                                                    (Data.Primitive.Array.MutableArray
                                                                                                       (Control.Monad.Primitive.PrimState
                                                                                                          (GHC.ST.ST
                                                                                                             GHC.Prim.RealWorld))
                                                                                                       (Multilinear.Parallel.Generic.Tensor
                                                                                                          a))>_R)))) of ds2 { (#,#) ipv5 ipv6 ->
                                                                     letrec {
                                                                       foldlM'_loop :: GHC.Types.SPEC
                                                                                       -> GHC.Types.Int
                                                                                       -> GHC.Types.Int
                                                                                       -> GHC.ST.ST
                                                                                            GHC.Prim.RealWorld
                                                                                            GHC.Types.Int
                                                                         {- Arity: 3 -}
                                                                       = \ (ds4 :: GHC.Types.SPEC)
                                                                           (z :: GHC.Types.Int)
                                                                           (s7 :: GHC.Types.Int) ->
                                                                         case ds4 of ds5 { DEFAULT ->
                                                                         case z of z1 { GHC.Types.I# ipv7 ->
                                                                         (\ (s8 :: GHC.Prim.State#
                                                                                     GHC.Prim.RealWorld) ->
                                                                          case s7 of wild2 { GHC.Types.I# x ->
                                                                          case GHC.Prim.tagToEnum#
                                                                                 @ GHC.Types.Bool
                                                                                 (GHC.Prim.<#
                                                                                    x
                                                                                    ipv) of wild3 {
                                                                            GHC.Types.False
                                                                            -> (# s8, z1 #)
                                                                            GHC.Types.True
                                                                            -> case GHC.Prim.writeArray#
                                                                                      @ (Control.Monad.Primitive.PrimState
                                                                                           (GHC.ST.ST
                                                                                              GHC.Prim.RealWorld))
                                                                                      @ (Multilinear.Parallel.Generic.Tensor
                                                                                           a)
                                                                                      ipv6
                                                                                      ipv7
                                                                                      (Multilinear.Parallel.NVector.$wfromIndices
                                                                                         @ a
                                                                                         ds
                                                                                         size
                                                                                         (\ (dss :: [GHC.Types.Int]) ->
                                                                                          w2
                                                                                            (GHC.Types.:
                                                                                               @ GHC.Types.Int
                                                                                               wild2
                                                                                               dss)))
                                                                                      s8
                                                                                        `cast`
                                                                                      (Nth:2
                                                                                           (Nth:2
                                                                                                (Trans
                                                                                                     (<GHC.ST.STRep
                                                                                                         GHC.Prim.RealWorld
                                                                                                         ()>_R
                                                                                                      ->_R Sym (GHC.ST.N:ST[0]
                                                                                                                    <GHC.Prim.RealWorld>_N
                                                                                                                    <()>_R))
                                                                                                     (((GHC.Prim.State#
                                                                                                          (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                                                    <GHC.Prim.RealWorld>_N)))_R
                                                                                                       ->_R ((#,#)
                                                                                                               <'GHC.Types.TupleRep
                                                                                                                  '[]>_R
                                                                                                               <'GHC.Types.LiftedRep>_R
                                                                                                               (GHC.Prim.State#
                                                                                                                  (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                                                            <GHC.Prim.RealWorld>_N)))_R
                                                                                                               <()>_R)_R)
                                                                                                      ->_R <GHC.ST.ST
                                                                                                              GHC.Prim.RealWorld
                                                                                                              ()>_R)))) of s'# { DEFAULT ->
                                                                               (foldlM'_loop
                                                                                  GHC.Types.SPEC
                                                                                  (GHC.Types.I#
                                                                                     (GHC.Prim.+#
                                                                                        ipv7
                                                                                        1#))
                                                                                  (GHC.Types.I#
                                                                                     (GHC.Prim.+#
                                                                                        x
                                                                                        1#)))
                                                                                 `cast`
                                                                               (GHC.ST.N:ST[0]
                                                                                    <GHC.Prim.RealWorld>_N
                                                                                    <GHC.Types.Int>_R)
                                                                                 s'#
                                                                                   `cast`
                                                                                 (Nth:2
                                                                                      (Nth:3
                                                                                           (Nth:2
                                                                                                (Trans
                                                                                                     (((GHC.Prim.State#
                                                                                                          (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                                               <GHC.Prim.RealWorld>_N))_R
                                                                                                       ->_R ((#,#)
                                                                                                               <'GHC.Types.TupleRep
                                                                                                                  '[]>_R
                                                                                                               <'GHC.Types.LiftedRep>_R
                                                                                                               (GHC.Prim.State#
                                                                                                                  (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                                                       <GHC.Prim.RealWorld>_N))_R
                                                                                                               <()>_R)_R)
                                                                                                      ->_R <GHC.ST.ST
                                                                                                              GHC.Prim.RealWorld
                                                                                                              ()>_R)
                                                                                                     (<GHC.ST.STRep
                                                                                                         GHC.Prim.RealWorld
                                                                                                         ()>_R
                                                                                                      ->_R GHC.ST.N:ST[0]
                                                                                                               <GHC.Prim.RealWorld>_N
                                                                                                               <()>_R))))) } } })
                                                                           `cast`
                                                                         (Sym (GHC.ST.N:ST[0]
                                                                                   <GHC.Prim.RealWorld>_N
                                                                                   <GHC.Types.Int>_R)) } }
                                                                     } in
                                                                     case (foldlM'_loop
                                                                             GHC.Types.SPEC
                                                                             (GHC.Types.I# 0#)
                                                                             (GHC.Types.I# 0#))
                                                                            `cast`
                                                                          (GHC.ST.N:ST[0]
                                                                               <GHC.Prim.RealWorld>_N
                                                                               <GHC.Types.Int>_R)
                                                                            ipv5
                                                                              `cast`
                                                                            (Nth:2
                                                                                 (Nth:3
                                                                                      (Nth:2
                                                                                           (Trans
                                                                                                (((GHC.Prim.State#
                                                                                                     (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                                          <GHC.Prim.RealWorld>_N))_R
                                                                                                  ->_R ((#,#)
                                                                                                          <'GHC.Types.TupleRep
                                                                                                             '[]>_R
                                                                                                          <'GHC.Types.LiftedRep>_R
                                                                                                          (GHC.Prim.State#
                                                                                                             (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                                                  <GHC.Prim.RealWorld>_N))_R
                                                                                                          <Data.Primitive.Array.MutableArray
                                                                                                             (Control.Monad.Primitive.PrimState
                                                                                                                (GHC.ST.ST
                                                                                                                   GHC.Prim.RealWorld))
                                                                                                             (Multilinear.Parallel.Generic.Tensor
                                                                                                                a)>_R)_R)
                                                                                                 ->_R <GHC.ST.ST
                                                                                                         GHC.Prim.RealWorld
                                                                                                         (Data.Primitive.Array.MutableArray
                                                                                                            (Control.Monad.Primitive.PrimState
                                                                                                               (GHC.ST.ST
                                                                                                                  GHC.Prim.RealWorld))
                                                                                                            (Multilinear.Parallel.Generic.Tensor
                                                                                                               a))>_R)
                                                                                                (<GHC.ST.STRep
                                                                                                    GHC.Prim.RealWorld
                                                                                                    (Data.Primitive.Array.MutableArray
                                                                                                       (Control.Monad.Primitive.PrimState
                                                                                                          (GHC.ST.ST
                                                                                                             GHC.Prim.RealWorld))
                                                                                                       (Multilinear.Parallel.Generic.Tensor
                                                                                                          a))>_R
                                                                                                 ->_R GHC.ST.N:ST[0]
                                                                                                          <GHC.Prim.RealWorld>_N
                                                                                                          <Data.Primitive.Array.MutableArray
                                                                                                             (Control.Monad.Primitive.PrimState
                                                                                                                (GHC.ST.ST
                                                                                                                   GHC.Prim.RealWorld))
                                                                                                             (Multilinear.Parallel.Generic.Tensor
                                                                                                                a)>_R))))) of ds3 { (#,#) ipv7 ipv8 ->
                                                                     case ipv8 of dt { GHC.Types.I# dt1 ->
                                                                     case GHC.Prim.unsafeFreezeArray#
                                                                            @ (Control.Monad.Primitive.PrimState
                                                                                 (GHC.ST.ST
                                                                                    GHC.Prim.RealWorld))
                                                                            @ (Multilinear.Parallel.Generic.Tensor
                                                                                 a)
                                                                            ipv6
                                                                            ipv7
                                                                              `cast`
                                                                            (Nth:2
                                                                                 (Nth:2
                                                                                      (Trans
                                                                                           (<GHC.ST.STRep
                                                                                               GHC.Prim.RealWorld
                                                                                               (Data.Primitive.Array.Array
                                                                                                  (Multilinear.Parallel.Generic.Tensor
                                                                                                     a))>_R
                                                                                            ->_R Sym (GHC.ST.N:ST[0]
                                                                                                          <GHC.Prim.RealWorld>_N
                                                                                                          <Data.Primitive.Array.Array
                                                                                                             (Multilinear.Parallel.Generic.Tensor
                                                                                                                a)>_R))
                                                                                           (((GHC.Prim.State#
                                                                                                (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                                          <GHC.Prim.RealWorld>_N)))_R
                                                                                             ->_R ((#,#)
                                                                                                     <'GHC.Types.TupleRep
                                                                                                        '[]>_R
                                                                                                     <'GHC.Types.LiftedRep>_R
                                                                                                     (GHC.Prim.State#
                                                                                                        (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                                                  <GHC.Prim.RealWorld>_N)))_R
                                                                                                     <Data.Primitive.Array.Array
                                                                                                        (Multilinear.Parallel.Generic.Tensor
                                                                                                           a)>_R)_R)
                                                                                            ->_R <GHC.ST.ST
                                                                                                    GHC.Prim.RealWorld
                                                                                                    (Data.Primitive.Array.Array
                                                                                                       (Multilinear.Parallel.Generic.Tensor
                                                                                                          a))>_R)))) of ds4 { (#,#) ipv9 ipv10 ->
                                                                     (# ipv9
                                                                          `cast`
                                                                        (Nth:2
                                                                             (Nth:3
                                                                                  (Nth:2
                                                                                       (Trans
                                                                                            (((GHC.Prim.State#
                                                                                                 (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                                      <GHC.Prim.RealWorld>_N))_R
                                                                                              ->_R ((#,#)
                                                                                                      <'GHC.Types.TupleRep
                                                                                                         '[]>_R
                                                                                                      <'GHC.Types.LiftedRep>_R
                                                                                                      (GHC.Prim.State#
                                                                                                         (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                                              <GHC.Prim.RealWorld>_N))_R
                                                                                                      <Data.Primitive.Array.Array
                                                                                                         (Multilinear.Parallel.Generic.Tensor
                                                                                                            a)>_R)_R)
                                                                                             ->_R <GHC.ST.ST
                                                                                                     GHC.Prim.RealWorld
                                                                                                     (Data.Primitive.Array.Array
                                                                                                        (Multilinear.Parallel.Generic.Tensor
                                                                                                           a))>_R)
                                                                                            (<GHC.ST.STRep
                                                                                                GHC.Prim.RealWorld
                                                                                                (Data.Primitive.Array.Array
                                                                                                   (Multilinear.Parallel.Generic.Tensor
                                                                                                      a))>_R
                                                                                             ->_R GHC.ST.N:ST[0]
                                                                                                      <GHC.Prim.RealWorld>_N
                                                                                                      <Data.Primitive.Array.Array
                                                                                                         (Multilinear.Parallel.Generic.Tensor
                                                                                                            a)>_R))))),
                                                                        Data.Vector.Vector
                                                                          @ (Multilinear.Parallel.Generic.Tensor
                                                                               a)
                                                                          0#
                                                                          dt1
                                                                          ipv10 #) } } } }
                                                                 } in
                                                                 case GHC.Prim.tagToEnum#
                                                                        @ GHC.Types.Bool
                                                                        (GHC.Prim.<=#
                                                                           ipv
                                                                           0#) of wild2 {
                                                                   GHC.Types.False -> $j ipv
                                                                   GHC.Types.True
                                                                   -> $j
                                                                        0# }) of ds2 { (#,#) ipv5 ipv6 ->
                                                         ipv6 } }) }
                                             } in
                                             case ds of wild1 {
                                               []
                                               -> case w1 of wild2 {
                                                    [] -> fail GHC.Prim.void#
                                                    : s ds1
                                                    -> case ds1 of wild3 {
                                                         []
                                                         -> Multilinear.Parallel.Generic.SimpleFinite
                                                              @ a
                                                              (Multilinear.Index.Finite.Contravariant
                                                                 s
                                                                 (GHC.Types.:
                                                                    @ GHC.Types.Char
                                                                    d
                                                                    (GHC.Types.[]
                                                                       @ GHC.Types.Char)))
                                                              (case s of n1 { GHC.Types.I# ipv ->
                                                               case GHC.Magic.runRW#
                                                                      @ ('GHC.Types.TupleRep
                                                                           '['GHC.Types.TupleRep
                                                                               '[],
                                                                             'GHC.Types.LiftedRep])
                                                                      @ (# GHC.Prim.State#
                                                                             GHC.Prim.RealWorld,
                                                                           Data.Vector.Vector a #)
                                                                      (\ (s1 :: GHC.Prim.State#
                                                                                  GHC.Prim.RealWorld)[OneShot] ->
                                                                       let {
                                                                         $j :: GHC.Prim.Int#
                                                                               -> (# GHC.Prim.State#
                                                                                       GHC.Prim.RealWorld,
                                                                                     Data.Vector.Vector
                                                                                       a #)
                                                                           <join 1> {- Arity: 1 -}
                                                                         = \ (n# :: GHC.Prim.Int#)[OneShot] ->
                                                                           case GHC.Prim.newArray#
                                                                                  @ a
                                                                                  @ (Control.Monad.Primitive.PrimState
                                                                                       (GHC.ST.ST
                                                                                          GHC.Prim.RealWorld))
                                                                                  n#
                                                                                  (Data.Vector.Mutable.uninitialised
                                                                                     @ a)
                                                                                  s1
                                                                                    `cast`
                                                                                  (Nth:2
                                                                                       (Nth:2
                                                                                            (Trans
                                                                                                 (<GHC.ST.STRep
                                                                                                     GHC.Prim.RealWorld
                                                                                                     (Data.Primitive.Array.MutableArray
                                                                                                        (Control.Monad.Primitive.PrimState
                                                                                                           (GHC.ST.ST
                                                                                                              GHC.Prim.RealWorld))
                                                                                                        a)>_R
                                                                                                  ->_R Sym (GHC.ST.N:ST[0]
                                                                                                                <GHC.Prim.RealWorld>_N
                                                                                                                <Data.Primitive.Array.MutableArray
                                                                                                                   (Control.Monad.Primitive.PrimState
                                                                                                                      (GHC.ST.ST
                                                                                                                         GHC.Prim.RealWorld))
                                                                                                                   a>_R))
                                                                                                 (((GHC.Prim.State#
                                                                                                      (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                                                <GHC.Prim.RealWorld>_N)))_R
                                                                                                   ->_R ((#,#)
                                                                                                           <'GHC.Types.TupleRep
                                                                                                              '[]>_R
                                                                                                           <'GHC.Types.LiftedRep>_R
                                                                                                           (GHC.Prim.State#
                                                                                                              (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                                                        <GHC.Prim.RealWorld>_N)))_R
                                                                                                           <Data.Primitive.Array.MutableArray
                                                                                                              (Control.Monad.Primitive.PrimState
                                                                                                                 (GHC.ST.ST
                                                                                                                    GHC.Prim.RealWorld))
                                                                                                              a>_R)_R)
                                                                                                  ->_R <GHC.ST.ST
                                                                                                          GHC.Prim.RealWorld
                                                                                                          (Data.Primitive.Array.MutableArray
                                                                                                             (Control.Monad.Primitive.PrimState
                                                                                                                (GHC.ST.ST
                                                                                                                   GHC.Prim.RealWorld))
                                                                                                             a)>_R)))) of ds2 { (#,#) ipv5 ipv6 ->
                                                                           letrec {
                                                                             foldlM'_loop :: GHC.Types.SPEC
                                                                                             -> GHC.Types.Int
                                                                                             -> GHC.Types.Int
                                                                                             -> GHC.ST.ST
                                                                                                  GHC.Prim.RealWorld
                                                                                                  GHC.Types.Int
                                                                               {- Arity: 3 -}
                                                                             = \ (ds4 :: GHC.Types.SPEC)
                                                                                 (z :: GHC.Types.Int)
                                                                                 (s7 :: GHC.Types.Int) ->
                                                                               case ds4 of ds5 { DEFAULT ->
                                                                               case z of z1 { GHC.Types.I# ipv7 ->
                                                                               (\ (s8 :: GHC.Prim.State#
                                                                                           GHC.Prim.RealWorld) ->
                                                                                case s7 of wild4 { GHC.Types.I# x ->
                                                                                case GHC.Prim.tagToEnum#
                                                                                       @ GHC.Types.Bool
                                                                                       (GHC.Prim.<#
                                                                                          x
                                                                                          ipv) of wild5 {
                                                                                  GHC.Types.False
                                                                                  -> (# s8, z1 #)
                                                                                  GHC.Types.True
                                                                                  -> case GHC.Prim.writeArray#
                                                                                            @ (Control.Monad.Primitive.PrimState
                                                                                                 (GHC.ST.ST
                                                                                                    GHC.Prim.RealWorld))
                                                                                            @ a
                                                                                            ipv6
                                                                                            ipv7
                                                                                            (w2
                                                                                               (GHC.Types.:
                                                                                                  @ GHC.Types.Int
                                                                                                  wild4
                                                                                                  (GHC.Types.[]
                                                                                                     @ GHC.Types.Int)))
                                                                                            s8
                                                                                              `cast`
                                                                                            (Nth:2
                                                                                                 (Nth:2
                                                                                                      (Trans
                                                                                                           (<GHC.ST.STRep
                                                                                                               GHC.Prim.RealWorld
                                                                                                               ()>_R
                                                                                                            ->_R Sym (GHC.ST.N:ST[0]
                                                                                                                          <GHC.Prim.RealWorld>_N
                                                                                                                          <()>_R))
                                                                                                           (((GHC.Prim.State#
                                                                                                                (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                                                          <GHC.Prim.RealWorld>_N)))_R
                                                                                                             ->_R ((#,#)
                                                                                                                     <'GHC.Types.TupleRep
                                                                                                                        '[]>_R
                                                                                                                     <'GHC.Types.LiftedRep>_R
                                                                                                                     (GHC.Prim.State#
                                                                                                                        (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                                                                  <GHC.Prim.RealWorld>_N)))_R
                                                                                                                     <()>_R)_R)
                                                                                                            ->_R <GHC.ST.ST
                                                                                                                    GHC.Prim.RealWorld
                                                                                                                    ()>_R)))) of s'# { DEFAULT ->
                                                                                     (foldlM'_loop
                                                                                        GHC.Types.SPEC
                                                                                        (GHC.Types.I#
                                                                                           (GHC.Prim.+#
                                                                                              ipv7
                                                                                              1#))
                                                                                        (GHC.Types.I#
                                                                                           (GHC.Prim.+#
                                                                                              x
                                                                                              1#)))
                                                                                       `cast`
                                                                                     (GHC.ST.N:ST[0]
                                                                                          <GHC.Prim.RealWorld>_N
                                                                                          <GHC.Types.Int>_R)
                                                                                       s'#
                                                                                         `cast`
                                                                                       (Nth:2
                                                                                            (Nth:3
                                                                                                 (Nth:2
                                                                                                      (Trans
                                                                                                           (((GHC.Prim.State#
                                                                                                                (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                                                     <GHC.Prim.RealWorld>_N))_R
                                                                                                             ->_R ((#,#)
                                                                                                                     <'GHC.Types.TupleRep
                                                                                                                        '[]>_R
                                                                                                                     <'GHC.Types.LiftedRep>_R
                                                                                                                     (GHC.Prim.State#
                                                                                                                        (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                                                             <GHC.Prim.RealWorld>_N))_R
                                                                                                                     <()>_R)_R)
                                                                                                            ->_R <GHC.ST.ST
                                                                                                                    GHC.Prim.RealWorld
                                                                                                                    ()>_R)
                                                                                                           (<GHC.ST.STRep
                                                                                                               GHC.Prim.RealWorld
                                                                                                               ()>_R
                                                                                                            ->_R GHC.ST.N:ST[0]
                                                                                                                     <GHC.Prim.RealWorld>_N
                                                                                                                     <()>_R))))) } } })
                                                                                 `cast`
                                                                               (Sym (GHC.ST.N:ST[0]
                                                                                         <GHC.Prim.RealWorld>_N
                                                                                         <GHC.Types.Int>_R)) } }
                                                                           } in
                                                                           case (foldlM'_loop
                                                                                   GHC.Types.SPEC
                                                                                   (GHC.Types.I# 0#)
                                                                                   (GHC.Types.I#
                                                                                      0#))
                                                                                  `cast`
                                                                                (GHC.ST.N:ST[0]
                                                                                     <GHC.Prim.RealWorld>_N
                                                                                     <GHC.Types.Int>_R)
                                                                                  ipv5
                                                                                    `cast`
                                                                                  (Nth:2
                                                                                       (Nth:3
                                                                                            (Nth:2
                                                                                                 (Trans
                                                                                                      (((GHC.Prim.State#
                                                                                                           (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                                                <GHC.Prim.RealWorld>_N))_R
                                                                                                        ->_R ((#,#)
                                                                                                                <'GHC.Types.TupleRep
                                                                                                                   '[]>_R
                                                                                                                <'GHC.Types.LiftedRep>_R
                                                                                                                (GHC.Prim.State#
                                                                                                                   (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                                                        <GHC.Prim.RealWorld>_N))_R
                                                                                                                <Data.Primitive.Array.MutableArray
                                                                                                                   (Control.Monad.Primitive.PrimState
                                                                                                                      (GHC.ST.ST
                                                                                                                         GHC.Prim.RealWorld))
                                                                                                                   a>_R)_R)
                                                                                                       ->_R <GHC.ST.ST
                                                                                                               GHC.Prim.RealWorld
                                                                                                               (Data.Primitive.Array.MutableArray
                                                                                                                  (Control.Monad.Primitive.PrimState
                                                                                                                     (GHC.ST.ST
                                                                                                                        GHC.Prim.RealWorld))
                                                                                                                  a)>_R)
                                                                                                      (<GHC.ST.STRep
                                                                                                          GHC.Prim.RealWorld
                                                                                                          (Data.Primitive.Array.MutableArray
                                                                                                             (Control.Monad.Primitive.PrimState
                                                                                                                (GHC.ST.ST
                                                                                                                   GHC.Prim.RealWorld))
                                                                                                             a)>_R
                                                                                                       ->_R GHC.ST.N:ST[0]
                                                                                                                <GHC.Prim.RealWorld>_N
                                                                                                                <Data.Primitive.Array.MutableArray
                                                                                                                   (Control.Monad.Primitive.PrimState
                                                                                                                      (GHC.ST.ST
                                                                                                                         GHC.Prim.RealWorld))
                                                                                                                   a>_R))))) of ds3 { (#,#) ipv7 ipv8 ->
                                                                           case ipv8 of dt { GHC.Types.I# dt1 ->
                                                                           case GHC.Prim.unsafeFreezeArray#
                                                                                  @ (Control.Monad.Primitive.PrimState
                                                                                       (GHC.ST.ST
                                                                                          GHC.Prim.RealWorld))
                                                                                  @ a
                                                                                  ipv6
                                                                                  ipv7
                                                                                    `cast`
                                                                                  (Nth:2
                                                                                       (Nth:2
                                                                                            (Trans
                                                                                                 (<GHC.ST.STRep
                                                                                                     GHC.Prim.RealWorld
                                                                                                     (Data.Primitive.Array.Array
                                                                                                        a)>_R
                                                                                                  ->_R Sym (GHC.ST.N:ST[0]
                                                                                                                <GHC.Prim.RealWorld>_N
                                                                                                                <Data.Primitive.Array.Array
                                                                                                                   a>_R))
                                                                                                 (((GHC.Prim.State#
                                                                                                      (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                                                <GHC.Prim.RealWorld>_N)))_R
                                                                                                   ->_R ((#,#)
                                                                                                           <'GHC.Types.TupleRep
                                                                                                              '[]>_R
                                                                                                           <'GHC.Types.LiftedRep>_R
                                                                                                           (GHC.Prim.State#
                                                                                                              (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                                                        <GHC.Prim.RealWorld>_N)))_R
                                                                                                           <Data.Primitive.Array.Array
                                                                                                              a>_R)_R)
                                                                                                  ->_R <GHC.ST.ST
                                                                                                          GHC.Prim.RealWorld
                                                                                                          (Data.Primitive.Array.Array
                                                                                                             a)>_R)))) of ds4 { (#,#) ipv9 ipv10 ->
                                                                           (# ipv9
                                                                                `cast`
                                                                              (Nth:2
                                                                                   (Nth:3
                                                                                        (Nth:2
                                                                                             (Trans
                                                                                                  (((GHC.Prim.State#
                                                                                                       (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                                            <GHC.Prim.RealWorld>_N))_R
                                                                                                    ->_R ((#,#)
                                                                                                            <'GHC.Types.TupleRep
                                                                                                               '[]>_R
                                                                                                            <'GHC.Types.LiftedRep>_R
                                                                                                            (GHC.Prim.State#
                                                                                                               (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                                                    <GHC.Prim.RealWorld>_N))_R
                                                                                                            <Data.Primitive.Array.Array
                                                                                                               a>_R)_R)
                                                                                                   ->_R <GHC.ST.ST
                                                                                                           GHC.Prim.RealWorld
                                                                                                           (Data.Primitive.Array.Array
                                                                                                              a)>_R)
                                                                                                  (<GHC.ST.STRep
                                                                                                      GHC.Prim.RealWorld
                                                                                                      (Data.Primitive.Array.Array
                                                                                                         a)>_R
                                                                                                   ->_R GHC.ST.N:ST[0]
                                                                                                            <GHC.Prim.RealWorld>_N
                                                                                                            <Data.Primitive.Array.Array
                                                                                                               a>_R))))),
                                                                              Data.Vector.Vector
                                                                                @ a
                                                                                0#
                                                                                dt1
                                                                                ipv10 #) } } } }
                                                                       } in
                                                                       case GHC.Prim.tagToEnum#
                                                                              @ GHC.Types.Bool
                                                                              (GHC.Prim.<=#
                                                                                 ipv
                                                                                 0#) of wild4 {
                                                                         GHC.Types.False -> $j ipv
                                                                         GHC.Types.True
                                                                         -> $j
                                                                              0# }) of ds2 { (#,#) ipv5 ipv6 ->
                                                               ipv6 } })
                                                         : ipv ipv5 -> fail GHC.Prim.void# } }
                                               : ipv ipv5 -> fail GHC.Prim.void# } }) -}
0908f84cc9d09b4c648e2acd0583e043
  const ::
    GHC.Num.Num a =>
    GHC.Base.String
    -> [GHC.Types.Int] -> a -> Multilinear.Parallel.Generic.Tensor a
  {- Arity: 4, Strictness: <L,A><S,1*U><L,U><L,U>, Inline: [0],
     Unfolding: InlineRule (4, True, True)
                (\ @ a
                   (w :: GHC.Num.Num a)
                   (w1 :: GHC.Base.String)
                   (w2 :: [GHC.Types.Int])
                   (w3 :: a) ->
                 Multilinear.Parallel.NVector.$wconst @ a w1 w2 w3) -}
247a761d9f26d34c00452615082e2c53
  const1 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("Indices and its sizes incompatible with n-vector structure!"#) -}
6e79de164d30a80ff959be889ca198a6
  fromIndices ::
    GHC.Num.Num a =>
    GHC.Base.String
    -> [GHC.Types.Int]
    -> ([GHC.Types.Int] -> a)
    -> Multilinear.Parallel.Generic.Tensor a
  {- Arity: 4, Strictness: <L,A><S,1*U><L,U><L,C(U)>, Inline: [0],
     Unfolding: InlineRule (4, True, True)
                (\ @ a
                   (w :: GHC.Num.Num a)
                   (w1 :: GHC.Base.String)
                   (w2 :: [GHC.Types.Int])
                   (w3 :: [GHC.Types.Int] -> a) ->
                 Multilinear.Parallel.NVector.$wfromIndices @ a w1 w2 w3) -}
4cc0ef29c98abbe59d6f529b37c0d43c
  invalidIndices :: GHC.Base.String
  {- Unfolding: (GHC.CString.unpackCString#
                   Multilinear.Parallel.NVector.const1) -}
1a005b0386c5ae3edb54a1bd1775e4a1
  randomDouble ::
    Statistics.Distribution.ContGen d =>
    GHC.Base.String
    -> [GHC.Types.Int]
    -> d
    -> GHC.Types.IO
         (Multilinear.Parallel.Generic.Tensor GHC.Types.Double)
  {- Arity: 5,
     Strictness: <L,U(A,C(C1(C1(U))))><S,1*U><L,U><L,U><S,U>,
     Inline: (sat-args=3),
     Unfolding(loop-breaker): InlineRule (4, False, False)
                              (\ @ d
                                 ($dContGen :: Statistics.Distribution.ContGen d)
                                 (ds :: [GHC.Types.Char])
                                 (ds1 :: [GHC.Types.Int])
                                 (distr :: d) ->
                               case ds of wild {
                                 []
                                 -> (\ (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                                     (# s,
                                        Multilinear.Parallel.Generic.Err
                                          @ GHC.Types.Double
                                          Multilinear.Parallel.NVector.invalidIndices #))
                                      `cast`
                                    (Sym (GHC.Types.N:IO[0]
                                              <Multilinear.Parallel.Generic.Tensor
                                                 GHC.Types.Double>_R))
                                 : d1 ds2
                                 -> let {
                                      fail :: GHC.Prim.Void#
                                              -> GHC.Types.IO
                                                   (Multilinear.Parallel.Generic.Tensor
                                                      GHC.Types.Double)
                                        <join 1> {- Arity: 1 -}
                                      = \ (ds3 :: GHC.Prim.Void#)[OneShot] ->
                                        case ds1 of wild1 {
                                          []
                                          -> (\ (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                                              (# s,
                                                 Multilinear.Parallel.Generic.Err
                                                   @ GHC.Types.Double
                                                   Multilinear.Parallel.NVector.invalidIndices #))
                                               `cast`
                                             (Sym (GHC.Types.N:IO[0]
                                                       <Multilinear.Parallel.Generic.Tensor
                                                          GHC.Types.Double>_R))
                                          : s size
                                          -> (\ (s1 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                                              case (Data.Vector.Generic.unstreamPrimM
                                                      @ GHC.Types.IO
                                                      @ Data.Vector.Vector
                                                      @ (Multilinear.Parallel.Generic.Tensor
                                                           GHC.Types.Double)
                                                      @ Data.Vector.Vector
                                                      Control.Monad.Primitive.$fPrimMonadIO
                                                      (Data.Vector.$fVectorVectora
                                                         @ (Multilinear.Parallel.Generic.Tensor
                                                              GHC.Types.Double))
                                                      (Data.Vector.Fusion.Bundle.Monadic.mapM
                                                         @ GHC.Types.IO
                                                         @ (GHC.Types.IO
                                                              (Multilinear.Parallel.Generic.Tensor
                                                                 GHC.Types.Double))
                                                         @ (Multilinear.Parallel.Generic.Tensor
                                                              GHC.Types.Double)
                                                         @ Data.Vector.Vector
                                                         GHC.Base.$fMonadIO
                                                         (GHC.Base.id
                                                            @ (GHC.Types.IO
                                                                 (Multilinear.Parallel.Generic.Tensor
                                                                    GHC.Types.Double)))
                                                         (Data.Vector.Fusion.Bundle.lift
                                                            @ GHC.Types.IO
                                                            @ Data.Vector.Vector
                                                            @ (GHC.Types.IO
                                                                 (Multilinear.Parallel.Generic.Tensor
                                                                    GHC.Types.Double))
                                                            GHC.Base.$fMonadIO
                                                            (Data.Vector.Fusion.Bundle.Monadic.generateM
                                                               @ Data.Vector.Fusion.Util.Id
                                                               @ (GHC.Types.IO
                                                                    (Multilinear.Parallel.Generic.Tensor
                                                                       GHC.Types.Double))
                                                               @ Data.Vector.Vector
                                                               Data.Vector.Fusion.Util.$fMonadId
                                                               s
                                                               (\ (x :: GHC.Types.Int) ->
                                                                Multilinear.Parallel.NVector.randomDouble
                                                                  @ d
                                                                  $dContGen
                                                                  ds2
                                                                  size
                                                                  distr)
                                                                 `cast`
                                                               (<GHC.Types.Int>_R
                                                                ->_R Sym (Data.Vector.Fusion.Util.N:Id[0]
                                                                              <GHC.Types.IO
                                                                                 (Multilinear.Parallel.Generic.Tensor
                                                                                    GHC.Types.Double)>_R))))))
                                                     `cast`
                                                   (GHC.Types.N:IO[0]
                                                        <Data.Vector.Vector
                                                           (Multilinear.Parallel.Generic.Tensor
                                                              GHC.Types.Double)>_R)
                                                     s1 of ds4 { (#,#) ipv ipv5 ->
                                              (# ipv,
                                                 Multilinear.Parallel.Generic.FiniteTensor
                                                   @ GHC.Types.Double
                                                   (Multilinear.Index.Finite.Contravariant
                                                      s
                                                      (GHC.Base.build
                                                         @ GHC.Types.Char
                                                         (\ @ a
                                                            (c :: GHC.Types.Char -> a -> a)[OneShot]
                                                            (n :: a)[OneShot] ->
                                                          c d1 n)))
                                                   ipv5 #) })
                                               `cast`
                                             (Sym (GHC.Types.N:IO[0]
                                                       <Multilinear.Parallel.Generic.Tensor
                                                          GHC.Types.Double>_R)) }
                                    } in
                                    case ds2 of wild1 {
                                      []
                                      -> case ds1 of wild2 {
                                           [] -> fail GHC.Prim.void#
                                           : s ds3
                                           -> case ds3 of wild3 {
                                                []
                                                -> (\ (s1 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                                                    case System.Random.MWC.createSystemRandom_$swithSystemRandom
                                                           @ (System.Random.MWC.Gen
                                                                GHC.Prim.RealWorld)
                                                           (GHC.Base.$fApplicativeIO4
                                                              @ (System.Random.MWC.Gen
                                                                   GHC.Prim.RealWorld))
                                                             `cast`
                                                           (Trans
                                                                (<System.Random.MWC.Gen
                                                                    GHC.Prim.RealWorld>_R
                                                                 ->_R Sym (GHC.Types.N:IO[0]
                                                                               <System.Random.MWC.Gen
                                                                                  GHC.Prim.RealWorld>_R))
                                                                (Trans
                                                                     ((System.Random.MWC.Gen
                                                                         (Sym (Control.Monad.Primitive.D:R:PrimStateIO[0])))_R
                                                                      ->_R (GHC.Types.IO
                                                                              (System.Random.MWC.Gen
                                                                                 (Sym (Control.Monad.Primitive.D:R:PrimStateIO[0])))_R)_R)
                                                                     (<System.Random.MWC.Gen
                                                                         (Control.Monad.Primitive.PrimState
                                                                            GHC.Types.IO)>_R
                                                                      ->_R (GHC.Types.IO
                                                                              (System.Random.MWC.Gen
                                                                                 (Control.Monad.Primitive.D:R:PrimStateIO[0]))_R)_R)))
                                                           s1 of ds4 { (#,#) ipv ipv5 ->
                                                    case (Data.Vector.Generic.unstreamPrimM
                                                            @ GHC.Types.IO
                                                            @ Data.Vector.Vector
                                                            @ GHC.Types.Double
                                                            @ Data.Vector.Vector
                                                            Control.Monad.Primitive.$fPrimMonadIO
                                                            (Data.Vector.$fVectorVectora
                                                               @ GHC.Types.Double)
                                                            (Data.Vector.Fusion.Bundle.Monadic.mapM
                                                               @ GHC.Types.IO
                                                               @ (GHC.Types.IO GHC.Types.Double)
                                                               @ GHC.Types.Double
                                                               @ Data.Vector.Vector
                                                               GHC.Base.$fMonadIO
                                                               (GHC.Base.id
                                                                  @ (GHC.Types.IO GHC.Types.Double))
                                                               (Data.Vector.Fusion.Bundle.lift
                                                                  @ GHC.Types.IO
                                                                  @ Data.Vector.Vector
                                                                  @ (GHC.Types.IO GHC.Types.Double)
                                                                  GHC.Base.$fMonadIO
                                                                  (Data.Vector.Fusion.Bundle.Monadic.generateM
                                                                     @ Data.Vector.Fusion.Util.Id
                                                                     @ (GHC.Types.IO
                                                                          GHC.Types.Double)
                                                                     @ Data.Vector.Vector
                                                                     Data.Vector.Fusion.Util.$fMonadId
                                                                     s
                                                                     (\ (x :: GHC.Types.Int) ->
                                                                      Statistics.Distribution.genContVar
                                                                        @ d
                                                                        $dContGen
                                                                        @ GHC.Types.IO
                                                                        Control.Monad.Primitive.$fPrimMonadIO
                                                                        distr
                                                                        ipv5
                                                                          `cast`
                                                                        (System.Random.MWC.Gen
                                                                           (Sym (Control.Monad.Primitive.D:R:PrimStateIO[0])))_R)
                                                                       `cast`
                                                                     (<GHC.Types.Int>_R
                                                                      ->_R Sym (Data.Vector.Fusion.Util.N:Id[0]
                                                                                    <GHC.Types.IO
                                                                                       GHC.Types.Double>_R))))))
                                                           `cast`
                                                         (GHC.Types.N:IO[0]
                                                              <Data.Vector.Vector
                                                                 GHC.Types.Double>_R)
                                                           ipv of ds5 { (#,#) ipv6 ipv7 ->
                                                    (# ipv6,
                                                       Multilinear.Parallel.Generic.SimpleFinite
                                                         @ GHC.Types.Double
                                                         (Multilinear.Index.Finite.Contravariant
                                                            s
                                                            (GHC.Base.build
                                                               @ GHC.Types.Char
                                                               (\ @ a
                                                                  (c :: GHC.Types.Char
                                                                        -> a -> a)[OneShot]
                                                                  (n :: a)[OneShot] ->
                                                                c d1 n)))
                                                         ipv7 #) } })
                                                     `cast`
                                                   (Sym (GHC.Types.N:IO[0]
                                                             <Multilinear.Parallel.Generic.Tensor
                                                                GHC.Types.Double>_R))
                                                : ipv ipv5 -> fail GHC.Prim.void# } }
                                      : ipv ipv5 -> fail GHC.Prim.void# } }) -}
ac30711b935adbefff30a06d0f497780
  randomDoubleSeed ::
    (Statistics.Distribution.ContGen d, GHC.Real.Integral i2,
     Control.Monad.Primitive.PrimMonad m) =>
    GHC.Base.String
    -> [GHC.Types.Int]
    -> d
    -> i2
    -> m (Multilinear.Parallel.Generic.Tensor GHC.Types.Double)
  {- Arity: 7,
     Strictness: <L,U(A,C(C1(C1(U))))><L,1*U(A,A,A,A,A,A,A,A,1*C1(U))><S(SL),U(U(U,U,U,U,U),U)><S,1*U><L,U><L,U><L,U>,
     Inline: (sat-args=4),
     Unfolding(loop-breaker): InlineRule (7, False, False)
                              (\ @ d
                                 @ i2
                                 @ m :: * -> *
                                 ($dContGen :: Statistics.Distribution.ContGen d)
                                 ($dIntegral :: GHC.Real.Integral i2)
                                 ($dPrimMonad :: Control.Monad.Primitive.PrimMonad m) ->
                               let {
                                 $dMonad :: GHC.Base.Monad m
                                 = Control.Monad.Primitive.$p1PrimMonad @ m $dPrimMonad
                               } in
                               \ (ds :: [GHC.Types.Char])
                                 (ds1 :: [GHC.Types.Int])
                                 (distr :: d)
                                 (seed :: i2) ->
                               case ds of wild {
                                 []
                                 -> GHC.Base.return
                                      @ m
                                      $dMonad
                                      @ (Multilinear.Parallel.Generic.Tensor GHC.Types.Double)
                                      (Multilinear.Parallel.Generic.Err
                                         @ GHC.Types.Double
                                         Multilinear.Parallel.NVector.invalidIndices)
                                 : d1 ds2
                                 -> let {
                                      fail :: GHC.Prim.Void#
                                              -> m (Multilinear.Parallel.Generic.Tensor
                                                      GHC.Types.Double)
                                        <join 1> {- Arity: 1 -}
                                      = \ (ds3 :: GHC.Prim.Void#)[OneShot] ->
                                        case ds1 of wild1 {
                                          []
                                          -> GHC.Base.return
                                               @ m
                                               $dMonad
                                               @ (Multilinear.Parallel.Generic.Tensor
                                                    GHC.Types.Double)
                                               (Multilinear.Parallel.Generic.Err
                                                  @ GHC.Types.Double
                                                  Multilinear.Parallel.NVector.invalidIndices)
                                          : s size
                                          -> GHC.Base.>>=
                                               @ m
                                               $dMonad
                                               @ (Data.Vector.Vector
                                                    (Multilinear.Parallel.Generic.Tensor
                                                       GHC.Types.Double))
                                               @ (Multilinear.Parallel.Generic.Tensor
                                                    GHC.Types.Double)
                                               (Data.Vector.Generic.unstreamM
                                                  @ m
                                                  @ Data.Vector.Vector
                                                  @ (Multilinear.Parallel.Generic.Tensor
                                                       GHC.Types.Double)
                                                  @ Data.Vector.Vector
                                                  $dMonad
                                                  (Data.Vector.$fVectorVectora
                                                     @ (Multilinear.Parallel.Generic.Tensor
                                                          GHC.Types.Double))
                                                  (Data.Vector.Fusion.Bundle.Monadic.mapM
                                                     @ m
                                                     @ (m (Multilinear.Parallel.Generic.Tensor
                                                             GHC.Types.Double))
                                                     @ (Multilinear.Parallel.Generic.Tensor
                                                          GHC.Types.Double)
                                                     @ Data.Vector.Vector
                                                     $dMonad
                                                     (GHC.Base.id
                                                        @ (m (Multilinear.Parallel.Generic.Tensor
                                                                GHC.Types.Double)))
                                                     (Data.Vector.Fusion.Bundle.lift
                                                        @ m
                                                        @ Data.Vector.Vector
                                                        @ (m (Multilinear.Parallel.Generic.Tensor
                                                                GHC.Types.Double))
                                                        $dMonad
                                                        (Data.Vector.Fusion.Bundle.Monadic.generateM
                                                           @ Data.Vector.Fusion.Util.Id
                                                           @ (m (Multilinear.Parallel.Generic.Tensor
                                                                   GHC.Types.Double))
                                                           @ Data.Vector.Vector
                                                           Data.Vector.Fusion.Util.$fMonadId
                                                           s
                                                           (\ (x :: GHC.Types.Int) ->
                                                            Multilinear.Parallel.NVector.randomDoubleSeed
                                                              @ d
                                                              @ i2
                                                              @ m
                                                              $dContGen
                                                              $dIntegral
                                                              $dPrimMonad
                                                              ds2
                                                              size
                                                              distr
                                                              seed)
                                                             `cast`
                                                           (<GHC.Types.Int>_R
                                                            ->_R Sym (Data.Vector.Fusion.Util.N:Id[0]
                                                                          <m (Multilinear.Parallel.Generic.Tensor
                                                                                GHC.Types.Double)>_R))))))
                                               (\ (tensors :: Data.Vector.Vector
                                                                (Multilinear.Parallel.Generic.Tensor
                                                                   GHC.Types.Double)) ->
                                                GHC.Base.return
                                                  @ m
                                                  $dMonad
                                                  @ (Multilinear.Parallel.Generic.Tensor
                                                       GHC.Types.Double)
                                                  (Multilinear.Parallel.Generic.FiniteTensor
                                                     @ GHC.Types.Double
                                                     (Multilinear.Index.Finite.Contravariant
                                                        s
                                                        (GHC.Base.build
                                                           @ GHC.Types.Char
                                                           (\ @ a
                                                              (c :: GHC.Types.Char
                                                                    -> a -> a)[OneShot]
                                                              (n :: a)[OneShot] ->
                                                            c d1 n)))
                                                     tensors)) }
                                    } in
                                    case ds2 of wild1 {
                                      []
                                      -> case ds1 of wild2 {
                                           [] -> fail GHC.Prim.void#
                                           : s ds3
                                           -> case ds3 of wild3 {
                                                []
                                                -> GHC.Base.>>=
                                                     @ m
                                                     $dMonad
                                                     @ (System.Random.MWC.Gen
                                                          (Control.Monad.Primitive.PrimState m))
                                                     @ (Multilinear.Parallel.Generic.Tensor
                                                          GHC.Types.Double)
                                                     (let {
                                                        $dMonad1 :: GHC.Base.Monad m
                                                        = Control.Monad.Primitive.$p1PrimMonad
                                                            @ m
                                                            $dPrimMonad
                                                      } in
                                                      let {
                                                        seed1 :: Data.Vector.Vector GHC.Word.Word32
                                                        = Data.Vector.Generic.new
                                                            @ Data.Vector.Vector
                                                            @ GHC.Word.Word32
                                                            (Data.Vector.$fVectorVectora
                                                               @ GHC.Word.Word32)
                                                            (Data.Vector.Generic.New.unstream
                                                               @ Data.Vector.Vector
                                                               @ GHC.Word.Word32
                                                               (Data.Vector.$fVectorVectora
                                                                  @ GHC.Word.Word32)
                                                               (Data.Vector.Fusion.Bundle.Monadic.singleton
                                                                  @ Data.Vector.Fusion.Util.Id
                                                                  @ GHC.Word.Word32
                                                                  @ Data.Vector.Vector
                                                                  Data.Vector.Fusion.Util.$fMonadId
                                                                  (case GHC.Real.fromIntegral
                                                                          @ i2
                                                                          @ GHC.Types.Word
                                                                          $dIntegral
                                                                          GHC.Num.$fNumWord
                                                                          seed of wild4 { GHC.Types.W# x# ->
                                                                   GHC.Word.W32#
                                                                     (GHC.Prim.narrow32Word#
                                                                        x#) })))
                                                      } in
                                                      let {
                                                        fini :: Data.Vector.Fusion.Util.Id
                                                                  GHC.Types.Int
                                                        = Data.Vector.Fusion.Bundle.Monadic.length
                                                            @ Data.Vector.Fusion.Util.Id
                                                            @ Data.Vector.Vector
                                                            @ GHC.Word.Word32
                                                            Data.Vector.Fusion.Util.$fMonadId
                                                            (Data.Vector.Fusion.Bundle.Monadic.fromVector
                                                               @ Data.Vector.Fusion.Util.Id
                                                               @ Data.Vector.Vector
                                                               @ GHC.Word.Word32
                                                               Data.Vector.Fusion.Util.$fMonadId
                                                               (Data.Vector.$fVectorVectora
                                                                  @ GHC.Word.Word32)
                                                               seed1)
                                                      } in
                                                      GHC.Base.>>=
                                                        @ m
                                                        $dMonad1
                                                        @ (Data.Vector.Unboxed.Base.MVector
                                                             (Control.Monad.Primitive.PrimState m)
                                                             GHC.Word.Word32)
                                                        @ (System.Random.MWC.Gen
                                                             (Control.Monad.Primitive.PrimState m))
                                                        (let {
                                                           $dMonad2 :: GHC.Base.Monad m
                                                           = Control.Monad.Primitive.$p1PrimMonad
                                                               @ m
                                                               $dPrimMonad
                                                         } in
                                                         let {
                                                           n1 :: GHC.Types.Int = GHC.Types.I# 258#
                                                         } in
                                                         GHC.Base.>>=
                                                           @ m
                                                           $dMonad2
                                                           @ (Data.Vector.Primitive.Mutable.MVector
                                                                (Control.Monad.Primitive.PrimState
                                                                   m)
                                                                GHC.Word.Word32)
                                                           @ (Data.Vector.Unboxed.Base.MVector
                                                                (Control.Monad.Primitive.PrimState
                                                                   m)
                                                                GHC.Word.Word32)
                                                           (let {
                                                              $dMonad3 :: GHC.Base.Monad m
                                                              = Control.Monad.Primitive.$p1PrimMonad
                                                                  @ m
                                                                  $dPrimMonad
                                                            } in
                                                            case GHC.Classes.ltInt
                                                                   n1
                                                                   (GHC.Types.I# 0#) of wild4 {
                                                              GHC.Types.False
                                                              -> case GHC.Classes.gtInt
                                                                        n1
                                                                        (GHC.Real.$fIntegralInt_$cdiv
                                                                           GHC.Base.maxInt
                                                                           (GHC.Types.I#
                                                                              4#)) of wild5 {
                                                                   GHC.Types.False
                                                                   -> let {
                                                                        f :: GHC.Types.Int
                                                                        = GHC.Types.I# 0#
                                                                      } in
                                                                      GHC.Base.>>=
                                                                        @ m
                                                                        $dMonad3
                                                                        @ (Data.Primitive.ByteArray.MutableByteArray
                                                                             (Control.Monad.Primitive.PrimState
                                                                                m))
                                                                        @ (Data.Vector.Primitive.Mutable.MVector
                                                                             (Control.Monad.Primitive.PrimState
                                                                                m)
                                                                             GHC.Word.Word32)
                                                                        (Control.Monad.Primitive.primitive
                                                                           @ m
                                                                           $dPrimMonad
                                                                           @ (Data.Primitive.ByteArray.MutableByteArray
                                                                                (Control.Monad.Primitive.PrimState
                                                                                   m))
                                                                           (\ (s# :: GHC.Prim.State#
                                                                                       (Control.Monad.Primitive.PrimState
                                                                                          m)) ->
                                                                            case GHC.Prim.newByteArray#
                                                                                   @ (Control.Monad.Primitive.PrimState
                                                                                        m)
                                                                                   1032#
                                                                                   s# of ds4 { (#,#) ipv ipv5 ->
                                                                            (# ipv,
                                                                               Data.Primitive.ByteArray.MutableByteArray
                                                                                 @ (Control.Monad.Primitive.PrimState
                                                                                      m)
                                                                                 ipv5 #) }))
                                                                        (\ (x1 :: Data.Primitive.ByteArray.MutableByteArray
                                                                                    (Control.Monad.Primitive.PrimState
                                                                                       m)) ->
                                                                         GHC.Base.return
                                                                           @ m
                                                                           $dMonad3
                                                                           @ (Data.Vector.Primitive.Mutable.MVector
                                                                                (Control.Monad.Primitive.PrimState
                                                                                   m)
                                                                                GHC.Word.Word32)
                                                                           (Data.Vector.Primitive.Mutable.$WMVector
                                                                              @ (Control.Monad.Primitive.PrimState
                                                                                   m)
                                                                              @ GHC.Word.Word32
                                                                              f
                                                                              n1
                                                                              x1))
                                                                   GHC.Types.True
                                                                   -> GHC.Err.error
                                                                        @ 'GHC.Types.LiftedRep
                                                                        @ (m (Data.Vector.Primitive.Mutable.MVector
                                                                                (Control.Monad.Primitive.PrimState
                                                                                   m)
                                                                                GHC.Word.Word32))
                                                                        (GHC.Stack.Types.PushCallStack
                                                                           (GHC.Base.build
                                                                              @ GHC.Types.Char
                                                                              (\ @ b ->
                                                                               GHC.CString.unpackFoldrCString#
                                                                                 @ b
                                                                                 "error"#))
                                                                           (GHC.Stack.Types.SrcLoc
                                                                              (GHC.Base.build
                                                                                 @ GHC.Types.Char
                                                                                 (\ @ b ->
                                                                                  GHC.CString.unpackFoldrCString#
                                                                                    @ b
                                                                                    "vector-0.12.0.1-JlawpRjIcMJIYPJVsWriIA"#))
                                                                              (GHC.Base.build
                                                                                 @ GHC.Types.Char
                                                                                 (\ @ b ->
                                                                                  GHC.CString.unpackFoldrCString#
                                                                                    @ b
                                                                                    "Data.Vector.Primitive.Mutable"#))
                                                                              (GHC.Base.build
                                                                                 @ GHC.Types.Char
                                                                                 (\ @ b ->
                                                                                  GHC.CString.unpackFoldrCString#
                                                                                    @ b
                                                                                    ".\\Data\\Vector\\Primitive\\Mutable.hs"#))
                                                                              (GHC.Types.I# 98#)
                                                                              (GHC.Types.I# 16#)
                                                                              (GHC.Types.I# 98#)
                                                                              (GHC.Types.I# 79#))
                                                                           GHC.Stack.Types.EmptyCallStack)
                                                                          `cast`
                                                                        (Sym (GHC.Classes.N:IP[0]
                                                                                  <"callStack">_N
                                                                                  <GHC.Stack.Types.CallStack>_N))
                                                                        (GHC.Base.augment
                                                                           @ GHC.Types.Char
                                                                           (\ @ b
                                                                              (c :: GHC.Types.Char
                                                                                    -> b
                                                                                    -> b)[OneShot]
                                                                              (n2 :: b)[OneShot] ->
                                                                            GHC.CString.unpackFoldrCString#
                                                                              @ b
                                                                              "Primitive.basicUnsafeNew: length to large: "#
                                                                              c
                                                                              n2)
                                                                           (GHC.Show.showSignedInt
                                                                              GHC.Show.$fShow(,)1
                                                                              n1
                                                                              (GHC.Types.[]
                                                                                 @ GHC.Types.Char))) }
                                                              GHC.Types.True
                                                              -> GHC.Err.error
                                                                   @ 'GHC.Types.LiftedRep
                                                                   @ (m (Data.Vector.Primitive.Mutable.MVector
                                                                           (Control.Monad.Primitive.PrimState
                                                                              m)
                                                                           GHC.Word.Word32))
                                                                   (GHC.Stack.Types.PushCallStack
                                                                      (GHC.Base.build
                                                                         @ GHC.Types.Char
                                                                         (\ @ b ->
                                                                          GHC.CString.unpackFoldrCString#
                                                                            @ b
                                                                            "error"#))
                                                                      (GHC.Stack.Types.SrcLoc
                                                                         (GHC.Base.build
                                                                            @ GHC.Types.Char
                                                                            (\ @ b ->
                                                                             GHC.CString.unpackFoldrCString#
                                                                               @ b
                                                                               "vector-0.12.0.1-JlawpRjIcMJIYPJVsWriIA"#))
                                                                         (GHC.Base.build
                                                                            @ GHC.Types.Char
                                                                            (\ @ b ->
                                                                             GHC.CString.unpackFoldrCString#
                                                                               @ b
                                                                               "Data.Vector.Primitive.Mutable"#))
                                                                         (GHC.Base.build
                                                                            @ GHC.Types.Char
                                                                            (\ @ b ->
                                                                             GHC.CString.unpackFoldrCString#
                                                                               @ b
                                                                               ".\\Data\\Vector\\Primitive\\Mutable.hs"#))
                                                                         (GHC.Types.I# 97#)
                                                                         (GHC.Types.I# 15#)
                                                                         (GHC.Types.I# 97#)
                                                                         (GHC.Types.I# 78#))
                                                                      GHC.Stack.Types.EmptyCallStack)
                                                                     `cast`
                                                                   (Sym (GHC.Classes.N:IP[0]
                                                                             <"callStack">_N
                                                                             <GHC.Stack.Types.CallStack>_N))
                                                                   (GHC.Base.augment
                                                                      @ GHC.Types.Char
                                                                      (\ @ b
                                                                         (c :: GHC.Types.Char
                                                                               -> b -> b)[OneShot]
                                                                         (n2 :: b)[OneShot] ->
                                                                       GHC.CString.unpackFoldrCString#
                                                                         @ b
                                                                         "Primitive.basicUnsafeNew: negative length: "#
                                                                         c
                                                                         n2)
                                                                      (GHC.Show.showSignedInt
                                                                         GHC.Show.$fShow(,)1
                                                                         n1
                                                                         (GHC.Types.[]
                                                                            @ GHC.Types.Char))) })
                                                           (\ (x1 :: Data.Vector.Primitive.Mutable.MVector
                                                                       (Control.Monad.Primitive.PrimState
                                                                          m)
                                                                       GHC.Word.Word32) ->
                                                            GHC.Base.return
                                                              @ m
                                                              $dMonad2
                                                              @ (Data.Vector.Unboxed.Base.MVector
                                                                   (Control.Monad.Primitive.PrimState
                                                                      m)
                                                                   GHC.Word.Word32)
                                                              x1
                                                                `cast`
                                                              (Trans
                                                                   (Sym (Data.Vector.Unboxed.Base.N:R:MVectorsWord32[0]
                                                                             <Control.Monad.Primitive.PrimState
                                                                                m>_N))
                                                                   (Sym (Data.Vector.Unboxed.Base.D:R:MVectorsWord320[0]
                                                                             <Control.Monad.Primitive.PrimState
                                                                                m>_N)))))
                                                        (\ (q :: Data.Vector.Unboxed.Base.MVector
                                                                   (Control.Monad.Primitive.PrimState
                                                                      m)
                                                                   GHC.Word.Word32) ->
                                                         GHC.Base.>>
                                                           @ m
                                                           $dMonad1
                                                           @ ()
                                                           @ (System.Random.MWC.Gen
                                                                (Control.Monad.Primitive.PrimState
                                                                   m))
                                                           (letrec {
                                                              go :: GHC.Types.Int -> m ()
                                                                {- Arity: 1 -}
                                                              = \ (i :: GHC.Types.Int) ->
                                                                case GHC.Classes.eqInt
                                                                       i
                                                                       (GHC.Types.I#
                                                                          256#) of wild4 {
                                                                  GHC.Types.False
                                                                  -> GHC.Base.>>
                                                                       @ m
                                                                       $dMonad1
                                                                       @ ()
                                                                       @ ()
                                                                       (case q `cast`
                                                                             (Trans
                                                                                  (Data.Vector.Unboxed.Base.D:R:MVectorsWord320[0]
                                                                                       <Control.Monad.Primitive.PrimState
                                                                                          m>_N)
                                                                                  (Data.Vector.Unboxed.Base.N:R:MVectorsWord32[0]
                                                                                       <Control.Monad.Primitive.PrimState
                                                                                          m>_N)) of wild5 { Data.Vector.Primitive.Mutable.MVector dt dt1 dt2 ->
                                                                        case i of wild6 { GHC.Types.I# y ->
                                                                        Control.Monad.Primitive.primitive
                                                                          @ m
                                                                          $dPrimMonad
                                                                          @ ()
                                                                          (\ (s# :: GHC.Prim.State#
                                                                                      (Control.Monad.Primitive.PrimState
                                                                                         m)) ->
                                                                           case GHC.Classes.geInt
                                                                                  wild6
                                                                                  fini
                                                                                    `cast`
                                                                                  (Data.Vector.Fusion.Util.N:Id[0]
                                                                                       <GHC.Types.Int>_R) of wild7 {
                                                                             GHC.Types.False
                                                                             -> case Data.Vector.Generic.unsafeIndex
                                                                                       @ Data.Vector.Vector
                                                                                       @ GHC.Word.Word32
                                                                                       (Data.Vector.$fVectorVectora
                                                                                          @ GHC.Word.Word32)
                                                                                       seed1
                                                                                       wild6 of wild8 { GHC.Word.W32# x# ->
                                                                                case GHC.Prim.writeWord32Array#
                                                                                       @ (Control.Monad.Primitive.PrimState
                                                                                            m)
                                                                                       dt2
                                                                                       (GHC.Prim.+#
                                                                                          dt
                                                                                          y)
                                                                                       x#
                                                                                       s# of s'# { DEFAULT ->
                                                                                (# s'#,
                                                                                   GHC.Tuple.() #) } }
                                                                             GHC.Types.True
                                                                             -> case GHC.Classes.eqInt
                                                                                       fini
                                                                                         `cast`
                                                                                       (Data.Vector.Fusion.Util.N:Id[0]
                                                                                            <GHC.Types.Int>_R)
                                                                                       (GHC.Types.I#
                                                                                          0#) of wild8 {
                                                                                  GHC.Types.False
                                                                                  -> case Data.Vector.Generic.unsafeIndex
                                                                                            @ Data.Vector.Unboxed.Base.Vector
                                                                                            @ GHC.Word.Word32
                                                                                            Data.Vector.Unboxed.Base.$fVectorVectorWord32
                                                                                            System.Random.MWC.defaultSeed
                                                                                            wild6 of wild9 { GHC.Word.W32# x# ->
                                                                                     case Data.Vector.Generic.unsafeIndex
                                                                                            @ Data.Vector.Vector
                                                                                            @ GHC.Word.Word32
                                                                                            (Data.Vector.$fVectorVectora
                                                                                               @ GHC.Word.Word32)
                                                                                            seed1
                                                                                            (GHC.Real.$fIntegralInt_$cmod
                                                                                               wild6
                                                                                               fini
                                                                                                 `cast`
                                                                                               (Data.Vector.Fusion.Util.N:Id[0]
                                                                                                    <GHC.Types.Int>_R)) of wild10 { GHC.Word.W32# y# ->
                                                                                     case GHC.Prim.writeWord32Array#
                                                                                            @ (Control.Monad.Primitive.PrimState
                                                                                                 m)
                                                                                            dt2
                                                                                            (GHC.Prim.+#
                                                                                               dt
                                                                                               y)
                                                                                            (GHC.Prim.xor#
                                                                                               x#
                                                                                               y#)
                                                                                            s# of s'# { DEFAULT ->
                                                                                     (# s'#,
                                                                                        GHC.Tuple.() #) } } }
                                                                                  GHC.Types.True
                                                                                  -> case Data.Vector.Generic.unsafeIndex
                                                                                            @ Data.Vector.Unboxed.Base.Vector
                                                                                            @ GHC.Word.Word32
                                                                                            Data.Vector.Unboxed.Base.$fVectorVectorWord32
                                                                                            System.Random.MWC.defaultSeed
                                                                                            wild6 of wild9 { GHC.Word.W32# x# ->
                                                                                     case GHC.Prim.writeWord32Array#
                                                                                            @ (Control.Monad.Primitive.PrimState
                                                                                                 m)
                                                                                            dt2
                                                                                            (GHC.Prim.+#
                                                                                               dt
                                                                                               y)
                                                                                            x#
                                                                                            s# of s'# { DEFAULT ->
                                                                                     (# s'#,
                                                                                        GHC.Tuple.() #) } } } }) } })
                                                                       (go
                                                                          (case i of wild5 { GHC.Types.I# x ->
                                                                           GHC.Types.I#
                                                                             (GHC.Prim.+# x 1#) }))
                                                                  GHC.Types.True
                                                                  -> GHC.Base.return
                                                                       @ m
                                                                       $dMonad1
                                                                       @ ()
                                                                       GHC.Tuple.() }
                                                            } in
                                                            go (GHC.Types.I# 0#))
                                                           (GHC.Base.>>
                                                              @ m
                                                              $dMonad1
                                                              @ ()
                                                              @ (System.Random.MWC.Gen
                                                                   (Control.Monad.Primitive.PrimState
                                                                      m))
                                                              (case GHC.Classes.eqInt
                                                                      fini
                                                                        `cast`
                                                                      (Data.Vector.Fusion.Util.N:Id[0]
                                                                           <GHC.Types.Int>_R)
                                                                      (GHC.Types.I# 258#) of wild4 {
                                                                 GHC.Types.False
                                                                 -> GHC.Base.>>
                                                                      @ m
                                                                      $dMonad1
                                                                      @ ()
                                                                      @ ()
                                                                      (case q `cast`
                                                                            (Trans
                                                                                 (Data.Vector.Unboxed.Base.D:R:MVectorsWord320[0]
                                                                                      <Control.Monad.Primitive.PrimState
                                                                                         m>_N)
                                                                                 (Data.Vector.Unboxed.Base.N:R:MVectorsWord32[0]
                                                                                      <Control.Monad.Primitive.PrimState
                                                                                         m>_N)) of wild5 { Data.Vector.Primitive.Mutable.MVector dt dt1 dt2 ->
                                                                       Control.Monad.Primitive.primitive
                                                                         @ m
                                                                         $dPrimMonad
                                                                         @ ()
                                                                         (\ (s# :: GHC.Prim.State#
                                                                                     (Control.Monad.Primitive.PrimState
                                                                                        m)) ->
                                                                          case GHC.Prim.writeWord32Array#
                                                                                 @ (Control.Monad.Primitive.PrimState
                                                                                      m)
                                                                                 dt2
                                                                                 (GHC.Prim.+#
                                                                                    dt
                                                                                    256#)
                                                                                 255##
                                                                                 s# of s'# { DEFAULT ->
                                                                          (# s'#,
                                                                             GHC.Tuple.() #) }) })
                                                                      (case q `cast`
                                                                            (Trans
                                                                                 (Data.Vector.Unboxed.Base.D:R:MVectorsWord320[0]
                                                                                      <Control.Monad.Primitive.PrimState
                                                                                         m>_N)
                                                                                 (Data.Vector.Unboxed.Base.N:R:MVectorsWord32[0]
                                                                                      <Control.Monad.Primitive.PrimState
                                                                                         m>_N)) of wild5 { Data.Vector.Primitive.Mutable.MVector dt dt1 dt2 ->
                                                                       Control.Monad.Primitive.primitive
                                                                         @ m
                                                                         $dPrimMonad
                                                                         @ ()
                                                                         (\ (s# :: GHC.Prim.State#
                                                                                     (Control.Monad.Primitive.PrimState
                                                                                        m)) ->
                                                                          case GHC.Prim.writeWord32Array#
                                                                                 @ (Control.Monad.Primitive.PrimState
                                                                                      m)
                                                                                 dt2
                                                                                 (GHC.Prim.+#
                                                                                    dt
                                                                                    257#)
                                                                                 362436##
                                                                                 s# of s'# { DEFAULT ->
                                                                          (# s'#,
                                                                             GHC.Tuple.() #) }) })
                                                                 GHC.Types.True
                                                                 -> GHC.Base.>>
                                                                      @ m
                                                                      $dMonad1
                                                                      @ ()
                                                                      @ ()
                                                                      (case q `cast`
                                                                            (Trans
                                                                                 (Data.Vector.Unboxed.Base.D:R:MVectorsWord320[0]
                                                                                      <Control.Monad.Primitive.PrimState
                                                                                         m>_N)
                                                                                 (Data.Vector.Unboxed.Base.N:R:MVectorsWord32[0]
                                                                                      <Control.Monad.Primitive.PrimState
                                                                                         m>_N)) of wild5 { Data.Vector.Primitive.Mutable.MVector dt dt1 dt2 ->
                                                                       Control.Monad.Primitive.primitive
                                                                         @ m
                                                                         $dPrimMonad
                                                                         @ ()
                                                                         (\ (s# :: GHC.Prim.State#
                                                                                     (Control.Monad.Primitive.PrimState
                                                                                        m)) ->
                                                                          case Data.Vector.Generic.unsafeIndex
                                                                                 @ Data.Vector.Vector
                                                                                 @ GHC.Word.Word32
                                                                                 (Data.Vector.$fVectorVectora
                                                                                    @ GHC.Word.Word32)
                                                                                 seed1
                                                                                 System.Random.MWC.ioff of wild6 { GHC.Word.W32# x# ->
                                                                          case GHC.Prim.writeWord32Array#
                                                                                 @ (Control.Monad.Primitive.PrimState
                                                                                      m)
                                                                                 dt2
                                                                                 (GHC.Prim.+#
                                                                                    dt
                                                                                    256#)
                                                                                 (GHC.Prim.and#
                                                                                    x#
                                                                                    255##)
                                                                                 s# of s'# { DEFAULT ->
                                                                          (# s'#,
                                                                             GHC.Tuple.() #) } }) })
                                                                      (case q `cast`
                                                                            (Trans
                                                                                 (Data.Vector.Unboxed.Base.D:R:MVectorsWord320[0]
                                                                                      <Control.Monad.Primitive.PrimState
                                                                                         m>_N)
                                                                                 (Data.Vector.Unboxed.Base.N:R:MVectorsWord32[0]
                                                                                      <Control.Monad.Primitive.PrimState
                                                                                         m>_N)) of wild5 { Data.Vector.Primitive.Mutable.MVector dt dt1 dt2 ->
                                                                       Control.Monad.Primitive.primitive
                                                                         @ m
                                                                         $dPrimMonad
                                                                         @ ()
                                                                         (\ (s# :: GHC.Prim.State#
                                                                                     (Control.Monad.Primitive.PrimState
                                                                                        m)) ->
                                                                          case Data.Vector.Generic.unsafeIndex
                                                                                 @ Data.Vector.Vector
                                                                                 @ GHC.Word.Word32
                                                                                 (Data.Vector.$fVectorVectora
                                                                                    @ GHC.Word.Word32)
                                                                                 seed1
                                                                                 System.Random.MWC.coff of wild6 { GHC.Word.W32# x# ->
                                                                          case GHC.Prim.writeWord32Array#
                                                                                 @ (Control.Monad.Primitive.PrimState
                                                                                      m)
                                                                                 dt2
                                                                                 (GHC.Prim.+#
                                                                                    dt
                                                                                    257#)
                                                                                 x#
                                                                                 s# of s'# { DEFAULT ->
                                                                          (# s'#,
                                                                             GHC.Tuple.() #) } }) }) })
                                                              (GHC.Base.return
                                                                 @ m
                                                                 $dMonad1
                                                                 @ (System.Random.MWC.Gen
                                                                      (Control.Monad.Primitive.PrimState
                                                                         m))
                                                                 q `cast`
                                                                 (Sym (System.Random.MWC.N:Gen[0]
                                                                           <Control.Monad.Primitive.PrimState
                                                                              m>_N))))))
                                                     (\ (gen :: System.Random.MWC.Gen
                                                                  (Control.Monad.Primitive.PrimState
                                                                     m)) ->
                                                      GHC.Base.>>=
                                                        @ m
                                                        $dMonad
                                                        @ (Data.Vector.Vector GHC.Types.Double)
                                                        @ (Multilinear.Parallel.Generic.Tensor
                                                             GHC.Types.Double)
                                                        (Data.Vector.Generic.unstreamM
                                                           @ m
                                                           @ Data.Vector.Vector
                                                           @ GHC.Types.Double
                                                           @ Data.Vector.Vector
                                                           $dMonad
                                                           (Data.Vector.$fVectorVectora
                                                              @ GHC.Types.Double)
                                                           (Data.Vector.Fusion.Bundle.Monadic.mapM
                                                              @ m
                                                              @ (m GHC.Types.Double)
                                                              @ GHC.Types.Double
                                                              @ Data.Vector.Vector
                                                              $dMonad
                                                              (GHC.Base.id @ (m GHC.Types.Double))
                                                              (Data.Vector.Fusion.Bundle.lift
                                                                 @ m
                                                                 @ Data.Vector.Vector
                                                                 @ (m GHC.Types.Double)
                                                                 $dMonad
                                                                 (Data.Vector.Fusion.Bundle.Monadic.generateM
                                                                    @ Data.Vector.Fusion.Util.Id
                                                                    @ (m GHC.Types.Double)
                                                                    @ Data.Vector.Vector
                                                                    Data.Vector.Fusion.Util.$fMonadId
                                                                    s
                                                                    (\ (x :: GHC.Types.Int) ->
                                                                     Statistics.Distribution.genContVar
                                                                       @ d
                                                                       $dContGen
                                                                       @ m
                                                                       $dPrimMonad
                                                                       distr
                                                                       gen)
                                                                      `cast`
                                                                    (<GHC.Types.Int>_R
                                                                     ->_R Sym (Data.Vector.Fusion.Util.N:Id[0]
                                                                                   <m GHC.Types.Double>_R))))))
                                                        (\ (component :: Data.Vector.Vector
                                                                           GHC.Types.Double) ->
                                                         GHC.Base.return
                                                           @ m
                                                           $dMonad
                                                           @ (Multilinear.Parallel.Generic.Tensor
                                                                GHC.Types.Double)
                                                           (Multilinear.Parallel.Generic.SimpleFinite
                                                              @ GHC.Types.Double
                                                              (Multilinear.Index.Finite.Contravariant
                                                                 s
                                                                 (GHC.Base.build
                                                                    @ GHC.Types.Char
                                                                    (\ @ a
                                                                       (c :: GHC.Types.Char
                                                                             -> a -> a)[OneShot]
                                                                       (n :: a)[OneShot] ->
                                                                     c d1 n)))
                                                              component)))
                                                : ipv ipv5 -> fail GHC.Prim.void# } }
                                      : ipv ipv5 -> fail GHC.Prim.void# } }) -}
42dd107bf51c44caced9133045a6e877
  randomInt ::
    Statistics.Distribution.DiscreteGen d =>
    GHC.Base.String
    -> [GHC.Types.Int]
    -> d
    -> GHC.Types.IO (Multilinear.Parallel.Generic.Tensor GHC.Types.Int)
  {- Arity: 5,
     Strictness: <L,U(A,A,C(C1(C1(U))))><S,1*U><L,U><L,U><S,U>,
     Inline: (sat-args=3),
     Unfolding(loop-breaker): InlineRule (4, False, False)
                              (\ @ d
                                 ($dDiscreteGen :: Statistics.Distribution.DiscreteGen d)
                                 (ds :: [GHC.Types.Char])
                                 (ds1 :: [GHC.Types.Int])
                                 (distr :: d) ->
                               case ds of wild {
                                 []
                                 -> (\ (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                                     (# s,
                                        Multilinear.Parallel.Generic.Err
                                          @ GHC.Types.Int
                                          Multilinear.Parallel.NVector.invalidIndices #))
                                      `cast`
                                    (Sym (GHC.Types.N:IO[0]
                                              <Multilinear.Parallel.Generic.Tensor
                                                 GHC.Types.Int>_R))
                                 : d1 ds2
                                 -> let {
                                      fail :: GHC.Prim.Void#
                                              -> GHC.Types.IO
                                                   (Multilinear.Parallel.Generic.Tensor
                                                      GHC.Types.Int)
                                        <join 1> {- Arity: 1 -}
                                      = \ (ds3 :: GHC.Prim.Void#)[OneShot] ->
                                        case ds1 of wild1 {
                                          []
                                          -> (\ (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                                              (# s,
                                                 Multilinear.Parallel.Generic.Err
                                                   @ GHC.Types.Int
                                                   Multilinear.Parallel.NVector.invalidIndices #))
                                               `cast`
                                             (Sym (GHC.Types.N:IO[0]
                                                       <Multilinear.Parallel.Generic.Tensor
                                                          GHC.Types.Int>_R))
                                          : s size
                                          -> (\ (s1 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                                              case (Data.Vector.Generic.unstreamPrimM
                                                      @ GHC.Types.IO
                                                      @ Data.Vector.Vector
                                                      @ (Multilinear.Parallel.Generic.Tensor
                                                           GHC.Types.Int)
                                                      @ Data.Vector.Vector
                                                      Control.Monad.Primitive.$fPrimMonadIO
                                                      (Data.Vector.$fVectorVectora
                                                         @ (Multilinear.Parallel.Generic.Tensor
                                                              GHC.Types.Int))
                                                      (Data.Vector.Fusion.Bundle.Monadic.mapM
                                                         @ GHC.Types.IO
                                                         @ (GHC.Types.IO
                                                              (Multilinear.Parallel.Generic.Tensor
                                                                 GHC.Types.Int))
                                                         @ (Multilinear.Parallel.Generic.Tensor
                                                              GHC.Types.Int)
                                                         @ Data.Vector.Vector
                                                         GHC.Base.$fMonadIO
                                                         (GHC.Base.id
                                                            @ (GHC.Types.IO
                                                                 (Multilinear.Parallel.Generic.Tensor
                                                                    GHC.Types.Int)))
                                                         (Data.Vector.Fusion.Bundle.lift
                                                            @ GHC.Types.IO
                                                            @ Data.Vector.Vector
                                                            @ (GHC.Types.IO
                                                                 (Multilinear.Parallel.Generic.Tensor
                                                                    GHC.Types.Int))
                                                            GHC.Base.$fMonadIO
                                                            (Data.Vector.Fusion.Bundle.Monadic.generateM
                                                               @ Data.Vector.Fusion.Util.Id
                                                               @ (GHC.Types.IO
                                                                    (Multilinear.Parallel.Generic.Tensor
                                                                       GHC.Types.Int))
                                                               @ Data.Vector.Vector
                                                               Data.Vector.Fusion.Util.$fMonadId
                                                               s
                                                               (\ (x :: GHC.Types.Int) ->
                                                                Multilinear.Parallel.NVector.randomInt
                                                                  @ d
                                                                  $dDiscreteGen
                                                                  ds2
                                                                  size
                                                                  distr)
                                                                 `cast`
                                                               (<GHC.Types.Int>_R
                                                                ->_R Sym (Data.Vector.Fusion.Util.N:Id[0]
                                                                              <GHC.Types.IO
                                                                                 (Multilinear.Parallel.Generic.Tensor
                                                                                    GHC.Types.Int)>_R))))))
                                                     `cast`
                                                   (GHC.Types.N:IO[0]
                                                        <Data.Vector.Vector
                                                           (Multilinear.Parallel.Generic.Tensor
                                                              GHC.Types.Int)>_R)
                                                     s1 of ds4 { (#,#) ipv ipv5 ->
                                              (# ipv,
                                                 Multilinear.Parallel.Generic.FiniteTensor
                                                   @ GHC.Types.Int
                                                   (Multilinear.Index.Finite.Contravariant
                                                      s
                                                      (GHC.Base.build
                                                         @ GHC.Types.Char
                                                         (\ @ a
                                                            (c :: GHC.Types.Char -> a -> a)[OneShot]
                                                            (n :: a)[OneShot] ->
                                                          c d1 n)))
                                                   ipv5 #) })
                                               `cast`
                                             (Sym (GHC.Types.N:IO[0]
                                                       <Multilinear.Parallel.Generic.Tensor
                                                          GHC.Types.Int>_R)) }
                                    } in
                                    case ds2 of wild1 {
                                      []
                                      -> case ds1 of wild2 {
                                           [] -> fail GHC.Prim.void#
                                           : s ds3
                                           -> case ds3 of wild3 {
                                                []
                                                -> (\ (s1 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                                                    case System.Random.MWC.createSystemRandom_$swithSystemRandom
                                                           @ (System.Random.MWC.Gen
                                                                GHC.Prim.RealWorld)
                                                           (GHC.Base.$fApplicativeIO4
                                                              @ (System.Random.MWC.Gen
                                                                   GHC.Prim.RealWorld))
                                                             `cast`
                                                           (Trans
                                                                (<System.Random.MWC.Gen
                                                                    GHC.Prim.RealWorld>_R
                                                                 ->_R Sym (GHC.Types.N:IO[0]
                                                                               <System.Random.MWC.Gen
                                                                                  GHC.Prim.RealWorld>_R))
                                                                (Trans
                                                                     ((System.Random.MWC.Gen
                                                                         (Sym (Control.Monad.Primitive.D:R:PrimStateIO[0])))_R
                                                                      ->_R (GHC.Types.IO
                                                                              (System.Random.MWC.Gen
                                                                                 (Sym (Control.Monad.Primitive.D:R:PrimStateIO[0])))_R)_R)
                                                                     (<System.Random.MWC.Gen
                                                                         (Control.Monad.Primitive.PrimState
                                                                            GHC.Types.IO)>_R
                                                                      ->_R (GHC.Types.IO
                                                                              (System.Random.MWC.Gen
                                                                                 (Control.Monad.Primitive.D:R:PrimStateIO[0]))_R)_R)))
                                                           s1 of ds4 { (#,#) ipv ipv5 ->
                                                    case (Data.Vector.Generic.unstreamPrimM
                                                            @ GHC.Types.IO
                                                            @ Data.Vector.Vector
                                                            @ GHC.Types.Int
                                                            @ Data.Vector.Vector
                                                            Control.Monad.Primitive.$fPrimMonadIO
                                                            (Data.Vector.$fVectorVectora
                                                               @ GHC.Types.Int)
                                                            (Data.Vector.Fusion.Bundle.Monadic.mapM
                                                               @ GHC.Types.IO
                                                               @ (GHC.Types.IO GHC.Types.Int)
                                                               @ GHC.Types.Int
                                                               @ Data.Vector.Vector
                                                               GHC.Base.$fMonadIO
                                                               (GHC.Base.id
                                                                  @ (GHC.Types.IO GHC.Types.Int))
                                                               (Data.Vector.Fusion.Bundle.lift
                                                                  @ GHC.Types.IO
                                                                  @ Data.Vector.Vector
                                                                  @ (GHC.Types.IO GHC.Types.Int)
                                                                  GHC.Base.$fMonadIO
                                                                  (Data.Vector.Fusion.Bundle.Monadic.generateM
                                                                     @ Data.Vector.Fusion.Util.Id
                                                                     @ (GHC.Types.IO GHC.Types.Int)
                                                                     @ Data.Vector.Vector
                                                                     Data.Vector.Fusion.Util.$fMonadId
                                                                     s
                                                                     (\ (x :: GHC.Types.Int) ->
                                                                      Statistics.Distribution.genDiscreteVar
                                                                        @ d
                                                                        $dDiscreteGen
                                                                        @ GHC.Types.IO
                                                                        Control.Monad.Primitive.$fPrimMonadIO
                                                                        distr
                                                                        ipv5
                                                                          `cast`
                                                                        (System.Random.MWC.Gen
                                                                           (Sym (Control.Monad.Primitive.D:R:PrimStateIO[0])))_R)
                                                                       `cast`
                                                                     (<GHC.Types.Int>_R
                                                                      ->_R Sym (Data.Vector.Fusion.Util.N:Id[0]
                                                                                    <GHC.Types.IO
                                                                                       GHC.Types.Int>_R))))))
                                                           `cast`
                                                         (GHC.Types.N:IO[0]
                                                              <Data.Vector.Vector GHC.Types.Int>_R)
                                                           ipv of ds5 { (#,#) ipv6 ipv7 ->
                                                    (# ipv6,
                                                       Multilinear.Parallel.Generic.SimpleFinite
                                                         @ GHC.Types.Int
                                                         (Multilinear.Index.Finite.Contravariant
                                                            s
                                                            (GHC.Base.build
                                                               @ GHC.Types.Char
                                                               (\ @ a
                                                                  (c :: GHC.Types.Char
                                                                        -> a -> a)[OneShot]
                                                                  (n :: a)[OneShot] ->
                                                                c d1 n)))
                                                         ipv7 #) } })
                                                     `cast`
                                                   (Sym (GHC.Types.N:IO[0]
                                                             <Multilinear.Parallel.Generic.Tensor
                                                                GHC.Types.Int>_R))
                                                : ipv ipv5 -> fail GHC.Prim.void# } }
                                      : ipv ipv5 -> fail GHC.Prim.void# } }) -}
05bcccd6df791d09e0d38bf5ba7ce53d
  randomIntSeed ::
    (Statistics.Distribution.DiscreteGen d, GHC.Real.Integral i2,
     Control.Monad.Primitive.PrimMonad m) =>
    GHC.Base.String
    -> [GHC.Types.Int]
    -> d
    -> i2
    -> m (Multilinear.Parallel.Generic.Tensor GHC.Types.Int)
  {- Arity: 7,
     Strictness: <L,U(A,A,C(C1(C1(U))))><L,1*U(A,A,A,A,A,A,A,A,1*C1(U))><S(SL),U(U(U,U,U,U,U),U)><S,1*U><L,U><L,U><L,U>,
     Inline: (sat-args=4),
     Unfolding(loop-breaker): InlineRule (7, False, False)
                              (\ @ d
                                 @ i2
                                 @ m :: * -> *
                                 ($dDiscreteGen :: Statistics.Distribution.DiscreteGen d)
                                 ($dIntegral :: GHC.Real.Integral i2)
                                 ($dPrimMonad :: Control.Monad.Primitive.PrimMonad m) ->
                               let {
                                 $dMonad :: GHC.Base.Monad m
                                 = Control.Monad.Primitive.$p1PrimMonad @ m $dPrimMonad
                               } in
                               \ (ds :: [GHC.Types.Char])
                                 (ds1 :: [GHC.Types.Int])
                                 (distr :: d)
                                 (seed :: i2) ->
                               case ds of wild {
                                 []
                                 -> GHC.Base.return
                                      @ m
                                      $dMonad
                                      @ (Multilinear.Parallel.Generic.Tensor GHC.Types.Int)
                                      (Multilinear.Parallel.Generic.Err
                                         @ GHC.Types.Int
                                         Multilinear.Parallel.NVector.invalidIndices)
                                 : d1 ds2
                                 -> let {
                                      fail :: GHC.Prim.Void#
                                              -> m (Multilinear.Parallel.Generic.Tensor
                                                      GHC.Types.Int)
                                        <join 1> {- Arity: 1 -}
                                      = \ (ds3 :: GHC.Prim.Void#)[OneShot] ->
                                        case ds1 of wild1 {
                                          []
                                          -> GHC.Base.return
                                               @ m
                                               $dMonad
                                               @ (Multilinear.Parallel.Generic.Tensor GHC.Types.Int)
                                               (Multilinear.Parallel.Generic.Err
                                                  @ GHC.Types.Int
                                                  Multilinear.Parallel.NVector.invalidIndices)
                                          : s size
                                          -> GHC.Base.>>=
                                               @ m
                                               $dMonad
                                               @ (Data.Vector.Vector
                                                    (Multilinear.Parallel.Generic.Tensor
                                                       GHC.Types.Int))
                                               @ (Multilinear.Parallel.Generic.Tensor GHC.Types.Int)
                                               (Data.Vector.Generic.unstreamM
                                                  @ m
                                                  @ Data.Vector.Vector
                                                  @ (Multilinear.Parallel.Generic.Tensor
                                                       GHC.Types.Int)
                                                  @ Data.Vector.Vector
                                                  $dMonad
                                                  (Data.Vector.$fVectorVectora
                                                     @ (Multilinear.Parallel.Generic.Tensor
                                                          GHC.Types.Int))
                                                  (Data.Vector.Fusion.Bundle.Monadic.mapM
                                                     @ m
                                                     @ (m (Multilinear.Parallel.Generic.Tensor
                                                             GHC.Types.Int))
                                                     @ (Multilinear.Parallel.Generic.Tensor
                                                          GHC.Types.Int)
                                                     @ Data.Vector.Vector
                                                     $dMonad
                                                     (GHC.Base.id
                                                        @ (m (Multilinear.Parallel.Generic.Tensor
                                                                GHC.Types.Int)))
                                                     (Data.Vector.Fusion.Bundle.lift
                                                        @ m
                                                        @ Data.Vector.Vector
                                                        @ (m (Multilinear.Parallel.Generic.Tensor
                                                                GHC.Types.Int))
                                                        $dMonad
                                                        (Data.Vector.Fusion.Bundle.Monadic.generateM
                                                           @ Data.Vector.Fusion.Util.Id
                                                           @ (m (Multilinear.Parallel.Generic.Tensor
                                                                   GHC.Types.Int))
                                                           @ Data.Vector.Vector
                                                           Data.Vector.Fusion.Util.$fMonadId
                                                           s
                                                           (\ (x :: GHC.Types.Int) ->
                                                            Multilinear.Parallel.NVector.randomIntSeed
                                                              @ d
                                                              @ i2
                                                              @ m
                                                              $dDiscreteGen
                                                              $dIntegral
                                                              $dPrimMonad
                                                              ds2
                                                              size
                                                              distr
                                                              seed)
                                                             `cast`
                                                           (<GHC.Types.Int>_R
                                                            ->_R Sym (Data.Vector.Fusion.Util.N:Id[0]
                                                                          <m (Multilinear.Parallel.Generic.Tensor
                                                                                GHC.Types.Int)>_R))))))
                                               (\ (tensors :: Data.Vector.Vector
                                                                (Multilinear.Parallel.Generic.Tensor
                                                                   GHC.Types.Int)) ->
                                                GHC.Base.return
                                                  @ m
                                                  $dMonad
                                                  @ (Multilinear.Parallel.Generic.Tensor
                                                       GHC.Types.Int)
                                                  (Multilinear.Parallel.Generic.FiniteTensor
                                                     @ GHC.Types.Int
                                                     (Multilinear.Index.Finite.Contravariant
                                                        s
                                                        (GHC.Base.build
                                                           @ GHC.Types.Char
                                                           (\ @ a
                                                              (c :: GHC.Types.Char
                                                                    -> a -> a)[OneShot]
                                                              (n :: a)[OneShot] ->
                                                            c d1 n)))
                                                     tensors)) }
                                    } in
                                    case ds2 of wild1 {
                                      []
                                      -> case ds1 of wild2 {
                                           [] -> fail GHC.Prim.void#
                                           : s ds3
                                           -> case ds3 of wild3 {
                                                []
                                                -> GHC.Base.>>=
                                                     @ m
                                                     $dMonad
                                                     @ (System.Random.MWC.Gen
                                                          (Control.Monad.Primitive.PrimState m))
                                                     @ (Multilinear.Parallel.Generic.Tensor
                                                          GHC.Types.Int)
                                                     (let {
                                                        $dMonad1 :: GHC.Base.Monad m
                                                        = Control.Monad.Primitive.$p1PrimMonad
                                                            @ m
                                                            $dPrimMonad
                                                      } in
                                                      let {
                                                        seed1 :: Data.Vector.Vector GHC.Word.Word32
                                                        = Data.Vector.Generic.new
                                                            @ Data.Vector.Vector
                                                            @ GHC.Word.Word32
                                                            (Data.Vector.$fVectorVectora
                                                               @ GHC.Word.Word32)
                                                            (Data.Vector.Generic.New.unstream
                                                               @ Data.Vector.Vector
                                                               @ GHC.Word.Word32
                                                               (Data.Vector.$fVectorVectora
                                                                  @ GHC.Word.Word32)
                                                               (Data.Vector.Fusion.Bundle.Monadic.singleton
                                                                  @ Data.Vector.Fusion.Util.Id
                                                                  @ GHC.Word.Word32
                                                                  @ Data.Vector.Vector
                                                                  Data.Vector.Fusion.Util.$fMonadId
                                                                  (case GHC.Real.fromIntegral
                                                                          @ i2
                                                                          @ GHC.Types.Word
                                                                          $dIntegral
                                                                          GHC.Num.$fNumWord
                                                                          seed of wild4 { GHC.Types.W# x# ->
                                                                   GHC.Word.W32#
                                                                     (GHC.Prim.narrow32Word#
                                                                        x#) })))
                                                      } in
                                                      let {
                                                        fini :: Data.Vector.Fusion.Util.Id
                                                                  GHC.Types.Int
                                                        = Data.Vector.Fusion.Bundle.Monadic.length
                                                            @ Data.Vector.Fusion.Util.Id
                                                            @ Data.Vector.Vector
                                                            @ GHC.Word.Word32
                                                            Data.Vector.Fusion.Util.$fMonadId
                                                            (Data.Vector.Fusion.Bundle.Monadic.fromVector
                                                               @ Data.Vector.Fusion.Util.Id
                                                               @ Data.Vector.Vector
                                                               @ GHC.Word.Word32
                                                               Data.Vector.Fusion.Util.$fMonadId
                                                               (Data.Vector.$fVectorVectora
                                                                  @ GHC.Word.Word32)
                                                               seed1)
                                                      } in
                                                      GHC.Base.>>=
                                                        @ m
                                                        $dMonad1
                                                        @ (Data.Vector.Unboxed.Base.MVector
                                                             (Control.Monad.Primitive.PrimState m)
                                                             GHC.Word.Word32)
                                                        @ (System.Random.MWC.Gen
                                                             (Control.Monad.Primitive.PrimState m))
                                                        (let {
                                                           $dMonad2 :: GHC.Base.Monad m
                                                           = Control.Monad.Primitive.$p1PrimMonad
                                                               @ m
                                                               $dPrimMonad
                                                         } in
                                                         let {
                                                           n1 :: GHC.Types.Int = GHC.Types.I# 258#
                                                         } in
                                                         GHC.Base.>>=
                                                           @ m
                                                           $dMonad2
                                                           @ (Data.Vector.Primitive.Mutable.MVector
                                                                (Control.Monad.Primitive.PrimState
                                                                   m)
                                                                GHC.Word.Word32)
                                                           @ (Data.Vector.Unboxed.Base.MVector
                                                                (Control.Monad.Primitive.PrimState
                                                                   m)
                                                                GHC.Word.Word32)
                                                           (let {
                                                              $dMonad3 :: GHC.Base.Monad m
                                                              = Control.Monad.Primitive.$p1PrimMonad
                                                                  @ m
                                                                  $dPrimMonad
                                                            } in
                                                            case GHC.Classes.ltInt
                                                                   n1
                                                                   (GHC.Types.I# 0#) of wild4 {
                                                              GHC.Types.False
                                                              -> case GHC.Classes.gtInt
                                                                        n1
                                                                        (GHC.Real.$fIntegralInt_$cdiv
                                                                           GHC.Base.maxInt
                                                                           (GHC.Types.I#
                                                                              4#)) of wild5 {
                                                                   GHC.Types.False
                                                                   -> let {
                                                                        f :: GHC.Types.Int
                                                                        = GHC.Types.I# 0#
                                                                      } in
                                                                      GHC.Base.>>=
                                                                        @ m
                                                                        $dMonad3
                                                                        @ (Data.Primitive.ByteArray.MutableByteArray
                                                                             (Control.Monad.Primitive.PrimState
                                                                                m))
                                                                        @ (Data.Vector.Primitive.Mutable.MVector
                                                                             (Control.Monad.Primitive.PrimState
                                                                                m)
                                                                             GHC.Word.Word32)
                                                                        (Control.Monad.Primitive.primitive
                                                                           @ m
                                                                           $dPrimMonad
                                                                           @ (Data.Primitive.ByteArray.MutableByteArray
                                                                                (Control.Monad.Primitive.PrimState
                                                                                   m))
                                                                           (\ (s# :: GHC.Prim.State#
                                                                                       (Control.Monad.Primitive.PrimState
                                                                                          m)) ->
                                                                            case GHC.Prim.newByteArray#
                                                                                   @ (Control.Monad.Primitive.PrimState
                                                                                        m)
                                                                                   1032#
                                                                                   s# of ds4 { (#,#) ipv ipv5 ->
                                                                            (# ipv,
                                                                               Data.Primitive.ByteArray.MutableByteArray
                                                                                 @ (Control.Monad.Primitive.PrimState
                                                                                      m)
                                                                                 ipv5 #) }))
                                                                        (\ (x1 :: Data.Primitive.ByteArray.MutableByteArray
                                                                                    (Control.Monad.Primitive.PrimState
                                                                                       m)) ->
                                                                         GHC.Base.return
                                                                           @ m
                                                                           $dMonad3
                                                                           @ (Data.Vector.Primitive.Mutable.MVector
                                                                                (Control.Monad.Primitive.PrimState
                                                                                   m)
                                                                                GHC.Word.Word32)
                                                                           (Data.Vector.Primitive.Mutable.$WMVector
                                                                              @ (Control.Monad.Primitive.PrimState
                                                                                   m)
                                                                              @ GHC.Word.Word32
                                                                              f
                                                                              n1
                                                                              x1))
                                                                   GHC.Types.True
                                                                   -> GHC.Err.error
                                                                        @ 'GHC.Types.LiftedRep
                                                                        @ (m (Data.Vector.Primitive.Mutable.MVector
                                                                                (Control.Monad.Primitive.PrimState
                                                                                   m)
                                                                                GHC.Word.Word32))
                                                                        (GHC.Stack.Types.PushCallStack
                                                                           (GHC.Base.build
                                                                              @ GHC.Types.Char
                                                                              (\ @ b ->
                                                                               GHC.CString.unpackFoldrCString#
                                                                                 @ b
                                                                                 "error"#))
                                                                           (GHC.Stack.Types.SrcLoc
                                                                              (GHC.Base.build
                                                                                 @ GHC.Types.Char
                                                                                 (\ @ b ->
                                                                                  GHC.CString.unpackFoldrCString#
                                                                                    @ b
                                                                                    "vector-0.12.0.1-JlawpRjIcMJIYPJVsWriIA"#))
                                                                              (GHC.Base.build
                                                                                 @ GHC.Types.Char
                                                                                 (\ @ b ->
                                                                                  GHC.CString.unpackFoldrCString#
                                                                                    @ b
                                                                                    "Data.Vector.Primitive.Mutable"#))
                                                                              (GHC.Base.build
                                                                                 @ GHC.Types.Char
                                                                                 (\ @ b ->
                                                                                  GHC.CString.unpackFoldrCString#
                                                                                    @ b
                                                                                    ".\\Data\\Vector\\Primitive\\Mutable.hs"#))
                                                                              (GHC.Types.I# 98#)
                                                                              (GHC.Types.I# 16#)
                                                                              (GHC.Types.I# 98#)
                                                                              (GHC.Types.I# 79#))
                                                                           GHC.Stack.Types.EmptyCallStack)
                                                                          `cast`
                                                                        (Sym (GHC.Classes.N:IP[0]
                                                                                  <"callStack">_N
                                                                                  <GHC.Stack.Types.CallStack>_N))
                                                                        (GHC.Base.augment
                                                                           @ GHC.Types.Char
                                                                           (\ @ b
                                                                              (c :: GHC.Types.Char
                                                                                    -> b
                                                                                    -> b)[OneShot]
                                                                              (n2 :: b)[OneShot] ->
                                                                            GHC.CString.unpackFoldrCString#
                                                                              @ b
                                                                              "Primitive.basicUnsafeNew: length to large: "#
                                                                              c
                                                                              n2)
                                                                           (GHC.Show.showSignedInt
                                                                              GHC.Show.$fShow(,)1
                                                                              n1
                                                                              (GHC.Types.[]
                                                                                 @ GHC.Types.Char))) }
                                                              GHC.Types.True
                                                              -> GHC.Err.error
                                                                   @ 'GHC.Types.LiftedRep
                                                                   @ (m (Data.Vector.Primitive.Mutable.MVector
                                                                           (Control.Monad.Primitive.PrimState
                                                                              m)
                                                                           GHC.Word.Word32))
                                                                   (GHC.Stack.Types.PushCallStack
                                                                      (GHC.Base.build
                                                                         @ GHC.Types.Char
                                                                         (\ @ b ->
                                                                          GHC.CString.unpackFoldrCString#
                                                                            @ b
                                                                            "error"#))
                                                                      (GHC.Stack.Types.SrcLoc
                                                                         (GHC.Base.build
                                                                            @ GHC.Types.Char
                                                                            (\ @ b ->
                                                                             GHC.CString.unpackFoldrCString#
                                                                               @ b
                                                                               "vector-0.12.0.1-JlawpRjIcMJIYPJVsWriIA"#))
                                                                         (GHC.Base.build
                                                                            @ GHC.Types.Char
                                                                            (\ @ b ->
                                                                             GHC.CString.unpackFoldrCString#
                                                                               @ b
                                                                               "Data.Vector.Primitive.Mutable"#))
                                                                         (GHC.Base.build
                                                                            @ GHC.Types.Char
                                                                            (\ @ b ->
                                                                             GHC.CString.unpackFoldrCString#
                                                                               @ b
                                                                               ".\\Data\\Vector\\Primitive\\Mutable.hs"#))
                                                                         (GHC.Types.I# 97#)
                                                                         (GHC.Types.I# 15#)
                                                                         (GHC.Types.I# 97#)
                                                                         (GHC.Types.I# 78#))
                                                                      GHC.Stack.Types.EmptyCallStack)
                                                                     `cast`
                                                                   (Sym (GHC.Classes.N:IP[0]
                                                                             <"callStack">_N
                                                                             <GHC.Stack.Types.CallStack>_N))
                                                                   (GHC.Base.augment
                                                                      @ GHC.Types.Char
                                                                      (\ @ b
                                                                         (c :: GHC.Types.Char
                                                                               -> b -> b)[OneShot]
                                                                         (n2 :: b)[OneShot] ->
                                                                       GHC.CString.unpackFoldrCString#
                                                                         @ b
                                                                         "Primitive.basicUnsafeNew: negative length: "#
                                                                         c
                                                                         n2)
                                                                      (GHC.Show.showSignedInt
                                                                         GHC.Show.$fShow(,)1
                                                                         n1
                                                                         (GHC.Types.[]
                                                                            @ GHC.Types.Char))) })
                                                           (\ (x1 :: Data.Vector.Primitive.Mutable.MVector
                                                                       (Control.Monad.Primitive.PrimState
                                                                          m)
                                                                       GHC.Word.Word32) ->
                                                            GHC.Base.return
                                                              @ m
                                                              $dMonad2
                                                              @ (Data.Vector.Unboxed.Base.MVector
                                                                   (Control.Monad.Primitive.PrimState
                                                                      m)
                                                                   GHC.Word.Word32)
                                                              x1
                                                                `cast`
                                                              (Trans
                                                                   (Sym (Data.Vector.Unboxed.Base.N:R:MVectorsWord32[0]
                                                                             <Control.Monad.Primitive.PrimState
                                                                                m>_N))
                                                                   (Sym (Data.Vector.Unboxed.Base.D:R:MVectorsWord320[0]
                                                                             <Control.Monad.Primitive.PrimState
                                                                                m>_N)))))
                                                        (\ (q :: Data.Vector.Unboxed.Base.MVector
                                                                   (Control.Monad.Primitive.PrimState
                                                                      m)
                                                                   GHC.Word.Word32) ->
                                                         GHC.Base.>>
                                                           @ m
                                                           $dMonad1
                                                           @ ()
                                                           @ (System.Random.MWC.Gen
                                                                (Control.Monad.Primitive.PrimState
                                                                   m))
                                                           (letrec {
                                                              go :: GHC.Types.Int -> m ()
                                                                {- Arity: 1 -}
                                                              = \ (i :: GHC.Types.Int) ->
                                                                case GHC.Classes.eqInt
                                                                       i
                                                                       (GHC.Types.I#
                                                                          256#) of wild4 {
                                                                  GHC.Types.False
                                                                  -> GHC.Base.>>
                                                                       @ m
                                                                       $dMonad1
                                                                       @ ()
                                                                       @ ()
                                                                       (case q `cast`
                                                                             (Trans
                                                                                  (Data.Vector.Unboxed.Base.D:R:MVectorsWord320[0]
                                                                                       <Control.Monad.Primitive.PrimState
                                                                                          m>_N)
                                                                                  (Data.Vector.Unboxed.Base.N:R:MVectorsWord32[0]
                                                                                       <Control.Monad.Primitive.PrimState
                                                                                          m>_N)) of wild5 { Data.Vector.Primitive.Mutable.MVector dt dt1 dt2 ->
                                                                        case i of wild6 { GHC.Types.I# y ->
                                                                        Control.Monad.Primitive.primitive
                                                                          @ m
                                                                          $dPrimMonad
                                                                          @ ()
                                                                          (\ (s# :: GHC.Prim.State#
                                                                                      (Control.Monad.Primitive.PrimState
                                                                                         m)) ->
                                                                           case GHC.Classes.geInt
                                                                                  wild6
                                                                                  fini
                                                                                    `cast`
                                                                                  (Data.Vector.Fusion.Util.N:Id[0]
                                                                                       <GHC.Types.Int>_R) of wild7 {
                                                                             GHC.Types.False
                                                                             -> case Data.Vector.Generic.unsafeIndex
                                                                                       @ Data.Vector.Vector
                                                                                       @ GHC.Word.Word32
                                                                                       (Data.Vector.$fVectorVectora
                                                                                          @ GHC.Word.Word32)
                                                                                       seed1
                                                                                       wild6 of wild8 { GHC.Word.W32# x# ->
                                                                                case GHC.Prim.writeWord32Array#
                                                                                       @ (Control.Monad.Primitive.PrimState
                                                                                            m)
                                                                                       dt2
                                                                                       (GHC.Prim.+#
                                                                                          dt
                                                                                          y)
                                                                                       x#
                                                                                       s# of s'# { DEFAULT ->
                                                                                (# s'#,
                                                                                   GHC.Tuple.() #) } }
                                                                             GHC.Types.True
                                                                             -> case GHC.Classes.eqInt
                                                                                       fini
                                                                                         `cast`
                                                                                       (Data.Vector.Fusion.Util.N:Id[0]
                                                                                            <GHC.Types.Int>_R)
                                                                                       (GHC.Types.I#
                                                                                          0#) of wild8 {
                                                                                  GHC.Types.False
                                                                                  -> case Data.Vector.Generic.unsafeIndex
                                                                                            @ Data.Vector.Unboxed.Base.Vector
                                                                                            @ GHC.Word.Word32
                                                                                            Data.Vector.Unboxed.Base.$fVectorVectorWord32
                                                                                            System.Random.MWC.defaultSeed
                                                                                            wild6 of wild9 { GHC.Word.W32# x# ->
                                                                                     case Data.Vector.Generic.unsafeIndex
                                                                                            @ Data.Vector.Vector
                                                                                            @ GHC.Word.Word32
                                                                                            (Data.Vector.$fVectorVectora
                                                                                               @ GHC.Word.Word32)
                                                                                            seed1
                                                                                            (GHC.Real.$fIntegralInt_$cmod
                                                                                               wild6
                                                                                               fini
                                                                                                 `cast`
                                                                                               (Data.Vector.Fusion.Util.N:Id[0]
                                                                                                    <GHC.Types.Int>_R)) of wild10 { GHC.Word.W32# y# ->
                                                                                     case GHC.Prim.writeWord32Array#
                                                                                            @ (Control.Monad.Primitive.PrimState
                                                                                                 m)
                                                                                            dt2
                                                                                            (GHC.Prim.+#
                                                                                               dt
                                                                                               y)
                                                                                            (GHC.Prim.xor#
                                                                                               x#
                                                                                               y#)
                                                                                            s# of s'# { DEFAULT ->
                                                                                     (# s'#,
                                                                                        GHC.Tuple.() #) } } }
                                                                                  GHC.Types.True
                                                                                  -> case Data.Vector.Generic.unsafeIndex
                                                                                            @ Data.Vector.Unboxed.Base.Vector
                                                                                            @ GHC.Word.Word32
                                                                                            Data.Vector.Unboxed.Base.$fVectorVectorWord32
                                                                                            System.Random.MWC.defaultSeed
                                                                                            wild6 of wild9 { GHC.Word.W32# x# ->
                                                                                     case GHC.Prim.writeWord32Array#
                                                                                            @ (Control.Monad.Primitive.PrimState
                                                                                                 m)
                                                                                            dt2
                                                                                            (GHC.Prim.+#
                                                                                               dt
                                                                                               y)
                                                                                            x#
                                                                                            s# of s'# { DEFAULT ->
                                                                                     (# s'#,
                                                                                        GHC.Tuple.() #) } } } }) } })
                                                                       (go
                                                                          (case i of wild5 { GHC.Types.I# x ->
                                                                           GHC.Types.I#
                                                                             (GHC.Prim.+# x 1#) }))
                                                                  GHC.Types.True
                                                                  -> GHC.Base.return
                                                                       @ m
                                                                       $dMonad1
                                                                       @ ()
                                                                       GHC.Tuple.() }
                                                            } in
                                                            go (GHC.Types.I# 0#))
                                                           (GHC.Base.>>
                                                              @ m
                                                              $dMonad1
                                                              @ ()
                                                              @ (System.Random.MWC.Gen
                                                                   (Control.Monad.Primitive.PrimState
                                                                      m))
                                                              (case GHC.Classes.eqInt
                                                                      fini
                                                                        `cast`
                                                                      (Data.Vector.Fusion.Util.N:Id[0]
                                                                           <GHC.Types.Int>_R)
                                                                      (GHC.Types.I# 258#) of wild4 {
                                                                 GHC.Types.False
                                                                 -> GHC.Base.>>
                                                                      @ m
                                                                      $dMonad1
                                                                      @ ()
                                                                      @ ()
                                                                      (case q `cast`
                                                                            (Trans
                                                                                 (Data.Vector.Unboxed.Base.D:R:MVectorsWord320[0]
                                                                                      <Control.Monad.Primitive.PrimState
                                                                                         m>_N)
                                                                                 (Data.Vector.Unboxed.Base.N:R:MVectorsWord32[0]
                                                                                      <Control.Monad.Primitive.PrimState
                                                                                         m>_N)) of wild5 { Data.Vector.Primitive.Mutable.MVector dt dt1 dt2 ->
                                                                       Control.Monad.Primitive.primitive
                                                                         @ m
                                                                         $dPrimMonad
                                                                         @ ()
                                                                         (\ (s# :: GHC.Prim.State#
                                                                                     (Control.Monad.Primitive.PrimState
                                                                                        m)) ->
                                                                          case GHC.Prim.writeWord32Array#
                                                                                 @ (Control.Monad.Primitive.PrimState
                                                                                      m)
                                                                                 dt2
                                                                                 (GHC.Prim.+#
                                                                                    dt
                                                                                    256#)
                                                                                 255##
                                                                                 s# of s'# { DEFAULT ->
                                                                          (# s'#,
                                                                             GHC.Tuple.() #) }) })
                                                                      (case q `cast`
                                                                            (Trans
                                                                                 (Data.Vector.Unboxed.Base.D:R:MVectorsWord320[0]
                                                                                      <Control.Monad.Primitive.PrimState
                                                                                         m>_N)
                                                                                 (Data.Vector.Unboxed.Base.N:R:MVectorsWord32[0]
                                                                                      <Control.Monad.Primitive.PrimState
                                                                                         m>_N)) of wild5 { Data.Vector.Primitive.Mutable.MVector dt dt1 dt2 ->
                                                                       Control.Monad.Primitive.primitive
                                                                         @ m
                                                                         $dPrimMonad
                                                                         @ ()
                                                                         (\ (s# :: GHC.Prim.State#
                                                                                     (Control.Monad.Primitive.PrimState
                                                                                        m)) ->
                                                                          case GHC.Prim.writeWord32Array#
                                                                                 @ (Control.Monad.Primitive.PrimState
                                                                                      m)
                                                                                 dt2
                                                                                 (GHC.Prim.+#
                                                                                    dt
                                                                                    257#)
                                                                                 362436##
                                                                                 s# of s'# { DEFAULT ->
                                                                          (# s'#,
                                                                             GHC.Tuple.() #) }) })
                                                                 GHC.Types.True
                                                                 -> GHC.Base.>>
                                                                      @ m
                                                                      $dMonad1
                                                                      @ ()
                                                                      @ ()
                                                                      (case q `cast`
                                                                            (Trans
                                                                                 (Data.Vector.Unboxed.Base.D:R:MVectorsWord320[0]
                                                                                      <Control.Monad.Primitive.PrimState
                                                                                         m>_N)
                                                                                 (Data.Vector.Unboxed.Base.N:R:MVectorsWord32[0]
                                                                                      <Control.Monad.Primitive.PrimState
                                                                                         m>_N)) of wild5 { Data.Vector.Primitive.Mutable.MVector dt dt1 dt2 ->
                                                                       Control.Monad.Primitive.primitive
                                                                         @ m
                                                                         $dPrimMonad
                                                                         @ ()
                                                                         (\ (s# :: GHC.Prim.State#
                                                                                     (Control.Monad.Primitive.PrimState
                                                                                        m)) ->
                                                                          case Data.Vector.Generic.unsafeIndex
                                                                                 @ Data.Vector.Vector
                                                                                 @ GHC.Word.Word32
                                                                                 (Data.Vector.$fVectorVectora
                                                                                    @ GHC.Word.Word32)
                                                                                 seed1
                                                                                 System.Random.MWC.ioff of wild6 { GHC.Word.W32# x# ->
                                                                          case GHC.Prim.writeWord32Array#
                                                                                 @ (Control.Monad.Primitive.PrimState
                                                                                      m)
                                                                                 dt2
                                                                                 (GHC.Prim.+#
                                                                                    dt
                                                                                    256#)
                                                                                 (GHC.Prim.and#
                                                                                    x#
                                                                                    255##)
                                                                                 s# of s'# { DEFAULT ->
                                                                          (# s'#,
                                                                             GHC.Tuple.() #) } }) })
                                                                      (case q `cast`
                                                                            (Trans
                                                                                 (Data.Vector.Unboxed.Base.D:R:MVectorsWord320[0]
                                                                                      <Control.Monad.Primitive.PrimState
                                                                                         m>_N)
                                                                                 (Data.Vector.Unboxed.Base.N:R:MVectorsWord32[0]
                                                                                      <Control.Monad.Primitive.PrimState
                                                                                         m>_N)) of wild5 { Data.Vector.Primitive.Mutable.MVector dt dt1 dt2 ->
                                                                       Control.Monad.Primitive.primitive
                                                                         @ m
                                                                         $dPrimMonad
                                                                         @ ()
                                                                         (\ (s# :: GHC.Prim.State#
                                                                                     (Control.Monad.Primitive.PrimState
                                                                                        m)) ->
                                                                          case Data.Vector.Generic.unsafeIndex
                                                                                 @ Data.Vector.Vector
                                                                                 @ GHC.Word.Word32
                                                                                 (Data.Vector.$fVectorVectora
                                                                                    @ GHC.Word.Word32)
                                                                                 seed1
                                                                                 System.Random.MWC.coff of wild6 { GHC.Word.W32# x# ->
                                                                          case GHC.Prim.writeWord32Array#
                                                                                 @ (Control.Monad.Primitive.PrimState
                                                                                      m)
                                                                                 dt2
                                                                                 (GHC.Prim.+#
                                                                                    dt
                                                                                    257#)
                                                                                 x#
                                                                                 s# of s'# { DEFAULT ->
                                                                          (# s'#,
                                                                             GHC.Tuple.() #) } }) }) })
                                                              (GHC.Base.return
                                                                 @ m
                                                                 $dMonad1
                                                                 @ (System.Random.MWC.Gen
                                                                      (Control.Monad.Primitive.PrimState
                                                                         m))
                                                                 q `cast`
                                                                 (Sym (System.Random.MWC.N:Gen[0]
                                                                           <Control.Monad.Primitive.PrimState
                                                                              m>_N))))))
                                                     (\ (gen :: System.Random.MWC.Gen
                                                                  (Control.Monad.Primitive.PrimState
                                                                     m)) ->
                                                      GHC.Base.>>=
                                                        @ m
                                                        $dMonad
                                                        @ (Data.Vector.Vector GHC.Types.Int)
                                                        @ (Multilinear.Parallel.Generic.Tensor
                                                             GHC.Types.Int)
                                                        (Data.Vector.Generic.unstreamM
                                                           @ m
                                                           @ Data.Vector.Vector
                                                           @ GHC.Types.Int
                                                           @ Data.Vector.Vector
                                                           $dMonad
                                                           (Data.Vector.$fVectorVectora
                                                              @ GHC.Types.Int)
                                                           (Data.Vector.Fusion.Bundle.Monadic.mapM
                                                              @ m
                                                              @ (m GHC.Types.Int)
                                                              @ GHC.Types.Int
                                                              @ Data.Vector.Vector
                                                              $dMonad
                                                              (GHC.Base.id @ (m GHC.Types.Int))
                                                              (Data.Vector.Fusion.Bundle.lift
                                                                 @ m
                                                                 @ Data.Vector.Vector
                                                                 @ (m GHC.Types.Int)
                                                                 $dMonad
                                                                 (Data.Vector.Fusion.Bundle.Monadic.generateM
                                                                    @ Data.Vector.Fusion.Util.Id
                                                                    @ (m GHC.Types.Int)
                                                                    @ Data.Vector.Vector
                                                                    Data.Vector.Fusion.Util.$fMonadId
                                                                    s
                                                                    (\ (x :: GHC.Types.Int) ->
                                                                     Statistics.Distribution.genDiscreteVar
                                                                       @ d
                                                                       $dDiscreteGen
                                                                       @ m
                                                                       $dPrimMonad
                                                                       distr
                                                                       gen)
                                                                      `cast`
                                                                    (<GHC.Types.Int>_R
                                                                     ->_R Sym (Data.Vector.Fusion.Util.N:Id[0]
                                                                                   <m GHC.Types.Int>_R))))))
                                                        (\ (component :: Data.Vector.Vector
                                                                           GHC.Types.Int) ->
                                                         GHC.Base.return
                                                           @ m
                                                           $dMonad
                                                           @ (Multilinear.Parallel.Generic.Tensor
                                                                GHC.Types.Int)
                                                           (Multilinear.Parallel.Generic.SimpleFinite
                                                              @ GHC.Types.Int
                                                              (Multilinear.Index.Finite.Contravariant
                                                                 s
                                                                 (GHC.Base.build
                                                                    @ GHC.Types.Char
                                                                    (\ @ a
                                                                       (c :: GHC.Types.Char
                                                                             -> a -> a)[OneShot]
                                                                       (n :: a)[OneShot] ->
                                                                     c d1 n)))
                                                              component)))
                                                : ipv ipv5 -> fail GHC.Prim.void# } }
                                      : ipv ipv5 -> fail GHC.Prim.void# } }) -}
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: none
require own pkg trusted: False


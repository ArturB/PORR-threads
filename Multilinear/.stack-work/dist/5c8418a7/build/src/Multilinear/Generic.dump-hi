
==================== FINAL INTERFACE ====================
2018-10-29 09:28:34.1647724 UTC

interface Multilinear-0.8.0.0-4dpV53DlxV5EwwV6FZreVP:Multilinear.Generic [family instance module] 8022
  interface hash: 7c88920681d62da34a686975f911b12e
  ABI hash: 35d6137e116dc30a68e3019328f60c00
  export-list hash: 6803917b9ea3c5897cebb5b68db2f4c4
  orphan hash: 808801f241be40e8add03ea33126c1af
  flag hash: 8cfacb8aea1c0987bf06d46430ce983a
  sig of: Nothing
  used TH splices: False
  where
exports:
  Multilinear.Generic.!
  Multilinear.Generic._elemByElem
  Multilinear.Generic._standardize
  Multilinear.Generic.contractionErr
  Multilinear.Generic.dot
  Multilinear.Generic.isFiniteTensor
  Multilinear.Generic.isInfiniteTensor
  Multilinear.Generic.isScalar
  Multilinear.Generic.isSimple
  Multilinear.Generic.mergeScalars
  Multilinear.Generic.tensorIndex
  Multilinear.Generic.Tensor{Multilinear.Generic.Err Multilinear.Generic.FiniteTensor Multilinear.Generic.InfiniteTensor Multilinear.Generic.Scalar Multilinear.Generic.SimpleFinite errMessage scalarVal tensorFiniteIndex tensorInfiniteIndex tensorScalars tensorsFinite tensorsInfinite}
module dependencies: Multilinear Multilinear.Index
                     Multilinear.Index.Finite Multilinear.Index.Infinite
package dependencies: MonadRandom-0.5.1 Win32-2.5.4.1 aeson-1.2.4.0
                      array-0.5.2.0 attoparsec-0.13.2.2 base-4.10.1.0 base-compat-0.9.3
                      base-orphans-0.6 bifunctors-5.5.2 binary-0.8.5.1
                      bytestring-0.10.8.2 cereal-0.5.5.0 cereal-vector-0.2.0.1
                      comonad-5.0.3 containers-0.5.10.2 deepseq-1.4.3.0
                      distributive-0.5.3 dlist-0.8.0.4 either-4.5 exceptions-0.8.3
                      free-4.12.4 ghc-boot-th-8.2.2 ghc-prim-0.5.1.1 hashable-1.2.6.1
                      integer-gmp-1.0.1.0 integer-logarithms-1.0.2 mmorph-1.1.0
                      monad-control-1.0.2.2 mtl-2.2.1 primitive-0.6.3.0 random-1.1
                      scientific-0.3.5.2 semigroupoids-5.2.1 stm-2.4.5.0 tagged-0.8.5
                      template-haskell-2.12.0.0 text-1.2.2.2 time-1.8.0.2
                      time-locale-compat-0.1.1.3 transformers-0.5.2.0
                      transformers-base-0.4.4 unordered-containers-0.2.8.0
                      uuid-types-1.0.3 vector-0.12.0.1 zlib-0.6.1.2
orphans: cereal-vector-0.2.0.1:Data.Vector.Serialize
         stm-2.4.5.0:Control.Monad.STM
         attoparsec-0.13.2.2:Data.Attoparsec.Text.Internal
         attoparsec-0.13.2.2:Data.Attoparsec.ByteString.Char8
         vector-0.12.0.1:Data.Vector.Unboxed
         time-1.8.0.2:Data.Time.Format.Parse
         time-1.8.0.2:Data.Time.LocalTime.Internal.ZonedTime
         time-1.8.0.2:Data.Time.LocalTime.Internal.LocalTime
         time-1.8.0.2:Data.Time.Calendar.Gregorian
         vector-0.12.0.1:Data.Vector.Fusion.Bundle
         transformers-0.5.2.0:Control.Monad.Trans.Error
         hashable-1.2.6.1:Data.Hashable.Generic text-1.2.2.2:Data.Text.Lazy
         text-1.2.2.2:Data.Text binary-0.8.5.1:Data.Binary.Generic
         text-1.2.2.2:Data.Text.Show
         bytestring-0.10.8.2:Data.ByteString.Builder base-4.10.1.0:GHC.Float
         base-4.10.1.0:GHC.Base
family instance modules: MonadRandom-0.5.1:Control.Monad.Trans.Random.Lazy
                         Multilinear-0.8.0.0-4dpV53DlxV5EwwV6FZreVP:Multilinear.Index
                         Multilinear-0.8.0.0-4dpV53DlxV5EwwV6FZreVP:Multilinear.Index.Finite
                         Multilinear-0.8.0.0-4dpV53DlxV5EwwV6FZreVP:Multilinear.Index.Infinite
                         aeson-1.2.4.0:Data.Aeson.Types.Internal
                         attoparsec-0.13.2.2:Data.Attoparsec.Internal.Types
                         base-4.10.1.0:Control.Applicative base-4.10.1.0:Data.Complex
                         base-4.10.1.0:Data.Either base-4.10.1.0:Data.Functor.Compose
                         base-4.10.1.0:Data.Functor.Const
                         base-4.10.1.0:Data.Functor.Identity
                         base-4.10.1.0:Data.Functor.Product base-4.10.1.0:Data.Functor.Sum
                         base-4.10.1.0:Data.List.NonEmpty base-4.10.1.0:Data.Monoid
                         base-4.10.1.0:Data.Semigroup base-4.10.1.0:Data.Type.Equality
                         base-4.10.1.0:Data.Version base-4.10.1.0:Data.Void
                         base-4.10.1.0:GHC.Exts base-4.10.1.0:GHC.Generics
                         base-4.10.1.0:GHC.IO.Exception base-4.10.1.0:GHC.TypeLits
                         base-4.10.1.0:GHC.TypeNats bifunctors-5.5.2:Data.Bifunctor.Biff
                         bifunctors-5.5.2:Data.Bifunctor.Clown
                         bifunctors-5.5.2:Data.Bifunctor.Flip
                         bifunctors-5.5.2:Data.Bifunctor.Join
                         bifunctors-5.5.2:Data.Bifunctor.Joker
                         bifunctors-5.5.2:Data.Bifunctor.Product
                         bifunctors-5.5.2:Data.Bifunctor.Tannen
                         bifunctors-5.5.2:Data.Bifunctor.Wrapped
                         containers-0.5.10.2:Data.IntMap.Internal
                         containers-0.5.10.2:Data.IntSet.Internal
                         containers-0.5.10.2:Data.Map.Internal
                         containers-0.5.10.2:Data.Sequence.Internal
                         containers-0.5.10.2:Data.Set.Internal containers-0.5.10.2:Data.Tree
                         dlist-0.8.0.4:Data.DList either-4.5:Control.Monad.Trans.Either
                         ghc-boot-th-8.2.2:GHC.ForeignSrcLang.Type
                         ghc-boot-th-8.2.2:GHC.LanguageExtensions.Type
                         monad-control-1.0.2.2:Control.Monad.Trans.Control
                         primitive-0.6.3.0:Control.Monad.Primitive
                         primitive-0.6.3.0:Data.Primitive.Array
                         primitive-0.6.3.0:Data.Primitive.ByteArray tagged-0.8.5:Data.Tagged
                         template-haskell-2.12.0.0:Language.Haskell.TH.Syntax
                         text-1.2.2.2:Data.Text text-1.2.2.2:Data.Text.Lazy
                         unordered-containers-0.2.8.0:Data.HashMap.Base
                         unordered-containers-0.2.8.0:Data.HashSet
                         uuid-types-1.0.3:Data.UUID.Types.Internal
                         uuid-types-1.0.3:Data.UUID.Types.Internal.Builder
                         vector-0.12.0.1:Data.Vector vector-0.12.0.1:Data.Vector.Primitive
                         vector-0.12.0.1:Data.Vector.Storable
                         vector-0.12.0.1:Data.Vector.Unboxed
                         vector-0.12.0.1:Data.Vector.Unboxed.Base
                         zlib-0.6.1.2:Codec.Compression.Zlib.Stream
import  -/  Multilinear 4c6d471e83f8257782aa106e88cffd2a
  exports: 67d691b487a9d31758cbc46d5c37211f
  $| 5dbcc0573573075a581081fcb9c926ab
  *. e16de342274980a901673ec5297a6061
  +. 72eba8d3d8be0f17240d9779d4715c90
  -. 3b87c071f6316cb816a8eb9c205aaa8b
  .* 2b68c7df922491a5ee97815d8fa6eacd
  .+ a15fa785b4c9221e1ac71a1db157ef84
  .- b28a6df337994686cf72397d42d7e097
  /\ 26b65c6e4d08f3b4242e3d387d0b1f2b
  <<<| 5ba6413c8314deb445f8c9ee6d8d17ac
  Accessible f248f12f79207cc2b0b83b9f3ad230d7
  Multilinear 4bbb81db803fc66b30a2761c4b8568c1
  \/ 33eb8c50dcdf2d78325723bc44e42452
  el fd512a83d7e02b1b6845944fd47e317f
  fromBinary fa3d22cde1fb9e4866b9245293c0e671
  fromJSON 8e79cc8c14ecb7895ffb3fe58f53077b
  indices 6ddd9de0e82555911f5e168a5281d0bf
  indicesNames 82306ba296994bef492ab86f379da41b
  map 234ab6a9f1a3b04fc92ff6084b91f9c9
  order 806177fbc9d308915c14ca9fa98400e6
  size 456871a88e1041c1fedd2d9d542f44f9
  toBinary d9248e078e6dce369264d17862e6e85f
  toJSON bcf8498da3090641395257932f23828b
  transpose 6bc48153cecf974cb0e90c56a563cab4
  |>> 18ac041583457968d54d960c91bbb848
  |>>> cf91d59fdc2e4c6e127a76784163ae6a
import  -/  Multilinear.Index bdc4f33dfbfbc46388fe9f046d315e73
  exports: 4645a9e87e184e91bd100d37c757003c
  Contravariant 3cc8d9d9afbba2d23918a211fb0bd765
  Covariant 25c2ba6af359407e584753a21254bdac
  Indifferent 82f77538c3bd09db6a4943ca18c6b569
  TIndex 42fadcdd8a2ab4d2f4a2428bad04d8a6
  indexName e8e20b01f22d1214b3b1e5f5953e55ed
  isContravariant 07e8ac7d82d9b8cd79cf6833097e1085
  toTIndex e011355174287417cd6dbee68b1c37b7
import  -/  Multilinear.Index.Finite 14058e0dbe724865308af46da8e8471d
  exports: dd8397fb15c17dfad021d67ccd8dbbd7
  Contravariant b2c5ac150b965b89b109a782c43a3104
  Covariant 4de9bf5cc02a239b0c32f9bdce91e559
  Index e67d6a4fe94f473a228426fe5d58a84a
  Indifferent f3d5227734c0f017ee2e9ef565b8c309
  indexSize e67d6a4fe94f473a228426fe5d58a84a
import  -/  Multilinear.Index.Infinite 8efc3537c6e04783d09e6a3cbce996e9
  exports: 49dee7d62fa0dcbae071152de4cbc0f4
  Contravariant 197da1a650387abb0080d2bd3fbd6de2
  Covariant 138a61e67c9eed1c7e633364bac74852
  Index 74ec1cb408036e666fcc6d6117776efd
  Indifferent 605503fe2beec0c741c550f7d63b3a62
import  -/  aeson-1.2.4.0:Data.Aeson cab300936442a7a2fe880eb82222bfaf
import  -/  aeson-1.2.4.0:Data.Aeson.Types.FromJSON 7061bc84ea4c272c72bda2a56b2f5048
import  -/  aeson-1.2.4.0:Data.Aeson.Types.ToJSON 56ae5e99b92e328d41b25663e0c446a3
import  -/  base-4.10.1.0:Data.Bits 4b2095c635146571c5994f818cd2862c
import  -/  base-4.10.1.0:Data.Foldable 4349255461f1285ad885cd2301205c36
import  -/  base-4.10.1.0:Data.Functor b59a97e639e05373a94999f9bb899676
import  -/  base-4.10.1.0:Data.List e5312e282ad78d8152090e079f862b53
import  -/  base-4.10.1.0:Data.Maybe f51a1c24c4c11dca22ee9c2ea0071a10
import  -/  base-4.10.1.0:Data.Monoid f056d3911f36ed0db0c6f6ab55ef865c
import  -/  base-4.10.1.0:Data.OldList fdea655c7bec488a3994df222c677ab7
import  -/  base-4.10.1.0:Data.Tuple ab0c62ebfcacf00dcba54934885c5064
import  -/  base-4.10.1.0:GHC.Base 8f949d675e49677c272f02ab7a85fe18
import  -/  base-4.10.1.0:GHC.Err 2c5700463ba1489cb2579246abf3debb
import  -/  base-4.10.1.0:GHC.Float 43dc07b724c1ee0ff9bb01bb47964564
import  -/  base-4.10.1.0:GHC.Generics 7f7baa7798c80986bd27b4a04a45ba88
import  -/  base-4.10.1.0:GHC.List 1bb0adf79553530dc898796596e53188
import  -/  base-4.10.1.0:GHC.Num bee60808f8127e4cda82dd422aa1c6c0
import  -/  base-4.10.1.0:GHC.Real 183566a07f0c201dd54a6bc28c33ed14
import  -/  base-4.10.1.0:GHC.Show 927ef590f679632bf94869e8018e5b48
import  -/  base-4.10.1.0:Prelude a93a9400cc0c816c2ee5f39399baa7a0
import  -/  bytestring-0.10.8.2:Data.ByteString.Lazy 797320bfb8012e1e94591960fb41f1fe
import  -/  cereal-0.5.5.0:Data.Serialize f70ff631324190008ca0c94a4bb1a7d9
import  -/  cereal-vector-0.2.0.1:Data.Vector.Serialize 34d7a05a49183d7a3eca69c5617cb020
import  -/  deepseq-1.4.3.0:Control.DeepSeq 73f0c395dfad5422d021d16f9a5d4a09
import  -/  either-4.5:Control.Monad.Trans.Either 92ceeab29a4c772761f5a438d6f764e3
import  -/  ghc-prim-0.5.1.1:GHC.Classes 64ad5910d03ab188ab9b4adef7487b1e
import  -/  transformers-0.5.2.0:Control.Monad.Trans.Class 085128d0890537d8b31af6ac84523aee
import  -/  transformers-0.5.2.0:Control.Monad.Trans.Maybe 4134e08073f75d117113755a6fe18976
import  -/  vector-0.12.0.1:Data.Vector c6f234ddb312dfcee4741885ac2bd9d4
import  -/  zlib-0.6.1.2:Codec.Compression.GZip 4dd21828505105b8842bc4fd92ad82d8
3065e43e05260f7d94b5303b27053802
  (!) ::
    Multilinear.Generic.Tensor a
    -> GHC.Types.Int -> Multilinear.Generic.Tensor a
  {- Arity: 2, Strictness: <S,1*U><L,1*U(U)>, Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ @ a ->
                 let {
                   loc :: [GHC.Types.Char]
                   = GHC.Base.build
                       @ GHC.Types.Char
                       (\ @ b ->
                        GHC.CString.unpackFoldrCString#
                          @ b
                          "Multilinear-0.8.0.0-4dpV53DlxV5EwwV6FZreVP"#)
                 } in
                 let {
                   loc1 :: [GHC.Types.Char]
                   = GHC.Base.build
                       @ GHC.Types.Char
                       (\ @ b ->
                        GHC.CString.unpackFoldrCString# @ b "Multilinear.Generic"#)
                 } in
                 let {
                   loc2 :: [GHC.Types.Char]
                   = GHC.Base.build
                       @ GHC.Types.Char
                       (\ @ b ->
                        GHC.CString.unpackFoldrCString#
                          @ b
                          "src\\Multilinear\\Generic.hs"#)
                 } in
                 let {
                   loc3 :: GHC.Types.Int = GHC.Types.I# 184#
                 } in
                 let {
                   loc4 :: GHC.Types.Int = GHC.Types.I# 62#
                 } in
                 let {
                   loc5 :: GHC.Types.Int = GHC.Types.I# 184#
                 } in
                 let {
                   loc6 :: GHC.Types.Int = GHC.Types.I# 112#
                 } in
                 let {
                   $dIP :: [GHC.Types.Char]
                   = GHC.Base.build
                       @ GHC.Types.Char
                       (\ @ b -> GHC.CString.unpackFoldrCString# @ b "error"#)
                 } in
                 let {
                   $dIP1 :: GHC.Stack.Types.SrcLoc
                   = GHC.Stack.Types.SrcLoc loc loc1 loc2 loc3 loc4 loc5 loc6
                 } in
                 let {
                   $dIP2 :: GHC.Stack.Types.CallStack
                   = GHC.Stack.Types.PushCallStack
                       $dIP
                       $dIP1
                       GHC.Stack.Types.EmptyCallStack
                 } in
                 let {
                   loc7 :: [GHC.Types.Char]
                   = GHC.Base.build
                       @ GHC.Types.Char
                       (\ @ b ->
                        GHC.CString.unpackFoldrCString#
                          @ b
                          "Multilinear-0.8.0.0-4dpV53DlxV5EwwV6FZreVP"#)
                 } in
                 let {
                   loc8 :: [GHC.Types.Char]
                   = GHC.Base.build
                       @ GHC.Types.Char
                       (\ @ b ->
                        GHC.CString.unpackFoldrCString# @ b "Multilinear.Generic"#)
                 } in
                 let {
                   loc9 :: [GHC.Types.Char]
                   = GHC.Base.build
                       @ GHC.Types.Char
                       (\ @ b ->
                        GHC.CString.unpackFoldrCString#
                          @ b
                          "src\\Multilinear\\Generic.hs"#)
                 } in
                 let {
                   loc10 :: GHC.Types.Int = GHC.Types.I# 183#
                 } in
                 let {
                   loc11 :: GHC.Types.Int = GHC.Types.I# 62#
                 } in
                 let {
                   loc12 :: GHC.Types.Int = GHC.Types.I# 183#
                 } in
                 let {
                   loc13 :: GHC.Types.Int = GHC.Types.I# 112#
                 } in
                 let {
                   $dIP3 :: [GHC.Types.Char]
                   = GHC.Base.build
                       @ GHC.Types.Char
                       (\ @ b -> GHC.CString.unpackFoldrCString# @ b "error"#)
                 } in
                 let {
                   $dIP4 :: GHC.Stack.Types.SrcLoc
                   = GHC.Stack.Types.SrcLoc loc7 loc8 loc9 loc10 loc11 loc12 loc13
                 } in
                 let {
                   $dIP5 :: GHC.Stack.Types.CallStack
                   = GHC.Stack.Types.PushCallStack
                       $dIP3
                       $dIP4
                       GHC.Stack.Types.EmptyCallStack
                 } in
                 \ (t :: Multilinear.Generic.Tensor a) (i :: GHC.Types.Int) ->
                 case t of wild {
                   Multilinear.Generic.Scalar ds
                   -> Multilinear.Generic.Err @ a Multilinear.Generic.scalarIndices
                   Multilinear.Generic.SimpleFinite ind ts
                   -> let {
                        $j :: Multilinear.Generic.Tensor a <join 0>
                        = GHC.Err.error
                            @ 'GHC.Types.LiftedRep
                            @ (Multilinear.Generic.Tensor a)
                            $dIP5
                              `cast`
                            (Sym (GHC.Classes.N:IP[0]
                                      <"callStack">_N <GHC.Stack.Types.CallStack>_N))
                            (GHC.Base.build
                               @ GHC.Types.Char
                               (\ @ b
                                  (c :: GHC.Types.Char -> b -> b)[OneShot]
                                  (n :: b)[OneShot] ->
                                GHC.CString.unpackFoldrCString#
                                  @ b
                                  "Index + "#
                                  c
                                  (GHC.Base.foldr
                                     @ GHC.Types.Char
                                     @ b
                                     c
                                     (GHC.CString.unpackFoldrCString# @ b " out of bonds!"# c n)
                                     (Multilinear.Index.Finite.$fShowIndex_$cshow ind))))
                      } in
                      case ind of wild1 {
                        Multilinear.Index.Finite.Covariant ds1 ds2
                        -> case GHC.Classes.geInt i ds1 of wild2 {
                             GHC.Types.False
                             -> Multilinear.Generic.Scalar
                                  @ a
                                  (Data.Vector.Generic.!
                                     @ Data.Vector.Vector
                                     @ a
                                     (Data.Vector.$fVectorVectora @ a)
                                     ts
                                     i)
                             GHC.Types.True -> $j }
                        Multilinear.Index.Finite.Contravariant ds1 ds2
                        -> case GHC.Classes.geInt i ds1 of wild2 {
                             GHC.Types.False
                             -> Multilinear.Generic.Scalar
                                  @ a
                                  (Data.Vector.Generic.!
                                     @ Data.Vector.Vector
                                     @ a
                                     (Data.Vector.$fVectorVectora @ a)
                                     ts
                                     i)
                             GHC.Types.True -> $j }
                        Multilinear.Index.Finite.Indifferent ds1 ds2
                        -> case GHC.Classes.geInt i ds1 of wild2 {
                             GHC.Types.False
                             -> Multilinear.Generic.Scalar
                                  @ a
                                  (Data.Vector.Generic.!
                                     @ Data.Vector.Vector
                                     @ a
                                     (Data.Vector.$fVectorVectora @ a)
                                     ts
                                     i)
                             GHC.Types.True -> $j } }
                   Multilinear.Generic.FiniteTensor ind ts
                   -> let {
                        $j :: Multilinear.Generic.Tensor a <join 0>
                        = GHC.Err.error
                            @ 'GHC.Types.LiftedRep
                            @ (Multilinear.Generic.Tensor a)
                            $dIP2
                              `cast`
                            (Sym (GHC.Classes.N:IP[0]
                                      <"callStack">_N <GHC.Stack.Types.CallStack>_N))
                            (GHC.Base.build
                               @ GHC.Types.Char
                               (\ @ b
                                  (c :: GHC.Types.Char -> b -> b)[OneShot]
                                  (n :: b)[OneShot] ->
                                GHC.CString.unpackFoldrCString#
                                  @ b
                                  "Index + "#
                                  c
                                  (GHC.Base.foldr
                                     @ GHC.Types.Char
                                     @ b
                                     c
                                     (GHC.CString.unpackFoldrCString# @ b " out of bonds!"# c n)
                                     (Multilinear.Index.Finite.$fShowIndex_$cshow ind))))
                      } in
                      case ind of wild1 {
                        Multilinear.Index.Finite.Covariant ds1 ds2
                        -> case GHC.Classes.geInt i ds1 of wild2 {
                             GHC.Types.False
                             -> Data.Vector.Generic.!
                                  @ Data.Vector.Vector
                                  @ (Multilinear.Generic.Tensor a)
                                  (Data.Vector.$fVectorVectora @ (Multilinear.Generic.Tensor a))
                                  ts
                                  i
                             GHC.Types.True -> $j }
                        Multilinear.Index.Finite.Contravariant ds1 ds2
                        -> case GHC.Classes.geInt i ds1 of wild2 {
                             GHC.Types.False
                             -> Data.Vector.Generic.!
                                  @ Data.Vector.Vector
                                  @ (Multilinear.Generic.Tensor a)
                                  (Data.Vector.$fVectorVectora @ (Multilinear.Generic.Tensor a))
                                  ts
                                  i
                             GHC.Types.True -> $j }
                        Multilinear.Index.Finite.Indifferent ds1 ds2
                        -> case GHC.Classes.geInt i ds1 of wild2 {
                             GHC.Types.False
                             -> Data.Vector.Generic.!
                                  @ Data.Vector.Vector
                                  @ (Multilinear.Generic.Tensor a)
                                  (Data.Vector.$fVectorVectora @ (Multilinear.Generic.Tensor a))
                                  ts
                                  i
                             GHC.Types.True -> $j } }
                   Multilinear.Generic.InfiniteTensor ds ts
                   -> GHC.List.!! @ (Multilinear.Generic.Tensor a) ts i
                   Multilinear.Generic.Err msg
                   -> Multilinear.Generic.Err @ a msg }) -}
94cbdc6e6146c040fb4fdd2b4bd01dd6
  !1 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Scalar has no indices!"#) -}
3435455de223a292a66afccee7caf4fd
  $fAccessibleTensora ::
    GHC.Num.Num a =>
    Multilinear.Accessible Multilinear.Generic.Tensor a
  DFunId
  {- Arity: 1,
     Strictness: <L,U(C(C(U)),C(C(U)),C(C(U)),A,C(U),C(U),C(U))>m,
     Inline: CONLIKE,
     Unfolding: DFun: @ a (v :: GHC.Num.Num a).
                  @ Multilinear.Generic.Tensor
                  @ a
                  (Multilinear.Generic.$fMultilinearTensora @ a v)
                  (Multilinear.Generic.$fAccessibleTensora_$cel @ a v)
                  (\ (t1 :: Multilinear.Generic.Tensor a)
                     (is :: (GHC.Base.String, [GHC.Types.Int])) ->
                   Multilinear.Generic.$fAccessibleTensora_$cel @ a v t1 is)
                  (Multilinear.Generic.$fAccessibleTensora_$ciMap @ a v) -}
3435455de223a292a66afccee7caf4fd
  $fAccessibleTensora_$cel ::
    GHC.Num.Num a =>
    Multilinear.Generic.Tensor a
    -> (GHC.Base.String, [GHC.Types.Int])
    -> Multilinear.Generic.Tensor a
  {- Arity: 3, Strictness: <L,A><S,1*U><L,1*U(U,U)>, Inline: [0],
     Unfolding: InlineRule (3, True, True)
                (\ @ a
                   (w :: GHC.Num.Num a)
                   (w1 :: Multilinear.Generic.Tensor a)
                   (w2 :: (GHC.Base.String, [GHC.Types.Int])) ->
                 Multilinear.Generic.$w$cel @ a w1 w2) -}
3435455de223a292a66afccee7caf4fd
  $fAccessibleTensora_$ciMap ::
    GHC.Num.Num a =>
    forall b.
    ([GHC.Types.Int] -> a -> b)
    -> Multilinear.Generic.Tensor a -> Multilinear.Generic.Tensor b
  {- Arity: 3, Strictness: <L,A><L,C(C1(U))><S,1*U>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (3, False, False)
                (\ @ a
                   ($dNum :: GHC.Num.Num a)
                   @ b
                   (f :: [GHC.Types.Int] -> a -> b)
                   (t :: Multilinear.Generic.Tensor a) ->
                 letrec {
                   iMap' :: Multilinear.Generic.Tensor a
                            -> [GHC.Types.Int] -> Multilinear.Generic.Tensor b
                     {- Arity: 2 -}
                   = \ (ds :: Multilinear.Generic.Tensor a)
                       (inds :: [GHC.Types.Int]) ->
                     case ds of wild {
                       Multilinear.Generic.Scalar x
                       -> Multilinear.Generic.Scalar @ b (f inds x)
                       Multilinear.Generic.SimpleFinite index ts
                       -> Multilinear.Generic.SimpleFinite
                            @ b
                            index
                            (Data.Vector.Generic.new
                               @ Data.Vector.Vector
                               @ b
                               (Data.Vector.$fVectorVectora @ b)
                               (Data.Vector.Generic.New.unstream
                                  @ Data.Vector.Vector
                                  @ b
                                  (Data.Vector.$fVectorVectora @ b)
                                  (Data.Vector.Fusion.Bundle.inplace
                                     @ a
                                     @ b
                                     @ Data.Vector.Vector
                                     (\ @ m :: * -> * ($dMonad :: GHC.Base.Monad m)[OneShot] ->
                                      let {
                                        f2 :: b -> m b = GHC.Base.return @ m $dMonad @ b
                                      } in
                                      \ (x :: Data.Vector.Fusion.Stream.Monadic.Stream
                                                m a)[OneShot] ->
                                      Data.Vector.Fusion.Stream.Monadic.mapM
                                        @ m
                                        @ (GHC.Types.Int, a)
                                        @ b
                                        $dMonad
                                        (\ (x1 :: (GHC.Types.Int, a)) ->
                                         f2
                                           (f (GHC.Base.build
                                                 @ GHC.Types.Int
                                                 (\ @ b1
                                                    (c :: GHC.Types.Int -> b1 -> b1)[OneShot]
                                                    (n :: b1)[OneShot] ->
                                                  GHC.Base.foldr
                                                    @ GHC.Types.Int
                                                    @ b1
                                                    c
                                                    (c (case x1 of wild1 { (,) x2 ds1 -> x2 }) n)
                                                    inds))
                                              (case x1 of wild1 { (,) ds1 y -> y })))
                                        (Data.Vector.Fusion.Stream.Monadic.indexed
                                           @ m
                                           @ a
                                           $dMonad
                                           x))
                                     (GHC.Base.id @ Data.Vector.Fusion.Bundle.Size.Size)
                                     (Data.Vector.Generic.stream
                                        @ Data.Vector.Vector
                                        @ a
                                        (Data.Vector.$fVectorVectora @ a)
                                        ts))))
                       Multilinear.Generic.FiniteTensor index ts
                       -> Multilinear.Generic.FiniteTensor
                            @ b
                            index
                            (Data.Vector.Generic.new
                               @ Data.Vector.Vector
                               @ (Multilinear.Generic.Tensor b)
                               (Data.Vector.$fVectorVectora @ (Multilinear.Generic.Tensor b))
                               (Data.Vector.Generic.New.unstream
                                  @ Data.Vector.Vector
                                  @ (Multilinear.Generic.Tensor b)
                                  (Data.Vector.$fVectorVectora @ (Multilinear.Generic.Tensor b))
                                  (Data.Vector.Fusion.Bundle.inplace
                                     @ (Multilinear.Generic.Tensor a)
                                     @ (Multilinear.Generic.Tensor b)
                                     @ Data.Vector.Vector
                                     (\ @ m :: * -> * ($dMonad :: GHC.Base.Monad m)[OneShot] ->
                                      let {
                                        f2 :: Multilinear.Generic.Tensor b
                                              -> m (Multilinear.Generic.Tensor b)
                                        = GHC.Base.return
                                            @ m
                                            $dMonad
                                            @ (Multilinear.Generic.Tensor b)
                                      } in
                                      \ (x :: Data.Vector.Fusion.Stream.Monadic.Stream
                                                m (Multilinear.Generic.Tensor a))[OneShot] ->
                                      Data.Vector.Fusion.Stream.Monadic.mapM
                                        @ m
                                        @ (GHC.Types.Int, Multilinear.Generic.Tensor a)
                                        @ (Multilinear.Generic.Tensor b)
                                        $dMonad
                                        (\ (x1 :: (GHC.Types.Int, Multilinear.Generic.Tensor a)) ->
                                         f2
                                           (iMap'
                                              (case x1 of wild1 { (,) ds1 y -> y })
                                              (GHC.Base.build
                                                 @ GHC.Types.Int
                                                 (\ @ b1
                                                    (c :: GHC.Types.Int -> b1 -> b1)[OneShot]
                                                    (n :: b1)[OneShot] ->
                                                  GHC.Base.foldr
                                                    @ GHC.Types.Int
                                                    @ b1
                                                    c
                                                    (c (case x1 of wild1 { (,) x2 ds1 -> x2 }) n)
                                                    inds))))
                                        (Data.Vector.Fusion.Stream.Monadic.indexed
                                           @ m
                                           @ (Multilinear.Generic.Tensor a)
                                           $dMonad
                                           x))
                                     (GHC.Base.id @ Data.Vector.Fusion.Bundle.Size.Size)
                                     (Data.Vector.Generic.stream
                                        @ Data.Vector.Vector
                                        @ (Multilinear.Generic.Tensor a)
                                        (Data.Vector.$fVectorVectora
                                           @ (Multilinear.Generic.Tensor a))
                                        ts))))
                       Multilinear.Generic.InfiniteTensor index ts
                       -> Multilinear.Generic.InfiniteTensor
                            @ b
                            index
                            (GHC.Base.build
                               @ (Multilinear.Generic.Tensor b)
                               (\ @ b1
                                  (c :: Multilinear.Generic.Tensor b -> b1 -> b1)[OneShot]
                                  (n :: b1)[OneShot] ->
                                GHC.List.foldr2
                                  @ (Multilinear.Generic.Tensor a)
                                  @ GHC.Types.Int
                                  @ b1
                                  (GHC.List.zipFB
                                     @ (Multilinear.Generic.Tensor a)
                                     @ GHC.Types.Int
                                     @ b1
                                     @ b1
                                     (GHC.Base.mapFB
                                        @ (Multilinear.Generic.Tensor b)
                                        @ b1
                                        @ (Multilinear.Generic.Tensor a, GHC.Types.Int)
                                        c
                                        (\ (tind :: (Multilinear.Generic.Tensor a,
                                                     GHC.Types.Int)) ->
                                         iMap'
                                           (Data.Tuple.fst
                                              @ (Multilinear.Generic.Tensor a)
                                              @ GHC.Types.Int
                                              tind)
                                           (GHC.Base.build
                                              @ GHC.Types.Int
                                              (\ @ b2
                                                 (c1 :: GHC.Types.Int -> b2 -> b2)[OneShot]
                                                 (n1 :: b2)[OneShot] ->
                                               GHC.Base.foldr
                                                 @ GHC.Types.Int
                                                 @ b2
                                                 c1
                                                 (c1 (case tind of wild1 { (,) ds1 y -> y }) n1)
                                                 inds)))))
                                  n
                                  ts
                                  (GHC.Base.build
                                     @ GHC.Types.Int
                                     (\ @ b2
                                        (c1 :: GHC.Types.Int -> b2 -> b2)[OneShot]
                                        (n1 :: b2)[OneShot] ->
                                      GHC.Enum.eftIntFB @ b2 c1 n1 0# 9223372036854775807#))))
                       Multilinear.Generic.Err msg -> Multilinear.Generic.Err @ b msg }
                 } in
                 iMap'
                   t
                   (let {
                      zeroList1 :: GHC.Types.Int = GHC.Types.I# 0#
                    } in
                    letrec {
                      zeroList2 :: [GHC.Types.Int]
                      = GHC.Types.: @ GHC.Types.Int zeroList1 zeroList2
                    } in
                    zeroList2)) -}
3435455de223a292a66afccee7caf4fd
  $fBitsTensor ::
    (GHC.Num.Num a, Data.Bits.Bits a) =>
    Data.Bits.Bits (Multilinear.Generic.Tensor a)
  DFunId
  {- Arity: 2,
     Strictness: <L,U(C(C(U)),C(C(U)),C(C(U)),A,C(U),C(U),C(U))><L,U(U(C(C1(U)),A),C(C(U)),C(C(U)),C(C(U)),C(U),C(C1(U)),C(C1(U)),A,C(U),A,A,A,A,C(U),A,C(U),A,A,A,A,A,A,A)>,
     Inline: CONLIKE,
     Unfolding: DFun: @ a (v :: GHC.Num.Num a) (v1 :: Data.Bits.Bits a).
                  @ (Multilinear.Generic.Tensor a)
                  (Multilinear.Generic.$fBitsTensor_$cp1Bits @ a v v1)
                  (Multilinear.Generic.$fBitsTensor_$c.&. @ a v v1)
                  (Multilinear.Generic.$fBitsTensor_$c.|. @ a v v1)
                  (Multilinear.Generic.$fBitsTensor_$cxor @ a v v1)
                  (Multilinear.Generic.$fBitsTensor_$ccomplement @ a v v1)
                  (Multilinear.Generic.$fBitsTensor_$cshift @ a v v1)
                  (Multilinear.Generic.$fBitsTensor_$crotate @ a v v1)
                  (Multilinear.Generic.$fBitsTensor_$czeroBits @ a v v1)
                  (Multilinear.Generic.$fBitsTensor_$cbit @ a v v1)
                  (Multilinear.Generic.$fBitsTensor_$csetBit @ a v v1)
                  (Multilinear.Generic.$fBitsTensor_$cclearBit @ a v v1)
                  (Multilinear.Generic.$fBitsTensor_$ccomplementBit @ a v v1)
                  (Multilinear.Generic.$fBitsTensor_$ctestBit @ a v v1)
                  (Multilinear.Generic.$fBitsTensor_$cbitSizeMaybe @ a v v1)
                  (Multilinear.Generic.$fBitsTensor_$cbitSize @ a v v1)
                  (Multilinear.Generic.$fBitsTensor_$cisSigned @ a v v1)
                  (Multilinear.Generic.$fBitsTensor_$cshiftL @ a v v1)
                  (Multilinear.Generic.$fBitsTensor_$cunsafeShiftL @ a v v1)
                  (Multilinear.Generic.$fBitsTensor_$cshiftR @ a v v1)
                  (Multilinear.Generic.$fBitsTensor_$cunsafeShiftR @ a v v1)
                  (Multilinear.Generic.$fBitsTensor_$crotateL @ a v v1)
                  (Multilinear.Generic.$fBitsTensor_$crotateR @ a v v1)
                  (Multilinear.Generic.$fBitsTensor_$cpopCount @ a v v1) -}
fc2bfd5cdcb3ff506465766ea49f0ef4
  $fBitsTensor1 :: GHC.Prim.Int# -> a
  {- Arity: 1, Strictness: <B,U>x -}
3435455de223a292a66afccee7caf4fd
  $fBitsTensor2 ::
    [GHC.Base.String]
    -> Multilinear.Generic.Tensor a -> Multilinear.Generic.Tensor a
  {- Arity: 2, Strictness: <S,1*U><S,U> -}
40dc046172a9f1bef44b610ed43426ce
  $fBitsTensor3 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 0#) -}
3435455de223a292a66afccee7caf4fd
  $fBitsTensor_$c.&. ::
    (GHC.Num.Num a, Data.Bits.Bits a) =>
    Multilinear.Generic.Tensor a
    -> Multilinear.Generic.Tensor a -> Multilinear.Generic.Tensor a
  {- Arity: 4,
     Strictness: <L,U(C(C(U)),A,C(C(U)),A,A,A,C(U))><L,U(A,C(C(U)),C(C(U)),A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A)><S,U><S,U>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (4, False, False)
                (\ @ a
                   ($dNum :: GHC.Num.Num a)
                   ($dBits :: Data.Bits.Bits a)
                   (t1 :: Multilinear.Generic.Tensor a)
                   (t2 :: Multilinear.Generic.Tensor a) ->
                 let {
                   commonIndices :: [GHC.Base.String]
                   = GHC.Base.build
                       @ [GHC.Types.Char]
                       (\ @ b
                          (c :: [GHC.Types.Char] -> b -> b)[OneShot]
                          (n :: b)[OneShot] ->
                        GHC.Base.foldr
                          @ Multilinear.Index.TIndex
                          @ b
                          (GHC.Base.mapFB
                             @ [GHC.Types.Char]
                             @ b
                             @ Multilinear.Index.TIndex
                             (GHC.List.filterFB
                                @ [GHC.Types.Char]
                                @ b
                                c
                                (let {
                                   ds :: [GHC.Base.String]
                                   = GHC.Base.build
                                       @ [GHC.Types.Char]
                                       (\ @ b1
                                          (c1 :: [GHC.Types.Char] -> b1 -> b1)[OneShot]
                                          (n1 :: b1)[OneShot] ->
                                        GHC.Base.foldr
                                          @ Multilinear.Index.TIndex
                                          @ b1
                                          (GHC.Base.mapFB
                                             @ [GHC.Types.Char]
                                             @ b1
                                             @ Multilinear.Index.TIndex
                                             c1
                                             Multilinear.Index.tIndexName)
                                          n1
                                          (Multilinear.Generic.$fMultilinearTensora_$cindices
                                             @ a
                                             $dNum
                                             t2))
                                 } in
                                 \ (ds1 :: GHC.Base.String) ->
                                 GHC.List.elem
                                   @ GHC.Base.String
                                   GHC.Classes.$fEq[]_$s$fEq[]1
                                   ds1
                                   ds))
                             Multilinear.Index.tIndexName)
                          n
                          (Multilinear.Generic.$fMultilinearTensora_$cindices @ a $dNum t1))
                 } in
                 Multilinear.Generic.mergeScalars
                   @ a
                   (Multilinear.Generic._elemByElem'
                      @ a
                      $dNum
                      (GHC.Base.foldr
                         @ GHC.Base.String
                         @ (Multilinear.Generic.Tensor a -> Multilinear.Generic.Tensor a)
                         (\ (ds :: GHC.Base.String)
                            (ds1 :: Multilinear.Generic.Tensor a
                                    -> Multilinear.Generic.Tensor a)[OneShot]
                            (v :: Multilinear.Generic.Tensor a)[OneShot] ->
                          case v of z { DEFAULT ->
                          ds1
                            (Multilinear.Generic.$fMultilinearTensora_$cshiftRightmost
                               @ a
                               $dNum
                               z
                               ds) })
                         (GHC.Base.id @ (Multilinear.Generic.Tensor a))
                         commonIndices
                         t1)
                      (GHC.Base.foldr
                         @ GHC.Base.String
                         @ (Multilinear.Generic.Tensor a -> Multilinear.Generic.Tensor a)
                         (\ (ds :: GHC.Base.String)
                            (ds1 :: Multilinear.Generic.Tensor a
                                    -> Multilinear.Generic.Tensor a)[OneShot]
                            (v :: Multilinear.Generic.Tensor a)[OneShot] ->
                          case v of z { DEFAULT ->
                          ds1
                            (Multilinear.Generic.$fMultilinearTensora_$cshiftRightmost
                               @ a
                               $dNum
                               z
                               ds) })
                         (GHC.Base.id @ (Multilinear.Generic.Tensor a))
                         commonIndices
                         t2)
                      (Data.Bits..&. @ a $dBits)
                      (Multilinear.Generic.bitDot @ a $dNum $dBits))) -}
3435455de223a292a66afccee7caf4fd
  $fBitsTensor_$c.|. ::
    (GHC.Num.Num a, Data.Bits.Bits a) =>
    Multilinear.Generic.Tensor a
    -> Multilinear.Generic.Tensor a -> Multilinear.Generic.Tensor a
  {- Arity: 4,
     Strictness: <L,A><L,U(A,A,C(C(U)),A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A)><S,U><S,U>,
     Inline: [0],
     Unfolding: InlineRule (4, True, True)
                (\ @ a
                   (w :: GHC.Num.Num a)
                   (w1 :: Data.Bits.Bits a)
                   (w2 :: Multilinear.Generic.Tensor a)
                   (w3 :: Multilinear.Generic.Tensor a) ->
                 Multilinear.Generic.$w$c.|. @ a w1 w2 w3) -}
3435455de223a292a66afccee7caf4fd
  $fBitsTensor_$cbit ::
    (GHC.Num.Num a, Data.Bits.Bits a) =>
    GHC.Types.Int -> Multilinear.Generic.Tensor a
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,A><L,1*U(A,A,A,A,A,A,A,A,1*C1(U),A,A,A,A,A,A,A,A,A,A,A,A,A,A)><L,U>m1,
     Inline: (sat-args=1),
     Unfolding: InlineRule (3, False, False)
                (\ @ a
                   ($dNum :: GHC.Num.Num a)
                   ($dBits :: Data.Bits.Bits a)
                   (i :: GHC.Types.Int) ->
                 Multilinear.Generic.Scalar @ a (Data.Bits.bit @ a $dBits i)) -}
3435455de223a292a66afccee7caf4fd
  $fBitsTensor_$cbitSize ::
    (GHC.Num.Num a, Data.Bits.Bits a) =>
    Multilinear.Generic.Tensor a -> GHC.Types.Int
  {- Arity: 3,
     Strictness: <L,A><L,1*U(A,A,A,A,A,A,A,A,A,A,A,A,A,1*C1(U),A,A,A,A,A,A,A,A,A)><S,1*U>,
     Inline: (sat-args=1),
     Unfolding: InlineRule (3, False, False)
                (\ @ a
                   ($dNum :: GHC.Num.Num a)
                   ($dBits :: Data.Bits.Bits a)
                   (ds :: Multilinear.Generic.Tensor a) ->
                 case ds of wild {
                   DEFAULT
                   -> let {
                        $j :: GHC.Types.Int <join 0>
                        = case Data.Bits.bitSizeMaybe
                                 @ a
                                 $dBits
                                 (Multilinear.Generic.firstElem @ a wild) of wild1 {
                            GHC.Base.Nothing -> GHC.Types.I# -1# GHC.Base.Just v -> v }
                      } in
                      case wild of wild1 {
                        Multilinear.Generic.SimpleFinite ds1 ts
                        -> case (Data.Vector.Fusion.Bundle.Monadic.null
                                   @ Data.Vector.Fusion.Util.Id
                                   @ Data.Vector.Vector
                                   @ a
                                   Data.Vector.Fusion.Util.$fMonadId
                                   (Data.Vector.Generic.stream
                                      @ Data.Vector.Vector
                                      @ a
                                      (Data.Vector.$fVectorVectora @ a)
                                      ts))
                                  `cast`
                                (Data.Vector.Fusion.Util.N:Id[0] <GHC.Types.Bool>_R) of wild2 {
                             GHC.Types.False -> $j GHC.Types.True -> GHC.Types.I# -1# }
                        Multilinear.Generic.FiniteTensor ds1 ts
                        -> case (Data.Vector.Fusion.Bundle.Monadic.null
                                   @ Data.Vector.Fusion.Util.Id
                                   @ Data.Vector.Vector
                                   @ (Multilinear.Generic.Tensor a)
                                   Data.Vector.Fusion.Util.$fMonadId
                                   (Data.Vector.Generic.stream
                                      @ Data.Vector.Vector
                                      @ (Multilinear.Generic.Tensor a)
                                      (Data.Vector.$fVectorVectora @ (Multilinear.Generic.Tensor a))
                                      ts))
                                  `cast`
                                (Data.Vector.Fusion.Util.N:Id[0] <GHC.Types.Bool>_R) of wild2 {
                             GHC.Types.False -> $j GHC.Types.True -> GHC.Types.I# -1# }
                        Multilinear.Generic.InfiniteTensor ds1 ts
                        -> case ts of wild2 { [] -> GHC.Types.I# -1# : ds2 ds3 -> $j } }
                   Multilinear.Generic.Scalar x
                   -> case Data.Bits.bitSizeMaybe @ a $dBits x of wild1 {
                        GHC.Base.Nothing -> GHC.Types.I# -1# GHC.Base.Just v -> v }
                   Multilinear.Generic.Err ds1 -> GHC.Types.I# -1# }) -}
3435455de223a292a66afccee7caf4fd
  $fBitsTensor_$cbitSizeMaybe ::
    (GHC.Num.Num a, Data.Bits.Bits a) =>
    Multilinear.Generic.Tensor a -> GHC.Base.Maybe GHC.Types.Int
  {- Arity: 3,
     Strictness: <L,A><L,1*U(A,A,A,A,A,A,A,A,A,A,A,A,A,1*C1(U),A,A,A,A,A,A,A,A,A)><S,1*U>,
     Inline: (sat-args=1),
     Unfolding: InlineRule (3, False, False)
                (\ @ a
                   ($dNum :: GHC.Num.Num a)
                   ($dBits :: Data.Bits.Bits a)
                   (ds :: Multilinear.Generic.Tensor a) ->
                 case ds of wild {
                   Multilinear.Generic.Scalar x -> Data.Bits.bitSizeMaybe @ a $dBits x
                   Multilinear.Generic.SimpleFinite ds1 ts
                   -> case (Data.Vector.Fusion.Bundle.Monadic.null
                              @ Data.Vector.Fusion.Util.Id
                              @ Data.Vector.Vector
                              @ a
                              Data.Vector.Fusion.Util.$fMonadId
                              (Data.Vector.Generic.stream
                                 @ Data.Vector.Vector
                                 @ a
                                 (Data.Vector.$fVectorVectora @ a)
                                 ts))
                             `cast`
                           (Data.Vector.Fusion.Util.N:Id[0] <GHC.Types.Bool>_R) of wild1 {
                        GHC.Types.False
                        -> Data.Bits.bitSizeMaybe
                             @ a
                             $dBits
                             (Multilinear.Generic.firstElem @ a wild)
                        GHC.Types.True -> GHC.Base.Nothing @ GHC.Types.Int }
                   Multilinear.Generic.FiniteTensor ds1 ts
                   -> case (Data.Vector.Fusion.Bundle.Monadic.null
                              @ Data.Vector.Fusion.Util.Id
                              @ Data.Vector.Vector
                              @ (Multilinear.Generic.Tensor a)
                              Data.Vector.Fusion.Util.$fMonadId
                              (Data.Vector.Generic.stream
                                 @ Data.Vector.Vector
                                 @ (Multilinear.Generic.Tensor a)
                                 (Data.Vector.$fVectorVectora @ (Multilinear.Generic.Tensor a))
                                 ts))
                             `cast`
                           (Data.Vector.Fusion.Util.N:Id[0] <GHC.Types.Bool>_R) of wild1 {
                        GHC.Types.False
                        -> Data.Bits.bitSizeMaybe
                             @ a
                             $dBits
                             (Multilinear.Generic.firstElem @ a wild)
                        GHC.Types.True -> GHC.Base.Nothing @ GHC.Types.Int }
                   Multilinear.Generic.InfiniteTensor ds1 ts
                   -> case ts of wild1 {
                        [] -> GHC.Base.Nothing @ GHC.Types.Int
                        : ds2 ds3
                        -> Data.Bits.bitSizeMaybe
                             @ a
                             $dBits
                             (Multilinear.Generic.$fBitsTensor_$sfirstElem @ a ds1 ds2 ds3) }
                   Multilinear.Generic.Err ds1
                   -> GHC.Base.Nothing @ GHC.Types.Int }) -}
3435455de223a292a66afccee7caf4fd
  $fBitsTensor_$cclearBit ::
    (GHC.Num.Num a, Data.Bits.Bits a) =>
    Multilinear.Generic.Tensor a
    -> GHC.Types.Int -> Multilinear.Generic.Tensor a
  {- Arity: 4,
     Strictness: <L,U(C(C(U)),A,C(C(U)),A,A,A,C(U))><L,U(A,C(C(U)),C(C(U)),A,1*C1(U),A,A,A,1*C1(U),A,A,A,A,A,A,A,A,A,A,A,A,A,A)><S,U><L,U>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (4, False, False)
                (\ @ a
                   ($dNum :: GHC.Num.Num a)
                   ($dBits :: Data.Bits.Bits a)
                   (x :: Multilinear.Generic.Tensor a)
                   (i :: GHC.Types.Int) ->
                 let {
                   t2 :: a
                   = Data.Bits.complement @ a $dBits (Data.Bits.bit @ a $dBits i)
                 } in
                 let {
                   t1 :: Multilinear.Generic.Tensor a
                   = Multilinear.Generic.Scalar @ a t2
                 } in
                 let {
                   commonIndices :: [GHC.Base.String]
                   = GHC.Base.build
                       @ [GHC.Types.Char]
                       (\ @ b
                          (c :: [GHC.Types.Char] -> b -> b)[OneShot]
                          (n :: b)[OneShot] ->
                        GHC.Base.foldr
                          @ Multilinear.Index.TIndex
                          @ b
                          (GHC.Base.mapFB
                             @ [GHC.Types.Char]
                             @ b
                             @ Multilinear.Index.TIndex
                             (GHC.List.filterFB
                                @ [GHC.Types.Char]
                                @ b
                                c
                                (let {
                                   ds :: [GHC.Base.String]
                                   = GHC.Base.build
                                       @ [GHC.Types.Char]
                                       (\ @ b1
                                          (c1 :: [GHC.Types.Char] -> b1 -> b1)[OneShot]
                                          (n1 :: b1)[OneShot] ->
                                        GHC.Base.foldr
                                          @ Multilinear.Index.TIndex
                                          @ b1
                                          (GHC.Base.mapFB
                                             @ [GHC.Types.Char]
                                             @ b1
                                             @ Multilinear.Index.TIndex
                                             c1
                                             Multilinear.Index.tIndexName)
                                          n1
                                          (Multilinear.Generic.$fMultilinearTensora_$cindices
                                             @ a
                                             $dNum
                                             t1))
                                 } in
                                 \ (ds1 :: GHC.Base.String) ->
                                 GHC.List.elem
                                   @ GHC.Base.String
                                   GHC.Classes.$fEq[]_$s$fEq[]1
                                   ds1
                                   ds))
                             Multilinear.Index.tIndexName)
                          n
                          (Multilinear.Generic.$fMultilinearTensora_$cindices @ a $dNum x))
                 } in
                 Multilinear.Generic.mergeScalars
                   @ a
                   (Multilinear.Generic._elemByElem'
                      @ a
                      $dNum
                      (GHC.Base.foldr
                         @ GHC.Base.String
                         @ (Multilinear.Generic.Tensor a -> Multilinear.Generic.Tensor a)
                         (\ (ds :: GHC.Base.String)
                            (ds1 :: Multilinear.Generic.Tensor a
                                    -> Multilinear.Generic.Tensor a)[OneShot]
                            (v :: Multilinear.Generic.Tensor a)[OneShot] ->
                          case v of z { DEFAULT ->
                          ds1
                            (Multilinear.Generic.$fMultilinearTensora_$cshiftRightmost
                               @ a
                               $dNum
                               z
                               ds) })
                         (GHC.Base.id @ (Multilinear.Generic.Tensor a))
                         commonIndices
                         x)
                      (GHC.Base.foldr
                         @ GHC.Base.String
                         @ (Multilinear.Generic.Tensor a -> Multilinear.Generic.Tensor a)
                         (\ (ds :: GHC.Base.String)
                            (ds1 :: Multilinear.Generic.Tensor a
                                    -> Multilinear.Generic.Tensor a)[OneShot]
                            (v :: Multilinear.Generic.Tensor a)[OneShot] ->
                          case v of z { DEFAULT ->
                          ds1
                            (Multilinear.Generic.$fMultilinearTensora_$cshiftRightmost
                               @ a
                               $dNum
                               z
                               ds) })
                         (GHC.Base.id @ (Multilinear.Generic.Tensor a))
                         commonIndices
                         t1)
                      (Data.Bits..&. @ a $dBits)
                      (Multilinear.Generic.bitDot @ a $dNum $dBits))) -}
3435455de223a292a66afccee7caf4fd
  $fBitsTensor_$ccomplement ::
    (GHC.Num.Num a, Data.Bits.Bits a) =>
    Multilinear.Generic.Tensor a -> Multilinear.Generic.Tensor a
  {- Arity: 3,
     Strictness: <L,A><L,1*U(A,A,A,A,1*C(U),A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A)><S,1*U>,
     Inline: (sat-args=0),
     Unfolding: InlineRule (2, False, False)
                (\ @ a ($dNum :: GHC.Num.Num a) ($dBits :: Data.Bits.Bits a) ->
                 Multilinear.Generic.$fMultilinearTensora_$cfmap
                   @ a
                   @ a
                   (Data.Bits.complement @ a $dBits)) -}
3435455de223a292a66afccee7caf4fd
  $fBitsTensor_$ccomplementBit ::
    (GHC.Num.Num a, Data.Bits.Bits a) =>
    Multilinear.Generic.Tensor a
    -> GHC.Types.Int -> Multilinear.Generic.Tensor a
  {- Arity: 4,
     Strictness: <L,A><L,U(A,A,A,C(C(U)),A,A,A,A,1*C1(U),A,A,A,A,A,A,A,A,A,A,A,A,A,A)><S,U><L,U>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (4, False, False)
                (\ @ a
                   ($dNum :: GHC.Num.Num a)
                   ($dBits :: Data.Bits.Bits a)
                   (x :: Multilinear.Generic.Tensor a)
                   (i :: GHC.Types.Int) ->
                 Multilinear.Generic.$fBitsTensor_$cxor
                   @ a
                   $dNum
                   $dBits
                   x
                   (Multilinear.Generic.Scalar @ a (Data.Bits.bit @ a $dBits i))) -}
3435455de223a292a66afccee7caf4fd
  $fBitsTensor_$cisSigned ::
    (GHC.Num.Num a, Data.Bits.Bits a) =>
    Multilinear.Generic.Tensor a -> GHC.Types.Bool
  {- Arity: 3,
     Strictness: <L,A><L,1*U(A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,1*C1(U),A,A,A,A,A,A,A)><S,1*U>,
     Inline: (sat-args=1),
     Unfolding: InlineRule (3, False, False)
                (\ @ a
                   ($dNum :: GHC.Num.Num a)
                   ($dBits :: Data.Bits.Bits a)
                   (ds :: Multilinear.Generic.Tensor a) ->
                 case ds of wild {
                   Multilinear.Generic.Scalar x -> Data.Bits.isSigned @ a $dBits x
                   Multilinear.Generic.SimpleFinite ds1 ts
                   -> case (Data.Vector.Fusion.Bundle.Monadic.null
                              @ Data.Vector.Fusion.Util.Id
                              @ Data.Vector.Vector
                              @ a
                              Data.Vector.Fusion.Util.$fMonadId
                              (Data.Vector.Generic.stream
                                 @ Data.Vector.Vector
                                 @ a
                                 (Data.Vector.$fVectorVectora @ a)
                                 ts))
                             `cast`
                           (Data.Vector.Fusion.Util.N:Id[0] <GHC.Types.Bool>_R) of wild1 {
                        GHC.Types.False
                        -> Data.Bits.isSigned
                             @ a
                             $dBits
                             (Multilinear.Generic.firstElem @ a wild)
                        GHC.Types.True -> GHC.Types.False }
                   Multilinear.Generic.FiniteTensor ds1 ts
                   -> case (Data.Vector.Fusion.Bundle.Monadic.null
                              @ Data.Vector.Fusion.Util.Id
                              @ Data.Vector.Vector
                              @ (Multilinear.Generic.Tensor a)
                              Data.Vector.Fusion.Util.$fMonadId
                              (Data.Vector.Generic.stream
                                 @ Data.Vector.Vector
                                 @ (Multilinear.Generic.Tensor a)
                                 (Data.Vector.$fVectorVectora @ (Multilinear.Generic.Tensor a))
                                 ts))
                             `cast`
                           (Data.Vector.Fusion.Util.N:Id[0] <GHC.Types.Bool>_R) of wild1 {
                        GHC.Types.False
                        -> Data.Bits.isSigned
                             @ a
                             $dBits
                             (Multilinear.Generic.firstElem @ a wild)
                        GHC.Types.True -> GHC.Types.False }
                   Multilinear.Generic.InfiniteTensor ds1 ts
                   -> case ts of wild1 {
                        [] -> GHC.Types.False
                        : ds2 ds3
                        -> Data.Bits.isSigned
                             @ a
                             $dBits
                             (Multilinear.Generic.$fBitsTensor_$sfirstElem @ a ds1 ds2 ds3) }
                   Multilinear.Generic.Err ds1 -> GHC.Types.False }) -}
3435455de223a292a66afccee7caf4fd
  $fBitsTensor_$cp1Bits ::
    (GHC.Num.Num a, Data.Bits.Bits a) =>
    GHC.Classes.Eq (Multilinear.Generic.Tensor a)
  {- Arity: 2, HasNoCafRefs,
     Strictness: <L,A><L,1*U(1*U(C(C1(U)),A),A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A)>m,
     Unfolding: InlineRule (2, True, False)
                (\ @ a ($dNum :: GHC.Num.Num a) ($dBits :: Data.Bits.Bits a) ->
                 Multilinear.Generic.$fEqTensor
                   @ a
                   (Data.Bits.$p1Bits @ a $dBits)) -}
3435455de223a292a66afccee7caf4fd
  $fBitsTensor_$cpopCount ::
    (GHC.Num.Num a, Data.Bits.Bits a) =>
    Multilinear.Generic.Tensor a -> GHC.Types.Int
  {- Arity: 2,
     Strictness: <L,U(C(C(U)),C(C(U)),C(C(U)),A,C(U),C(U),C(U))><L,U(U(C(C1(U)),A),C(C(U)),C(C(U)),C(C(U)),C(U),C(C1(U)),C(C1(U)),A,C(U),A,A,A,A,C(U),A,C(U),A,A,A,A,A,A,A)>,
     Inline: (sat-args=0),
     Unfolding(loop-breaker): InlineRule (2, False, False)
                              (\ @ a ($dNum :: GHC.Num.Num a) ($dBits :: Data.Bits.Bits a) ->
                               Data.Bits.popCountDefault
                                 @ (Multilinear.Generic.Tensor a)
                                 (Multilinear.Generic.$fBitsTensor @ a $dNum $dBits)
                                 (Multilinear.Generic.$fNumTensor @ a $dNum)) -}
3435455de223a292a66afccee7caf4fd
  $fBitsTensor_$crotate ::
    (GHC.Num.Num a, Data.Bits.Bits a) =>
    Multilinear.Generic.Tensor a
    -> GHC.Types.Int -> Multilinear.Generic.Tensor a
  {- Arity: 4,
     Strictness: <L,A><L,U(A,A,A,A,A,A,C(C1(U)),A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A)><S,1*U><L,U>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (4, False, False)
                (\ @ a
                   ($dNum :: GHC.Num.Num a)
                   ($dBits :: Data.Bits.Bits a)
                   (t :: Multilinear.Generic.Tensor a)
                   (n :: GHC.Types.Int) ->
                 Multilinear.Generic.$fMultilinearTensora_$cfmap
                   @ a
                   @ a
                   (\ (ds :: a) -> Data.Bits.rotate @ a $dBits ds n)
                   t) -}
3435455de223a292a66afccee7caf4fd
  $fBitsTensor_$crotateL ::
    (GHC.Num.Num a, Data.Bits.Bits a) =>
    Multilinear.Generic.Tensor a
    -> GHC.Types.Int -> Multilinear.Generic.Tensor a
  {- Arity: 4,
     Strictness: <L,A><L,U(A,A,A,A,A,A,C(C1(U)),A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A)><S,1*U><L,U>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (4, False, True)
                Multilinear.Generic.$fBitsTensor_$crotate -}
3435455de223a292a66afccee7caf4fd
  $fBitsTensor_$crotateR ::
    (GHC.Num.Num a, Data.Bits.Bits a) =>
    Multilinear.Generic.Tensor a
    -> GHC.Types.Int -> Multilinear.Generic.Tensor a
  {- Arity: 4,
     Strictness: <L,A><L,U(A,A,A,A,A,A,C(C1(U)),A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A)><S,1*U><L,1*U(U)>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (4, False, False)
                (\ @ a
                   ($dNum :: GHC.Num.Num a)
                   ($dBits :: Data.Bits.Bits a)
                   (x :: Multilinear.Generic.Tensor a)
                   (i :: GHC.Types.Int) ->
                 let {
                   n :: GHC.Types.Int
                   = case i of wild { GHC.Types.I# x1 ->
                     GHC.Types.I# (GHC.Prim.negateInt# x1) }
                 } in
                 Multilinear.Generic.$fMultilinearTensora_$cfmap
                   @ a
                   @ a
                   (\ (ds :: a) -> Data.Bits.rotate @ a $dBits ds n)
                   x) -}
3435455de223a292a66afccee7caf4fd
  $fBitsTensor_$csetBit ::
    (GHC.Num.Num a, Data.Bits.Bits a) =>
    Multilinear.Generic.Tensor a
    -> GHC.Types.Int -> Multilinear.Generic.Tensor a
  {- Arity: 4,
     Strictness: <L,A><L,U(A,A,C(C(U)),A,A,A,A,A,1*C1(U),A,A,A,A,A,A,A,A,A,A,A,A,A,A)><S,U><L,U>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (4, False, False)
                (\ @ a
                   ($dNum :: GHC.Num.Num a)
                   ($dBits :: Data.Bits.Bits a)
                   (x :: Multilinear.Generic.Tensor a)
                   (i :: GHC.Types.Int) ->
                 Multilinear.Generic.$fBitsTensor_$c.|.
                   @ a
                   $dNum
                   $dBits
                   x
                   (Multilinear.Generic.Scalar @ a (Data.Bits.bit @ a $dBits i))) -}
3435455de223a292a66afccee7caf4fd
  $fBitsTensor_$cshift ::
    (GHC.Num.Num a, Data.Bits.Bits a) =>
    Multilinear.Generic.Tensor a
    -> GHC.Types.Int -> Multilinear.Generic.Tensor a
  {- Arity: 4,
     Strictness: <L,A><L,U(A,A,A,A,A,C(C1(U)),A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A)><S,1*U><L,U>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (4, False, False)
                (\ @ a
                   ($dNum :: GHC.Num.Num a)
                   ($dBits :: Data.Bits.Bits a)
                   (t :: Multilinear.Generic.Tensor a)
                   (n :: GHC.Types.Int) ->
                 Multilinear.Generic.$fMultilinearTensora_$cfmap
                   @ a
                   @ a
                   (\ (ds :: a) -> Data.Bits.shift @ a $dBits ds n)
                   t) -}
3435455de223a292a66afccee7caf4fd
  $fBitsTensor_$cshiftL ::
    (GHC.Num.Num a, Data.Bits.Bits a) =>
    Multilinear.Generic.Tensor a
    -> GHC.Types.Int -> Multilinear.Generic.Tensor a
  {- Arity: 4,
     Strictness: <L,A><L,U(A,A,A,A,A,C(C1(U)),A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A)><S,1*U><L,U>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (4, False, True)
                Multilinear.Generic.$fBitsTensor_$cshift -}
3435455de223a292a66afccee7caf4fd
  $fBitsTensor_$cshiftR ::
    (GHC.Num.Num a, Data.Bits.Bits a) =>
    Multilinear.Generic.Tensor a
    -> GHC.Types.Int -> Multilinear.Generic.Tensor a
  {- Arity: 4,
     Strictness: <L,A><L,U(A,A,A,A,A,C(C1(U)),A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A)><S,1*U><L,1*U(U)>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (4, False, False)
                (\ @ a
                   ($dNum :: GHC.Num.Num a)
                   ($dBits :: Data.Bits.Bits a)
                   (x :: Multilinear.Generic.Tensor a)
                   (i :: GHC.Types.Int) ->
                 let {
                   n :: GHC.Types.Int
                   = case i of wild { GHC.Types.I# x1 ->
                     GHC.Types.I# (GHC.Prim.negateInt# x1) }
                 } in
                 Multilinear.Generic.$fMultilinearTensora_$cfmap
                   @ a
                   @ a
                   (\ (ds :: a) -> Data.Bits.shift @ a $dBits ds n)
                   x) -}
3435455de223a292a66afccee7caf4fd
  $fBitsTensor_$ctestBit ::
    (GHC.Num.Num a, Data.Bits.Bits a) =>
    Multilinear.Generic.Tensor a -> GHC.Types.Int -> GHC.Types.Bool
  {- Arity: 4, HasNoCafRefs, Strictness: <L,A><L,A><L,A><L,A>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (4, False, True)
                (\ @ a
                   ($dNum :: GHC.Num.Num a)
                   ($dBits :: Data.Bits.Bits a)
                   (ds :: Multilinear.Generic.Tensor a)
                   (ds1 :: GHC.Types.Int) ->
                 GHC.Types.False) -}
3435455de223a292a66afccee7caf4fd
  $fBitsTensor_$cunsafeShiftL ::
    (GHC.Num.Num a, Data.Bits.Bits a) =>
    Multilinear.Generic.Tensor a
    -> GHC.Types.Int -> Multilinear.Generic.Tensor a
  {- Arity: 4,
     Strictness: <L,A><L,U(A,A,A,A,A,C(C1(U)),A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A)><S,1*U><L,U>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (4, False, True)
                Multilinear.Generic.$fBitsTensor_$cshift -}
3435455de223a292a66afccee7caf4fd
  $fBitsTensor_$cunsafeShiftR ::
    (GHC.Num.Num a, Data.Bits.Bits a) =>
    Multilinear.Generic.Tensor a
    -> GHC.Types.Int -> Multilinear.Generic.Tensor a
  {- Arity: 4,
     Strictness: <L,A><L,U(A,A,A,A,A,C(C1(U)),A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A)><S,1*U><L,1*U(U)>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (4, False, True)
                Multilinear.Generic.$fBitsTensor_$cshiftR -}
3435455de223a292a66afccee7caf4fd
  $fBitsTensor_$cxor ::
    (GHC.Num.Num a, Data.Bits.Bits a) =>
    Multilinear.Generic.Tensor a
    -> Multilinear.Generic.Tensor a -> Multilinear.Generic.Tensor a
  {- Arity: 4,
     Strictness: <L,A><L,U(A,A,A,C(C(U)),A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A)><S,U><S,U>,
     Inline: [0],
     Unfolding: InlineRule (4, True, True)
                (\ @ a
                   (w :: GHC.Num.Num a)
                   (w1 :: Data.Bits.Bits a)
                   (w2 :: Multilinear.Generic.Tensor a)
                   (w3 :: Multilinear.Generic.Tensor a) ->
                 Multilinear.Generic.$w$cxor @ a w1 w2 w3) -}
3435455de223a292a66afccee7caf4fd
  $fBitsTensor_$czeroBits ::
    (GHC.Num.Num a, Data.Bits.Bits a) => Multilinear.Generic.Tensor a
  {- Arity: 2,
     Strictness: <L,U(C(C(U)),A,C(C(U)),A,A,A,C(U))><L,U(A,C(C(U)),C(C(U)),A,1*C1(U),A,A,A,C(U),A,A,A,A,A,A,A,A,A,A,A,A,A,A)>,
     Unfolding: (\ @ a
                   ($dNum :: GHC.Num.Num a)
                   ($dBits :: Data.Bits.Bits a) ->
                 let {
                   t2 :: a
                   = Data.Bits.complement
                       @ a
                       $dBits
                       (Data.Bits.bit @ a $dBits Multilinear.Generic.$fBitsTensor3)
                 } in
                 let {
                   t1 :: Multilinear.Generic.Tensor a
                   = Multilinear.Generic.Scalar @ a t2
                 } in
                 let {
                   x :: a = Data.Bits.bit @ a $dBits Multilinear.Generic.$fBitsTensor3
                 } in
                 let {
                   x1 :: Multilinear.Generic.Tensor a
                   = Multilinear.Generic.Scalar @ a x
                 } in
                 let {
                   ds :: [GHC.Base.String]
                   = GHC.Base.map
                       @ Multilinear.Index.TIndex
                       @ [GHC.Types.Char]
                       Multilinear.Index.tIndexName
                       (Multilinear.Generic.$w$cindices @ a t1)
                 } in
                 letrec {
                   go8 :: [Multilinear.Index.TIndex] -> [[GHC.Types.Char]]
                     {- Arity: 1, Strictness: <S,1*U> -}
                   = \ (ds1 :: [Multilinear.Index.TIndex]) ->
                     case ds1 of wild {
                       [] -> GHC.Types.[] @ [GHC.Types.Char]
                       : y ys
                       -> let {
                            x2 :: [GHC.Types.Char]
                            = case y of wild1 {
                                Multilinear.Index.Covariant ds2 ds3 -> ds3
                                Multilinear.Index.Contravariant ds2 ds3 -> ds3
                                Multilinear.Index.Indifferent ds2 ds3 -> ds3 }
                          } in
                          case GHC.List.elem
                                 @ GHC.Base.String
                                 GHC.Classes.$fEq[]_$s$fEq[]1
                                 x2
                                 ds of wild1 {
                            GHC.Types.False -> go8 ys
                            GHC.Types.True -> GHC.Types.: @ [GHC.Types.Char] x2 (go8 ys) } }
                 } in
                 let {
                   commonIndices :: [GHC.Base.String]
                   = go8 (Multilinear.Generic.$w$cindices @ a x1)
                 } in
                 let {
                   karg :: Multilinear.Generic.Tensor a
                   = Multilinear.Generic.$fBitsTensor2 @ a commonIndices t1
                 } in
                 let {
                   karg1 :: a -> a -> a = Data.Bits..&. @ a $dBits
                 } in
                 let {
                   karg2 :: Multilinear.Generic.Tensor a
                            -> Multilinear.Generic.Tensor a -> Multilinear.Generic.Tensor a
                     {- Arity: 2 -}
                   = Multilinear.Generic.bitDot @ a $dNum $dBits
                 } in
                 letrec {
                   go9 :: [GHC.Base.String]
                          -> Multilinear.Generic.Tensor a -> Multilinear.Generic.Tensor a
                     <join 2> {- Arity: 2, Strictness: <S,1*U><S,U> -}
                   = \ (ds1 :: [GHC.Base.String])
                       (eta :: Multilinear.Generic.Tensor a) ->
                     case ds1 of wild {
                       []
                       -> Multilinear.Generic.mergeScalars
                            @ a
                            (Multilinear.Generic.$w_elemByElem' @ a eta karg karg1 karg2)
                       : y ys
                       -> go9 ys (Multilinear.Generic.$w$cshiftRightmost @ a eta y) }
                 } in
                 go9 commonIndices x1) -}
3435455de223a292a66afccee7caf4fd
  $fBitsTensor_$sfirstElem ::
    Multilinear.Index.Infinite.Index
    -> Multilinear.Generic.Tensor a
    -> [Multilinear.Generic.Tensor a]
    -> a
  {- Arity: 3, Strictness: <L,A><S,1*U><L,A> -}
06d625020f478c7e31c7042eb0981cef
  $fBitsTensor_$sfirstElem1 ::
    Multilinear.Index.Finite.Index
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> GHC.Prim.Array# (Multilinear.Generic.Tensor a)
    -> a
  {- Arity: 4, Strictness: <L,A><S,U><S,U><S,U> -}
3435455de223a292a66afccee7caf4fd
  $fEqTensor ::
    GHC.Classes.Eq a => GHC.Classes.Eq (Multilinear.Generic.Tensor a)
  DFunId
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U(C(C1(U)),A)>m,
     Inline: CONLIKE,
     Unfolding: DFun: @ a (v :: GHC.Classes.Eq a).
                  @ (Multilinear.Generic.Tensor a)
                  (Multilinear.Generic.$fEqTensor_$c== @ a v)
                  (Multilinear.Generic.$fEqTensor_$c/= @ a v) -}
3435455de223a292a66afccee7caf4fd
  $fEqTensor_$c/= ::
    GHC.Classes.Eq a =>
    Multilinear.Generic.Tensor a
    -> Multilinear.Generic.Tensor a -> GHC.Types.Bool
  {- Arity: 3, HasNoCafRefs, Strictness: <L,U(C(C1(U)),A)><L,U><L,U>,
     Unfolding: InlineRule (3, True, False)
                (\ @ a
                   ($dEq :: GHC.Classes.Eq a)
                   (a1 :: Multilinear.Generic.Tensor a)
                   (b :: Multilinear.Generic.Tensor a) ->
                 case Multilinear.Generic.$fEqTensor_$c== @ a $dEq a1 b of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False }) -}
3435455de223a292a66afccee7caf4fd
  $fEqTensor_$c== ::
    GHC.Classes.Eq a =>
    Multilinear.Generic.Tensor a
    -> Multilinear.Generic.Tensor a -> GHC.Types.Bool
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U(C(C1(U)),A)> -}
3435455de223a292a66afccee7caf4fd
  $fFloatingTensor ::
    GHC.Float.Floating a =>
    GHC.Float.Floating (Multilinear.Generic.Tensor a)
  DFunId
  {- Arity: 1,
     Strictness: <L,U(U(U(C(C(U)),C(C(U)),C(C(U)),A,C(U),C(U),C(U)),C(C(U)),A,C(U)),1*U,C(U),C(U),A,A,A,C(U),C(U),A,C(U),C(U),C(U),C(U),C(U),A,A,C(U),C(U),A,A,A,A)>,
     Inline: CONLIKE,
     Unfolding: DFun: @ a (v :: GHC.Float.Floating a).
                  @ (Multilinear.Generic.Tensor a)
                  (Multilinear.Generic.$fFloatingTensor_$cp1Floating @ a v)
                  (Multilinear.Generic.$fFloatingTensor_$cpi @ a v)
                  (Multilinear.Generic.$fFloatingTensor_$cexp @ a v)
                  (Multilinear.Generic.$fFloatingTensor_$clog @ a v)
                  (Multilinear.Generic.$fFloatingTensor_$csqrt @ a v)
                  (Multilinear.Generic.$fFloatingTensor_$c** @ a v)
                  (Multilinear.Generic.$fFloatingTensor_$clogBase @ a v)
                  (Multilinear.Generic.$fFloatingTensor_$csin @ a v)
                  (Multilinear.Generic.$fFloatingTensor_$ccos @ a v)
                  (Multilinear.Generic.$fFloatingTensor_$ctan @ a v)
                  (Multilinear.Generic.$fFloatingTensor_$casin @ a v)
                  (Multilinear.Generic.$fFloatingTensor_$cacos @ a v)
                  (Multilinear.Generic.$fFloatingTensor_$catan @ a v)
                  (Multilinear.Generic.$fFloatingTensor_$csinh @ a v)
                  (Multilinear.Generic.$fFloatingTensor_$ccosh @ a v)
                  (Multilinear.Generic.$fFloatingTensor_$ctanh @ a v)
                  (Multilinear.Generic.$fFloatingTensor_$casinh @ a v)
                  (Multilinear.Generic.$fFloatingTensor_$cacosh @ a v)
                  (Multilinear.Generic.$fFloatingTensor_$catanh @ a v)
                  (Multilinear.Generic.$fFloatingTensor_$clog1p @ a v)
                  (Multilinear.Generic.$fFloatingTensor_$cexpm1 @ a v)
                  (Multilinear.Generic.$fFloatingTensor_$clog1pexp @ a v)
                  (Multilinear.Generic.$fFloatingTensor_$clog1mexp @ a v) -}
3435455de223a292a66afccee7caf4fd
  $fFloatingTensor_$c** ::
    GHC.Float.Floating a =>
    Multilinear.Generic.Tensor a
    -> Multilinear.Generic.Tensor a -> Multilinear.Generic.Tensor a
  {- Arity: 3,
     Strictness: <L,U(1*U(1*U(C(C(U)),A,C(C(U)),A,A,A,C(U)),A,A,A),A,1*C(U),1*C(U),A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A)><S,1*U><S,U>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (3, False, False)
                (\ @ a ($dFloating :: GHC.Float.Floating a) ->
                 let {
                   $dNum :: GHC.Real.Fractional a
                   = GHC.Float.$p1Floating @ a $dFloating
                 } in
                 let {
                   $dNum1 :: GHC.Num.Num a = GHC.Real.$p1Fractional @ a $dNum
                 } in
                 \ (x :: Multilinear.Generic.Tensor a)
                   (y :: Multilinear.Generic.Tensor a) ->
                 let {
                   t1 :: Multilinear.Generic.Tensor a
                   = Multilinear.Generic.$fMultilinearTensora_$cfmap
                       @ a
                       @ a
                       (GHC.Float.log @ a $dFloating)
                       x
                 } in
                 let {
                   commonIndices :: [GHC.Base.String]
                   = GHC.Base.build
                       @ [GHC.Types.Char]
                       (\ @ b
                          (c :: [GHC.Types.Char] -> b -> b)[OneShot]
                          (n :: b)[OneShot] ->
                        GHC.Base.foldr
                          @ Multilinear.Index.TIndex
                          @ b
                          (GHC.Base.mapFB
                             @ [GHC.Types.Char]
                             @ b
                             @ Multilinear.Index.TIndex
                             (GHC.List.filterFB
                                @ [GHC.Types.Char]
                                @ b
                                c
                                (let {
                                   ds :: [GHC.Base.String]
                                   = GHC.Base.build
                                       @ [GHC.Types.Char]
                                       (\ @ b1
                                          (c1 :: [GHC.Types.Char] -> b1 -> b1)[OneShot]
                                          (n1 :: b1)[OneShot] ->
                                        GHC.Base.foldr
                                          @ Multilinear.Index.TIndex
                                          @ b1
                                          (GHC.Base.mapFB
                                             @ [GHC.Types.Char]
                                             @ b1
                                             @ Multilinear.Index.TIndex
                                             c1
                                             Multilinear.Index.tIndexName)
                                          n1
                                          (Multilinear.Generic.$fMultilinearTensora_$cindices
                                             @ a
                                             $dNum1
                                             y))
                                 } in
                                 \ (ds1 :: GHC.Base.String) ->
                                 GHC.List.elem
                                   @ GHC.Base.String
                                   GHC.Classes.$fEq[]_$s$fEq[]1
                                   ds1
                                   ds))
                             Multilinear.Index.tIndexName)
                          n
                          (Multilinear.Generic.$fMultilinearTensora_$cindices @ a $dNum1 t1))
                 } in
                 Multilinear.Generic.$fMultilinearTensora_$cfmap
                   @ a
                   @ a
                   (GHC.Float.exp @ a $dFloating)
                   (Multilinear.Generic.mergeScalars
                      @ a
                      (Multilinear.Generic._elemByElem'
                         @ a
                         $dNum1
                         (GHC.Base.foldr
                            @ GHC.Base.String
                            @ (Multilinear.Generic.Tensor a -> Multilinear.Generic.Tensor a)
                            (\ (ds :: GHC.Base.String)
                               (ds1 :: Multilinear.Generic.Tensor a
                                       -> Multilinear.Generic.Tensor a)[OneShot]
                               (v :: Multilinear.Generic.Tensor a)[OneShot] ->
                             case v of z { DEFAULT ->
                             ds1
                               (Multilinear.Generic.$fMultilinearTensora_$cshiftRightmost
                                  @ a
                                  $dNum1
                                  z
                                  ds) })
                            (GHC.Base.id @ (Multilinear.Generic.Tensor a))
                            commonIndices
                            t1)
                         (GHC.Base.foldr
                            @ GHC.Base.String
                            @ (Multilinear.Generic.Tensor a -> Multilinear.Generic.Tensor a)
                            (\ (ds :: GHC.Base.String)
                               (ds1 :: Multilinear.Generic.Tensor a
                                       -> Multilinear.Generic.Tensor a)[OneShot]
                               (v :: Multilinear.Generic.Tensor a)[OneShot] ->
                             case v of z { DEFAULT ->
                             ds1
                               (Multilinear.Generic.$fMultilinearTensora_$cshiftRightmost
                                  @ a
                                  $dNum1
                                  z
                                  ds) })
                            (GHC.Base.id @ (Multilinear.Generic.Tensor a))
                            commonIndices
                            y)
                         (GHC.Num.* @ a $dNum1)
                         (Multilinear.Generic.dot @ a $dNum1)))) -}
3435455de223a292a66afccee7caf4fd
  $fFloatingTensor_$cacos ::
    GHC.Float.Floating a =>
    Multilinear.Generic.Tensor a -> Multilinear.Generic.Tensor a
  {- Arity: 2,
     Strictness: <L,1*U(A,A,A,A,A,A,A,A,A,A,A,1*C(U),A,A,A,A,A,A,A,A,A,A,A)><S,1*U>,
     Inline: (sat-args=1),
     Unfolding: InlineRule (2, False, False)
                (\ @ a
                   ($dFloating :: GHC.Float.Floating a)
                   (t :: Multilinear.Generic.Tensor a) ->
                 Multilinear.Generic.$fMultilinearTensora_$cfmap
                   @ a
                   @ a
                   (GHC.Float.acos @ a $dFloating)
                   t) -}
3435455de223a292a66afccee7caf4fd
  $fFloatingTensor_$cacosh ::
    GHC.Float.Floating a =>
    Multilinear.Generic.Tensor a -> Multilinear.Generic.Tensor a
  {- Arity: 2,
     Strictness: <L,1*U(A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,1*C(U),A,A,A,A,A)><S,1*U>,
     Inline: (sat-args=1),
     Unfolding: InlineRule (2, False, False)
                (\ @ a
                   ($dFloating :: GHC.Float.Floating a)
                   (t :: Multilinear.Generic.Tensor a) ->
                 Multilinear.Generic.$fMultilinearTensora_$cfmap
                   @ a
                   @ a
                   (GHC.Float.acosh @ a $dFloating)
                   t) -}
3435455de223a292a66afccee7caf4fd
  $fFloatingTensor_$casin ::
    GHC.Float.Floating a =>
    Multilinear.Generic.Tensor a -> Multilinear.Generic.Tensor a
  {- Arity: 2,
     Strictness: <L,1*U(A,A,A,A,A,A,A,A,A,A,1*C(U),A,A,A,A,A,A,A,A,A,A,A,A)><S,1*U>,
     Inline: (sat-args=1),
     Unfolding: InlineRule (2, False, False)
                (\ @ a
                   ($dFloating :: GHC.Float.Floating a)
                   (t :: Multilinear.Generic.Tensor a) ->
                 Multilinear.Generic.$fMultilinearTensora_$cfmap
                   @ a
                   @ a
                   (GHC.Float.asin @ a $dFloating)
                   t) -}
3435455de223a292a66afccee7caf4fd
  $fFloatingTensor_$casinh ::
    GHC.Float.Floating a =>
    Multilinear.Generic.Tensor a -> Multilinear.Generic.Tensor a
  {- Arity: 2,
     Strictness: <L,1*U(A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,1*C(U),A,A,A,A,A)><S,1*U>,
     Inline: (sat-args=1),
     Unfolding: InlineRule (2, False, False)
                (\ @ a
                   ($dFloating :: GHC.Float.Floating a)
                   (t :: Multilinear.Generic.Tensor a) ->
                 Multilinear.Generic.$fMultilinearTensora_$cfmap
                   @ a
                   @ a
                   (GHC.Float.acosh @ a $dFloating)
                   t) -}
3435455de223a292a66afccee7caf4fd
  $fFloatingTensor_$catan ::
    GHC.Float.Floating a =>
    Multilinear.Generic.Tensor a -> Multilinear.Generic.Tensor a
  {- Arity: 2,
     Strictness: <L,1*U(A,A,A,A,A,A,A,A,A,A,A,A,1*C(U),A,A,A,A,A,A,A,A,A,A)><S,1*U>,
     Inline: (sat-args=1),
     Unfolding: InlineRule (2, False, False)
                (\ @ a
                   ($dFloating :: GHC.Float.Floating a)
                   (t :: Multilinear.Generic.Tensor a) ->
                 Multilinear.Generic.$fMultilinearTensora_$cfmap
                   @ a
                   @ a
                   (GHC.Float.atan @ a $dFloating)
                   t) -}
3435455de223a292a66afccee7caf4fd
  $fFloatingTensor_$catanh ::
    GHC.Float.Floating a =>
    Multilinear.Generic.Tensor a -> Multilinear.Generic.Tensor a
  {- Arity: 2,
     Strictness: <L,1*U(A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,1*C(U),A,A,A,A)><S,1*U>,
     Inline: (sat-args=1),
     Unfolding: InlineRule (2, False, False)
                (\ @ a
                   ($dFloating :: GHC.Float.Floating a)
                   (t :: Multilinear.Generic.Tensor a) ->
                 Multilinear.Generic.$fMultilinearTensora_$cfmap
                   @ a
                   @ a
                   (GHC.Float.atanh @ a $dFloating)
                   t) -}
3435455de223a292a66afccee7caf4fd
  $fFloatingTensor_$ccos ::
    GHC.Float.Floating a =>
    Multilinear.Generic.Tensor a -> Multilinear.Generic.Tensor a
  {- Arity: 2,
     Strictness: <L,1*U(A,A,A,A,A,A,A,A,1*C(U),A,A,A,A,A,A,A,A,A,A,A,A,A,A)><S,1*U>,
     Inline: (sat-args=1),
     Unfolding: InlineRule (2, False, False)
                (\ @ a
                   ($dFloating :: GHC.Float.Floating a)
                   (t :: Multilinear.Generic.Tensor a) ->
                 Multilinear.Generic.$fMultilinearTensora_$cfmap
                   @ a
                   @ a
                   (GHC.Float.cos @ a $dFloating)
                   t) -}
3435455de223a292a66afccee7caf4fd
  $fFloatingTensor_$ccosh ::
    GHC.Float.Floating a =>
    Multilinear.Generic.Tensor a -> Multilinear.Generic.Tensor a
  {- Arity: 2,
     Strictness: <L,1*U(A,A,A,A,A,A,A,A,A,A,A,A,A,A,1*C(U),A,A,A,A,A,A,A,A)><S,1*U>,
     Inline: (sat-args=1),
     Unfolding: InlineRule (2, False, False)
                (\ @ a
                   ($dFloating :: GHC.Float.Floating a)
                   (t :: Multilinear.Generic.Tensor a) ->
                 Multilinear.Generic.$fMultilinearTensora_$cfmap
                   @ a
                   @ a
                   (GHC.Float.cosh @ a $dFloating)
                   t) -}
3435455de223a292a66afccee7caf4fd
  $fFloatingTensor_$cexp ::
    GHC.Float.Floating a =>
    Multilinear.Generic.Tensor a -> Multilinear.Generic.Tensor a
  {- Arity: 2,
     Strictness: <L,1*U(A,A,1*C(U),A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A)><S,1*U>,
     Inline: (sat-args=1),
     Unfolding: InlineRule (2, False, False)
                (\ @ a
                   ($dFloating :: GHC.Float.Floating a)
                   (t :: Multilinear.Generic.Tensor a) ->
                 Multilinear.Generic.$fMultilinearTensora_$cfmap
                   @ a
                   @ a
                   (GHC.Float.exp @ a $dFloating)
                   t) -}
3435455de223a292a66afccee7caf4fd
  $fFloatingTensor_$cexpm1 ::
    GHC.Float.Floating a =>
    Multilinear.Generic.Tensor a -> Multilinear.Generic.Tensor a
  {- Arity: 2,
     Strictness: <L,U(1*U(1*U(A,C(C(U)),A,A,A,A,1*C1(U)),A,A,A),A,1*C(U),A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A)><S,1*U>,
     Inline: (sat-args=1),
     Unfolding: InlineRule (2, False, False)
                (\ @ a ($dFloating :: GHC.Float.Floating a) ->
                 let {
                   $dFractional :: GHC.Real.Fractional a
                   = GHC.Float.$p1Floating @ a $dFloating
                 } in
                 let {
                   $dNum :: GHC.Num.Num a = GHC.Real.$p1Fractional @ a $dFractional
                 } in
                 \ (x :: Multilinear.Generic.Tensor a) ->
                 Multilinear.Generic.$fNumTensor_$c-
                   @ a
                   $dNum
                   (Multilinear.Generic.$fMultilinearTensora_$cfmap
                      @ a
                      @ a
                      (GHC.Float.exp @ a $dFloating)
                      x)
                   (Multilinear.Generic.Scalar
                      @ a
                      (GHC.Num.fromInteger @ a $dNum 1))) -}
3435455de223a292a66afccee7caf4fd
  $fFloatingTensor_$clog ::
    GHC.Float.Floating a =>
    Multilinear.Generic.Tensor a -> Multilinear.Generic.Tensor a
  {- Arity: 2,
     Strictness: <L,1*U(A,A,A,1*C(U),A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A)><S,1*U>,
     Inline: (sat-args=1),
     Unfolding: InlineRule (2, False, False)
                (\ @ a
                   ($dFloating :: GHC.Float.Floating a)
                   (t :: Multilinear.Generic.Tensor a) ->
                 Multilinear.Generic.$fMultilinearTensora_$cfmap
                   @ a
                   @ a
                   (GHC.Float.log @ a $dFloating)
                   t) -}
3435455de223a292a66afccee7caf4fd
  $fFloatingTensor_$clog1mexp ::
    GHC.Float.Floating a =>
    Multilinear.Generic.Tensor a -> Multilinear.Generic.Tensor a
  {- Arity: 2,
     Strictness: <L,U(1*U(1*U(C(C(U)),C(C(U)),A,A,A,A,C(U)),A,A,A),A,1*C(U),1*C(U),A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A)><S,1*U>,
     Inline: (sat-args=1),
     Unfolding: InlineRule (2, False, False)
                (\ @ a ($dFloating :: GHC.Float.Floating a) ->
                 let {
                   $dNum :: GHC.Real.Fractional a
                   = GHC.Float.$p1Floating @ a $dFloating
                 } in
                 let {
                   $dNum1 :: GHC.Num.Num a = GHC.Real.$p1Fractional @ a $dNum
                 } in
                 \ (x :: Multilinear.Generic.Tensor a) ->
                 let {
                   $dFractional :: GHC.Real.Fractional a
                   = GHC.Float.$p1Floating @ a $dFloating
                 } in
                 let {
                   $dNum2 :: GHC.Num.Num a = GHC.Real.$p1Fractional @ a $dFractional
                 } in
                 Multilinear.Generic.$fMultilinearTensora_$cfmap
                   @ a
                   @ a
                   (GHC.Float.log @ a $dFloating)
                   (Multilinear.Generic.dot_$c+
                      @ a
                      $dNum2
                      (Multilinear.Generic.Scalar @ a (GHC.Num.fromInteger @ a $dNum2 1))
                      (Multilinear.Generic.$fNumTensor_$c-
                         @ a
                         $dNum1
                         (Multilinear.Generic.Scalar @ a (GHC.Num.fromInteger @ a $dNum1 0))
                         (Multilinear.Generic.$fMultilinearTensora_$cfmap
                            @ a
                            @ a
                            (GHC.Float.exp @ a $dFloating)
                            x)))) -}
3435455de223a292a66afccee7caf4fd
  $fFloatingTensor_$clog1p ::
    GHC.Float.Floating a =>
    Multilinear.Generic.Tensor a -> Multilinear.Generic.Tensor a
  {- Arity: 2,
     Strictness: <L,U(1*U(1*U(C(C(U)),A,A,A,A,A,1*C1(U)),A,A,A),A,A,1*C(U),A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A)><S,U>,
     Inline: (sat-args=1),
     Unfolding: InlineRule (2, False, False)
                (\ @ a ($dFloating :: GHC.Float.Floating a) ->
                 let {
                   $dFractional :: GHC.Real.Fractional a
                   = GHC.Float.$p1Floating @ a $dFloating
                 } in
                 let {
                   $dNum :: GHC.Num.Num a = GHC.Real.$p1Fractional @ a $dFractional
                 } in
                 \ (x :: Multilinear.Generic.Tensor a) ->
                 Multilinear.Generic.$fMultilinearTensora_$cfmap
                   @ a
                   @ a
                   (GHC.Float.log @ a $dFloating)
                   (Multilinear.Generic.dot_$c+
                      @ a
                      $dNum
                      (Multilinear.Generic.Scalar @ a (GHC.Num.fromInteger @ a $dNum 1))
                      x)) -}
3435455de223a292a66afccee7caf4fd
  $fFloatingTensor_$clog1pexp ::
    GHC.Float.Floating a =>
    Multilinear.Generic.Tensor a -> Multilinear.Generic.Tensor a
  {- Arity: 2,
     Strictness: <L,U(1*U(1*U(C(C(U)),A,A,A,A,A,1*C1(U)),A,A,A),A,1*C(U),1*C(U),A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A)><S,1*U>,
     Inline: (sat-args=1),
     Unfolding: InlineRule (2, False, False)
                (\ @ a
                   ($dFloating :: GHC.Float.Floating a)
                   (x :: Multilinear.Generic.Tensor a) ->
                 let {
                   $dFractional :: GHC.Real.Fractional a
                   = GHC.Float.$p1Floating @ a $dFloating
                 } in
                 let {
                   $dNum :: GHC.Num.Num a = GHC.Real.$p1Fractional @ a $dFractional
                 } in
                 Multilinear.Generic.$fMultilinearTensora_$cfmap
                   @ a
                   @ a
                   (GHC.Float.log @ a $dFloating)
                   (Multilinear.Generic.dot_$c+
                      @ a
                      $dNum
                      (Multilinear.Generic.Scalar @ a (GHC.Num.fromInteger @ a $dNum 1))
                      (Multilinear.Generic.$fMultilinearTensora_$cfmap
                         @ a
                         @ a
                         (GHC.Float.exp @ a $dFloating)
                         x))) -}
3435455de223a292a66afccee7caf4fd
  $fFloatingTensor_$clogBase ::
    GHC.Float.Floating a =>
    Multilinear.Generic.Tensor a
    -> Multilinear.Generic.Tensor a -> Multilinear.Generic.Tensor a
  {- Arity: 3,
     Strictness: <L,U(1*U(A,C(C(U)),A,A),A,A,C(U),A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A)><S,1*U><S,1*U>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (3, False, False)
                (\ @ a ($dFloating :: GHC.Float.Floating a) ->
                 let {
                   $dFractional :: GHC.Real.Fractional a
                   = GHC.Float.$p1Floating @ a $dFloating
                 } in
                 \ (x :: Multilinear.Generic.Tensor a)
                   (y :: Multilinear.Generic.Tensor a) ->
                 case Multilinear.Generic.$fMultilinearTensora_$cfmap
                        @ a
                        @ a
                        (GHC.Float.log @ a $dFloating)
                        y of wild {
                   DEFAULT
                   -> case Multilinear.Generic.$fMultilinearTensora_$cfmap
                             @ a
                             @ a
                             (GHC.Float.log @ a $dFloating)
                             x of wild1 {
                        DEFAULT
                        -> case wild of wild2 {
                             DEFAULT
                             -> case wild1 of wild3 {
                                  DEFAULT
                                  -> Multilinear.Generic.Err
                                       @ a
                                       (GHC.Base.build
                                          @ GHC.Types.Char
                                          (\ @ b -> GHC.CString.unpackFoldrCString# @ b "TODO"#))
                                  Multilinear.Generic.Err msg -> Multilinear.Generic.Err @ a msg }
                             Multilinear.Generic.Err msg -> Multilinear.Generic.Err @ a msg }
                        Multilinear.Generic.Scalar x2
                        -> Multilinear.Generic.$fMultilinearTensora_$cfmap
                             @ a
                             @ a
                             (\ (ds :: a) -> GHC.Real./ @ a $dFractional ds x2)
                             wild }
                   Multilinear.Generic.Scalar x1
                   -> case Multilinear.Generic.$fMultilinearTensora_$cfmap
                             @ a
                             @ a
                             (GHC.Float.log @ a $dFloating)
                             x of wild1 {
                        DEFAULT
                        -> Multilinear.Generic.$fMultilinearTensora_$cfmap
                             @ a
                             @ a
                             (GHC.Real./ @ a $dFractional x1)
                             wild1
                        Multilinear.Generic.Scalar x2
                        -> Multilinear.Generic.Scalar
                             @ a
                             (GHC.Real./ @ a $dFractional x1 x2) } }) -}
3435455de223a292a66afccee7caf4fd
  $fFloatingTensor_$cp1Floating ::
    GHC.Float.Floating a =>
    GHC.Real.Fractional (Multilinear.Generic.Tensor a)
  {- Arity: 1,
     Strictness: <L,1*U(1*U(U(C(C(U)),C(C(U)),C(C(U)),A,C(U),C(U),C(U)),C(C(U)),A,C(U)),A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A)>m,
     Unfolding: InlineRule (1, True, False)
                (\ @ a ($dFloating :: GHC.Float.Floating a) ->
                 Multilinear.Generic.$fFractionalTensor
                   @ a
                   (GHC.Float.$p1Floating @ a $dFloating)) -}
3435455de223a292a66afccee7caf4fd
  $fFloatingTensor_$cpi ::
    GHC.Float.Floating a => Multilinear.Generic.Tensor a
  {- Arity: 1, HasNoCafRefs,
     Strictness: <L,1*U(A,1*U,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A)>m1,
     Inline: (sat-args=0),
     Unfolding: InlineRule (1, False, False)
                (\ @ a ($dFloating :: GHC.Float.Floating a) ->
                 Multilinear.Generic.Scalar @ a (GHC.Float.pi @ a $dFloating)) -}
3435455de223a292a66afccee7caf4fd
  $fFloatingTensor_$csin ::
    GHC.Float.Floating a =>
    Multilinear.Generic.Tensor a -> Multilinear.Generic.Tensor a
  {- Arity: 2,
     Strictness: <L,1*U(A,A,A,A,A,A,A,1*C(U),A,A,A,A,A,A,A,A,A,A,A,A,A,A,A)><S,1*U>,
     Inline: (sat-args=1),
     Unfolding: InlineRule (2, False, False)
                (\ @ a
                   ($dFloating :: GHC.Float.Floating a)
                   (t :: Multilinear.Generic.Tensor a) ->
                 Multilinear.Generic.$fMultilinearTensora_$cfmap
                   @ a
                   @ a
                   (GHC.Float.sin @ a $dFloating)
                   t) -}
3435455de223a292a66afccee7caf4fd
  $fFloatingTensor_$csinh ::
    GHC.Float.Floating a =>
    Multilinear.Generic.Tensor a -> Multilinear.Generic.Tensor a
  {- Arity: 2,
     Strictness: <L,1*U(A,A,A,A,A,A,A,A,A,A,A,A,A,1*C(U),A,A,A,A,A,A,A,A,A)><S,1*U>,
     Inline: (sat-args=1),
     Unfolding: InlineRule (2, False, False)
                (\ @ a
                   ($dFloating :: GHC.Float.Floating a)
                   (t :: Multilinear.Generic.Tensor a) ->
                 Multilinear.Generic.$fMultilinearTensora_$cfmap
                   @ a
                   @ a
                   (GHC.Float.sinh @ a $dFloating)
                   t) -}
3435455de223a292a66afccee7caf4fd
  $fFloatingTensor_$csqrt ::
    GHC.Float.Floating a =>
    Multilinear.Generic.Tensor a -> Multilinear.Generic.Tensor a
  {- Arity: 2,
     Strictness: <L,U(U(1*U(C(C(U)),A,C(C(U)),A,A,A,C(U)),A,A,1*C1(U)),A,1*C(U),1*C(U),A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A)><S,1*U>,
     Inline: (sat-args=1),
     Unfolding: InlineRule (2, False, False)
                (\ @ a ($dFloating :: GHC.Float.Floating a) ->
                 let {
                   $dFractional :: GHC.Real.Fractional a
                   = GHC.Float.$p1Floating @ a $dFloating
                 } in
                 \ (x :: Multilinear.Generic.Tensor a) ->
                 let {
                   $dNum :: GHC.Real.Fractional a
                   = GHC.Float.$p1Floating @ a $dFloating
                 } in
                 let {
                   $dNum1 :: GHC.Num.Num a = GHC.Real.$p1Fractional @ a $dNum
                 } in
                 let {
                   y :: a
                   = GHC.Real.fromRational
                       @ a
                       $dFractional
                       (GHC.Real.:% @ GHC.Integer.Type.Integer 1 2)
                 } in
                 let {
                   y1 :: Multilinear.Generic.Tensor a
                   = Multilinear.Generic.Scalar @ a y
                 } in
                 let {
                   t1 :: Multilinear.Generic.Tensor a
                   = Multilinear.Generic.$fMultilinearTensora_$cfmap
                       @ a
                       @ a
                       (GHC.Float.log @ a $dFloating)
                       x
                 } in
                 let {
                   commonIndices :: [GHC.Base.String]
                   = GHC.Base.build
                       @ [GHC.Types.Char]
                       (\ @ b
                          (c :: [GHC.Types.Char] -> b -> b)[OneShot]
                          (n :: b)[OneShot] ->
                        GHC.Base.foldr
                          @ Multilinear.Index.TIndex
                          @ b
                          (GHC.Base.mapFB
                             @ [GHC.Types.Char]
                             @ b
                             @ Multilinear.Index.TIndex
                             (GHC.List.filterFB
                                @ [GHC.Types.Char]
                                @ b
                                c
                                (let {
                                   ds :: [GHC.Base.String]
                                   = GHC.Base.build
                                       @ [GHC.Types.Char]
                                       (\ @ b1
                                          (c1 :: [GHC.Types.Char] -> b1 -> b1)[OneShot]
                                          (n1 :: b1)[OneShot] ->
                                        GHC.Base.foldr
                                          @ Multilinear.Index.TIndex
                                          @ b1
                                          (GHC.Base.mapFB
                                             @ [GHC.Types.Char]
                                             @ b1
                                             @ Multilinear.Index.TIndex
                                             c1
                                             Multilinear.Index.tIndexName)
                                          n1
                                          (Multilinear.Generic.$fMultilinearTensora_$cindices
                                             @ a
                                             $dNum1
                                             y1))
                                 } in
                                 \ (ds1 :: GHC.Base.String) ->
                                 GHC.List.elem
                                   @ GHC.Base.String
                                   GHC.Classes.$fEq[]_$s$fEq[]1
                                   ds1
                                   ds))
                             Multilinear.Index.tIndexName)
                          n
                          (Multilinear.Generic.$fMultilinearTensora_$cindices @ a $dNum1 t1))
                 } in
                 Multilinear.Generic.$fMultilinearTensora_$cfmap
                   @ a
                   @ a
                   (GHC.Float.exp @ a $dFloating)
                   (Multilinear.Generic.mergeScalars
                      @ a
                      (Multilinear.Generic._elemByElem'
                         @ a
                         $dNum1
                         (GHC.Base.foldr
                            @ GHC.Base.String
                            @ (Multilinear.Generic.Tensor a -> Multilinear.Generic.Tensor a)
                            (\ (ds :: GHC.Base.String)
                               (ds1 :: Multilinear.Generic.Tensor a
                                       -> Multilinear.Generic.Tensor a)[OneShot]
                               (v :: Multilinear.Generic.Tensor a)[OneShot] ->
                             case v of z { DEFAULT ->
                             ds1
                               (Multilinear.Generic.$fMultilinearTensora_$cshiftRightmost
                                  @ a
                                  $dNum1
                                  z
                                  ds) })
                            (GHC.Base.id @ (Multilinear.Generic.Tensor a))
                            commonIndices
                            t1)
                         (GHC.Base.foldr
                            @ GHC.Base.String
                            @ (Multilinear.Generic.Tensor a -> Multilinear.Generic.Tensor a)
                            (\ (ds :: GHC.Base.String)
                               (ds1 :: Multilinear.Generic.Tensor a
                                       -> Multilinear.Generic.Tensor a)[OneShot]
                               (v :: Multilinear.Generic.Tensor a)[OneShot] ->
                             case v of z { DEFAULT ->
                             ds1
                               (Multilinear.Generic.$fMultilinearTensora_$cshiftRightmost
                                  @ a
                                  $dNum1
                                  z
                                  ds) })
                            (GHC.Base.id @ (Multilinear.Generic.Tensor a))
                            commonIndices
                            y1)
                         (GHC.Num.* @ a $dNum1)
                         (Multilinear.Generic.dot @ a $dNum1)))) -}
3435455de223a292a66afccee7caf4fd
  $fFloatingTensor_$ctan ::
    GHC.Float.Floating a =>
    Multilinear.Generic.Tensor a -> Multilinear.Generic.Tensor a
  {- Arity: 2,
     Strictness: <L,U(1*U(A,C(C(U)),A,A),A,A,A,A,A,A,1*C(U),1*C(U),A,A,A,A,A,A,A,A,A,A,A,A,A,A)><S,U>,
     Inline: (sat-args=1),
     Unfolding: InlineRule (2, False, False)
                (\ @ a ($dFloating :: GHC.Float.Floating a) ->
                 let {
                   $dFractional :: GHC.Real.Fractional a
                   = GHC.Float.$p1Floating @ a $dFloating
                 } in
                 \ (x :: Multilinear.Generic.Tensor a) ->
                 case Multilinear.Generic.$fMultilinearTensora_$cfmap
                        @ a
                        @ a
                        (GHC.Float.sin @ a $dFloating)
                        x of wild {
                   DEFAULT
                   -> case Multilinear.Generic.$fMultilinearTensora_$cfmap
                             @ a
                             @ a
                             (GHC.Float.cos @ a $dFloating)
                             x of wild1 {
                        DEFAULT
                        -> case wild of wild2 {
                             DEFAULT
                             -> case wild1 of wild3 {
                                  DEFAULT
                                  -> Multilinear.Generic.Err
                                       @ a
                                       (GHC.Base.build
                                          @ GHC.Types.Char
                                          (\ @ b -> GHC.CString.unpackFoldrCString# @ b "TODO"#))
                                  Multilinear.Generic.Err msg -> Multilinear.Generic.Err @ a msg }
                             Multilinear.Generic.Err msg -> Multilinear.Generic.Err @ a msg }
                        Multilinear.Generic.Scalar x2
                        -> Multilinear.Generic.$fMultilinearTensora_$cfmap
                             @ a
                             @ a
                             (\ (ds :: a) -> GHC.Real./ @ a $dFractional ds x2)
                             wild }
                   Multilinear.Generic.Scalar x1
                   -> case Multilinear.Generic.$fMultilinearTensora_$cfmap
                             @ a
                             @ a
                             (GHC.Float.cos @ a $dFloating)
                             x of wild1 {
                        DEFAULT
                        -> Multilinear.Generic.$fMultilinearTensora_$cfmap
                             @ a
                             @ a
                             (GHC.Real./ @ a $dFractional x1)
                             wild1
                        Multilinear.Generic.Scalar x2
                        -> Multilinear.Generic.Scalar
                             @ a
                             (GHC.Real./ @ a $dFractional x1 x2) } }) -}
3435455de223a292a66afccee7caf4fd
  $fFloatingTensor_$ctanh ::
    GHC.Float.Floating a =>
    Multilinear.Generic.Tensor a -> Multilinear.Generic.Tensor a
  {- Arity: 2,
     Strictness: <L,U(1*U(A,C(C(U)),A,A),A,A,A,A,A,A,A,A,A,A,A,A,1*C(U),1*C(U),A,A,A,A,A,A,A,A)><S,U>,
     Inline: (sat-args=1),
     Unfolding: InlineRule (2, False, False)
                (\ @ a ($dFloating :: GHC.Float.Floating a) ->
                 let {
                   $dFractional :: GHC.Real.Fractional a
                   = GHC.Float.$p1Floating @ a $dFloating
                 } in
                 \ (x :: Multilinear.Generic.Tensor a) ->
                 case Multilinear.Generic.$fMultilinearTensora_$cfmap
                        @ a
                        @ a
                        (GHC.Float.sinh @ a $dFloating)
                        x of wild {
                   DEFAULT
                   -> case Multilinear.Generic.$fMultilinearTensora_$cfmap
                             @ a
                             @ a
                             (GHC.Float.cosh @ a $dFloating)
                             x of wild1 {
                        DEFAULT
                        -> case wild of wild2 {
                             DEFAULT
                             -> case wild1 of wild3 {
                                  DEFAULT
                                  -> Multilinear.Generic.Err
                                       @ a
                                       (GHC.Base.build
                                          @ GHC.Types.Char
                                          (\ @ b -> GHC.CString.unpackFoldrCString# @ b "TODO"#))
                                  Multilinear.Generic.Err msg -> Multilinear.Generic.Err @ a msg }
                             Multilinear.Generic.Err msg -> Multilinear.Generic.Err @ a msg }
                        Multilinear.Generic.Scalar x2
                        -> Multilinear.Generic.$fMultilinearTensora_$cfmap
                             @ a
                             @ a
                             (\ (ds :: a) -> GHC.Real./ @ a $dFractional ds x2)
                             wild }
                   Multilinear.Generic.Scalar x1
                   -> case Multilinear.Generic.$fMultilinearTensora_$cfmap
                             @ a
                             @ a
                             (GHC.Float.cosh @ a $dFloating)
                             x of wild1 {
                        DEFAULT
                        -> Multilinear.Generic.$fMultilinearTensora_$cfmap
                             @ a
                             @ a
                             (GHC.Real./ @ a $dFractional x1)
                             wild1
                        Multilinear.Generic.Scalar x2
                        -> Multilinear.Generic.Scalar
                             @ a
                             (GHC.Real./ @ a $dFractional x1 x2) } }) -}
3435455de223a292a66afccee7caf4fd
  $fFractionalTensor ::
    GHC.Real.Fractional a =>
    GHC.Real.Fractional (Multilinear.Generic.Tensor a)
  DFunId
  {- Arity: 1,
     Strictness: <L,U(U(C(C(U)),C(C(U)),C(C(U)),A,C(U),C(U),C(U)),C(C(U)),A,C(U))>m,
     Inline: CONLIKE,
     Unfolding: DFun: @ a (v :: GHC.Real.Fractional a).
                  @ (Multilinear.Generic.Tensor a)
                  (Multilinear.Generic.$fFractionalTensor_$cp1Fractional @ a v)
                  (Multilinear.Generic.$fFractionalTensor_$c/ @ a v)
                  (Multilinear.Generic.$fFractionalTensor_$crecip @ a v)
                  (Multilinear.Generic.$fFractionalTensor_$cfromRational @ a v) -}
3435455de223a292a66afccee7caf4fd
  $fFractionalTensor_$c/ ::
    GHC.Real.Fractional a =>
    Multilinear.Generic.Tensor a
    -> Multilinear.Generic.Tensor a -> Multilinear.Generic.Tensor a
  {- Arity: 3, Strictness: <L,U(A,C(C(U)),A,A)><S,1*U><S,1*U>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (3, False, False)
                (\ @ a
                   ($dFractional :: GHC.Real.Fractional a)
                   (ds :: Multilinear.Generic.Tensor a)
                   (ds1 :: Multilinear.Generic.Tensor a) ->
                 case ds of wild {
                   DEFAULT
                   -> case ds1 of wild1 {
                        DEFAULT
                        -> case wild of wild2 {
                             DEFAULT
                             -> case wild1 of wild3 {
                                  DEFAULT
                                  -> Multilinear.Generic.Err
                                       @ a
                                       (GHC.Base.build
                                          @ GHC.Types.Char
                                          (\ @ b -> GHC.CString.unpackFoldrCString# @ b "TODO"#))
                                  Multilinear.Generic.Err msg -> Multilinear.Generic.Err @ a msg }
                             Multilinear.Generic.Err msg -> Multilinear.Generic.Err @ a msg }
                        Multilinear.Generic.Scalar x2
                        -> Multilinear.Generic.$fMultilinearTensora_$cfmap
                             @ a
                             @ a
                             (\ (ds2 :: a) -> GHC.Real./ @ a $dFractional ds2 x2)
                             wild }
                   Multilinear.Generic.Scalar x1
                   -> case ds1 of wild1 {
                        DEFAULT
                        -> Multilinear.Generic.$fMultilinearTensora_$cfmap
                             @ a
                             @ a
                             (GHC.Real./ @ a $dFractional x1)
                             wild1
                        Multilinear.Generic.Scalar x2
                        -> Multilinear.Generic.Scalar
                             @ a
                             (GHC.Real./ @ a $dFractional x1 x2) } }) -}
3435455de223a292a66afccee7caf4fd
  $fFractionalTensor_$cfromRational ::
    GHC.Real.Fractional a =>
    GHC.Real.Rational -> Multilinear.Generic.Tensor a
  {- Arity: 2, HasNoCafRefs,
     Strictness: <L,1*U(A,A,A,1*C1(U))><L,U>m1, Inline: (sat-args=1),
     Unfolding: InlineRule (2, False, False)
                (\ @ a
                   ($dFractional :: GHC.Real.Fractional a)
                   (x :: GHC.Real.Rational) ->
                 Multilinear.Generic.Scalar
                   @ a
                   (GHC.Real.fromRational @ a $dFractional x)) -}
3435455de223a292a66afccee7caf4fd
  $fFractionalTensor_$cp1Fractional ::
    GHC.Real.Fractional a => GHC.Num.Num (Multilinear.Generic.Tensor a)
  {- Arity: 1,
     Strictness: <L,1*U(1*U(C(C(U)),C(C(U)),C(C(U)),A,C(U),C(U),C(U)),A,A,A)>m,
     Unfolding: InlineRule (1, True, False)
                (\ @ a ($dFractional :: GHC.Real.Fractional a) ->
                 Multilinear.Generic.$fNumTensor
                   @ a
                   (GHC.Real.$p1Fractional @ a $dFractional)) -}
3435455de223a292a66afccee7caf4fd
  $fFractionalTensor_$crecip ::
    GHC.Real.Fractional a =>
    Multilinear.Generic.Tensor a -> Multilinear.Generic.Tensor a
  {- Arity: 2,
     Strictness: <L,U(1*U(A,A,A,A,A,A,1*C1(U)),1*C1(C(U)),A,A)><S,1*U>,
     Inline: (sat-args=1),
     Unfolding: InlineRule (2, False, False)
                (\ @ a ($dFractional :: GHC.Real.Fractional a) ->
                 let {
                   $dNum :: GHC.Num.Num a = GHC.Real.$p1Fractional @ a $dFractional
                 } in
                 \ (x :: Multilinear.Generic.Tensor a) ->
                 let {
                   x1 :: a = GHC.Num.fromInteger @ a $dNum 1
                 } in
                 case x of wild {
                   DEFAULT
                   -> Multilinear.Generic.$fMultilinearTensora_$cfmap
                        @ a
                        @ a
                        (GHC.Real./ @ a $dFractional x1)
                        wild
                   Multilinear.Generic.Scalar x2
                   -> Multilinear.Generic.Scalar
                        @ a
                        (GHC.Real./ @ a $dFractional x1 x2) }) -}
3435455de223a292a66afccee7caf4fd
  $fFromJSONTensor ::
    Data.Aeson.Types.FromJSON.FromJSON a =>
    Data.Aeson.Types.FromJSON.FromJSON (Multilinear.Generic.Tensor a)
  DFunId
  {- Arity: 1, Strictness: <L,U(C(C(C1(C1(U)))),A)>m,
     Inline: CONLIKE,
     Unfolding: DFun: @ a (v :: Data.Aeson.Types.FromJSON.FromJSON a).
                  @ (Multilinear.Generic.Tensor a)
                  (Multilinear.Generic.$fMultilinearTensora_$cparseJSON @ a v)
                  (Multilinear.Generic.$fFromJSONTensor_$cparseJSONList @ a v) -}
3435455de223a292a66afccee7caf4fd
  $fFromJSONTensor1 ::
    Data.Aeson.Types.Internal.JSONPath
    -> Data.Aeson.Types.Internal.Failure f4 r
    -> Data.Aeson.Types.Internal.Success
         [Multilinear.Generic.Tensor a] f4 r
    -> f4 r
  {- Arity: 3, HasNoCafRefs, Strictness: <L,A><L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (3, True, True)
                (\ @ a
                   @ f4 :: * -> *
                   @ r
                   (_path :: Data.Aeson.Types.Internal.JSONPath)
                   (_kf :: Data.Aeson.Types.Internal.Failure f4 r)
                   (ks :: Data.Aeson.Types.Internal.Success
                            [Multilinear.Generic.Tensor a] f4 r) ->
                 ks (GHC.Types.[] @ (Multilinear.Generic.Tensor a))) -}
6cf8b4e00d7baef1a23628ec9dddd5c4
  $fFromJSONTensor2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: (", encountered "#) -}
2c4afe24c2a43bb8615a57d559482f62
  $fFromJSONTensor3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("[a]"#) -}
8659145fc85285413e06d9d40beeea2b
  $fFromJSONTensor4 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("expected "#) -}
3435455de223a292a66afccee7caf4fd
  $fFromJSONTensor_$cparseJSONList ::
    Data.Aeson.Types.FromJSON.FromJSON a =>
    Data.Aeson.Types.Internal.Value
    -> Data.Aeson.Types.Internal.Parser [Multilinear.Generic.Tensor a]
  {- Arity: 2, Strictness: <L,U(C(C(C1(C1(U)))),A)><S,1*U>,
     Unfolding: (\ @ a
                   ($dFromJSON :: Data.Aeson.Types.FromJSON.FromJSON a)
                   (ds :: Data.Aeson.Types.Internal.Value) ->
                 case ds of wild {
                   DEFAULT
                   -> let {
                        msg20 :: GHC.Base.String
                        = GHC.CString.unpackAppendCString#
                            Multilinear.Generic.$fFromJSONTensor4
                            (GHC.CString.unpackAppendCString#
                               Multilinear.Generic.$fFromJSONTensor3
                               (GHC.CString.unpackAppendCString#
                                  Multilinear.Generic.$fFromJSONTensor2
                                  (case wild of wild1 {
                                     Data.Aeson.Types.Internal.Object ds1
                                     -> Data.Aeson.Types.FromJSON.$dmliftParseJSONList10
                                     Data.Aeson.Types.Internal.String ds1
                                     -> Data.Aeson.Types.FromJSON.$dmliftParseJSONList8
                                     Data.Aeson.Types.Internal.Number ds1
                                     -> Data.Aeson.Types.FromJSON.$dmliftParseJSONList6
                                     Data.Aeson.Types.Internal.Bool ds1
                                     -> Data.Aeson.Types.FromJSON.$dmliftParseJSONList4
                                     Data.Aeson.Types.Internal.Null
                                     -> Data.Aeson.Types.FromJSON.$dmliftParseJSONList1 })))
                      } in
                      (\ @ f4 :: * -> *
                         @ r
                         (path :: Data.Aeson.Types.Internal.JSONPath)
                         (kf :: Data.Aeson.Types.Internal.Failure f4 r)
                         (_ks :: Data.Aeson.Types.Internal.Success
                                   [Multilinear.Generic.Tensor a] f4 r) ->
                       kf
                         (GHC.List.reverse @ Data.Aeson.Types.Internal.JSONPathElement path)
                         msg20)
                        `cast`
                      (Sym (Data.Aeson.Types.Internal.N:Parser[0]
                                <[Multilinear.Generic.Tensor a]>_R))
                   Data.Aeson.Types.Internal.Array a2
                   -> case a2 of wild1 { Data.Vector.Vector dt dt1 dt2 ->
                      let {
                        _k39 :: Data.Aeson.Types.Internal.Value
                                -> Data.Aeson.Types.Internal.Parser (Multilinear.Generic.Tensor a)
                        = Multilinear.Generic.$fMultilinearTensora_$cparseJSON
                            @ a
                            $dFromJSON
                      } in
                      letrec {
                        go8 :: GHC.Prim.Int#
                               -> [Data.Aeson.Types.Internal.Value]
                               -> Data.Aeson.Types.Internal.Parser [Multilinear.Generic.Tensor a]
                          {- Arity: 2, Strictness: <L,U><S,1*U> -}
                        = \ (x :: GHC.Prim.Int#)
                            (eta :: [Data.Aeson.Types.Internal.Value]) ->
                          case eta of wild2 {
                            []
                            -> (Multilinear.Generic.$fFromJSONTensor1 @ a)
                                 `cast`
                               (Sym (Data.Aeson.Types.Internal.N:Parser[0]
                                         <[Multilinear.Generic.Tensor a]>_R))
                            : y ys
                            -> let {
                                 p1 :: Data.Aeson.Types.Internal.Parser
                                         (Multilinear.Generic.Tensor a)
                                 = _k39 y
                               } in
                               let {
                                 pathElem17 :: Data.Aeson.Types.Internal.JSONPathElement
                                 = Data.Aeson.Types.Internal.Index x
                               } in
                               let {
                                 ys1 :: Data.Aeson.Types.Internal.Parser
                                          [Multilinear.Generic.Tensor a]
                                 = case x of wild3 {
                                     DEFAULT -> go8 (GHC.Prim.+# wild3 1#) ys
                                     9223372036854775807#
                                     -> (Multilinear.Generic.$fFromJSONTensor1 @ a)
                                          `cast`
                                        (Sym (Data.Aeson.Types.Internal.N:Parser[0]
                                                  <[Multilinear.Generic.Tensor a]>_R)) }
                               } in
                               (\ @ f5 :: * -> *
                                  @ r
                                  (eta1 :: Data.Aeson.Types.Internal.JSONPath)
                                  (eta2 :: Data.Aeson.Types.Internal.Failure f5 r)
                                  (eta3 :: Data.Aeson.Types.Internal.Success
                                             [Multilinear.Generic.Tensor a] f5 r) ->
                                p1
                                  `cast`
                                (Data.Aeson.Types.Internal.N:Parser[0]
                                     <Multilinear.Generic.Tensor a>_R)
                                  @ f5
                                  @ r
                                  (GHC.Types.:
                                     @ Data.Aeson.Types.Internal.JSONPathElement
                                     pathElem17
                                     eta1)
                                  eta2
                                  (\ (a3 :: Multilinear.Generic.Tensor a) ->
                                   ys1
                                     `cast`
                                   (Data.Aeson.Types.Internal.N:Parser[0]
                                        <[Multilinear.Generic.Tensor a]>_R)
                                     @ f5
                                     @ r
                                     eta1
                                     eta2
                                     (\ (a4 :: [Multilinear.Generic.Tensor a]) ->
                                      eta3 (GHC.Types.: @ (Multilinear.Generic.Tensor a) a3 a4))))
                                 `cast`
                               (Sym (Data.Aeson.Types.Internal.N:Parser[0]
                                         <[Multilinear.Generic.Tensor a]>_R)) }
                      } in
                      letrec {
                        $wgo :: GHC.Prim.Int# -> [Data.Aeson.Types.Internal.Value]
                          {- Arity: 1, Strictness: <S,U>, Inline: [0] -}
                        = \ (ww :: GHC.Prim.Int#) ->
                          case GHC.Prim.tagToEnum#
                                 @ GHC.Types.Bool
                                 (GHC.Prim.>=# ww dt1) of wild2 {
                            GHC.Types.False
                            -> case GHC.Prim.indexArray#
                                      @ Data.Aeson.Types.Internal.Value
                                      dt2
                                      (GHC.Prim.+# dt ww) of ds3 { Unit# ipv ->
                               GHC.Types.:
                                 @ Data.Aeson.Types.Internal.Value
                                 ipv
                                 ($wgo (GHC.Prim.+# ww 1#)) }
                            GHC.Types.True -> GHC.Types.[] @ Data.Aeson.Types.Internal.Value }
                      } in
                      go8 0# ($wgo 0#) } }) -}
3435455de223a292a66afccee7caf4fd
  $fFunctorTensor :: GHC.Base.Functor Multilinear.Generic.Tensor
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Multilinear.Generic.Tensor
                  Multilinear.Generic.$fMultilinearTensora_$cfmap
                  Multilinear.Generic.$fFunctorTensor_$c<$ -}
3435455de223a292a66afccee7caf4fd
  $fFunctorTensor_$c<$ ::
    a -> Multilinear.Generic.Tensor b -> Multilinear.Generic.Tensor a
  {- Arity: 2, Strictness: <L,U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ @ a @ b (x :: a) (eta :: Multilinear.Generic.Tensor b) ->
                 Multilinear.Generic.$fMultilinearTensora_$cfmap
                   @ b
                   @ a
                   (\ (ds :: b) -> x)
                   eta) -}
3435455de223a292a66afccee7caf4fd
  $fGenericTensor ::
    GHC.Generics.Generic (Multilinear.Generic.Tensor a)
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun: @ a.
                  @ (Multilinear.Generic.Tensor a)
                  (Multilinear.Generic.$fGenericTensor1 @ a)
                    `cast`
                  (forall (x :: <*>_N).
                   <Multilinear.Generic.Tensor a>_R
                   ->_R Trans
                            (Sym (GHC.Generics.N:M1[0]
                                      <*>_N
                                      <GHC.Generics.D>_P
                                      <'GHC.Generics.MetaData
                                         "Tensor"
                                         "Multilinear.Generic"
                                         "Multilinear-0.8.0.0-4dpV53DlxV5EwwV6FZreVP"
                                         'GHC.Types.False>_P
                                      <(GHC.Generics.M1
                                          GHC.Generics.C
                                          ('GHC.Generics.MetaCons
                                             "Scalar" 'GHC.Generics.PrefixI 'GHC.Types.True)
                                          (GHC.Generics.M1
                                             GHC.Generics.S
                                             ('GHC.Generics.MetaSel
                                                ('GHC.Base.Just "scalarVal")
                                                'GHC.Generics.NoSourceUnpackedness
                                                'GHC.Generics.NoSourceStrictness
                                                'GHC.Generics.DecidedLazy)
                                             (GHC.Generics.K1 GHC.Generics.R a))
                                        GHC.Generics.:+: GHC.Generics.M1
                                                           GHC.Generics.C
                                                           ('GHC.Generics.MetaCons
                                                              "SimpleFinite"
                                                              'GHC.Generics.PrefixI
                                                              'GHC.Types.True)
                                                           (GHC.Generics.M1
                                                              GHC.Generics.S
                                                              ('GHC.Generics.MetaSel
                                                                 ('GHC.Base.Just
                                                                    "tensorFiniteIndex")
                                                                 'GHC.Generics.NoSourceUnpackedness
                                                                 'GHC.Generics.NoSourceStrictness
                                                                 'GHC.Generics.DecidedLazy)
                                                              (GHC.Generics.K1
                                                                 GHC.Generics.R
                                                                 Multilinear.Index.Finite.Index)
                                                            GHC.Generics.:*: GHC.Generics.M1
                                                                               GHC.Generics.S
                                                                               ('GHC.Generics.MetaSel
                                                                                  ('GHC.Base.Just
                                                                                     "tensorScalars")
                                                                                  'GHC.Generics.NoSourceUnpackedness
                                                                                  'GHC.Generics.NoSourceStrictness
                                                                                  'GHC.Generics.DecidedLazy)
                                                                               (GHC.Generics.K1
                                                                                  GHC.Generics.R
                                                                                  (Data.Vector.Vector
                                                                                     a))))
                                       GHC.Generics.:+: (GHC.Generics.M1
                                                           GHC.Generics.C
                                                           ('GHC.Generics.MetaCons
                                                              "FiniteTensor"
                                                              'GHC.Generics.PrefixI
                                                              'GHC.Types.True)
                                                           (GHC.Generics.M1
                                                              GHC.Generics.S
                                                              ('GHC.Generics.MetaSel
                                                                 ('GHC.Base.Just
                                                                    "tensorFiniteIndex")
                                                                 'GHC.Generics.NoSourceUnpackedness
                                                                 'GHC.Generics.NoSourceStrictness
                                                                 'GHC.Generics.DecidedLazy)
                                                              (GHC.Generics.K1
                                                                 GHC.Generics.R
                                                                 Multilinear.Index.Finite.Index)
                                                            GHC.Generics.:*: GHC.Generics.M1
                                                                               GHC.Generics.S
                                                                               ('GHC.Generics.MetaSel
                                                                                  ('GHC.Base.Just
                                                                                     "tensorsFinite")
                                                                                  'GHC.Generics.NoSourceUnpackedness
                                                                                  'GHC.Generics.NoSourceStrictness
                                                                                  'GHC.Generics.DecidedLazy)
                                                                               (GHC.Generics.K1
                                                                                  GHC.Generics.R
                                                                                  (Data.Vector.Vector
                                                                                     (Multilinear.Generic.Tensor
                                                                                        a))))
                                                         GHC.Generics.:+: (GHC.Generics.M1
                                                                             GHC.Generics.C
                                                                             ('GHC.Generics.MetaCons
                                                                                "InfiniteTensor"
                                                                                'GHC.Generics.PrefixI
                                                                                'GHC.Types.True)
                                                                             (GHC.Generics.M1
                                                                                GHC.Generics.S
                                                                                ('GHC.Generics.MetaSel
                                                                                   ('GHC.Base.Just
                                                                                      "tensorInfiniteIndex")
                                                                                   'GHC.Generics.NoSourceUnpackedness
                                                                                   'GHC.Generics.NoSourceStrictness
                                                                                   'GHC.Generics.DecidedLazy)
                                                                                (GHC.Generics.K1
                                                                                   GHC.Generics.R
                                                                                   Multilinear.Index.Infinite.Index)
                                                                              GHC.Generics.:*: GHC.Generics.M1
                                                                                                 GHC.Generics.S
                                                                                                 ('GHC.Generics.MetaSel
                                                                                                    ('GHC.Base.Just
                                                                                                       "tensorsInfinite")
                                                                                                    'GHC.Generics.NoSourceUnpackedness
                                                                                                    'GHC.Generics.NoSourceStrictness
                                                                                                    'GHC.Generics.DecidedLazy)
                                                                                                 (GHC.Generics.K1
                                                                                                    GHC.Generics.R
                                                                                                    [Multilinear.Generic.Tensor
                                                                                                       a]))
                                                                           GHC.Generics.:+: GHC.Generics.M1
                                                                                              GHC.Generics.C
                                                                                              ('GHC.Generics.MetaCons
                                                                                                 "Err"
                                                                                                 'GHC.Generics.PrefixI
                                                                                                 'GHC.Types.True)
                                                                                              (GHC.Generics.M1
                                                                                                 GHC.Generics.S
                                                                                                 ('GHC.Generics.MetaSel
                                                                                                    ('GHC.Base.Just
                                                                                                       "errMessage")
                                                                                                    'GHC.Generics.NoSourceUnpackedness
                                                                                                    'GHC.Generics.NoSourceStrictness
                                                                                                    'GHC.Generics.DecidedLazy)
                                                                                                 (GHC.Generics.K1
                                                                                                    GHC.Generics.R
                                                                                                    GHC.Base.String))))>_R))
                            (Sub (Sym (Multilinear.Generic.Rep_Tensor[0] <a>_N))) <x>_N)
                  (Multilinear.Generic.$fGenericTensor_$cto @ a) -}
3435455de223a292a66afccee7caf4fd
  $fGenericTensor1 ::
    Multilinear.Generic.Tensor a
    -> (GHC.Generics.:+:)
         (GHC.Generics.M1
            GHC.Generics.C
            ('GHC.Generics.MetaCons
               "Scalar" 'GHC.Generics.PrefixI 'GHC.Types.True)
            (GHC.Generics.M1
               GHC.Generics.S
               ('GHC.Generics.MetaSel
                  ('GHC.Base.Just "scalarVal")
                  'GHC.Generics.NoSourceUnpackedness
                  'GHC.Generics.NoSourceStrictness
                  'GHC.Generics.DecidedLazy)
               (GHC.Generics.K1 GHC.Generics.R a))
          GHC.Generics.:+: GHC.Generics.M1
                             GHC.Generics.C
                             ('GHC.Generics.MetaCons
                                "SimpleFinite" 'GHC.Generics.PrefixI 'GHC.Types.True)
                             (GHC.Generics.M1
                                GHC.Generics.S
                                ('GHC.Generics.MetaSel
                                   ('GHC.Base.Just "tensorFiniteIndex")
                                   'GHC.Generics.NoSourceUnpackedness
                                   'GHC.Generics.NoSourceStrictness
                                   'GHC.Generics.DecidedLazy)
                                (GHC.Generics.K1 GHC.Generics.R Multilinear.Index.Finite.Index)
                              GHC.Generics.:*: GHC.Generics.M1
                                                 GHC.Generics.S
                                                 ('GHC.Generics.MetaSel
                                                    ('GHC.Base.Just "tensorScalars")
                                                    'GHC.Generics.NoSourceUnpackedness
                                                    'GHC.Generics.NoSourceStrictness
                                                    'GHC.Generics.DecidedLazy)
                                                 (GHC.Generics.K1
                                                    GHC.Generics.R (Data.Vector.Vector a))))
         (GHC.Generics.M1
            GHC.Generics.C
            ('GHC.Generics.MetaCons
               "FiniteTensor" 'GHC.Generics.PrefixI 'GHC.Types.True)
            (GHC.Generics.M1
               GHC.Generics.S
               ('GHC.Generics.MetaSel
                  ('GHC.Base.Just "tensorFiniteIndex")
                  'GHC.Generics.NoSourceUnpackedness
                  'GHC.Generics.NoSourceStrictness
                  'GHC.Generics.DecidedLazy)
               (GHC.Generics.K1 GHC.Generics.R Multilinear.Index.Finite.Index)
             GHC.Generics.:*: GHC.Generics.M1
                                GHC.Generics.S
                                ('GHC.Generics.MetaSel
                                   ('GHC.Base.Just "tensorsFinite")
                                   'GHC.Generics.NoSourceUnpackedness
                                   'GHC.Generics.NoSourceStrictness
                                   'GHC.Generics.DecidedLazy)
                                (GHC.Generics.K1
                                   GHC.Generics.R
                                   (Data.Vector.Vector (Multilinear.Generic.Tensor a))))
          GHC.Generics.:+: (GHC.Generics.M1
                              GHC.Generics.C
                              ('GHC.Generics.MetaCons
                                 "InfiniteTensor" 'GHC.Generics.PrefixI 'GHC.Types.True)
                              (GHC.Generics.M1
                                 GHC.Generics.S
                                 ('GHC.Generics.MetaSel
                                    ('GHC.Base.Just "tensorInfiniteIndex")
                                    'GHC.Generics.NoSourceUnpackedness
                                    'GHC.Generics.NoSourceStrictness
                                    'GHC.Generics.DecidedLazy)
                                 (GHC.Generics.K1 GHC.Generics.R Multilinear.Index.Infinite.Index)
                               GHC.Generics.:*: GHC.Generics.M1
                                                  GHC.Generics.S
                                                  ('GHC.Generics.MetaSel
                                                     ('GHC.Base.Just "tensorsInfinite")
                                                     'GHC.Generics.NoSourceUnpackedness
                                                     'GHC.Generics.NoSourceStrictness
                                                     'GHC.Generics.DecidedLazy)
                                                  (GHC.Generics.K1
                                                     GHC.Generics.R [Multilinear.Generic.Tensor a]))
                            GHC.Generics.:+: GHC.Generics.M1
                                               GHC.Generics.C
                                               ('GHC.Generics.MetaCons
                                                  "Err" 'GHC.Generics.PrefixI 'GHC.Types.True)
                                               (GHC.Generics.M1
                                                  GHC.Generics.S
                                                  ('GHC.Generics.MetaSel
                                                     ('GHC.Base.Just "errMessage")
                                                     'GHC.Generics.NoSourceUnpackedness
                                                     'GHC.Generics.NoSourceStrictness
                                                     'GHC.Generics.DecidedLazy)
                                                  (GHC.Generics.K1
                                                     GHC.Generics.R GHC.Base.String))))
         x
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: (\ @ a @ x (x1 :: Multilinear.Generic.Tensor a) ->
                 case x1 of wild {
                   Multilinear.Generic.Scalar g1
                   -> GHC.Generics.L1
                        @ *
                        @ (GHC.Generics.M1
                             GHC.Generics.C
                             ('GHC.Generics.MetaCons
                                "Scalar" 'GHC.Generics.PrefixI 'GHC.Types.True)
                             (GHC.Generics.M1
                                GHC.Generics.S
                                ('GHC.Generics.MetaSel
                                   ('GHC.Base.Just "scalarVal")
                                   'GHC.Generics.NoSourceUnpackedness
                                   'GHC.Generics.NoSourceStrictness
                                   'GHC.Generics.DecidedLazy)
                                (GHC.Generics.K1 GHC.Generics.R a))
                           GHC.Generics.:+: GHC.Generics.M1
                                              GHC.Generics.C
                                              ('GHC.Generics.MetaCons
                                                 "SimpleFinite"
                                                 'GHC.Generics.PrefixI
                                                 'GHC.Types.True)
                                              (GHC.Generics.M1
                                                 GHC.Generics.S
                                                 ('GHC.Generics.MetaSel
                                                    ('GHC.Base.Just "tensorFiniteIndex")
                                                    'GHC.Generics.NoSourceUnpackedness
                                                    'GHC.Generics.NoSourceStrictness
                                                    'GHC.Generics.DecidedLazy)
                                                 (GHC.Generics.K1
                                                    GHC.Generics.R Multilinear.Index.Finite.Index)
                                               GHC.Generics.:*: GHC.Generics.M1
                                                                  GHC.Generics.S
                                                                  ('GHC.Generics.MetaSel
                                                                     ('GHC.Base.Just
                                                                        "tensorScalars")
                                                                     'GHC.Generics.NoSourceUnpackedness
                                                                     'GHC.Generics.NoSourceStrictness
                                                                     'GHC.Generics.DecidedLazy)
                                                                  (GHC.Generics.K1
                                                                     GHC.Generics.R
                                                                     (Data.Vector.Vector a))))
                        @ (GHC.Generics.M1
                             GHC.Generics.C
                             ('GHC.Generics.MetaCons
                                "FiniteTensor" 'GHC.Generics.PrefixI 'GHC.Types.True)
                             (GHC.Generics.M1
                                GHC.Generics.S
                                ('GHC.Generics.MetaSel
                                   ('GHC.Base.Just "tensorFiniteIndex")
                                   'GHC.Generics.NoSourceUnpackedness
                                   'GHC.Generics.NoSourceStrictness
                                   'GHC.Generics.DecidedLazy)
                                (GHC.Generics.K1 GHC.Generics.R Multilinear.Index.Finite.Index)
                              GHC.Generics.:*: GHC.Generics.M1
                                                 GHC.Generics.S
                                                 ('GHC.Generics.MetaSel
                                                    ('GHC.Base.Just "tensorsFinite")
                                                    'GHC.Generics.NoSourceUnpackedness
                                                    'GHC.Generics.NoSourceStrictness
                                                    'GHC.Generics.DecidedLazy)
                                                 (GHC.Generics.K1
                                                    GHC.Generics.R
                                                    (Data.Vector.Vector
                                                       (Multilinear.Generic.Tensor a))))
                           GHC.Generics.:+: (GHC.Generics.M1
                                               GHC.Generics.C
                                               ('GHC.Generics.MetaCons
                                                  "InfiniteTensor"
                                                  'GHC.Generics.PrefixI
                                                  'GHC.Types.True)
                                               (GHC.Generics.M1
                                                  GHC.Generics.S
                                                  ('GHC.Generics.MetaSel
                                                     ('GHC.Base.Just "tensorInfiniteIndex")
                                                     'GHC.Generics.NoSourceUnpackedness
                                                     'GHC.Generics.NoSourceStrictness
                                                     'GHC.Generics.DecidedLazy)
                                                  (GHC.Generics.K1
                                                     GHC.Generics.R
                                                     Multilinear.Index.Infinite.Index)
                                                GHC.Generics.:*: GHC.Generics.M1
                                                                   GHC.Generics.S
                                                                   ('GHC.Generics.MetaSel
                                                                      ('GHC.Base.Just
                                                                         "tensorsInfinite")
                                                                      'GHC.Generics.NoSourceUnpackedness
                                                                      'GHC.Generics.NoSourceStrictness
                                                                      'GHC.Generics.DecidedLazy)
                                                                   (GHC.Generics.K1
                                                                      GHC.Generics.R
                                                                      [Multilinear.Generic.Tensor
                                                                         a]))
                                             GHC.Generics.:+: GHC.Generics.M1
                                                                GHC.Generics.C
                                                                ('GHC.Generics.MetaCons
                                                                   "Err"
                                                                   'GHC.Generics.PrefixI
                                                                   'GHC.Types.True)
                                                                (GHC.Generics.M1
                                                                   GHC.Generics.S
                                                                   ('GHC.Generics.MetaSel
                                                                      ('GHC.Base.Just "errMessage")
                                                                      'GHC.Generics.NoSourceUnpackedness
                                                                      'GHC.Generics.NoSourceStrictness
                                                                      'GHC.Generics.DecidedLazy)
                                                                   (GHC.Generics.K1
                                                                      GHC.Generics.R
                                                                      GHC.Base.String))))
                        @ x
                        (GHC.Generics.L1
                           @ *
                           @ (GHC.Generics.M1
                                GHC.Generics.C
                                ('GHC.Generics.MetaCons
                                   "Scalar" 'GHC.Generics.PrefixI 'GHC.Types.True)
                                (GHC.Generics.M1
                                   GHC.Generics.S
                                   ('GHC.Generics.MetaSel
                                      ('GHC.Base.Just "scalarVal")
                                      'GHC.Generics.NoSourceUnpackedness
                                      'GHC.Generics.NoSourceStrictness
                                      'GHC.Generics.DecidedLazy)
                                   (GHC.Generics.K1 GHC.Generics.R a)))
                           @ (GHC.Generics.M1
                                GHC.Generics.C
                                ('GHC.Generics.MetaCons
                                   "SimpleFinite" 'GHC.Generics.PrefixI 'GHC.Types.True)
                                (GHC.Generics.M1
                                   GHC.Generics.S
                                   ('GHC.Generics.MetaSel
                                      ('GHC.Base.Just "tensorFiniteIndex")
                                      'GHC.Generics.NoSourceUnpackedness
                                      'GHC.Generics.NoSourceStrictness
                                      'GHC.Generics.DecidedLazy)
                                   (GHC.Generics.K1 GHC.Generics.R Multilinear.Index.Finite.Index)
                                 GHC.Generics.:*: GHC.Generics.M1
                                                    GHC.Generics.S
                                                    ('GHC.Generics.MetaSel
                                                       ('GHC.Base.Just "tensorScalars")
                                                       'GHC.Generics.NoSourceUnpackedness
                                                       'GHC.Generics.NoSourceStrictness
                                                       'GHC.Generics.DecidedLazy)
                                                    (GHC.Generics.K1
                                                       GHC.Generics.R (Data.Vector.Vector a))))
                           @ x
                           g1
                             `cast`
                           (Trans
                                (Sym (GHC.Generics.N:K1[0] <*>_N <GHC.Generics.R>_P <a>_R <x>_P))
                                (Trans
                                     (Sym (GHC.Generics.N:M1[0]
                                               <*>_N
                                               <GHC.Generics.S>_P
                                               <'GHC.Generics.MetaSel
                                                  ('GHC.Base.Just "scalarVal")
                                                  'GHC.Generics.NoSourceUnpackedness
                                                  'GHC.Generics.NoSourceStrictness
                                                  'GHC.Generics.DecidedLazy>_P
                                               <GHC.Generics.K1 GHC.Generics.R a>_R))
                                     (Sym (GHC.Generics.N:M1[0]
                                               <*>_N
                                               <GHC.Generics.C>_P
                                               <'GHC.Generics.MetaCons
                                                  "Scalar" 'GHC.Generics.PrefixI 'GHC.Types.True>_P
                                               <GHC.Generics.M1
                                                  GHC.Generics.S
                                                  ('GHC.Generics.MetaSel
                                                     ('GHC.Base.Just "scalarVal")
                                                     'GHC.Generics.NoSourceUnpackedness
                                                     'GHC.Generics.NoSourceStrictness
                                                     'GHC.Generics.DecidedLazy)
                                                  (GHC.Generics.K1 GHC.Generics.R a)>_R)) <x>_N)))
                   Multilinear.Generic.SimpleFinite g1 g2
                   -> GHC.Generics.L1
                        @ *
                        @ (GHC.Generics.M1
                             GHC.Generics.C
                             ('GHC.Generics.MetaCons
                                "Scalar" 'GHC.Generics.PrefixI 'GHC.Types.True)
                             (GHC.Generics.M1
                                GHC.Generics.S
                                ('GHC.Generics.MetaSel
                                   ('GHC.Base.Just "scalarVal")
                                   'GHC.Generics.NoSourceUnpackedness
                                   'GHC.Generics.NoSourceStrictness
                                   'GHC.Generics.DecidedLazy)
                                (GHC.Generics.K1 GHC.Generics.R a))
                           GHC.Generics.:+: GHC.Generics.M1
                                              GHC.Generics.C
                                              ('GHC.Generics.MetaCons
                                                 "SimpleFinite"
                                                 'GHC.Generics.PrefixI
                                                 'GHC.Types.True)
                                              (GHC.Generics.M1
                                                 GHC.Generics.S
                                                 ('GHC.Generics.MetaSel
                                                    ('GHC.Base.Just "tensorFiniteIndex")
                                                    'GHC.Generics.NoSourceUnpackedness
                                                    'GHC.Generics.NoSourceStrictness
                                                    'GHC.Generics.DecidedLazy)
                                                 (GHC.Generics.K1
                                                    GHC.Generics.R Multilinear.Index.Finite.Index)
                                               GHC.Generics.:*: GHC.Generics.M1
                                                                  GHC.Generics.S
                                                                  ('GHC.Generics.MetaSel
                                                                     ('GHC.Base.Just
                                                                        "tensorScalars")
                                                                     'GHC.Generics.NoSourceUnpackedness
                                                                     'GHC.Generics.NoSourceStrictness
                                                                     'GHC.Generics.DecidedLazy)
                                                                  (GHC.Generics.K1
                                                                     GHC.Generics.R
                                                                     (Data.Vector.Vector a))))
                        @ (GHC.Generics.M1
                             GHC.Generics.C
                             ('GHC.Generics.MetaCons
                                "FiniteTensor" 'GHC.Generics.PrefixI 'GHC.Types.True)
                             (GHC.Generics.M1
                                GHC.Generics.S
                                ('GHC.Generics.MetaSel
                                   ('GHC.Base.Just "tensorFiniteIndex")
                                   'GHC.Generics.NoSourceUnpackedness
                                   'GHC.Generics.NoSourceStrictness
                                   'GHC.Generics.DecidedLazy)
                                (GHC.Generics.K1 GHC.Generics.R Multilinear.Index.Finite.Index)
                              GHC.Generics.:*: GHC.Generics.M1
                                                 GHC.Generics.S
                                                 ('GHC.Generics.MetaSel
                                                    ('GHC.Base.Just "tensorsFinite")
                                                    'GHC.Generics.NoSourceUnpackedness
                                                    'GHC.Generics.NoSourceStrictness
                                                    'GHC.Generics.DecidedLazy)
                                                 (GHC.Generics.K1
                                                    GHC.Generics.R
                                                    (Data.Vector.Vector
                                                       (Multilinear.Generic.Tensor a))))
                           GHC.Generics.:+: (GHC.Generics.M1
                                               GHC.Generics.C
                                               ('GHC.Generics.MetaCons
                                                  "InfiniteTensor"
                                                  'GHC.Generics.PrefixI
                                                  'GHC.Types.True)
                                               (GHC.Generics.M1
                                                  GHC.Generics.S
                                                  ('GHC.Generics.MetaSel
                                                     ('GHC.Base.Just "tensorInfiniteIndex")
                                                     'GHC.Generics.NoSourceUnpackedness
                                                     'GHC.Generics.NoSourceStrictness
                                                     'GHC.Generics.DecidedLazy)
                                                  (GHC.Generics.K1
                                                     GHC.Generics.R
                                                     Multilinear.Index.Infinite.Index)
                                                GHC.Generics.:*: GHC.Generics.M1
                                                                   GHC.Generics.S
                                                                   ('GHC.Generics.MetaSel
                                                                      ('GHC.Base.Just
                                                                         "tensorsInfinite")
                                                                      'GHC.Generics.NoSourceUnpackedness
                                                                      'GHC.Generics.NoSourceStrictness
                                                                      'GHC.Generics.DecidedLazy)
                                                                   (GHC.Generics.K1
                                                                      GHC.Generics.R
                                                                      [Multilinear.Generic.Tensor
                                                                         a]))
                                             GHC.Generics.:+: GHC.Generics.M1
                                                                GHC.Generics.C
                                                                ('GHC.Generics.MetaCons
                                                                   "Err"
                                                                   'GHC.Generics.PrefixI
                                                                   'GHC.Types.True)
                                                                (GHC.Generics.M1
                                                                   GHC.Generics.S
                                                                   ('GHC.Generics.MetaSel
                                                                      ('GHC.Base.Just "errMessage")
                                                                      'GHC.Generics.NoSourceUnpackedness
                                                                      'GHC.Generics.NoSourceStrictness
                                                                      'GHC.Generics.DecidedLazy)
                                                                   (GHC.Generics.K1
                                                                      GHC.Generics.R
                                                                      GHC.Base.String))))
                        @ x
                        (GHC.Generics.R1
                           @ *
                           @ (GHC.Generics.M1
                                GHC.Generics.C
                                ('GHC.Generics.MetaCons
                                   "Scalar" 'GHC.Generics.PrefixI 'GHC.Types.True)
                                (GHC.Generics.M1
                                   GHC.Generics.S
                                   ('GHC.Generics.MetaSel
                                      ('GHC.Base.Just "scalarVal")
                                      'GHC.Generics.NoSourceUnpackedness
                                      'GHC.Generics.NoSourceStrictness
                                      'GHC.Generics.DecidedLazy)
                                   (GHC.Generics.K1 GHC.Generics.R a)))
                           @ (GHC.Generics.M1
                                GHC.Generics.C
                                ('GHC.Generics.MetaCons
                                   "SimpleFinite" 'GHC.Generics.PrefixI 'GHC.Types.True)
                                (GHC.Generics.M1
                                   GHC.Generics.S
                                   ('GHC.Generics.MetaSel
                                      ('GHC.Base.Just "tensorFiniteIndex")
                                      'GHC.Generics.NoSourceUnpackedness
                                      'GHC.Generics.NoSourceStrictness
                                      'GHC.Generics.DecidedLazy)
                                   (GHC.Generics.K1 GHC.Generics.R Multilinear.Index.Finite.Index)
                                 GHC.Generics.:*: GHC.Generics.M1
                                                    GHC.Generics.S
                                                    ('GHC.Generics.MetaSel
                                                       ('GHC.Base.Just "tensorScalars")
                                                       'GHC.Generics.NoSourceUnpackedness
                                                       'GHC.Generics.NoSourceStrictness
                                                       'GHC.Generics.DecidedLazy)
                                                    (GHC.Generics.K1
                                                       GHC.Generics.R (Data.Vector.Vector a))))
                           @ x
                           (GHC.Generics.:*:
                              @ *
                              @ (GHC.Generics.M1
                                   GHC.Generics.S
                                   ('GHC.Generics.MetaSel
                                      ('GHC.Base.Just "tensorFiniteIndex")
                                      'GHC.Generics.NoSourceUnpackedness
                                      'GHC.Generics.NoSourceStrictness
                                      'GHC.Generics.DecidedLazy)
                                   (GHC.Generics.K1 GHC.Generics.R Multilinear.Index.Finite.Index))
                              @ (GHC.Generics.M1
                                   GHC.Generics.S
                                   ('GHC.Generics.MetaSel
                                      ('GHC.Base.Just "tensorScalars")
                                      'GHC.Generics.NoSourceUnpackedness
                                      'GHC.Generics.NoSourceStrictness
                                      'GHC.Generics.DecidedLazy)
                                   (GHC.Generics.K1 GHC.Generics.R (Data.Vector.Vector a)))
                              @ x
                              g1
                                `cast`
                              (Trans
                                   (Sym (GHC.Generics.N:K1[0]
                                             <*>_N
                                             <GHC.Generics.R>_P
                                             <Multilinear.Index.Finite.Index>_R
                                             <x>_P))
                                   (Sym (GHC.Generics.N:M1[0]
                                             <*>_N
                                             <GHC.Generics.S>_P
                                             <'GHC.Generics.MetaSel
                                                ('GHC.Base.Just "tensorFiniteIndex")
                                                'GHC.Generics.NoSourceUnpackedness
                                                'GHC.Generics.NoSourceStrictness
                                                'GHC.Generics.DecidedLazy>_P
                                             <GHC.Generics.K1
                                                GHC.Generics.R
                                                Multilinear.Index.Finite.Index>_R) <x>_N))
                              g2
                                `cast`
                              (Trans
                                   (Sym (GHC.Generics.N:K1[0]
                                             <*>_N
                                             <GHC.Generics.R>_P
                                             <Data.Vector.Vector a>_R
                                             <x>_P))
                                   (Sym (GHC.Generics.N:M1[0]
                                             <*>_N
                                             <GHC.Generics.S>_P
                                             <'GHC.Generics.MetaSel
                                                ('GHC.Base.Just "tensorScalars")
                                                'GHC.Generics.NoSourceUnpackedness
                                                'GHC.Generics.NoSourceStrictness
                                                'GHC.Generics.DecidedLazy>_P
                                             <GHC.Generics.K1
                                                GHC.Generics.R (Data.Vector.Vector a)>_R) <x>_N)))
                             `cast`
                           (Sym (GHC.Generics.N:M1[0]
                                     <*>_N
                                     <GHC.Generics.C>_P
                                     <'GHC.Generics.MetaCons
                                        "SimpleFinite" 'GHC.Generics.PrefixI 'GHC.Types.True>_P
                                     <GHC.Generics.M1
                                        GHC.Generics.S
                                        ('GHC.Generics.MetaSel
                                           ('GHC.Base.Just "tensorFiniteIndex")
                                           'GHC.Generics.NoSourceUnpackedness
                                           'GHC.Generics.NoSourceStrictness
                                           'GHC.Generics.DecidedLazy)
                                        (GHC.Generics.K1
                                           GHC.Generics.R Multilinear.Index.Finite.Index)
                                      GHC.Generics.:*: GHC.Generics.M1
                                                         GHC.Generics.S
                                                         ('GHC.Generics.MetaSel
                                                            ('GHC.Base.Just "tensorScalars")
                                                            'GHC.Generics.NoSourceUnpackedness
                                                            'GHC.Generics.NoSourceStrictness
                                                            'GHC.Generics.DecidedLazy)
                                                         (GHC.Generics.K1
                                                            GHC.Generics.R
                                                            (Data.Vector.Vector a))>_R) <x>_N))
                   Multilinear.Generic.FiniteTensor g1 g2
                   -> GHC.Generics.R1
                        @ *
                        @ (GHC.Generics.M1
                             GHC.Generics.C
                             ('GHC.Generics.MetaCons
                                "Scalar" 'GHC.Generics.PrefixI 'GHC.Types.True)
                             (GHC.Generics.M1
                                GHC.Generics.S
                                ('GHC.Generics.MetaSel
                                   ('GHC.Base.Just "scalarVal")
                                   'GHC.Generics.NoSourceUnpackedness
                                   'GHC.Generics.NoSourceStrictness
                                   'GHC.Generics.DecidedLazy)
                                (GHC.Generics.K1 GHC.Generics.R a))
                           GHC.Generics.:+: GHC.Generics.M1
                                              GHC.Generics.C
                                              ('GHC.Generics.MetaCons
                                                 "SimpleFinite"
                                                 'GHC.Generics.PrefixI
                                                 'GHC.Types.True)
                                              (GHC.Generics.M1
                                                 GHC.Generics.S
                                                 ('GHC.Generics.MetaSel
                                                    ('GHC.Base.Just "tensorFiniteIndex")
                                                    'GHC.Generics.NoSourceUnpackedness
                                                    'GHC.Generics.NoSourceStrictness
                                                    'GHC.Generics.DecidedLazy)
                                                 (GHC.Generics.K1
                                                    GHC.Generics.R Multilinear.Index.Finite.Index)
                                               GHC.Generics.:*: GHC.Generics.M1
                                                                  GHC.Generics.S
                                                                  ('GHC.Generics.MetaSel
                                                                     ('GHC.Base.Just
                                                                        "tensorScalars")
                                                                     'GHC.Generics.NoSourceUnpackedness
                                                                     'GHC.Generics.NoSourceStrictness
                                                                     'GHC.Generics.DecidedLazy)
                                                                  (GHC.Generics.K1
                                                                     GHC.Generics.R
                                                                     (Data.Vector.Vector a))))
                        @ (GHC.Generics.M1
                             GHC.Generics.C
                             ('GHC.Generics.MetaCons
                                "FiniteTensor" 'GHC.Generics.PrefixI 'GHC.Types.True)
                             (GHC.Generics.M1
                                GHC.Generics.S
                                ('GHC.Generics.MetaSel
                                   ('GHC.Base.Just "tensorFiniteIndex")
                                   'GHC.Generics.NoSourceUnpackedness
                                   'GHC.Generics.NoSourceStrictness
                                   'GHC.Generics.DecidedLazy)
                                (GHC.Generics.K1 GHC.Generics.R Multilinear.Index.Finite.Index)
                              GHC.Generics.:*: GHC.Generics.M1
                                                 GHC.Generics.S
                                                 ('GHC.Generics.MetaSel
                                                    ('GHC.Base.Just "tensorsFinite")
                                                    'GHC.Generics.NoSourceUnpackedness
                                                    'GHC.Generics.NoSourceStrictness
                                                    'GHC.Generics.DecidedLazy)
                                                 (GHC.Generics.K1
                                                    GHC.Generics.R
                                                    (Data.Vector.Vector
                                                       (Multilinear.Generic.Tensor a))))
                           GHC.Generics.:+: (GHC.Generics.M1
                                               GHC.Generics.C
                                               ('GHC.Generics.MetaCons
                                                  "InfiniteTensor"
                                                  'GHC.Generics.PrefixI
                                                  'GHC.Types.True)
                                               (GHC.Generics.M1
                                                  GHC.Generics.S
                                                  ('GHC.Generics.MetaSel
                                                     ('GHC.Base.Just "tensorInfiniteIndex")
                                                     'GHC.Generics.NoSourceUnpackedness
                                                     'GHC.Generics.NoSourceStrictness
                                                     'GHC.Generics.DecidedLazy)
                                                  (GHC.Generics.K1
                                                     GHC.Generics.R
                                                     Multilinear.Index.Infinite.Index)
                                                GHC.Generics.:*: GHC.Generics.M1
                                                                   GHC.Generics.S
                                                                   ('GHC.Generics.MetaSel
                                                                      ('GHC.Base.Just
                                                                         "tensorsInfinite")
                                                                      'GHC.Generics.NoSourceUnpackedness
                                                                      'GHC.Generics.NoSourceStrictness
                                                                      'GHC.Generics.DecidedLazy)
                                                                   (GHC.Generics.K1
                                                                      GHC.Generics.R
                                                                      [Multilinear.Generic.Tensor
                                                                         a]))
                                             GHC.Generics.:+: GHC.Generics.M1
                                                                GHC.Generics.C
                                                                ('GHC.Generics.MetaCons
                                                                   "Err"
                                                                   'GHC.Generics.PrefixI
                                                                   'GHC.Types.True)
                                                                (GHC.Generics.M1
                                                                   GHC.Generics.S
                                                                   ('GHC.Generics.MetaSel
                                                                      ('GHC.Base.Just "errMessage")
                                                                      'GHC.Generics.NoSourceUnpackedness
                                                                      'GHC.Generics.NoSourceStrictness
                                                                      'GHC.Generics.DecidedLazy)
                                                                   (GHC.Generics.K1
                                                                      GHC.Generics.R
                                                                      GHC.Base.String))))
                        @ x
                        (GHC.Generics.L1
                           @ *
                           @ (GHC.Generics.M1
                                GHC.Generics.C
                                ('GHC.Generics.MetaCons
                                   "FiniteTensor" 'GHC.Generics.PrefixI 'GHC.Types.True)
                                (GHC.Generics.M1
                                   GHC.Generics.S
                                   ('GHC.Generics.MetaSel
                                      ('GHC.Base.Just "tensorFiniteIndex")
                                      'GHC.Generics.NoSourceUnpackedness
                                      'GHC.Generics.NoSourceStrictness
                                      'GHC.Generics.DecidedLazy)
                                   (GHC.Generics.K1 GHC.Generics.R Multilinear.Index.Finite.Index)
                                 GHC.Generics.:*: GHC.Generics.M1
                                                    GHC.Generics.S
                                                    ('GHC.Generics.MetaSel
                                                       ('GHC.Base.Just "tensorsFinite")
                                                       'GHC.Generics.NoSourceUnpackedness
                                                       'GHC.Generics.NoSourceStrictness
                                                       'GHC.Generics.DecidedLazy)
                                                    (GHC.Generics.K1
                                                       GHC.Generics.R
                                                       (Data.Vector.Vector
                                                          (Multilinear.Generic.Tensor a)))))
                           @ (GHC.Generics.M1
                                GHC.Generics.C
                                ('GHC.Generics.MetaCons
                                   "InfiniteTensor" 'GHC.Generics.PrefixI 'GHC.Types.True)
                                (GHC.Generics.M1
                                   GHC.Generics.S
                                   ('GHC.Generics.MetaSel
                                      ('GHC.Base.Just "tensorInfiniteIndex")
                                      'GHC.Generics.NoSourceUnpackedness
                                      'GHC.Generics.NoSourceStrictness
                                      'GHC.Generics.DecidedLazy)
                                   (GHC.Generics.K1 GHC.Generics.R Multilinear.Index.Infinite.Index)
                                 GHC.Generics.:*: GHC.Generics.M1
                                                    GHC.Generics.S
                                                    ('GHC.Generics.MetaSel
                                                       ('GHC.Base.Just "tensorsInfinite")
                                                       'GHC.Generics.NoSourceUnpackedness
                                                       'GHC.Generics.NoSourceStrictness
                                                       'GHC.Generics.DecidedLazy)
                                                    (GHC.Generics.K1
                                                       GHC.Generics.R
                                                       [Multilinear.Generic.Tensor a]))
                              GHC.Generics.:+: GHC.Generics.M1
                                                 GHC.Generics.C
                                                 ('GHC.Generics.MetaCons
                                                    "Err" 'GHC.Generics.PrefixI 'GHC.Types.True)
                                                 (GHC.Generics.M1
                                                    GHC.Generics.S
                                                    ('GHC.Generics.MetaSel
                                                       ('GHC.Base.Just "errMessage")
                                                       'GHC.Generics.NoSourceUnpackedness
                                                       'GHC.Generics.NoSourceStrictness
                                                       'GHC.Generics.DecidedLazy)
                                                    (GHC.Generics.K1
                                                       GHC.Generics.R GHC.Base.String)))
                           @ x
                           (GHC.Generics.:*:
                              @ *
                              @ (GHC.Generics.M1
                                   GHC.Generics.S
                                   ('GHC.Generics.MetaSel
                                      ('GHC.Base.Just "tensorFiniteIndex")
                                      'GHC.Generics.NoSourceUnpackedness
                                      'GHC.Generics.NoSourceStrictness
                                      'GHC.Generics.DecidedLazy)
                                   (GHC.Generics.K1 GHC.Generics.R Multilinear.Index.Finite.Index))
                              @ (GHC.Generics.M1
                                   GHC.Generics.S
                                   ('GHC.Generics.MetaSel
                                      ('GHC.Base.Just "tensorsFinite")
                                      'GHC.Generics.NoSourceUnpackedness
                                      'GHC.Generics.NoSourceStrictness
                                      'GHC.Generics.DecidedLazy)
                                   (GHC.Generics.K1
                                      GHC.Generics.R
                                      (Data.Vector.Vector (Multilinear.Generic.Tensor a))))
                              @ x
                              g1
                                `cast`
                              (Trans
                                   (Sym (GHC.Generics.N:K1[0]
                                             <*>_N
                                             <GHC.Generics.R>_P
                                             <Multilinear.Index.Finite.Index>_R
                                             <x>_P))
                                   (Sym (GHC.Generics.N:M1[0]
                                             <*>_N
                                             <GHC.Generics.S>_P
                                             <'GHC.Generics.MetaSel
                                                ('GHC.Base.Just "tensorFiniteIndex")
                                                'GHC.Generics.NoSourceUnpackedness
                                                'GHC.Generics.NoSourceStrictness
                                                'GHC.Generics.DecidedLazy>_P
                                             <GHC.Generics.K1
                                                GHC.Generics.R
                                                Multilinear.Index.Finite.Index>_R) <x>_N))
                              g2
                                `cast`
                              (Trans
                                   (Sym (GHC.Generics.N:K1[0]
                                             <*>_N
                                             <GHC.Generics.R>_P
                                             <Data.Vector.Vector (Multilinear.Generic.Tensor a)>_R
                                             <x>_P))
                                   (Sym (GHC.Generics.N:M1[0]
                                             <*>_N
                                             <GHC.Generics.S>_P
                                             <'GHC.Generics.MetaSel
                                                ('GHC.Base.Just "tensorsFinite")
                                                'GHC.Generics.NoSourceUnpackedness
                                                'GHC.Generics.NoSourceStrictness
                                                'GHC.Generics.DecidedLazy>_P
                                             <GHC.Generics.K1
                                                GHC.Generics.R
                                                (Data.Vector.Vector
                                                   (Multilinear.Generic.Tensor a))>_R) <x>_N)))
                             `cast`
                           (Sym (GHC.Generics.N:M1[0]
                                     <*>_N
                                     <GHC.Generics.C>_P
                                     <'GHC.Generics.MetaCons
                                        "FiniteTensor" 'GHC.Generics.PrefixI 'GHC.Types.True>_P
                                     <GHC.Generics.M1
                                        GHC.Generics.S
                                        ('GHC.Generics.MetaSel
                                           ('GHC.Base.Just "tensorFiniteIndex")
                                           'GHC.Generics.NoSourceUnpackedness
                                           'GHC.Generics.NoSourceStrictness
                                           'GHC.Generics.DecidedLazy)
                                        (GHC.Generics.K1
                                           GHC.Generics.R Multilinear.Index.Finite.Index)
                                      GHC.Generics.:*: GHC.Generics.M1
                                                         GHC.Generics.S
                                                         ('GHC.Generics.MetaSel
                                                            ('GHC.Base.Just "tensorsFinite")
                                                            'GHC.Generics.NoSourceUnpackedness
                                                            'GHC.Generics.NoSourceStrictness
                                                            'GHC.Generics.DecidedLazy)
                                                         (GHC.Generics.K1
                                                            GHC.Generics.R
                                                            (Data.Vector.Vector
                                                               (Multilinear.Generic.Tensor
                                                                  a)))>_R) <x>_N))
                   Multilinear.Generic.InfiniteTensor g1 g2
                   -> GHC.Generics.R1
                        @ *
                        @ (GHC.Generics.M1
                             GHC.Generics.C
                             ('GHC.Generics.MetaCons
                                "Scalar" 'GHC.Generics.PrefixI 'GHC.Types.True)
                             (GHC.Generics.M1
                                GHC.Generics.S
                                ('GHC.Generics.MetaSel
                                   ('GHC.Base.Just "scalarVal")
                                   'GHC.Generics.NoSourceUnpackedness
                                   'GHC.Generics.NoSourceStrictness
                                   'GHC.Generics.DecidedLazy)
                                (GHC.Generics.K1 GHC.Generics.R a))
                           GHC.Generics.:+: GHC.Generics.M1
                                              GHC.Generics.C
                                              ('GHC.Generics.MetaCons
                                                 "SimpleFinite"
                                                 'GHC.Generics.PrefixI
                                                 'GHC.Types.True)
                                              (GHC.Generics.M1
                                                 GHC.Generics.S
                                                 ('GHC.Generics.MetaSel
                                                    ('GHC.Base.Just "tensorFiniteIndex")
                                                    'GHC.Generics.NoSourceUnpackedness
                                                    'GHC.Generics.NoSourceStrictness
                                                    'GHC.Generics.DecidedLazy)
                                                 (GHC.Generics.K1
                                                    GHC.Generics.R Multilinear.Index.Finite.Index)
                                               GHC.Generics.:*: GHC.Generics.M1
                                                                  GHC.Generics.S
                                                                  ('GHC.Generics.MetaSel
                                                                     ('GHC.Base.Just
                                                                        "tensorScalars")
                                                                     'GHC.Generics.NoSourceUnpackedness
                                                                     'GHC.Generics.NoSourceStrictness
                                                                     'GHC.Generics.DecidedLazy)
                                                                  (GHC.Generics.K1
                                                                     GHC.Generics.R
                                                                     (Data.Vector.Vector a))))
                        @ (GHC.Generics.M1
                             GHC.Generics.C
                             ('GHC.Generics.MetaCons
                                "FiniteTensor" 'GHC.Generics.PrefixI 'GHC.Types.True)
                             (GHC.Generics.M1
                                GHC.Generics.S
                                ('GHC.Generics.MetaSel
                                   ('GHC.Base.Just "tensorFiniteIndex")
                                   'GHC.Generics.NoSourceUnpackedness
                                   'GHC.Generics.NoSourceStrictness
                                   'GHC.Generics.DecidedLazy)
                                (GHC.Generics.K1 GHC.Generics.R Multilinear.Index.Finite.Index)
                              GHC.Generics.:*: GHC.Generics.M1
                                                 GHC.Generics.S
                                                 ('GHC.Generics.MetaSel
                                                    ('GHC.Base.Just "tensorsFinite")
                                                    'GHC.Generics.NoSourceUnpackedness
                                                    'GHC.Generics.NoSourceStrictness
                                                    'GHC.Generics.DecidedLazy)
                                                 (GHC.Generics.K1
                                                    GHC.Generics.R
                                                    (Data.Vector.Vector
                                                       (Multilinear.Generic.Tensor a))))
                           GHC.Generics.:+: (GHC.Generics.M1
                                               GHC.Generics.C
                                               ('GHC.Generics.MetaCons
                                                  "InfiniteTensor"
                                                  'GHC.Generics.PrefixI
                                                  'GHC.Types.True)
                                               (GHC.Generics.M1
                                                  GHC.Generics.S
                                                  ('GHC.Generics.MetaSel
                                                     ('GHC.Base.Just "tensorInfiniteIndex")
                                                     'GHC.Generics.NoSourceUnpackedness
                                                     'GHC.Generics.NoSourceStrictness
                                                     'GHC.Generics.DecidedLazy)
                                                  (GHC.Generics.K1
                                                     GHC.Generics.R
                                                     Multilinear.Index.Infinite.Index)
                                                GHC.Generics.:*: GHC.Generics.M1
                                                                   GHC.Generics.S
                                                                   ('GHC.Generics.MetaSel
                                                                      ('GHC.Base.Just
                                                                         "tensorsInfinite")
                                                                      'GHC.Generics.NoSourceUnpackedness
                                                                      'GHC.Generics.NoSourceStrictness
                                                                      'GHC.Generics.DecidedLazy)
                                                                   (GHC.Generics.K1
                                                                      GHC.Generics.R
                                                                      [Multilinear.Generic.Tensor
                                                                         a]))
                                             GHC.Generics.:+: GHC.Generics.M1
                                                                GHC.Generics.C
                                                                ('GHC.Generics.MetaCons
                                                                   "Err"
                                                                   'GHC.Generics.PrefixI
                                                                   'GHC.Types.True)
                                                                (GHC.Generics.M1
                                                                   GHC.Generics.S
                                                                   ('GHC.Generics.MetaSel
                                                                      ('GHC.Base.Just "errMessage")
                                                                      'GHC.Generics.NoSourceUnpackedness
                                                                      'GHC.Generics.NoSourceStrictness
                                                                      'GHC.Generics.DecidedLazy)
                                                                   (GHC.Generics.K1
                                                                      GHC.Generics.R
                                                                      GHC.Base.String))))
                        @ x
                        (GHC.Generics.R1
                           @ *
                           @ (GHC.Generics.M1
                                GHC.Generics.C
                                ('GHC.Generics.MetaCons
                                   "FiniteTensor" 'GHC.Generics.PrefixI 'GHC.Types.True)
                                (GHC.Generics.M1
                                   GHC.Generics.S
                                   ('GHC.Generics.MetaSel
                                      ('GHC.Base.Just "tensorFiniteIndex")
                                      'GHC.Generics.NoSourceUnpackedness
                                      'GHC.Generics.NoSourceStrictness
                                      'GHC.Generics.DecidedLazy)
                                   (GHC.Generics.K1 GHC.Generics.R Multilinear.Index.Finite.Index)
                                 GHC.Generics.:*: GHC.Generics.M1
                                                    GHC.Generics.S
                                                    ('GHC.Generics.MetaSel
                                                       ('GHC.Base.Just "tensorsFinite")
                                                       'GHC.Generics.NoSourceUnpackedness
                                                       'GHC.Generics.NoSourceStrictness
                                                       'GHC.Generics.DecidedLazy)
                                                    (GHC.Generics.K1
                                                       GHC.Generics.R
                                                       (Data.Vector.Vector
                                                          (Multilinear.Generic.Tensor a)))))
                           @ (GHC.Generics.M1
                                GHC.Generics.C
                                ('GHC.Generics.MetaCons
                                   "InfiniteTensor" 'GHC.Generics.PrefixI 'GHC.Types.True)
                                (GHC.Generics.M1
                                   GHC.Generics.S
                                   ('GHC.Generics.MetaSel
                                      ('GHC.Base.Just "tensorInfiniteIndex")
                                      'GHC.Generics.NoSourceUnpackedness
                                      'GHC.Generics.NoSourceStrictness
                                      'GHC.Generics.DecidedLazy)
                                   (GHC.Generics.K1 GHC.Generics.R Multilinear.Index.Infinite.Index)
                                 GHC.Generics.:*: GHC.Generics.M1
                                                    GHC.Generics.S
                                                    ('GHC.Generics.MetaSel
                                                       ('GHC.Base.Just "tensorsInfinite")
                                                       'GHC.Generics.NoSourceUnpackedness
                                                       'GHC.Generics.NoSourceStrictness
                                                       'GHC.Generics.DecidedLazy)
                                                    (GHC.Generics.K1
                                                       GHC.Generics.R
                                                       [Multilinear.Generic.Tensor a]))
                              GHC.Generics.:+: GHC.Generics.M1
                                                 GHC.Generics.C
                                                 ('GHC.Generics.MetaCons
                                                    "Err" 'GHC.Generics.PrefixI 'GHC.Types.True)
                                                 (GHC.Generics.M1
                                                    GHC.Generics.S
                                                    ('GHC.Generics.MetaSel
                                                       ('GHC.Base.Just "errMessage")
                                                       'GHC.Generics.NoSourceUnpackedness
                                                       'GHC.Generics.NoSourceStrictness
                                                       'GHC.Generics.DecidedLazy)
                                                    (GHC.Generics.K1
                                                       GHC.Generics.R GHC.Base.String)))
                           @ x
                           (GHC.Generics.L1
                              @ *
                              @ (GHC.Generics.M1
                                   GHC.Generics.C
                                   ('GHC.Generics.MetaCons
                                      "InfiniteTensor" 'GHC.Generics.PrefixI 'GHC.Types.True)
                                   (GHC.Generics.M1
                                      GHC.Generics.S
                                      ('GHC.Generics.MetaSel
                                         ('GHC.Base.Just "tensorInfiniteIndex")
                                         'GHC.Generics.NoSourceUnpackedness
                                         'GHC.Generics.NoSourceStrictness
                                         'GHC.Generics.DecidedLazy)
                                      (GHC.Generics.K1
                                         GHC.Generics.R Multilinear.Index.Infinite.Index)
                                    GHC.Generics.:*: GHC.Generics.M1
                                                       GHC.Generics.S
                                                       ('GHC.Generics.MetaSel
                                                          ('GHC.Base.Just "tensorsInfinite")
                                                          'GHC.Generics.NoSourceUnpackedness
                                                          'GHC.Generics.NoSourceStrictness
                                                          'GHC.Generics.DecidedLazy)
                                                       (GHC.Generics.K1
                                                          GHC.Generics.R
                                                          [Multilinear.Generic.Tensor a])))
                              @ (GHC.Generics.M1
                                   GHC.Generics.C
                                   ('GHC.Generics.MetaCons
                                      "Err" 'GHC.Generics.PrefixI 'GHC.Types.True)
                                   (GHC.Generics.M1
                                      GHC.Generics.S
                                      ('GHC.Generics.MetaSel
                                         ('GHC.Base.Just "errMessage")
                                         'GHC.Generics.NoSourceUnpackedness
                                         'GHC.Generics.NoSourceStrictness
                                         'GHC.Generics.DecidedLazy)
                                      (GHC.Generics.K1 GHC.Generics.R GHC.Base.String)))
                              @ x
                              (GHC.Generics.:*:
                                 @ *
                                 @ (GHC.Generics.M1
                                      GHC.Generics.S
                                      ('GHC.Generics.MetaSel
                                         ('GHC.Base.Just "tensorInfiniteIndex")
                                         'GHC.Generics.NoSourceUnpackedness
                                         'GHC.Generics.NoSourceStrictness
                                         'GHC.Generics.DecidedLazy)
                                      (GHC.Generics.K1
                                         GHC.Generics.R Multilinear.Index.Infinite.Index))
                                 @ (GHC.Generics.M1
                                      GHC.Generics.S
                                      ('GHC.Generics.MetaSel
                                         ('GHC.Base.Just "tensorsInfinite")
                                         'GHC.Generics.NoSourceUnpackedness
                                         'GHC.Generics.NoSourceStrictness
                                         'GHC.Generics.DecidedLazy)
                                      (GHC.Generics.K1
                                         GHC.Generics.R [Multilinear.Generic.Tensor a]))
                                 @ x
                                 g1
                                   `cast`
                                 (Trans
                                      (Sym (GHC.Generics.N:K1[0]
                                                <*>_N
                                                <GHC.Generics.R>_P
                                                <Multilinear.Index.Infinite.Index>_R
                                                <x>_P))
                                      (Sym (GHC.Generics.N:M1[0]
                                                <*>_N
                                                <GHC.Generics.S>_P
                                                <'GHC.Generics.MetaSel
                                                   ('GHC.Base.Just "tensorInfiniteIndex")
                                                   'GHC.Generics.NoSourceUnpackedness
                                                   'GHC.Generics.NoSourceStrictness
                                                   'GHC.Generics.DecidedLazy>_P
                                                <GHC.Generics.K1
                                                   GHC.Generics.R
                                                   Multilinear.Index.Infinite.Index>_R) <x>_N))
                                 g2
                                   `cast`
                                 (Trans
                                      (Sym (GHC.Generics.N:K1[0]
                                                <*>_N
                                                <GHC.Generics.R>_P
                                                <[Multilinear.Generic.Tensor a]>_R
                                                <x>_P))
                                      (Sym (GHC.Generics.N:M1[0]
                                                <*>_N
                                                <GHC.Generics.S>_P
                                                <'GHC.Generics.MetaSel
                                                   ('GHC.Base.Just "tensorsInfinite")
                                                   'GHC.Generics.NoSourceUnpackedness
                                                   'GHC.Generics.NoSourceStrictness
                                                   'GHC.Generics.DecidedLazy>_P
                                                <GHC.Generics.K1
                                                   GHC.Generics.R
                                                   [Multilinear.Generic.Tensor a]>_R) <x>_N)))
                                `cast`
                              (Sym (GHC.Generics.N:M1[0]
                                        <*>_N
                                        <GHC.Generics.C>_P
                                        <'GHC.Generics.MetaCons
                                           "InfiniteTensor" 'GHC.Generics.PrefixI 'GHC.Types.True>_P
                                        <GHC.Generics.M1
                                           GHC.Generics.S
                                           ('GHC.Generics.MetaSel
                                              ('GHC.Base.Just "tensorInfiniteIndex")
                                              'GHC.Generics.NoSourceUnpackedness
                                              'GHC.Generics.NoSourceStrictness
                                              'GHC.Generics.DecidedLazy)
                                           (GHC.Generics.K1
                                              GHC.Generics.R Multilinear.Index.Infinite.Index)
                                         GHC.Generics.:*: GHC.Generics.M1
                                                            GHC.Generics.S
                                                            ('GHC.Generics.MetaSel
                                                               ('GHC.Base.Just "tensorsInfinite")
                                                               'GHC.Generics.NoSourceUnpackedness
                                                               'GHC.Generics.NoSourceStrictness
                                                               'GHC.Generics.DecidedLazy)
                                                            (GHC.Generics.K1
                                                               GHC.Generics.R
                                                               [Multilinear.Generic.Tensor
                                                                  a])>_R) <x>_N)))
                   Multilinear.Generic.Err g1
                   -> GHC.Generics.R1
                        @ *
                        @ (GHC.Generics.M1
                             GHC.Generics.C
                             ('GHC.Generics.MetaCons
                                "Scalar" 'GHC.Generics.PrefixI 'GHC.Types.True)
                             (GHC.Generics.M1
                                GHC.Generics.S
                                ('GHC.Generics.MetaSel
                                   ('GHC.Base.Just "scalarVal")
                                   'GHC.Generics.NoSourceUnpackedness
                                   'GHC.Generics.NoSourceStrictness
                                   'GHC.Generics.DecidedLazy)
                                (GHC.Generics.K1 GHC.Generics.R a))
                           GHC.Generics.:+: GHC.Generics.M1
                                              GHC.Generics.C
                                              ('GHC.Generics.MetaCons
                                                 "SimpleFinite"
                                                 'GHC.Generics.PrefixI
                                                 'GHC.Types.True)
                                              (GHC.Generics.M1
                                                 GHC.Generics.S
                                                 ('GHC.Generics.MetaSel
                                                    ('GHC.Base.Just "tensorFiniteIndex")
                                                    'GHC.Generics.NoSourceUnpackedness
                                                    'GHC.Generics.NoSourceStrictness
                                                    'GHC.Generics.DecidedLazy)
                                                 (GHC.Generics.K1
                                                    GHC.Generics.R Multilinear.Index.Finite.Index)
                                               GHC.Generics.:*: GHC.Generics.M1
                                                                  GHC.Generics.S
                                                                  ('GHC.Generics.MetaSel
                                                                     ('GHC.Base.Just
                                                                        "tensorScalars")
                                                                     'GHC.Generics.NoSourceUnpackedness
                                                                     'GHC.Generics.NoSourceStrictness
                                                                     'GHC.Generics.DecidedLazy)
                                                                  (GHC.Generics.K1
                                                                     GHC.Generics.R
                                                                     (Data.Vector.Vector a))))
                        @ (GHC.Generics.M1
                             GHC.Generics.C
                             ('GHC.Generics.MetaCons
                                "FiniteTensor" 'GHC.Generics.PrefixI 'GHC.Types.True)
                             (GHC.Generics.M1
                                GHC.Generics.S
                                ('GHC.Generics.MetaSel
                                   ('GHC.Base.Just "tensorFiniteIndex")
                                   'GHC.Generics.NoSourceUnpackedness
                                   'GHC.Generics.NoSourceStrictness
                                   'GHC.Generics.DecidedLazy)
                                (GHC.Generics.K1 GHC.Generics.R Multilinear.Index.Finite.Index)
                              GHC.Generics.:*: GHC.Generics.M1
                                                 GHC.Generics.S
                                                 ('GHC.Generics.MetaSel
                                                    ('GHC.Base.Just "tensorsFinite")
                                                    'GHC.Generics.NoSourceUnpackedness
                                                    'GHC.Generics.NoSourceStrictness
                                                    'GHC.Generics.DecidedLazy)
                                                 (GHC.Generics.K1
                                                    GHC.Generics.R
                                                    (Data.Vector.Vector
                                                       (Multilinear.Generic.Tensor a))))
                           GHC.Generics.:+: (GHC.Generics.M1
                                               GHC.Generics.C
                                               ('GHC.Generics.MetaCons
                                                  "InfiniteTensor"
                                                  'GHC.Generics.PrefixI
                                                  'GHC.Types.True)
                                               (GHC.Generics.M1
                                                  GHC.Generics.S
                                                  ('GHC.Generics.MetaSel
                                                     ('GHC.Base.Just "tensorInfiniteIndex")
                                                     'GHC.Generics.NoSourceUnpackedness
                                                     'GHC.Generics.NoSourceStrictness
                                                     'GHC.Generics.DecidedLazy)
                                                  (GHC.Generics.K1
                                                     GHC.Generics.R
                                                     Multilinear.Index.Infinite.Index)
                                                GHC.Generics.:*: GHC.Generics.M1
                                                                   GHC.Generics.S
                                                                   ('GHC.Generics.MetaSel
                                                                      ('GHC.Base.Just
                                                                         "tensorsInfinite")
                                                                      'GHC.Generics.NoSourceUnpackedness
                                                                      'GHC.Generics.NoSourceStrictness
                                                                      'GHC.Generics.DecidedLazy)
                                                                   (GHC.Generics.K1
                                                                      GHC.Generics.R
                                                                      [Multilinear.Generic.Tensor
                                                                         a]))
                                             GHC.Generics.:+: GHC.Generics.M1
                                                                GHC.Generics.C
                                                                ('GHC.Generics.MetaCons
                                                                   "Err"
                                                                   'GHC.Generics.PrefixI
                                                                   'GHC.Types.True)
                                                                (GHC.Generics.M1
                                                                   GHC.Generics.S
                                                                   ('GHC.Generics.MetaSel
                                                                      ('GHC.Base.Just "errMessage")
                                                                      'GHC.Generics.NoSourceUnpackedness
                                                                      'GHC.Generics.NoSourceStrictness
                                                                      'GHC.Generics.DecidedLazy)
                                                                   (GHC.Generics.K1
                                                                      GHC.Generics.R
                                                                      GHC.Base.String))))
                        @ x
                        (GHC.Generics.R1
                           @ *
                           @ (GHC.Generics.M1
                                GHC.Generics.C
                                ('GHC.Generics.MetaCons
                                   "FiniteTensor" 'GHC.Generics.PrefixI 'GHC.Types.True)
                                (GHC.Generics.M1
                                   GHC.Generics.S
                                   ('GHC.Generics.MetaSel
                                      ('GHC.Base.Just "tensorFiniteIndex")
                                      'GHC.Generics.NoSourceUnpackedness
                                      'GHC.Generics.NoSourceStrictness
                                      'GHC.Generics.DecidedLazy)
                                   (GHC.Generics.K1 GHC.Generics.R Multilinear.Index.Finite.Index)
                                 GHC.Generics.:*: GHC.Generics.M1
                                                    GHC.Generics.S
                                                    ('GHC.Generics.MetaSel
                                                       ('GHC.Base.Just "tensorsFinite")
                                                       'GHC.Generics.NoSourceUnpackedness
                                                       'GHC.Generics.NoSourceStrictness
                                                       'GHC.Generics.DecidedLazy)
                                                    (GHC.Generics.K1
                                                       GHC.Generics.R
                                                       (Data.Vector.Vector
                                                          (Multilinear.Generic.Tensor a)))))
                           @ (GHC.Generics.M1
                                GHC.Generics.C
                                ('GHC.Generics.MetaCons
                                   "InfiniteTensor" 'GHC.Generics.PrefixI 'GHC.Types.True)
                                (GHC.Generics.M1
                                   GHC.Generics.S
                                   ('GHC.Generics.MetaSel
                                      ('GHC.Base.Just "tensorInfiniteIndex")
                                      'GHC.Generics.NoSourceUnpackedness
                                      'GHC.Generics.NoSourceStrictness
                                      'GHC.Generics.DecidedLazy)
                                   (GHC.Generics.K1 GHC.Generics.R Multilinear.Index.Infinite.Index)
                                 GHC.Generics.:*: GHC.Generics.M1
                                                    GHC.Generics.S
                                                    ('GHC.Generics.MetaSel
                                                       ('GHC.Base.Just "tensorsInfinite")
                                                       'GHC.Generics.NoSourceUnpackedness
                                                       'GHC.Generics.NoSourceStrictness
                                                       'GHC.Generics.DecidedLazy)
                                                    (GHC.Generics.K1
                                                       GHC.Generics.R
                                                       [Multilinear.Generic.Tensor a]))
                              GHC.Generics.:+: GHC.Generics.M1
                                                 GHC.Generics.C
                                                 ('GHC.Generics.MetaCons
                                                    "Err" 'GHC.Generics.PrefixI 'GHC.Types.True)
                                                 (GHC.Generics.M1
                                                    GHC.Generics.S
                                                    ('GHC.Generics.MetaSel
                                                       ('GHC.Base.Just "errMessage")
                                                       'GHC.Generics.NoSourceUnpackedness
                                                       'GHC.Generics.NoSourceStrictness
                                                       'GHC.Generics.DecidedLazy)
                                                    (GHC.Generics.K1
                                                       GHC.Generics.R GHC.Base.String)))
                           @ x
                           (GHC.Generics.R1
                              @ *
                              @ (GHC.Generics.M1
                                   GHC.Generics.C
                                   ('GHC.Generics.MetaCons
                                      "InfiniteTensor" 'GHC.Generics.PrefixI 'GHC.Types.True)
                                   (GHC.Generics.M1
                                      GHC.Generics.S
                                      ('GHC.Generics.MetaSel
                                         ('GHC.Base.Just "tensorInfiniteIndex")
                                         'GHC.Generics.NoSourceUnpackedness
                                         'GHC.Generics.NoSourceStrictness
                                         'GHC.Generics.DecidedLazy)
                                      (GHC.Generics.K1
                                         GHC.Generics.R Multilinear.Index.Infinite.Index)
                                    GHC.Generics.:*: GHC.Generics.M1
                                                       GHC.Generics.S
                                                       ('GHC.Generics.MetaSel
                                                          ('GHC.Base.Just "tensorsInfinite")
                                                          'GHC.Generics.NoSourceUnpackedness
                                                          'GHC.Generics.NoSourceStrictness
                                                          'GHC.Generics.DecidedLazy)
                                                       (GHC.Generics.K1
                                                          GHC.Generics.R
                                                          [Multilinear.Generic.Tensor a])))
                              @ (GHC.Generics.M1
                                   GHC.Generics.C
                                   ('GHC.Generics.MetaCons
                                      "Err" 'GHC.Generics.PrefixI 'GHC.Types.True)
                                   (GHC.Generics.M1
                                      GHC.Generics.S
                                      ('GHC.Generics.MetaSel
                                         ('GHC.Base.Just "errMessage")
                                         'GHC.Generics.NoSourceUnpackedness
                                         'GHC.Generics.NoSourceStrictness
                                         'GHC.Generics.DecidedLazy)
                                      (GHC.Generics.K1 GHC.Generics.R GHC.Base.String)))
                              @ x
                              g1
                                `cast`
                              (Trans
                                   (Sym (GHC.Generics.N:K1[0]
                                             <*>_N <GHC.Generics.R>_P <GHC.Base.String>_R <x>_P))
                                   (Trans
                                        (Sym (GHC.Generics.N:M1[0]
                                                  <*>_N
                                                  <GHC.Generics.S>_P
                                                  <'GHC.Generics.MetaSel
                                                     ('GHC.Base.Just "errMessage")
                                                     'GHC.Generics.NoSourceUnpackedness
                                                     'GHC.Generics.NoSourceStrictness
                                                     'GHC.Generics.DecidedLazy>_P
                                                  <GHC.Generics.K1
                                                     GHC.Generics.R GHC.Base.String>_R))
                                        (Sym (GHC.Generics.N:M1[0]
                                                  <*>_N
                                                  <GHC.Generics.C>_P
                                                  <'GHC.Generics.MetaCons
                                                     "Err" 'GHC.Generics.PrefixI 'GHC.Types.True>_P
                                                  <GHC.Generics.M1
                                                     GHC.Generics.S
                                                     ('GHC.Generics.MetaSel
                                                        ('GHC.Base.Just "errMessage")
                                                        'GHC.Generics.NoSourceUnpackedness
                                                        'GHC.Generics.NoSourceStrictness
                                                        'GHC.Generics.DecidedLazy)
                                                     (GHC.Generics.K1
                                                        GHC.Generics.R
                                                        GHC.Base.String)>_R)) <x>_N)))) }) -}
3435455de223a292a66afccee7caf4fd
  $fGenericTensor_$cto ::
    GHC.Generics.Rep (Multilinear.Generic.Tensor a) x
    -> Multilinear.Generic.Tensor a
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: (\ @ a
                   @ x
                   (ds :: GHC.Generics.Rep (Multilinear.Generic.Tensor a) x) ->
                 case ds
                        `cast`
                      (Trans
                           (Sub (Multilinear.Generic.Rep_Tensor[0] <a>_N))
                           (GHC.Generics.N:M1[0]
                                <*>_N
                                <GHC.Generics.D>_P
                                <'GHC.Generics.MetaData
                                   "Tensor"
                                   "Multilinear.Generic"
                                   "Multilinear-0.8.0.0-4dpV53DlxV5EwwV6FZreVP"
                                   'GHC.Types.False>_P
                                <(GHC.Generics.M1
                                    GHC.Generics.C
                                    ('GHC.Generics.MetaCons
                                       "Scalar" 'GHC.Generics.PrefixI 'GHC.Types.True)
                                    (GHC.Generics.M1
                                       GHC.Generics.S
                                       ('GHC.Generics.MetaSel
                                          ('GHC.Base.Just "scalarVal")
                                          'GHC.Generics.NoSourceUnpackedness
                                          'GHC.Generics.NoSourceStrictness
                                          'GHC.Generics.DecidedLazy)
                                       (GHC.Generics.K1 GHC.Generics.R a))
                                  GHC.Generics.:+: GHC.Generics.M1
                                                     GHC.Generics.C
                                                     ('GHC.Generics.MetaCons
                                                        "SimpleFinite"
                                                        'GHC.Generics.PrefixI
                                                        'GHC.Types.True)
                                                     (GHC.Generics.M1
                                                        GHC.Generics.S
                                                        ('GHC.Generics.MetaSel
                                                           ('GHC.Base.Just "tensorFiniteIndex")
                                                           'GHC.Generics.NoSourceUnpackedness
                                                           'GHC.Generics.NoSourceStrictness
                                                           'GHC.Generics.DecidedLazy)
                                                        (GHC.Generics.K1
                                                           GHC.Generics.R
                                                           Multilinear.Index.Finite.Index)
                                                      GHC.Generics.:*: GHC.Generics.M1
                                                                         GHC.Generics.S
                                                                         ('GHC.Generics.MetaSel
                                                                            ('GHC.Base.Just
                                                                               "tensorScalars")
                                                                            'GHC.Generics.NoSourceUnpackedness
                                                                            'GHC.Generics.NoSourceStrictness
                                                                            'GHC.Generics.DecidedLazy)
                                                                         (GHC.Generics.K1
                                                                            GHC.Generics.R
                                                                            (Data.Vector.Vector
                                                                               a))))
                                 GHC.Generics.:+: (GHC.Generics.M1
                                                     GHC.Generics.C
                                                     ('GHC.Generics.MetaCons
                                                        "FiniteTensor"
                                                        'GHC.Generics.PrefixI
                                                        'GHC.Types.True)
                                                     (GHC.Generics.M1
                                                        GHC.Generics.S
                                                        ('GHC.Generics.MetaSel
                                                           ('GHC.Base.Just "tensorFiniteIndex")
                                                           'GHC.Generics.NoSourceUnpackedness
                                                           'GHC.Generics.NoSourceStrictness
                                                           'GHC.Generics.DecidedLazy)
                                                        (GHC.Generics.K1
                                                           GHC.Generics.R
                                                           Multilinear.Index.Finite.Index)
                                                      GHC.Generics.:*: GHC.Generics.M1
                                                                         GHC.Generics.S
                                                                         ('GHC.Generics.MetaSel
                                                                            ('GHC.Base.Just
                                                                               "tensorsFinite")
                                                                            'GHC.Generics.NoSourceUnpackedness
                                                                            'GHC.Generics.NoSourceStrictness
                                                                            'GHC.Generics.DecidedLazy)
                                                                         (GHC.Generics.K1
                                                                            GHC.Generics.R
                                                                            (Data.Vector.Vector
                                                                               (Multilinear.Generic.Tensor
                                                                                  a))))
                                                   GHC.Generics.:+: (GHC.Generics.M1
                                                                       GHC.Generics.C
                                                                       ('GHC.Generics.MetaCons
                                                                          "InfiniteTensor"
                                                                          'GHC.Generics.PrefixI
                                                                          'GHC.Types.True)
                                                                       (GHC.Generics.M1
                                                                          GHC.Generics.S
                                                                          ('GHC.Generics.MetaSel
                                                                             ('GHC.Base.Just
                                                                                "tensorInfiniteIndex")
                                                                             'GHC.Generics.NoSourceUnpackedness
                                                                             'GHC.Generics.NoSourceStrictness
                                                                             'GHC.Generics.DecidedLazy)
                                                                          (GHC.Generics.K1
                                                                             GHC.Generics.R
                                                                             Multilinear.Index.Infinite.Index)
                                                                        GHC.Generics.:*: GHC.Generics.M1
                                                                                           GHC.Generics.S
                                                                                           ('GHC.Generics.MetaSel
                                                                                              ('GHC.Base.Just
                                                                                                 "tensorsInfinite")
                                                                                              'GHC.Generics.NoSourceUnpackedness
                                                                                              'GHC.Generics.NoSourceStrictness
                                                                                              'GHC.Generics.DecidedLazy)
                                                                                           (GHC.Generics.K1
                                                                                              GHC.Generics.R
                                                                                              [Multilinear.Generic.Tensor
                                                                                                 a]))
                                                                     GHC.Generics.:+: GHC.Generics.M1
                                                                                        GHC.Generics.C
                                                                                        ('GHC.Generics.MetaCons
                                                                                           "Err"
                                                                                           'GHC.Generics.PrefixI
                                                                                           'GHC.Types.True)
                                                                                        (GHC.Generics.M1
                                                                                           GHC.Generics.S
                                                                                           ('GHC.Generics.MetaSel
                                                                                              ('GHC.Base.Just
                                                                                                 "errMessage")
                                                                                              'GHC.Generics.NoSourceUnpackedness
                                                                                              'GHC.Generics.NoSourceStrictness
                                                                                              'GHC.Generics.DecidedLazy)
                                                                                           (GHC.Generics.K1
                                                                                              GHC.Generics.R
                                                                                              GHC.Base.String))))>_R) <x>_N) of wild {
                   GHC.Generics.L1 ds1
                   -> case ds1 of wild1 {
                        GHC.Generics.L1 ds2
                        -> Multilinear.Generic.Scalar
                             @ a
                             ds2
                               `cast`
                             (Trans
                                  (Trans
                                       (GHC.Generics.N:M1[0]
                                            <*>_N
                                            <GHC.Generics.C>_P
                                            <'GHC.Generics.MetaCons
                                               "Scalar" 'GHC.Generics.PrefixI 'GHC.Types.True>_P
                                            <GHC.Generics.M1
                                               GHC.Generics.S
                                               ('GHC.Generics.MetaSel
                                                  ('GHC.Base.Just "scalarVal")
                                                  'GHC.Generics.NoSourceUnpackedness
                                                  'GHC.Generics.NoSourceStrictness
                                                  'GHC.Generics.DecidedLazy)
                                               (GHC.Generics.K1 GHC.Generics.R a)>_R)
                                       (GHC.Generics.N:M1[0]
                                            <*>_N
                                            <GHC.Generics.S>_P
                                            <'GHC.Generics.MetaSel
                                               ('GHC.Base.Just "scalarVal")
                                               'GHC.Generics.NoSourceUnpackedness
                                               'GHC.Generics.NoSourceStrictness
                                               'GHC.Generics.DecidedLazy>_P
                                            <GHC.Generics.K1 GHC.Generics.R a>_R) <x>_N)
                                  (GHC.Generics.N:K1[0] <*>_N <GHC.Generics.R>_P <a>_R <x>_P))
                        GHC.Generics.R1 ds2
                        -> case ds2
                                  `cast`
                                (GHC.Generics.N:M1[0]
                                     <*>_N
                                     <GHC.Generics.C>_P
                                     <'GHC.Generics.MetaCons
                                        "SimpleFinite" 'GHC.Generics.PrefixI 'GHC.Types.True>_P
                                     <GHC.Generics.M1
                                        GHC.Generics.S
                                        ('GHC.Generics.MetaSel
                                           ('GHC.Base.Just "tensorFiniteIndex")
                                           'GHC.Generics.NoSourceUnpackedness
                                           'GHC.Generics.NoSourceStrictness
                                           'GHC.Generics.DecidedLazy)
                                        (GHC.Generics.K1
                                           GHC.Generics.R Multilinear.Index.Finite.Index)
                                      GHC.Generics.:*: GHC.Generics.M1
                                                         GHC.Generics.S
                                                         ('GHC.Generics.MetaSel
                                                            ('GHC.Base.Just "tensorScalars")
                                                            'GHC.Generics.NoSourceUnpackedness
                                                            'GHC.Generics.NoSourceStrictness
                                                            'GHC.Generics.DecidedLazy)
                                                         (GHC.Generics.K1
                                                            GHC.Generics.R
                                                            (Data.Vector.Vector
                                                               a))>_R <x>_N) of wild2 { GHC.Generics.:*: ds3 ds4 ->
                           Multilinear.Generic.SimpleFinite
                             @ a
                             ds3
                               `cast`
                             (Trans
                                  (GHC.Generics.N:M1[0]
                                       <*>_N
                                       <GHC.Generics.S>_P
                                       <'GHC.Generics.MetaSel
                                          ('GHC.Base.Just "tensorFiniteIndex")
                                          'GHC.Generics.NoSourceUnpackedness
                                          'GHC.Generics.NoSourceStrictness
                                          'GHC.Generics.DecidedLazy>_P
                                       <GHC.Generics.K1
                                          GHC.Generics.R Multilinear.Index.Finite.Index>_R <x>_N)
                                  (GHC.Generics.N:K1[0]
                                       <*>_N
                                       <GHC.Generics.R>_P
                                       <Multilinear.Index.Finite.Index>_R
                                       <x>_P))
                             ds4
                               `cast`
                             (Trans
                                  (GHC.Generics.N:M1[0]
                                       <*>_N
                                       <GHC.Generics.S>_P
                                       <'GHC.Generics.MetaSel
                                          ('GHC.Base.Just "tensorScalars")
                                          'GHC.Generics.NoSourceUnpackedness
                                          'GHC.Generics.NoSourceStrictness
                                          'GHC.Generics.DecidedLazy>_P
                                       <GHC.Generics.K1
                                          GHC.Generics.R (Data.Vector.Vector a)>_R <x>_N)
                                  (GHC.Generics.N:K1[0]
                                       <*>_N <GHC.Generics.R>_P <Data.Vector.Vector a>_R <x>_P)) } }
                   GHC.Generics.R1 ds1
                   -> case ds1 of wild1 {
                        GHC.Generics.L1 ds2
                        -> case ds2
                                  `cast`
                                (GHC.Generics.N:M1[0]
                                     <*>_N
                                     <GHC.Generics.C>_P
                                     <'GHC.Generics.MetaCons
                                        "FiniteTensor" 'GHC.Generics.PrefixI 'GHC.Types.True>_P
                                     <GHC.Generics.M1
                                        GHC.Generics.S
                                        ('GHC.Generics.MetaSel
                                           ('GHC.Base.Just "tensorFiniteIndex")
                                           'GHC.Generics.NoSourceUnpackedness
                                           'GHC.Generics.NoSourceStrictness
                                           'GHC.Generics.DecidedLazy)
                                        (GHC.Generics.K1
                                           GHC.Generics.R Multilinear.Index.Finite.Index)
                                      GHC.Generics.:*: GHC.Generics.M1
                                                         GHC.Generics.S
                                                         ('GHC.Generics.MetaSel
                                                            ('GHC.Base.Just "tensorsFinite")
                                                            'GHC.Generics.NoSourceUnpackedness
                                                            'GHC.Generics.NoSourceStrictness
                                                            'GHC.Generics.DecidedLazy)
                                                         (GHC.Generics.K1
                                                            GHC.Generics.R
                                                            (Data.Vector.Vector
                                                               (Multilinear.Generic.Tensor
                                                                  a)))>_R <x>_N) of wild2 { GHC.Generics.:*: ds3 ds4 ->
                           Multilinear.Generic.FiniteTensor
                             @ a
                             ds3
                               `cast`
                             (Trans
                                  (GHC.Generics.N:M1[0]
                                       <*>_N
                                       <GHC.Generics.S>_P
                                       <'GHC.Generics.MetaSel
                                          ('GHC.Base.Just "tensorFiniteIndex")
                                          'GHC.Generics.NoSourceUnpackedness
                                          'GHC.Generics.NoSourceStrictness
                                          'GHC.Generics.DecidedLazy>_P
                                       <GHC.Generics.K1
                                          GHC.Generics.R Multilinear.Index.Finite.Index>_R <x>_N)
                                  (GHC.Generics.N:K1[0]
                                       <*>_N
                                       <GHC.Generics.R>_P
                                       <Multilinear.Index.Finite.Index>_R
                                       <x>_P))
                             ds4
                               `cast`
                             (Trans
                                  (GHC.Generics.N:M1[0]
                                       <*>_N
                                       <GHC.Generics.S>_P
                                       <'GHC.Generics.MetaSel
                                          ('GHC.Base.Just "tensorsFinite")
                                          'GHC.Generics.NoSourceUnpackedness
                                          'GHC.Generics.NoSourceStrictness
                                          'GHC.Generics.DecidedLazy>_P
                                       <GHC.Generics.K1
                                          GHC.Generics.R
                                          (Data.Vector.Vector
                                             (Multilinear.Generic.Tensor a))>_R <x>_N)
                                  (GHC.Generics.N:K1[0]
                                       <*>_N
                                       <GHC.Generics.R>_P
                                       <Data.Vector.Vector (Multilinear.Generic.Tensor a)>_R
                                       <x>_P)) }
                        GHC.Generics.R1 ds2
                        -> case ds2 of wild2 {
                             GHC.Generics.L1 ds3
                             -> case ds3
                                       `cast`
                                     (GHC.Generics.N:M1[0]
                                          <*>_N
                                          <GHC.Generics.C>_P
                                          <'GHC.Generics.MetaCons
                                             "InfiniteTensor"
                                             'GHC.Generics.PrefixI
                                             'GHC.Types.True>_P
                                          <GHC.Generics.M1
                                             GHC.Generics.S
                                             ('GHC.Generics.MetaSel
                                                ('GHC.Base.Just "tensorInfiniteIndex")
                                                'GHC.Generics.NoSourceUnpackedness
                                                'GHC.Generics.NoSourceStrictness
                                                'GHC.Generics.DecidedLazy)
                                             (GHC.Generics.K1
                                                GHC.Generics.R Multilinear.Index.Infinite.Index)
                                           GHC.Generics.:*: GHC.Generics.M1
                                                              GHC.Generics.S
                                                              ('GHC.Generics.MetaSel
                                                                 ('GHC.Base.Just "tensorsInfinite")
                                                                 'GHC.Generics.NoSourceUnpackedness
                                                                 'GHC.Generics.NoSourceStrictness
                                                                 'GHC.Generics.DecidedLazy)
                                                              (GHC.Generics.K1
                                                                 GHC.Generics.R
                                                                 [Multilinear.Generic.Tensor
                                                                    a])>_R <x>_N) of wild3 { GHC.Generics.:*: ds4 ds5 ->
                                Multilinear.Generic.InfiniteTensor
                                  @ a
                                  ds4
                                    `cast`
                                  (Trans
                                       (GHC.Generics.N:M1[0]
                                            <*>_N
                                            <GHC.Generics.S>_P
                                            <'GHC.Generics.MetaSel
                                               ('GHC.Base.Just "tensorInfiniteIndex")
                                               'GHC.Generics.NoSourceUnpackedness
                                               'GHC.Generics.NoSourceStrictness
                                               'GHC.Generics.DecidedLazy>_P
                                            <GHC.Generics.K1
                                               GHC.Generics.R
                                               Multilinear.Index.Infinite.Index>_R <x>_N)
                                       (GHC.Generics.N:K1[0]
                                            <*>_N
                                            <GHC.Generics.R>_P
                                            <Multilinear.Index.Infinite.Index>_R
                                            <x>_P))
                                  ds5
                                    `cast`
                                  (Trans
                                       (GHC.Generics.N:M1[0]
                                            <*>_N
                                            <GHC.Generics.S>_P
                                            <'GHC.Generics.MetaSel
                                               ('GHC.Base.Just "tensorsInfinite")
                                               'GHC.Generics.NoSourceUnpackedness
                                               'GHC.Generics.NoSourceStrictness
                                               'GHC.Generics.DecidedLazy>_P
                                            <GHC.Generics.K1
                                               GHC.Generics.R
                                               [Multilinear.Generic.Tensor a]>_R <x>_N)
                                       (GHC.Generics.N:K1[0]
                                            <*>_N
                                            <GHC.Generics.R>_P
                                            <[Multilinear.Generic.Tensor a]>_R
                                            <x>_P)) }
                             GHC.Generics.R1 ds3
                             -> Multilinear.Generic.Err
                                  @ a
                                  ds3
                                    `cast`
                                  (Trans
                                       (Trans
                                            (GHC.Generics.N:M1[0]
                                                 <*>_N
                                                 <GHC.Generics.C>_P
                                                 <'GHC.Generics.MetaCons
                                                    "Err" 'GHC.Generics.PrefixI 'GHC.Types.True>_P
                                                 <GHC.Generics.M1
                                                    GHC.Generics.S
                                                    ('GHC.Generics.MetaSel
                                                       ('GHC.Base.Just "errMessage")
                                                       'GHC.Generics.NoSourceUnpackedness
                                                       'GHC.Generics.NoSourceStrictness
                                                       'GHC.Generics.DecidedLazy)
                                                    (GHC.Generics.K1
                                                       GHC.Generics.R GHC.Base.String)>_R)
                                            (GHC.Generics.N:M1[0]
                                                 <*>_N
                                                 <GHC.Generics.S>_P
                                                 <'GHC.Generics.MetaSel
                                                    ('GHC.Base.Just "errMessage")
                                                    'GHC.Generics.NoSourceUnpackedness
                                                    'GHC.Generics.NoSourceStrictness
                                                    'GHC.Generics.DecidedLazy>_P
                                                 <GHC.Generics.K1
                                                    GHC.Generics.R GHC.Base.String>_R) <x>_N)
                                       (GHC.Generics.N:K1[0]
                                            <*>_N
                                            <GHC.Generics.R>_P
                                            <GHC.Base.String>_R
                                            <x>_P)) } } }) -}
3435455de223a292a66afccee7caf4fd
  $fMonoidTensor ::
    GHC.Num.Num a => GHC.Base.Monoid (Multilinear.Generic.Tensor a)
  DFunId
  {- Arity: 1, Strictness: <L,U(A,A,A,A,A,A,C(U))>m, Inline: CONLIKE,
     Unfolding: DFun: @ a (v :: GHC.Num.Num a).
                  @ (Multilinear.Generic.Tensor a)
                  (Multilinear.Generic.$fMonoidTensor_$cmempty @ a v)
                  (Multilinear.Generic.$fMonoidTensor_$cmappend @ a v)
                  (Multilinear.Generic.$fMonoidTensor_$cmconcat @ a v) -}
3435455de223a292a66afccee7caf4fd
  $fMonoidTensor1 :: Multilinear.Generic.Tensor a
  {- Strictness: m5,
     Unfolding: (\ @ a ->
                 Multilinear.Generic.Err
                   @ a
                   Multilinear.Generic.differentIndices) -}
ce316b673ca9fb24c30f03d50a313c1c
  $fMonoidTensor2 :: GHC.Integer.Type.Integer
  {- HasNoCafRefs, Unfolding: (0) -}
3435455de223a292a66afccee7caf4fd
  $fMonoidTensor_$cmappend ::
    GHC.Num.Num a =>
    Multilinear.Generic.Tensor a
    -> Multilinear.Generic.Tensor a -> Multilinear.Generic.Tensor a
  {- Arity: 3, Strictness: <L,A><S,U><S,U>, Inline: (sat-args=2),
     Unfolding: InlineRule (3, False, False)
                (\ @ a
                   ($dNum :: GHC.Num.Num a)
                   (t1 :: Multilinear.Generic.Tensor a)
                   (t2 :: Multilinear.Generic.Tensor a) ->
                 case GHC.Classes.$fEq[]_$c==
                        @ Multilinear.Index.TIndex
                        Multilinear.Index.$fEqTIndex
                        (Multilinear.Generic.$fMultilinearTensora_$cindices @ a $dNum t1)
                        (Multilinear.Generic.$fMultilinearTensora_$cindices
                           @ a
                           $dNum
                           t2) of wild {
                   GHC.Types.False
                   -> Multilinear.Generic.Err @ a Multilinear.Generic.differentIndices
                   GHC.Types.True
                   -> case t1 of wild1 {
                        DEFAULT
                        -> case t2 of wild2 {
                             DEFAULT
                             -> case wild1 of wild3 {
                                  DEFAULT
                                  -> Multilinear.Generic.Err
                                       @ a
                                       Multilinear.Generic.differentIndices
                                  Multilinear.Generic.SimpleFinite i1 ts1
                                  -> case wild2 of wild4 {
                                       DEFAULT
                                       -> Multilinear.Generic.Err
                                            @ a
                                            Multilinear.Generic.differentIndices
                                       Multilinear.Generic.SimpleFinite ds ts2
                                       -> Multilinear.Generic.SimpleFinite
                                            @ a
                                            i1
                                            (Data.Vector.Generic.new
                                               @ Data.Vector.Vector
                                               @ a
                                               (Data.Vector.$fVectorVectora @ a)
                                               (Data.Vector.Generic.New.unstream
                                                  @ Data.Vector.Vector
                                                  @ a
                                                  (Data.Vector.$fVectorVectora @ a)
                                                  (Data.Vector.Fusion.Bundle.Monadic.++
                                                     @ Data.Vector.Fusion.Util.Id
                                                     @ Data.Vector.Vector
                                                     @ a
                                                     Data.Vector.Fusion.Util.$fMonadId
                                                     (Data.Vector.Generic.stream
                                                        @ Data.Vector.Vector
                                                        @ a
                                                        (Data.Vector.$fVectorVectora @ a)
                                                        ts1)
                                                     (Data.Vector.Generic.stream
                                                        @ Data.Vector.Vector
                                                        @ a
                                                        (Data.Vector.$fVectorVectora @ a)
                                                        ts2)))) }
                                  Multilinear.Generic.FiniteTensor i1 ts1
                                  -> case wild2 of wild4 {
                                       DEFAULT
                                       -> Multilinear.Generic.Err
                                            @ a
                                            Multilinear.Generic.differentIndices
                                       Multilinear.Generic.FiniteTensor ds ts2
                                       -> Multilinear.Generic.FiniteTensor
                                            @ a
                                            i1
                                            (Data.Vector.Generic.new
                                               @ Data.Vector.Vector
                                               @ (Multilinear.Generic.Tensor a)
                                               (Data.Vector.$fVectorVectora
                                                  @ (Multilinear.Generic.Tensor a))
                                               (Data.Vector.Generic.New.unstream
                                                  @ Data.Vector.Vector
                                                  @ (Multilinear.Generic.Tensor a)
                                                  (Data.Vector.$fVectorVectora
                                                     @ (Multilinear.Generic.Tensor a))
                                                  (Data.Vector.Fusion.Bundle.Monadic.++
                                                     @ Data.Vector.Fusion.Util.Id
                                                     @ Data.Vector.Vector
                                                     @ (Multilinear.Generic.Tensor a)
                                                     Data.Vector.Fusion.Util.$fMonadId
                                                     (Data.Vector.Generic.stream
                                                        @ Data.Vector.Vector
                                                        @ (Multilinear.Generic.Tensor a)
                                                        (Data.Vector.$fVectorVectora
                                                           @ (Multilinear.Generic.Tensor a))
                                                        ts1)
                                                     (Data.Vector.Generic.stream
                                                        @ Data.Vector.Vector
                                                        @ (Multilinear.Generic.Tensor a)
                                                        (Data.Vector.$fVectorVectora
                                                           @ (Multilinear.Generic.Tensor a))
                                                        ts2)))) } }
                             Multilinear.Generic.Scalar ds -> wild1 }
                        Multilinear.Generic.Scalar ds -> t2 } }) -}
3435455de223a292a66afccee7caf4fd
  $fMonoidTensor_$cmconcat ::
    GHC.Num.Num a =>
    [Multilinear.Generic.Tensor a] -> Multilinear.Generic.Tensor a
  {- Arity: 1, Strictness: <L,1*U(A,A,A,A,A,A,1*C1(U))>,
     Unfolding: (\ @ a ($dNum :: GHC.Num.Num a) ->
                 let {
                   z :: a
                   = GHC.Num.fromInteger @ a $dNum Multilinear.Generic.$fMonoidTensor2
                 } in
                 let {
                   z1 :: Multilinear.Generic.Tensor a
                   = Multilinear.Generic.Scalar @ a z
                 } in
                 letrec {
                   go8 :: [Multilinear.Generic.Tensor a]
                          -> Multilinear.Generic.Tensor a
                     {- Arity: 1, Strictness: <S,1*U> -}
                   = \ (ds :: [Multilinear.Generic.Tensor a]) ->
                     case ds of wild {
                       [] -> z1
                       : y ys
                       -> let {
                            t2 :: Multilinear.Generic.Tensor a = go8 ys
                          } in
                          case GHC.Classes.$fEq[]_$c==
                                 @ Multilinear.Index.TIndex
                                 Multilinear.Index.$fEqTIndex
                                 (Multilinear.Generic.$w$cindices @ a y)
                                 (Multilinear.Generic.$w$cindices @ a t2) of wild1 {
                            GHC.Types.False -> Multilinear.Generic.$fMonoidTensor1 @ a
                            GHC.Types.True
                            -> case y of wild2 {
                                 DEFAULT
                                 -> case t2 of wild3 {
                                      DEFAULT
                                      -> case wild2 of wild4 {
                                           DEFAULT -> Multilinear.Generic.$fMonoidTensor1 @ a
                                           Multilinear.Generic.SimpleFinite i1 ts1
                                           -> case wild3 of wild5 {
                                                DEFAULT -> Multilinear.Generic.$fMonoidTensor1 @ a
                                                Multilinear.Generic.SimpleFinite ds1 ts2
                                                -> Multilinear.Generic.SimpleFinite
                                                     @ a
                                                     i1
                                                     (case ts1 of v2 { Data.Vector.Vector ipv ipv1 ipv2 ->
                                                      case ts2 of v1 { Data.Vector.Vector ipv3 ipv4 ipv5 ->
                                                      case GHC.Magic.runRW#
                                                             @ ('GHC.Types.TupleRep
                                                                  '['GHC.Types.TupleRep '[],
                                                                    'GHC.Types.LiftedRep])
                                                             @ (# GHC.Prim.State#
                                                                    GHC.Prim.RealWorld,
                                                                  Data.Vector.Vector a #)
                                                             (\ (s1 :: GHC.Prim.State#
                                                                         GHC.Prim.RealWorld)[OneShot] ->
                                                              let {
                                                                x1 :: GHC.Prim.Int#
                                                                = GHC.Prim.+# ipv1 ipv4
                                                              } in
                                                              case GHC.Prim.tagToEnum#
                                                                     @ GHC.Types.Bool
                                                                     (GHC.Prim.<#
                                                                        x1
                                                                        ipv1) of wild6 {
                                                                GHC.Types.False
                                                                -> case GHC.Prim.tagToEnum#
                                                                          @ GHC.Types.Bool
                                                                          (GHC.Prim.<#
                                                                             x1
                                                                             ipv4) of wild7 {
                                                                     GHC.Types.False
                                                                     -> case GHC.Prim.newArray#
                                                                               @ a
                                                                               @ (Control.Monad.Primitive.PrimState
                                                                                    (GHC.ST.ST
                                                                                       GHC.Prim.RealWorld))
                                                                               x1
                                                                               (Data.Vector.Mutable.uninitialised
                                                                                  @ a)
                                                                               s1
                                                                                 `cast`
                                                                               (Nth:2
                                                                                    (Nth:2
                                                                                         (Trans
                                                                                              (<GHC.ST.STRep
                                                                                                  GHC.Prim.RealWorld
                                                                                                  (Data.Primitive.Array.MutableArray
                                                                                                     (Control.Monad.Primitive.PrimState
                                                                                                        (GHC.ST.ST
                                                                                                           GHC.Prim.RealWorld))
                                                                                                     a)>_R
                                                                                               ->_R Sym (GHC.ST.N:ST[0]
                                                                                                             <GHC.Prim.RealWorld>_N
                                                                                                             <Data.Primitive.Array.MutableArray
                                                                                                                (Control.Monad.Primitive.PrimState
                                                                                                                   (GHC.ST.ST
                                                                                                                      GHC.Prim.RealWorld))
                                                                                                                a>_R))
                                                                                              (((GHC.Prim.State#
                                                                                                   (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                                             <GHC.Prim.RealWorld>_N)))_R
                                                                                                ->_R ((#,#)
                                                                                                        <'GHC.Types.TupleRep
                                                                                                           '[]>_R
                                                                                                        <'GHC.Types.LiftedRep>_R
                                                                                                        (GHC.Prim.State#
                                                                                                           (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                                                     <GHC.Prim.RealWorld>_N)))_R
                                                                                                        <Data.Primitive.Array.MutableArray
                                                                                                           (Control.Monad.Primitive.PrimState
                                                                                                              (GHC.ST.ST
                                                                                                                 GHC.Prim.RealWorld))
                                                                                                           a>_R)_R)
                                                                                               ->_R <GHC.ST.ST
                                                                                                       GHC.Prim.RealWorld
                                                                                                       (Data.Primitive.Array.MutableArray
                                                                                                          (Control.Monad.Primitive.PrimState
                                                                                                             (GHC.ST.ST
                                                                                                                GHC.Prim.RealWorld))
                                                                                                          a)>_R)))) of ds2 { (#,#) ipv6 ipv7 ->
                                                                        case GHC.Prim.copyArray#
                                                                               @ a
                                                                               @ (Control.Monad.Primitive.PrimState
                                                                                    (GHC.ST.ST
                                                                                       GHC.Prim.RealWorld))
                                                                               ipv2
                                                                               ipv
                                                                               ipv7
                                                                               0#
                                                                               ipv1
                                                                               ipv6 of s'# { DEFAULT ->
                                                                        case GHC.Prim.copyArray#
                                                                               @ a
                                                                               @ (Control.Monad.Primitive.PrimState
                                                                                    (GHC.ST.ST
                                                                                       GHC.Prim.RealWorld))
                                                                               ipv5
                                                                               ipv3
                                                                               ipv7
                                                                               ipv1
                                                                               ipv4
                                                                               s'# of s'#1 { DEFAULT ->
                                                                        case GHC.Prim.unsafeFreezeArray#
                                                                               @ (Control.Monad.Primitive.PrimState
                                                                                    (GHC.ST.ST
                                                                                       GHC.Prim.RealWorld))
                                                                               @ a
                                                                               ipv7
                                                                               s'#1 of ds3 { (#,#) ipv8 ipv9 ->
                                                                        (# ipv8
                                                                             `cast`
                                                                           (Nth:2
                                                                                (Nth:3
                                                                                     (Nth:2
                                                                                          (Trans
                                                                                               (((GHC.Prim.State#
                                                                                                    (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                                         <GHC.Prim.RealWorld>_N))_R
                                                                                                 ->_R ((#,#)
                                                                                                         <'GHC.Types.TupleRep
                                                                                                            '[]>_R
                                                                                                         <'GHC.Types.LiftedRep>_R
                                                                                                         (GHC.Prim.State#
                                                                                                            (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                                                 <GHC.Prim.RealWorld>_N))_R
                                                                                                         <Data.Primitive.Array.Array
                                                                                                            a>_R)_R)
                                                                                                ->_R <GHC.ST.ST
                                                                                                        GHC.Prim.RealWorld
                                                                                                        (Data.Primitive.Array.Array
                                                                                                           a)>_R)
                                                                                               (<GHC.ST.STRep
                                                                                                   GHC.Prim.RealWorld
                                                                                                   (Data.Primitive.Array.Array
                                                                                                      a)>_R
                                                                                                ->_R GHC.ST.N:ST[0]
                                                                                                         <GHC.Prim.RealWorld>_N
                                                                                                         <Data.Primitive.Array.Array
                                                                                                            a>_R))))),
                                                                           Data.Vector.Vector
                                                                             @ a
                                                                             0#
                                                                             (GHC.Prim.+# ipv1 ipv4)
                                                                             ipv9 #) } } } }
                                                                     GHC.Types.True
                                                                     -> case Data.Vector.Fusion.Bundle.Size.$wlvl5
                                                                               x1
                                                                        ret_ty (# GHC.Prim.State#
                                                                                    GHC.Prim.RealWorld,
                                                                                  Data.Vector.Vector
                                                                                    a #)
                                                                        of {} }
                                                                GHC.Types.True
                                                                -> case Data.Vector.Fusion.Bundle.Size.$wlvl5
                                                                          x1
                                                                   ret_ty (# GHC.Prim.State#
                                                                               GHC.Prim.RealWorld,
                                                                             Data.Vector.Vector a #)
                                                                   of {} }) of ds2 { (#,#) ipv6 ipv7 ->
                                                      ipv7 } } }) }
                                           Multilinear.Generic.FiniteTensor i1 ts1
                                           -> case wild3 of wild5 {
                                                DEFAULT -> Multilinear.Generic.$fMonoidTensor1 @ a
                                                Multilinear.Generic.FiniteTensor ds1 ts2
                                                -> Multilinear.Generic.FiniteTensor
                                                     @ a
                                                     i1
                                                     (case ts1 of v2 { Data.Vector.Vector ipv ipv1 ipv2 ->
                                                      case ts2 of v1 { Data.Vector.Vector ipv3 ipv4 ipv5 ->
                                                      case GHC.Magic.runRW#
                                                             @ ('GHC.Types.TupleRep
                                                                  '['GHC.Types.TupleRep '[],
                                                                    'GHC.Types.LiftedRep])
                                                             @ (# GHC.Prim.State#
                                                                    GHC.Prim.RealWorld,
                                                                  Data.Vector.Vector
                                                                    (Multilinear.Generic.Tensor
                                                                       a) #)
                                                             (\ (s1 :: GHC.Prim.State#
                                                                         GHC.Prim.RealWorld)[OneShot] ->
                                                              let {
                                                                x1 :: GHC.Prim.Int#
                                                                = GHC.Prim.+# ipv1 ipv4
                                                              } in
                                                              case GHC.Prim.tagToEnum#
                                                                     @ GHC.Types.Bool
                                                                     (GHC.Prim.<#
                                                                        x1
                                                                        ipv1) of wild6 {
                                                                GHC.Types.False
                                                                -> case GHC.Prim.tagToEnum#
                                                                          @ GHC.Types.Bool
                                                                          (GHC.Prim.<#
                                                                             x1
                                                                             ipv4) of wild7 {
                                                                     GHC.Types.False
                                                                     -> case GHC.Prim.newArray#
                                                                               @ (Multilinear.Generic.Tensor
                                                                                    a)
                                                                               @ (Control.Monad.Primitive.PrimState
                                                                                    (GHC.ST.ST
                                                                                       GHC.Prim.RealWorld))
                                                                               x1
                                                                               (Data.Vector.Mutable.uninitialised
                                                                                  @ (Multilinear.Generic.Tensor
                                                                                       a))
                                                                               s1
                                                                                 `cast`
                                                                               (Nth:2
                                                                                    (Nth:2
                                                                                         (Trans
                                                                                              (<GHC.ST.STRep
                                                                                                  GHC.Prim.RealWorld
                                                                                                  (Data.Primitive.Array.MutableArray
                                                                                                     (Control.Monad.Primitive.PrimState
                                                                                                        (GHC.ST.ST
                                                                                                           GHC.Prim.RealWorld))
                                                                                                     (Multilinear.Generic.Tensor
                                                                                                        a))>_R
                                                                                               ->_R Sym (GHC.ST.N:ST[0]
                                                                                                             <GHC.Prim.RealWorld>_N
                                                                                                             <Data.Primitive.Array.MutableArray
                                                                                                                (Control.Monad.Primitive.PrimState
                                                                                                                   (GHC.ST.ST
                                                                                                                      GHC.Prim.RealWorld))
                                                                                                                (Multilinear.Generic.Tensor
                                                                                                                   a)>_R))
                                                                                              (((GHC.Prim.State#
                                                                                                   (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                                             <GHC.Prim.RealWorld>_N)))_R
                                                                                                ->_R ((#,#)
                                                                                                        <'GHC.Types.TupleRep
                                                                                                           '[]>_R
                                                                                                        <'GHC.Types.LiftedRep>_R
                                                                                                        (GHC.Prim.State#
                                                                                                           (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                                                     <GHC.Prim.RealWorld>_N)))_R
                                                                                                        <Data.Primitive.Array.MutableArray
                                                                                                           (Control.Monad.Primitive.PrimState
                                                                                                              (GHC.ST.ST
                                                                                                                 GHC.Prim.RealWorld))
                                                                                                           (Multilinear.Generic.Tensor
                                                                                                              a)>_R)_R)
                                                                                               ->_R <GHC.ST.ST
                                                                                                       GHC.Prim.RealWorld
                                                                                                       (Data.Primitive.Array.MutableArray
                                                                                                          (Control.Monad.Primitive.PrimState
                                                                                                             (GHC.ST.ST
                                                                                                                GHC.Prim.RealWorld))
                                                                                                          (Multilinear.Generic.Tensor
                                                                                                             a))>_R)))) of ds2 { (#,#) ipv6 ipv7 ->
                                                                        case GHC.Prim.copyArray#
                                                                               @ (Multilinear.Generic.Tensor
                                                                                    a)
                                                                               @ (Control.Monad.Primitive.PrimState
                                                                                    (GHC.ST.ST
                                                                                       GHC.Prim.RealWorld))
                                                                               ipv2
                                                                               ipv
                                                                               ipv7
                                                                               0#
                                                                               ipv1
                                                                               ipv6 of s'# { DEFAULT ->
                                                                        case GHC.Prim.copyArray#
                                                                               @ (Multilinear.Generic.Tensor
                                                                                    a)
                                                                               @ (Control.Monad.Primitive.PrimState
                                                                                    (GHC.ST.ST
                                                                                       GHC.Prim.RealWorld))
                                                                               ipv5
                                                                               ipv3
                                                                               ipv7
                                                                               ipv1
                                                                               ipv4
                                                                               s'# of s'#1 { DEFAULT ->
                                                                        case GHC.Prim.unsafeFreezeArray#
                                                                               @ (Control.Monad.Primitive.PrimState
                                                                                    (GHC.ST.ST
                                                                                       GHC.Prim.RealWorld))
                                                                               @ (Multilinear.Generic.Tensor
                                                                                    a)
                                                                               ipv7
                                                                               s'#1 of ds3 { (#,#) ipv8 ipv9 ->
                                                                        (# ipv8
                                                                             `cast`
                                                                           (Nth:2
                                                                                (Nth:3
                                                                                     (Nth:2
                                                                                          (Trans
                                                                                               (((GHC.Prim.State#
                                                                                                    (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                                         <GHC.Prim.RealWorld>_N))_R
                                                                                                 ->_R ((#,#)
                                                                                                         <'GHC.Types.TupleRep
                                                                                                            '[]>_R
                                                                                                         <'GHC.Types.LiftedRep>_R
                                                                                                         (GHC.Prim.State#
                                                                                                            (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                                                 <GHC.Prim.RealWorld>_N))_R
                                                                                                         <Data.Primitive.Array.Array
                                                                                                            (Multilinear.Generic.Tensor
                                                                                                               a)>_R)_R)
                                                                                                ->_R <GHC.ST.ST
                                                                                                        GHC.Prim.RealWorld
                                                                                                        (Data.Primitive.Array.Array
                                                                                                           (Multilinear.Generic.Tensor
                                                                                                              a))>_R)
                                                                                               (<GHC.ST.STRep
                                                                                                   GHC.Prim.RealWorld
                                                                                                   (Data.Primitive.Array.Array
                                                                                                      (Multilinear.Generic.Tensor
                                                                                                         a))>_R
                                                                                                ->_R GHC.ST.N:ST[0]
                                                                                                         <GHC.Prim.RealWorld>_N
                                                                                                         <Data.Primitive.Array.Array
                                                                                                            (Multilinear.Generic.Tensor
                                                                                                               a)>_R))))),
                                                                           Data.Vector.Vector
                                                                             @ (Multilinear.Generic.Tensor
                                                                                  a)
                                                                             0#
                                                                             (GHC.Prim.+# ipv1 ipv4)
                                                                             ipv9 #) } } } }
                                                                     GHC.Types.True
                                                                     -> case Data.Vector.Fusion.Bundle.Size.$wlvl5
                                                                               x1
                                                                        ret_ty (# GHC.Prim.State#
                                                                                    GHC.Prim.RealWorld,
                                                                                  Data.Vector.Vector
                                                                                    (Multilinear.Generic.Tensor
                                                                                       a) #)
                                                                        of {} }
                                                                GHC.Types.True
                                                                -> case Data.Vector.Fusion.Bundle.Size.$wlvl5
                                                                          x1
                                                                   ret_ty (# GHC.Prim.State#
                                                                               GHC.Prim.RealWorld,
                                                                             Data.Vector.Vector
                                                                               (Multilinear.Generic.Tensor
                                                                                  a) #)
                                                                   of {} }) of ds2 { (#,#) ipv6 ipv7 ->
                                                      ipv7 } } }) } }
                                      Multilinear.Generic.Scalar ds1 -> wild2 }
                                 Multilinear.Generic.Scalar ds1 -> t2 } } }
                 } in
                 go8) -}
3435455de223a292a66afccee7caf4fd
  $fMonoidTensor_$cmempty ::
    GHC.Num.Num a => Multilinear.Generic.Tensor a
  {- Arity: 1, HasNoCafRefs,
     Strictness: <L,1*U(A,A,A,A,A,A,1*C1(U))>m1, Inline: (sat-args=0),
     Unfolding: InlineRule (1, False, False)
                (\ @ a ($dNum :: GHC.Num.Num a) ->
                 Multilinear.Generic.Scalar
                   @ a
                   (GHC.Num.fromInteger @ a $dNum 0)) -}
3435455de223a292a66afccee7caf4fd
  $fMultilinearTensora ::
    GHC.Num.Num a =>
    Multilinear.Multilinear Multilinear.Generic.Tensor a
  DFunId
  {- Arity: 1,
     Strictness: <L,U(C(C(U)),C(C(U)),C(C(U)),A,C(U),C(U),C(U))>,
     Inline: CONLIKE,
     Unfolding: DFun: @ a (v :: GHC.Num.Num a).
                  @ Multilinear.Generic.Tensor
                  @ a
                  (Multilinear.Generic.$fNumTensor @ a v)
                  (Multilinear.Generic.$fMonoidTensor @ a v)
                  Multilinear.Generic.$fFunctorTensor
                  (Multilinear.Generic.dot_$c+. @ a v)
                  (Multilinear.Generic.$fMultilinearTensora_$c-. @ a v)
                  (Multilinear.Generic.dot_$c*. @ a v)
                  (Multilinear.Generic.dot_$c.+ @ a v)
                  (Multilinear.Generic.$fMultilinearTensora_$c.- @ a v)
                  (Multilinear.Generic.dot_$c.* @ a v)
                  (Multilinear.Generic.$fMultilinearTensora_$c.+. @ a v)
                  (Multilinear.Generic.$fMultilinearTensora_$c.-. @ a v)
                  (Multilinear.Generic.$fMultilinearTensora_$c.*. @ a v)
                  (Multilinear.Generic.$fMultilinearTensora_$cindices @ a v)
                  (Multilinear.Generic.$fMultilinearTensora_$cindicesNames @ a v)
                  (Multilinear.Generic.$fMultilinearTensora_$corder @ a v)
                  (Multilinear.Generic.$fMultilinearTensora_$csize @ a v)
                  (Multilinear.Generic.$fMultilinearTensora_$cequiv @ a v)
                  (Multilinear.Generic.$fMultilinearTensora_$cequiv @ a v)
                  (Multilinear.Generic.$fMultilinearTensora_$c$| @ a v)
                  (\ (t1 :: Multilinear.Generic.Tensor a) (i :: GHC.Base.String) ->
                   Multilinear.Generic.$fMultilinearTensora_$c/\ @ a v t1 i)
                  (Multilinear.Generic.$fMultilinearTensora_$c/\ @ a v)
                  (\ (t1 :: Multilinear.Generic.Tensor a) (i :: GHC.Base.String) ->
                   Multilinear.Generic.$fMultilinearTensora_$c\/ @ a v t1 i)
                  (Multilinear.Generic.$fMultilinearTensora_$c\/ @ a v)
                  (Multilinear.Generic.$fMultilinearTensora_$ctranspose @ a v)
                  (Multilinear.Generic.$fMultilinearTensora_$cshiftRight @ a v)
                  (Multilinear.Generic.$fMultilinearTensora_$cshiftRight @ a v)
                  (Multilinear.Generic.$fMultilinearTensora_$cshiftRightmost @ a v)
                  (Multilinear.Generic.$fMultilinearTensora_$cshiftRightmost @ a v)
                  (Multilinear.Generic.$fMultilinearTensora_$cshiftLeft @ a v)
                  (Multilinear.Generic.$fMultilinearTensora_$cshiftLeft @ a v)
                  (Multilinear.Generic.$fMultilinearTensora_$cshiftLeftmost @ a v)
                  (Multilinear.Generic.$fMultilinearTensora_$cshiftLeftmost @ a v)
                  (Multilinear.Generic.$fMultilinearTensora_$caugment @ a v)
                  (Multilinear.Generic.$fMultilinearTensora_$cfmap @ a)
                  (Multilinear.Generic.$fMultilinearTensora_$ctoBinary @ a v)
                  (Multilinear.Generic.$fMultilinearTensora7 @ a v)
                    `cast`
                  (<Data.Serialize.Serialize a>_R
                   ->_R <GHC.Base.String>_R
                   ->_R <Multilinear.Generic.Tensor a>_R
                   ->_R Sym (GHC.Types.N:IO[0] <()>_R))
                  (Multilinear.Generic.$fMultilinearTensora_$cfromBinary @ a v)
                  (Multilinear.Generic.$fMultilinearTensora6 @ a v)
                    `cast`
                  (<Data.Serialize.Serialize a>_R
                   ->_R <GHC.Base.String>_R
                   ->_R Trans
                            (Sym (GHC.Types.N:IO[0]
                                      <Data.Either.Either
                                         [GHC.Types.Char] (Multilinear.Generic.Tensor a)>_R))
                            (Sym (Control.Monad.Trans.Either.N:EitherT[0]
                                      <[GHC.Types.Char]>_N
                                      <GHC.Types.IO>_R
                                      <Multilinear.Generic.Tensor a>_N)))
                  (Multilinear.Generic.$fMultilinearTensora_$ctoJSON1 @ a v)
                  (Multilinear.Generic.$fMultilinearTensora5 @ a v)
                    `cast`
                  (<Data.Aeson.Types.ToJSON.ToJSON a>_R
                   ->_R <GHC.Base.String>_R
                   ->_R <Multilinear.Generic.Tensor a>_R
                   ->_R Sym (GHC.Types.N:IO[0] <()>_R))
                  (Multilinear.Generic.$fMultilinearTensora_$cfromJSON @ a v)
                  (Multilinear.Generic.$fMultilinearTensora1 @ a v)
                    `cast`
                  (<Data.Aeson.Types.FromJSON.FromJSON a>_R
                   ->_R <GHC.Base.String>_R
                   ->_R Trans
                            (Sym (GHC.Types.N:IO[0]
                                      <GHC.Base.Maybe (Multilinear.Generic.Tensor a)>_R))
                            (Sym (Control.Monad.Trans.Maybe.N:MaybeT[0]
                                      <GHC.Types.IO>_R <Multilinear.Generic.Tensor a>_N))) -}
3435455de223a292a66afccee7caf4fd
  $fMultilinearTensora1 ::
    (GHC.Num.Num a, Data.Aeson.Types.FromJSON.FromJSON a) =>
    GHC.Base.String
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          GHC.Base.Maybe (Multilinear.Generic.Tensor a) #)
  {- Arity: 4, Strictness: <L,A><L,U(C(C(C1(C1(U)))),A)><L,U><S,U>,
     Inline: [0],
     Unfolding: InlineRule (4, True, True)
                (\ @ a
                   (w :: GHC.Num.Num a)
                   (w1 :: Data.Aeson.Types.FromJSON.FromJSON a)
                   (w2 :: GHC.Base.String)
                   (w3 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 Multilinear.Generic.$w$cfromJSONFile @ a w1 w2 w3) -}
c471ff4202b7be4135c943e1c1fed877
  $fMultilinearTensora10 :: Data.Vector.Vector a
  {- Strictness: x -}
3435455de223a292a66afccee7caf4fd
  $fMultilinearTensora11 ::
    Data.Vector.Vector (Multilinear.Generic.Tensor a)
  {- Strictness: x -}
3dc33b0ae5c7b37e50f14a63ac5ee286
  $fMultilinearTensora12 :: Multilinear.Index.Finite.Index
  {- Strictness: x -}
e03dc035a62eb3b016bae9a9f96b3f59
  $fMultilinearTensora13 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("Index is infinitely-dimensional!"#) -}
a5d18bd8b286a4aaa641494d1d7fe6f2
  $fMultilinearTensora14 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("This tensor has not such index!"#) -}
3435455de223a292a66afccee7caf4fd
  $fMultilinearTensora2 ::
    Data.Aeson.Types.Internal.JSONPath
    -> GHC.Base.String
    -> Data.Aeson.Types.Internal.Result (Multilinear.Generic.Tensor a)
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><L,U>m1,
     Unfolding: InlineRule (2, True, True)
                (\ @ a
                   (ds :: Data.Aeson.Types.Internal.JSONPath)
                   (eta :: GHC.Base.String) ->
                 Data.Aeson.Types.Internal.Error
                   @ (Multilinear.Generic.Tensor a)
                   eta) -}
84eb191c2df3e929b0a17d848086bb6a
  $fMultilinearTensora3 ::
    Data.Attoparsec.ByteString.Lazy.Result
      Data.Aeson.Types.Internal.Value
  {- Unfolding: (Data.Attoparsec.ByteString.Lazy.parse_$sgo
                   @ Data.Aeson.Types.Internal.Value
                   Multilinear.Generic.$fMultilinearTensora4) -}
af7743a9cc64dfb76b9b7452d7302d59
  $fMultilinearTensora4 ::
    Data.Attoparsec.Internal.Types.IResult
      Data.ByteString.Internal.ByteString Data.Aeson.Types.Internal.Value
  {- Unfolding: (Data.Aeson.Parser.Internal.$wjsonEOF
                   @ Data.Aeson.Types.Internal.Value
                   __NULL
                   Data.ByteString.Internal.$fMonoidByteString1
                   0#
                   0#
                   0#
                   0#
                   0#
                   Data.Attoparsec.Internal.Types.Incomplete
                   (Data.Attoparsec.ByteString.Internal.failK
                      @ Data.Aeson.Types.Internal.Value)
                     `cast`
                   (Sub (Sym (Data.Attoparsec.Internal.Types.D:R:StateByteString[0]))
                    ->_R <Data.Attoparsec.Internal.Types.Pos
                          -> Data.Attoparsec.Internal.Types.More
                          -> [GHC.Base.String]
                          -> GHC.Base.String
                          -> Data.Attoparsec.Internal.Types.IResult
                               Data.ByteString.Internal.ByteString
                               Data.Aeson.Types.Internal.Value>_R)
                   (Data.Attoparsec.ByteString.Internal.successK
                      @ Data.Aeson.Types.Internal.Value)
                     `cast`
                   (Sub (Sym (Data.Attoparsec.Internal.Types.D:R:StateByteString[0]))
                    ->_R <Data.Attoparsec.Internal.Types.Pos
                          -> Data.Attoparsec.Internal.Types.More
                          -> Data.Aeson.Types.Internal.Value
                          -> Data.Attoparsec.Internal.Types.IResult
                               Data.ByteString.Internal.ByteString
                               Data.Aeson.Types.Internal.Value>_R)) -}
3435455de223a292a66afccee7caf4fd
  $fMultilinearTensora5 ::
    (GHC.Num.Num a, Data.Aeson.Types.ToJSON.ToJSON a) =>
    GHC.Base.String
    -> Multilinear.Generic.Tensor a
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 5, Strictness: <L,A><L,U(C(U),A,A,A)><L,U><L,1*U><S,U>,
     Inline: [0],
     Unfolding: InlineRule (5, True, True)
                (\ @ a
                   (w :: GHC.Num.Num a)
                   (w1 :: Data.Aeson.Types.ToJSON.ToJSON a)
                   (w2 :: GHC.Base.String)
                   (w3 :: Multilinear.Generic.Tensor a)
                   (w4 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 Multilinear.Generic.$w$ctoJSONFile @ a w1 w2 w3 w4) -}
3435455de223a292a66afccee7caf4fd
  $fMultilinearTensora6 ::
    (GHC.Num.Num a, Data.Serialize.Serialize a) =>
    GHC.Base.String
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Either.Either
            [GHC.Types.Char] (Multilinear.Generic.Tensor a) #)
  {- Arity: 4,
     Strictness: <L,A><L,U(C(U(1*U,C(C(U)))),C(C1(C1(C1(C1(C1(U)))))))><L,U><S,U>,
     Inline: [0],
     Unfolding: InlineRule (4, True, True)
                (\ @ a
                   (w :: GHC.Num.Num a)
                   (w1 :: Data.Serialize.Serialize a)
                   (w2 :: GHC.Base.String)
                   (w3 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 Multilinear.Generic.$w$cfromBinaryFile @ a w1 w2 w3) -}
3435455de223a292a66afccee7caf4fd
  $fMultilinearTensora7 ::
    (GHC.Num.Num a, Data.Serialize.Serialize a) =>
    GHC.Base.String
    -> Multilinear.Generic.Tensor a
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 5,
     Strictness: <L,A><L,U(C(U(1*U,C(C(U)))),C(C1(C1(C1(C1(C1(U)))))))><L,U><L,U><S,U>,
     Inline: [0],
     Unfolding: InlineRule (5, True, True)
                (\ @ a
                   (w :: GHC.Num.Num a)
                   (w1 :: Data.Serialize.Serialize a)
                   (w2 :: GHC.Base.String)
                   (w3 :: Multilinear.Generic.Tensor a)
                   (w4 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 Multilinear.Generic.$w$ctoBinaryFile @ a w1 w2 w3 w4) -}
31f97a03f71f58605a2767ccf4c4d171
  $fMultilinearTensora8 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Tensors have different indices!"#) -}
49eaee7f48c08717efe69a4cf73e0958
  $fMultilinearTensora9 :: Multilinear.Index.Infinite.Index
  {- Strictness: x -}
3435455de223a292a66afccee7caf4fd
  $fMultilinearTensora_$c$| ::
    GHC.Num.Num a =>
    Multilinear.Generic.Tensor a
    -> (GHC.Base.String, GHC.Base.String)
    -> Multilinear.Generic.Tensor a
  {- Arity: 3, Strictness: <L,A><S,1*U><L,1*U(U,U)>, Inline: [0],
     Unfolding: InlineRule (3, True, True)
                (\ @ a
                   (w :: GHC.Num.Num a)
                   (w1 :: Multilinear.Generic.Tensor a)
                   (w2 :: (GHC.Base.String, GHC.Base.String)) ->
                 Multilinear.Generic.$w$c$| @ a w1 w2) -}
3435455de223a292a66afccee7caf4fd
  $fMultilinearTensora_$c-. ::
    GHC.Num.Num a =>
    a -> Multilinear.Generic.Tensor a -> Multilinear.Generic.Tensor a
  {- Arity: 3,
     Strictness: <L,1*U(A,1*C1(C(U)),A,A,A,A,A)><L,U><S,1*U>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (3, False, False)
                (\ @ a
                   ($dNum :: GHC.Num.Num a)
                   (x :: a)
                   (t :: Multilinear.Generic.Tensor a) ->
                 Multilinear.Generic.$fMultilinearTensora_$cfmap
                   @ a
                   @ a
                   (GHC.Num.- @ a $dNum x)
                   t) -}
3435455de223a292a66afccee7caf4fd
  $fMultilinearTensora_$c.*. ::
    GHC.Num.Num a =>
    Multilinear.Generic.Tensor a
    -> Multilinear.Generic.Tensor a -> Multilinear.Generic.Tensor a
  {- Arity: 3,
     Strictness: <L,U(C(C(U)),A,C(C(U)),A,A,A,C(U))><S,U><S,U>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (3, False, False)
                (\ @ a
                   ($dNum :: GHC.Num.Num a)
                   (t1 :: Multilinear.Generic.Tensor a)
                   (t2 :: Multilinear.Generic.Tensor a) ->
                 let {
                   commonIndices :: [GHC.Base.String]
                   = GHC.Base.build
                       @ [GHC.Types.Char]
                       (\ @ b
                          (c :: [GHC.Types.Char] -> b -> b)[OneShot]
                          (n :: b)[OneShot] ->
                        GHC.Base.foldr
                          @ Multilinear.Index.TIndex
                          @ b
                          (GHC.Base.mapFB
                             @ [GHC.Types.Char]
                             @ b
                             @ Multilinear.Index.TIndex
                             (GHC.List.filterFB
                                @ [GHC.Types.Char]
                                @ b
                                c
                                (let {
                                   ds :: [GHC.Base.String]
                                   = GHC.Base.build
                                       @ [GHC.Types.Char]
                                       (\ @ b1
                                          (c1 :: [GHC.Types.Char] -> b1 -> b1)[OneShot]
                                          (n1 :: b1)[OneShot] ->
                                        GHC.Base.foldr
                                          @ Multilinear.Index.TIndex
                                          @ b1
                                          (GHC.Base.mapFB
                                             @ [GHC.Types.Char]
                                             @ b1
                                             @ Multilinear.Index.TIndex
                                             c1
                                             Multilinear.Index.tIndexName)
                                          n1
                                          (Multilinear.Generic.$fMultilinearTensora_$cindices
                                             @ a
                                             $dNum
                                             t2))
                                 } in
                                 \ (ds1 :: GHC.Base.String) ->
                                 GHC.List.elem
                                   @ GHC.Base.String
                                   GHC.Classes.$fEq[]_$s$fEq[]1
                                   ds1
                                   ds))
                             Multilinear.Index.tIndexName)
                          n
                          (Multilinear.Generic.$fMultilinearTensora_$cindices @ a $dNum t1))
                 } in
                 Multilinear.Generic.mergeScalars
                   @ a
                   (Multilinear.Generic._elemByElem'
                      @ a
                      $dNum
                      (GHC.Base.foldr
                         @ GHC.Base.String
                         @ (Multilinear.Generic.Tensor a -> Multilinear.Generic.Tensor a)
                         (\ (ds :: GHC.Base.String)
                            (ds1 :: Multilinear.Generic.Tensor a
                                    -> Multilinear.Generic.Tensor a)[OneShot]
                            (v :: Multilinear.Generic.Tensor a)[OneShot] ->
                          case v of z { DEFAULT ->
                          ds1
                            (Multilinear.Generic.$fMultilinearTensora_$cshiftRightmost
                               @ a
                               $dNum
                               z
                               ds) })
                         (GHC.Base.id @ (Multilinear.Generic.Tensor a))
                         commonIndices
                         t1)
                      (GHC.Base.foldr
                         @ GHC.Base.String
                         @ (Multilinear.Generic.Tensor a -> Multilinear.Generic.Tensor a)
                         (\ (ds :: GHC.Base.String)
                            (ds1 :: Multilinear.Generic.Tensor a
                                    -> Multilinear.Generic.Tensor a)[OneShot]
                            (v :: Multilinear.Generic.Tensor a)[OneShot] ->
                          case v of z { DEFAULT ->
                          ds1
                            (Multilinear.Generic.$fMultilinearTensora_$cshiftRightmost
                               @ a
                               $dNum
                               z
                               ds) })
                         (GHC.Base.id @ (Multilinear.Generic.Tensor a))
                         commonIndices
                         t2)
                      (GHC.Num.+ @ a $dNum)
                      (Multilinear.Generic.dot @ a $dNum))) -}
3435455de223a292a66afccee7caf4fd
  $fMultilinearTensora_$c.+. ::
    GHC.Num.Num a =>
    Multilinear.Generic.Tensor a
    -> Multilinear.Generic.Tensor a -> Multilinear.Generic.Tensor a
  {- Arity: 3, Strictness: <L,U(C(C(U)),A,A,A,A,A,A)><S,U><S,U>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (3, False, False)
                (\ @ a
                   ($dNum :: GHC.Num.Num a)
                   (t1 :: Multilinear.Generic.Tensor a)
                   (t2 :: Multilinear.Generic.Tensor a) ->
                 let {
                   commonIndices :: [GHC.Base.String]
                   = GHC.Base.build
                       @ [GHC.Types.Char]
                       (\ @ b
                          (c :: [GHC.Types.Char] -> b -> b)[OneShot]
                          (n :: b)[OneShot] ->
                        GHC.Base.foldr
                          @ Multilinear.Index.TIndex
                          @ b
                          (GHC.Base.mapFB
                             @ [GHC.Types.Char]
                             @ b
                             @ Multilinear.Index.TIndex
                             (GHC.List.filterFB
                                @ [GHC.Types.Char]
                                @ b
                                c
                                (let {
                                   ds :: [GHC.Base.String]
                                   = GHC.Base.build
                                       @ [GHC.Types.Char]
                                       (\ @ b1
                                          (c1 :: [GHC.Types.Char] -> b1 -> b1)[OneShot]
                                          (n1 :: b1)[OneShot] ->
                                        GHC.Base.foldr
                                          @ Multilinear.Index.TIndex
                                          @ b1
                                          (GHC.Base.mapFB
                                             @ [GHC.Types.Char]
                                             @ b1
                                             @ Multilinear.Index.TIndex
                                             c1
                                             Multilinear.Index.tIndexName)
                                          n1
                                          (Multilinear.Generic.$fMultilinearTensora_$cindices
                                             @ a
                                             $dNum
                                             t2))
                                 } in
                                 \ (ds1 :: GHC.Base.String) ->
                                 GHC.List.elem
                                   @ GHC.Base.String
                                   GHC.Classes.$fEq[]_$s$fEq[]1
                                   ds1
                                   ds))
                             Multilinear.Index.tIndexName)
                          n
                          (Multilinear.Generic.$fMultilinearTensora_$cindices @ a $dNum t1))
                 } in
                 Multilinear.Generic.mergeScalars
                   @ a
                   (Multilinear.Generic._elemByElem'
                      @ a
                      $dNum
                      (GHC.Base.foldr
                         @ GHC.Base.String
                         @ (Multilinear.Generic.Tensor a -> Multilinear.Generic.Tensor a)
                         (\ (ds :: GHC.Base.String)
                            (ds1 :: Multilinear.Generic.Tensor a
                                    -> Multilinear.Generic.Tensor a)[OneShot]
                            (v :: Multilinear.Generic.Tensor a)[OneShot] ->
                          case v of z { DEFAULT ->
                          ds1
                            (Multilinear.Generic.$fMultilinearTensora_$cshiftRightmost
                               @ a
                               $dNum
                               z
                               ds) })
                         (GHC.Base.id @ (Multilinear.Generic.Tensor a))
                         commonIndices
                         t1)
                      (GHC.Base.foldr
                         @ GHC.Base.String
                         @ (Multilinear.Generic.Tensor a -> Multilinear.Generic.Tensor a)
                         (\ (ds :: GHC.Base.String)
                            (ds1 :: Multilinear.Generic.Tensor a
                                    -> Multilinear.Generic.Tensor a)[OneShot]
                            (v :: Multilinear.Generic.Tensor a)[OneShot] ->
                          case v of z { DEFAULT ->
                          ds1
                            (Multilinear.Generic.$fMultilinearTensora_$cshiftRightmost
                               @ a
                               $dNum
                               z
                               ds) })
                         (GHC.Base.id @ (Multilinear.Generic.Tensor a))
                         commonIndices
                         t2)
                      (GHC.Num.+ @ a $dNum)
                      (Multilinear.Generic.zipT
                         @ a
                         $dNum
                         (Multilinear.Generic.dot_$c+ @ a $dNum)
                         (Multilinear.Generic.dot_$c.+ @ a $dNum)
                         (Multilinear.Generic.dot_$c+. @ a $dNum)
                         (GHC.Num.+ @ a $dNum)))) -}
3435455de223a292a66afccee7caf4fd
  $fMultilinearTensora_$c.- ::
    GHC.Num.Num a =>
    Multilinear.Generic.Tensor a -> a -> Multilinear.Generic.Tensor a
  {- Arity: 3, Strictness: <L,U(A,C(C1(U)),A,A,A,A,A)><S,1*U><L,U>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (3, False, False)
                (\ @ a
                   ($dNum :: GHC.Num.Num a)
                   (t :: Multilinear.Generic.Tensor a)
                   (x :: a) ->
                 Multilinear.Generic.$fMultilinearTensora_$cfmap
                   @ a
                   @ a
                   (\ (p :: a) -> GHC.Num.- @ a $dNum p x)
                   t) -}
3435455de223a292a66afccee7caf4fd
  $fMultilinearTensora_$c.-. ::
    GHC.Num.Num a =>
    Multilinear.Generic.Tensor a
    -> Multilinear.Generic.Tensor a -> Multilinear.Generic.Tensor a
  {- Arity: 3,
     Strictness: <L,U(C(C(U)),1*C(C(U)),A,A,A,A,A)><S,U><S,U>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (3, False, False)
                (\ @ a
                   ($dNum :: GHC.Num.Num a)
                   (t1 :: Multilinear.Generic.Tensor a)
                   (t2 :: Multilinear.Generic.Tensor a) ->
                 let {
                   commonIndices :: [GHC.Base.String]
                   = GHC.Base.build
                       @ [GHC.Types.Char]
                       (\ @ b
                          (c :: [GHC.Types.Char] -> b -> b)[OneShot]
                          (n :: b)[OneShot] ->
                        GHC.Base.foldr
                          @ Multilinear.Index.TIndex
                          @ b
                          (GHC.Base.mapFB
                             @ [GHC.Types.Char]
                             @ b
                             @ Multilinear.Index.TIndex
                             (GHC.List.filterFB
                                @ [GHC.Types.Char]
                                @ b
                                c
                                (let {
                                   ds :: [GHC.Base.String]
                                   = GHC.Base.build
                                       @ [GHC.Types.Char]
                                       (\ @ b1
                                          (c1 :: [GHC.Types.Char] -> b1 -> b1)[OneShot]
                                          (n1 :: b1)[OneShot] ->
                                        GHC.Base.foldr
                                          @ Multilinear.Index.TIndex
                                          @ b1
                                          (GHC.Base.mapFB
                                             @ [GHC.Types.Char]
                                             @ b1
                                             @ Multilinear.Index.TIndex
                                             c1
                                             Multilinear.Index.tIndexName)
                                          n1
                                          (Multilinear.Generic.$fMultilinearTensora_$cindices
                                             @ a
                                             $dNum
                                             t2))
                                 } in
                                 \ (ds1 :: GHC.Base.String) ->
                                 GHC.List.elem
                                   @ GHC.Base.String
                                   GHC.Classes.$fEq[]_$s$fEq[]1
                                   ds1
                                   ds))
                             Multilinear.Index.tIndexName)
                          n
                          (Multilinear.Generic.$fMultilinearTensora_$cindices @ a $dNum t1))
                 } in
                 Multilinear.Generic.mergeScalars
                   @ a
                   (Multilinear.Generic._elemByElem'
                      @ a
                      $dNum
                      (GHC.Base.foldr
                         @ GHC.Base.String
                         @ (Multilinear.Generic.Tensor a -> Multilinear.Generic.Tensor a)
                         (\ (ds :: GHC.Base.String)
                            (ds1 :: Multilinear.Generic.Tensor a
                                    -> Multilinear.Generic.Tensor a)[OneShot]
                            (v :: Multilinear.Generic.Tensor a)[OneShot] ->
                          case v of z { DEFAULT ->
                          ds1
                            (Multilinear.Generic.$fMultilinearTensora_$cshiftRightmost
                               @ a
                               $dNum
                               z
                               ds) })
                         (GHC.Base.id @ (Multilinear.Generic.Tensor a))
                         commonIndices
                         t1)
                      (GHC.Base.foldr
                         @ GHC.Base.String
                         @ (Multilinear.Generic.Tensor a -> Multilinear.Generic.Tensor a)
                         (\ (ds :: GHC.Base.String)
                            (ds1 :: Multilinear.Generic.Tensor a
                                    -> Multilinear.Generic.Tensor a)[OneShot]
                            (v :: Multilinear.Generic.Tensor a)[OneShot] ->
                          case v of z { DEFAULT ->
                          ds1
                            (Multilinear.Generic.$fMultilinearTensora_$cshiftRightmost
                               @ a
                               $dNum
                               z
                               ds) })
                         (GHC.Base.id @ (Multilinear.Generic.Tensor a))
                         commonIndices
                         t2)
                      (GHC.Num.- @ a $dNum)
                      (Multilinear.Generic.zipT
                         @ a
                         $dNum
                         (Multilinear.Generic.dot_$c+ @ a $dNum)
                         (Multilinear.Generic.dot_$c.+ @ a $dNum)
                         (Multilinear.Generic.dot_$c+. @ a $dNum)
                         (GHC.Num.+ @ a $dNum)))) -}
3435455de223a292a66afccee7caf4fd
  $fMultilinearTensora_$c/\ ::
    GHC.Num.Num a =>
    Multilinear.Generic.Tensor a
    -> GHC.Base.String -> Multilinear.Generic.Tensor a
  {- Arity: 3, Strictness: <L,A><S,1*U><L,U>, Inline: [0],
     Unfolding: InlineRule (3, True, True)
                (\ @ a
                   (w :: GHC.Num.Num a)
                   (w1 :: Multilinear.Generic.Tensor a)
                   (w2 :: GHC.Base.String) ->
                 Multilinear.Generic.$w$c/\ @ a w1 w2) -}
3435455de223a292a66afccee7caf4fd
  $fMultilinearTensora_$c\/ ::
    GHC.Num.Num a =>
    Multilinear.Generic.Tensor a
    -> GHC.Base.String -> Multilinear.Generic.Tensor a
  {- Arity: 3, Strictness: <L,A><S,1*U><L,U>, Inline: [0],
     Unfolding: InlineRule (3, True, True)
                (\ @ a
                   (w :: GHC.Num.Num a)
                   (w1 :: Multilinear.Generic.Tensor a)
                   (w2 :: GHC.Base.String) ->
                 Multilinear.Generic.$w$c\/ @ a w1 w2) -}
3435455de223a292a66afccee7caf4fd
  $fMultilinearTensora_$caugment ::
    GHC.Num.Num a =>
    Multilinear.Generic.Tensor a
    -> Multilinear.Generic.Tensor a
    -> GHC.Base.String
    -> Multilinear.Generic.Tensor a
  {- Arity: 4, Strictness: <L,A><S,U><S,U><S,U>,
     Inline: (sat-args=3),
     Unfolding: InlineRule (4, False, False)
                (\ @ a
                   ($dNum :: GHC.Num.Num a)
                   (t1 :: Multilinear.Generic.Tensor a)
                   (t2 :: Multilinear.Generic.Tensor a)
                   (ind :: GHC.Base.String) ->
                 let {
                   t4 :: Multilinear.Generic.Tensor a
                   = Multilinear.Generic.$fMultilinearTensora_$cshiftLeftmost
                       @ a
                       $dNum
                       t1
                       ind
                 } in
                 let {
                   t5 :: Multilinear.Generic.Tensor a
                   = Multilinear.Generic.$fMultilinearTensora_$cshiftLeftmost
                       @ a
                       $dNum
                       t2
                       ind
                 } in
                 case GHC.Classes.$fEq[]_$c==
                        @ Multilinear.Index.TIndex
                        Multilinear.Index.$fEqTIndex
                        (Multilinear.Generic.$fMultilinearTensora_$cindices @ a $dNum t4)
                        (Multilinear.Generic.$fMultilinearTensora_$cindices
                           @ a
                           $dNum
                           t5) of wild {
                   GHC.Types.False
                   -> Multilinear.Generic.Err @ a Multilinear.Generic.differentIndices
                   GHC.Types.True
                   -> case t4 of wild1 {
                        DEFAULT
                        -> case t5 of wild2 {
                             DEFAULT
                             -> case wild1 of wild3 {
                                  DEFAULT
                                  -> Multilinear.Generic.Err
                                       @ a
                                       Multilinear.Generic.differentIndices
                                  Multilinear.Generic.SimpleFinite i1 ts1
                                  -> case wild2 of wild4 {
                                       DEFAULT
                                       -> Multilinear.Generic.Err
                                            @ a
                                            Multilinear.Generic.differentIndices
                                       Multilinear.Generic.SimpleFinite ds ts2
                                       -> Multilinear.Generic.SimpleFinite
                                            @ a
                                            i1
                                            (Data.Vector.Generic.new
                                               @ Data.Vector.Vector
                                               @ a
                                               (Data.Vector.$fVectorVectora @ a)
                                               (Data.Vector.Generic.New.unstream
                                                  @ Data.Vector.Vector
                                                  @ a
                                                  (Data.Vector.$fVectorVectora @ a)
                                                  (Data.Vector.Fusion.Bundle.Monadic.++
                                                     @ Data.Vector.Fusion.Util.Id
                                                     @ Data.Vector.Vector
                                                     @ a
                                                     Data.Vector.Fusion.Util.$fMonadId
                                                     (Data.Vector.Generic.stream
                                                        @ Data.Vector.Vector
                                                        @ a
                                                        (Data.Vector.$fVectorVectora @ a)
                                                        ts1)
                                                     (Data.Vector.Generic.stream
                                                        @ Data.Vector.Vector
                                                        @ a
                                                        (Data.Vector.$fVectorVectora @ a)
                                                        ts2)))) }
                                  Multilinear.Generic.FiniteTensor i1 ts1
                                  -> case wild2 of wild4 {
                                       DEFAULT
                                       -> Multilinear.Generic.Err
                                            @ a
                                            Multilinear.Generic.differentIndices
                                       Multilinear.Generic.FiniteTensor ds ts2
                                       -> Multilinear.Generic.FiniteTensor
                                            @ a
                                            i1
                                            (Data.Vector.Generic.new
                                               @ Data.Vector.Vector
                                               @ (Multilinear.Generic.Tensor a)
                                               (Data.Vector.$fVectorVectora
                                                  @ (Multilinear.Generic.Tensor a))
                                               (Data.Vector.Generic.New.unstream
                                                  @ Data.Vector.Vector
                                                  @ (Multilinear.Generic.Tensor a)
                                                  (Data.Vector.$fVectorVectora
                                                     @ (Multilinear.Generic.Tensor a))
                                                  (Data.Vector.Fusion.Bundle.Monadic.++
                                                     @ Data.Vector.Fusion.Util.Id
                                                     @ Data.Vector.Vector
                                                     @ (Multilinear.Generic.Tensor a)
                                                     Data.Vector.Fusion.Util.$fMonadId
                                                     (Data.Vector.Generic.stream
                                                        @ Data.Vector.Vector
                                                        @ (Multilinear.Generic.Tensor a)
                                                        (Data.Vector.$fVectorVectora
                                                           @ (Multilinear.Generic.Tensor a))
                                                        ts1)
                                                     (Data.Vector.Generic.stream
                                                        @ Data.Vector.Vector
                                                        @ (Multilinear.Generic.Tensor a)
                                                        (Data.Vector.$fVectorVectora
                                                           @ (Multilinear.Generic.Tensor a))
                                                        ts2)))) } }
                             Multilinear.Generic.Scalar ds -> wild1 }
                        Multilinear.Generic.Scalar ds -> t5 } }) -}
3435455de223a292a66afccee7caf4fd
  $fMultilinearTensora_$cequiv ::
    GHC.Num.Num a =>
    Multilinear.Generic.Tensor a
    -> Multilinear.Generic.Tensor a -> GHC.Types.Bool
  {- Arity: 3, Strictness: <L,A><S,1*U><S,1*U>, Inline: [0],
     Unfolding: InlineRule (3, True, True)
                (\ @ a
                   (w :: GHC.Num.Num a)
                   (w1 :: Multilinear.Generic.Tensor a)
                   (w2 :: Multilinear.Generic.Tensor a) ->
                 Multilinear.Generic.$w$cequiv @ a w1 w2) -}
3435455de223a292a66afccee7caf4fd
  $fMultilinearTensora_$cfmap ::
    (a -> b)
    -> Multilinear.Generic.Tensor a -> Multilinear.Generic.Tensor b
  {- Arity: 2, Strictness: <L,C(U)><S,1*U>, Inline: (sat-args=2),
     Unfolding(loop-breaker): InlineRule (2, False, False)
                              (\ @ a @ b (f :: a -> b) (x :: Multilinear.Generic.Tensor a) ->
                               case x of wild {
                                 Multilinear.Generic.Scalar v
                                 -> Multilinear.Generic.Scalar @ b (f v)
                                 Multilinear.Generic.SimpleFinite index ts
                                 -> Multilinear.Generic.SimpleFinite
                                      @ b
                                      index
                                      (Data.Vector.Generic.new
                                         @ Data.Vector.Vector
                                         @ b
                                         (Data.Vector.$fVectorVectora @ b)
                                         (Data.Vector.Generic.New.unstream
                                            @ Data.Vector.Vector
                                            @ b
                                            (Data.Vector.$fVectorVectora @ b)
                                            (Data.Vector.Fusion.Bundle.inplace
                                               @ a
                                               @ b
                                               @ Data.Vector.Vector
                                               (\ @ m :: * -> *
                                                  ($dMonad :: GHC.Base.Monad m)[OneShot] ->
                                                Data.Vector.Fusion.Stream.Monadic.map
                                                  @ m
                                                  @ a
                                                  @ b
                                                  $dMonad
                                                  f)
                                               (GHC.Base.id @ Data.Vector.Fusion.Bundle.Size.Size)
                                               (Data.Vector.Generic.stream
                                                  @ Data.Vector.Vector
                                                  @ a
                                                  (Data.Vector.$fVectorVectora @ a)
                                                  ts))))
                                 Multilinear.Generic.FiniteTensor index ts
                                 -> Multilinear.Generic.FiniteTensor
                                      @ b
                                      index
                                      (Data.Vector.Generic.new
                                         @ Data.Vector.Vector
                                         @ (Multilinear.Generic.Tensor b)
                                         (Data.Vector.$fVectorVectora
                                            @ (Multilinear.Generic.Tensor b))
                                         (Data.Vector.Generic.New.unstream
                                            @ Data.Vector.Vector
                                            @ (Multilinear.Generic.Tensor b)
                                            (Data.Vector.$fVectorVectora
                                               @ (Multilinear.Generic.Tensor b))
                                            (Data.Vector.Fusion.Bundle.inplace
                                               @ (Multilinear.Generic.Tensor a)
                                               @ (Multilinear.Generic.Tensor b)
                                               @ Data.Vector.Vector
                                               (\ @ m :: * -> *
                                                  ($dMonad :: GHC.Base.Monad m)[OneShot] ->
                                                Data.Vector.Fusion.Stream.Monadic.mapM
                                                  @ m
                                                  @ (Multilinear.Generic.Tensor a)
                                                  @ (Multilinear.Generic.Tensor b)
                                                  $dMonad
                                                  (let {
                                                     f1 :: Multilinear.Generic.Tensor b
                                                           -> m (Multilinear.Generic.Tensor b)
                                                     = GHC.Base.return
                                                         @ m
                                                         $dMonad
                                                         @ (Multilinear.Generic.Tensor b)
                                                   } in
                                                   \ (x1 :: Multilinear.Generic.Tensor a) ->
                                                   f1
                                                     (Multilinear.Generic.$fMultilinearTensora_$cfmap
                                                        @ a
                                                        @ b
                                                        f
                                                        x1)))
                                               (GHC.Base.id @ Data.Vector.Fusion.Bundle.Size.Size)
                                               (Data.Vector.Generic.stream
                                                  @ Data.Vector.Vector
                                                  @ (Multilinear.Generic.Tensor a)
                                                  (Data.Vector.$fVectorVectora
                                                     @ (Multilinear.Generic.Tensor a))
                                                  ts))))
                                 Multilinear.Generic.InfiniteTensor index ts
                                 -> Multilinear.Generic.InfiniteTensor
                                      @ b
                                      index
                                      (GHC.Base.build
                                         @ (Multilinear.Generic.Tensor b)
                                         (\ @ b1
                                            (c :: Multilinear.Generic.Tensor b -> b1 -> b1)[OneShot]
                                            (n :: b1)[OneShot] ->
                                          GHC.Base.foldr
                                            @ (Multilinear.Generic.Tensor a)
                                            @ b1
                                            (GHC.Base.mapFB
                                               @ (Multilinear.Generic.Tensor b)
                                               @ b1
                                               @ (Multilinear.Generic.Tensor a)
                                               c
                                               (Multilinear.Generic.$fMultilinearTensora_$cfmap
                                                  @ a
                                                  @ b
                                                  f))
                                            n
                                            ts))
                                 Multilinear.Generic.Err msg
                                 -> Multilinear.Generic.Err @ b msg }) -}
3435455de223a292a66afccee7caf4fd
  $fMultilinearTensora_$cfromBinary ::
    (GHC.Num.Num a, Data.Serialize.Serialize a) =>
    Data.ByteString.Lazy.Internal.ByteString
    -> Data.Either.Either
         GHC.Base.String (Multilinear.Generic.Tensor a)
  {- Arity: 2,
     Strictness: <L,A><L,U(C(U(1*U,C(C(U)))),C(C1(C1(C1(C1(C1(U)))))))>,
     Unfolding: InlineRule (2, True, False)
                (\ @ a
                   ($dNum :: GHC.Num.Num a)
                   ($dSerialize :: Data.Serialize.Serialize a) ->
                 Data.Serialize.decodeLazy
                   @ (Multilinear.Generic.Tensor a)
                   (Multilinear.Generic.$fSerializeTensor @ a $dSerialize)) -}
3435455de223a292a66afccee7caf4fd
  $fMultilinearTensora_$cfromJSON ::
    (GHC.Num.Num a, Data.Aeson.Types.FromJSON.FromJSON a) =>
    Data.ByteString.Lazy.Internal.ByteString
    -> GHC.Base.Maybe (Multilinear.Generic.Tensor a)
  {- Arity: 2, Strictness: <L,A><L,U(C(C(C1(C1(U)))),A)>,
     Unfolding: InlineRule (2, True, False)
                (\ @ a
                   ($dNum :: GHC.Num.Num a)
                   ($dFromJSON :: Data.Aeson.Types.FromJSON.FromJSON a) ->
                 Data.Aeson.Parser.Internal.decodeWith
                   @ (Multilinear.Generic.Tensor a)
                   Data.Aeson.Parser.Internal.jsonEOF1
                     `cast`
                   (Sym (Data.Attoparsec.Internal.Types.N:Parser[0]
                             <Data.ByteString.Internal.ByteString>_N
                             <Data.Aeson.Types.Internal.Value>_R))
                   (Data.Aeson.Types.Internal.parse
                      @ Data.Aeson.Types.Internal.Value
                      @ (Multilinear.Generic.Tensor a)
                      (Multilinear.Generic.$fMultilinearTensora_$cparseJSON
                         @ a
                         $dFromJSON))) -}
3435455de223a292a66afccee7caf4fd
  $fMultilinearTensora_$cindices ::
    GHC.Num.Num a =>
    Multilinear.Generic.Tensor a -> [Multilinear.Index.TIndex]
  {- Arity: 2, Strictness: <L,A><S,1*U>, Inline: [0],
     Unfolding: InlineRule (2, True, True)
                (\ @ a (w :: GHC.Num.Num a) (w1 :: Multilinear.Generic.Tensor a) ->
                 Multilinear.Generic.$w$cindices @ a w1) -}
3435455de223a292a66afccee7caf4fd
  $fMultilinearTensora_$cindicesNames ::
    GHC.Num.Num a => Multilinear.Generic.Tensor a -> [GHC.Base.String]
  {- Arity: 2, Strictness: <L,A><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ @ a
                   ($dNum :: GHC.Num.Num a)
                   (t1 :: Multilinear.Generic.Tensor a) ->
                 GHC.Base.build
                   @ [GHC.Types.Char]
                   (\ @ b1
                      (c :: [GHC.Types.Char] -> b1 -> b1)[OneShot]
                      (n :: b1)[OneShot] ->
                    GHC.Base.foldr
                      @ Multilinear.Index.TIndex
                      @ b1
                      (GHC.Base.mapFB
                         @ [GHC.Types.Char]
                         @ b1
                         @ Multilinear.Index.TIndex
                         c
                         Multilinear.Index.tIndexName)
                      n
                      (Multilinear.Generic.$fMultilinearTensora_$cindices
                         @ a
                         $dNum
                         t1))) -}
3435455de223a292a66afccee7caf4fd
  $fMultilinearTensora_$corder ::
    GHC.Num.Num a =>
    Multilinear.Generic.Tensor a -> (GHC.Types.Int, GHC.Types.Int)
  {- Arity: 2, Strictness: <L,A><S,1*U>m, Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ @ a (w :: GHC.Num.Num a) (w1 :: Multilinear.Generic.Tensor a) ->
                 case Multilinear.Generic.$w$corder @ a w1 of ww { (#,#) ww1 ww2 ->
                 (ww1, ww2) }) -}
3435455de223a292a66afccee7caf4fd
  $fMultilinearTensora_$cparseJSON ::
    Data.Aeson.Types.FromJSON.FromJSON a =>
    Data.Aeson.Types.Internal.Value
    -> Data.Aeson.Types.Internal.Parser (Multilinear.Generic.Tensor a)
  {- Arity: 1, Strictness: <L,U(C(C(C1(C1(U)))),A)> -}
3435455de223a292a66afccee7caf4fd
  $fMultilinearTensora_$cshiftLeft ::
    GHC.Num.Num a =>
    Multilinear.Generic.Tensor a
    -> GHC.Base.String -> Multilinear.Generic.Tensor a
  {- Arity: 3, Strictness: <L,A><S,U><L,U>, Inline: [0],
     Unfolding: InlineRule (3, True, True)
                (\ @ a
                   (w :: GHC.Num.Num a)
                   (w1 :: Multilinear.Generic.Tensor a)
                   (w2 :: GHC.Base.String) ->
                 Multilinear.Generic.$w$cshiftLeft @ a w1 w2) -}
3435455de223a292a66afccee7caf4fd
  $fMultilinearTensora_$cshiftLeftmost ::
    GHC.Num.Num a =>
    Multilinear.Generic.Tensor a
    -> GHC.Base.String -> Multilinear.Generic.Tensor a
  {- Arity: 3, Strictness: <L,A><S,U><S,U>, Inline: [0],
     Unfolding: InlineRule (3, True, True)
                (\ @ a
                   (w :: GHC.Num.Num a)
                   (w1 :: Multilinear.Generic.Tensor a)
                   (w2 :: GHC.Base.String) ->
                 Multilinear.Generic.$w$cshiftLeftmost @ a w1 w2) -}
3435455de223a292a66afccee7caf4fd
  $fMultilinearTensora_$cshiftRight ::
    GHC.Num.Num a =>
    Multilinear.Generic.Tensor a
    -> GHC.Base.String -> Multilinear.Generic.Tensor a
  {- Arity: 3, Strictness: <L,A><S,U><L,U>, Inline: [0],
     Unfolding: InlineRule (3, True, True)
                (\ @ a
                   (w :: GHC.Num.Num a)
                   (w1 :: Multilinear.Generic.Tensor a)
                   (w2 :: GHC.Base.String) ->
                 Multilinear.Generic.$w$cshiftRight @ a w1 w2) -}
3435455de223a292a66afccee7caf4fd
  $fMultilinearTensora_$cshiftRightmost ::
    GHC.Num.Num a =>
    Multilinear.Generic.Tensor a
    -> GHC.Base.String -> Multilinear.Generic.Tensor a
  {- Arity: 3, Strictness: <L,A><S,U><S,U>, Inline: [0],
     Unfolding: InlineRule (3, True, True)
                (\ @ a
                   (w :: GHC.Num.Num a)
                   (w1 :: Multilinear.Generic.Tensor a)
                   (w2 :: GHC.Base.String) ->
                 Multilinear.Generic.$w$cshiftRightmost @ a w1 w2) -}
3435455de223a292a66afccee7caf4fd
  $fMultilinearTensora_$csize ::
    GHC.Num.Num a =>
    Multilinear.Generic.Tensor a -> GHC.Base.String -> GHC.Types.Int
  {- Arity: 3, Strictness: <L,A><S,1*U><S,U>, Inline: [0],
     Unfolding: InlineRule (3, True, True)
                (\ @ a
                   (w :: GHC.Num.Num a)
                   (w1 :: Multilinear.Generic.Tensor a)
                   (w2 :: GHC.Base.String) ->
                 Multilinear.Generic.$w$csize @ a w1 w2) -}
3435455de223a292a66afccee7caf4fd
  $fMultilinearTensora_$ctoBinary ::
    (GHC.Num.Num a, Data.Serialize.Serialize a) =>
    Multilinear.Generic.Tensor a
    -> Data.ByteString.Lazy.Internal.ByteString
  {- Arity: 3,
     Strictness: <L,A><L,U(C(U(1*U,C(C(U)))),C(C1(C1(C1(C1(C1(U)))))))><L,U>,
     Unfolding: InlineRule (3, True, False)
                (\ @ a
                   ($dNum :: GHC.Num.Num a)
                   ($dSerialize :: Data.Serialize.Serialize a)
                   (eta :: Multilinear.Generic.Tensor a) ->
                 Data.ByteString.Builder.toLazyByteString
                   (case (Multilinear.Generic.$fSerializeTensor_$cput
                            @ a
                            $dSerialize
                            eta)
                           `cast`
                         (Data.Serialize.Put.N:PutM[0] <()>_N) of wild { Data.Serialize.Put.PairS ds b ->
                    b })) -}
3435455de223a292a66afccee7caf4fd
  $fMultilinearTensora_$ctoJSON ::
    Data.Aeson.Types.ToJSON.ToJSON a =>
    Multilinear.Generic.Tensor a -> Data.Aeson.Types.Internal.Value
  {- Arity: 2, Strictness: <L,U(C(U),A,A,A)><S,1*U>m1 -}
3435455de223a292a66afccee7caf4fd
  $fMultilinearTensora_$ctoJSON1 ::
    (GHC.Num.Num a, Data.Aeson.Types.ToJSON.ToJSON a) =>
    Multilinear.Generic.Tensor a
    -> Data.ByteString.Lazy.Internal.ByteString
  {- Arity: 3, Strictness: <L,A><L,U(C(U),A,A,A)><L,1*U>,
     Unfolding: InlineRule (3, True, False)
                (\ @ a
                   ($dNum :: GHC.Num.Num a)
                   ($dToJSON :: Data.Aeson.Types.ToJSON.ToJSON a)
                   (eta :: Multilinear.Generic.Tensor a) ->
                 Data.ByteString.Builder.toLazyByteString
                   (Data.Aeson.Encoding.Builder.encodeToBuilder
                      (Multilinear.Generic.$fMultilinearTensora_$ctoJSON
                         @ a
                         $dToJSON
                         eta))) -}
3435455de223a292a66afccee7caf4fd
  $fMultilinearTensora_$ctranspose ::
    GHC.Num.Num a =>
    Multilinear.Generic.Tensor a -> Multilinear.Generic.Tensor a
  {- Arity: 2, Strictness: <L,A><S,1*U>, Inline: [0],
     Unfolding: InlineRule (2, True, True)
                (\ @ a (w :: GHC.Num.Num a) (w1 :: Multilinear.Generic.Tensor a) ->
                 Multilinear.Generic.$w$ctranspose @ a w1) -}
3435455de223a292a66afccee7caf4fd
  $fMultilinearTensora_$s$cfmap ::
    Multilinear.Index.Finite.Index
    -> Data.Vector.Vector a -> (a -> a) -> Multilinear.Generic.Tensor a
  {- Arity: 3, Strictness: <L,U><L,1*U(U,U,U)><L,C(U)>m2,
     Unfolding: (\ @ a
                   (sc :: Multilinear.Index.Finite.Index)
                   (sc1 :: Data.Vector.Vector a)
                   (sc2 :: a -> a) ->
                 Multilinear.Generic.SimpleFinite
                   @ a
                   sc
                   (case sc1 of v2 { Data.Vector.Vector ipv ipv1 ipv2 ->
                    case GHC.Magic.runRW#
                           @ ('GHC.Types.TupleRep
                                '['GHC.Types.TupleRep '[], 'GHC.Types.LiftedRep])
                           @ (# GHC.Prim.State# GHC.Prim.RealWorld, Data.Vector.Vector a #)
                           (\ (s1 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                            case GHC.Prim.newArray#
                                   @ a
                                   @ (Control.Monad.Primitive.PrimState
                                        (GHC.ST.ST GHC.Prim.RealWorld))
                                   ipv1
                                   (Data.Vector.Mutable.uninitialised @ a)
                                   s1
                                     `cast`
                                   (Nth:2
                                        (Nth:2
                                             (Trans
                                                  (<GHC.ST.STRep
                                                      GHC.Prim.RealWorld
                                                      (Data.Primitive.Array.MutableArray
                                                         (Control.Monad.Primitive.PrimState
                                                            (GHC.ST.ST GHC.Prim.RealWorld))
                                                         a)>_R
                                                   ->_R Sym (GHC.ST.N:ST[0]
                                                                 <GHC.Prim.RealWorld>_N
                                                                 <Data.Primitive.Array.MutableArray
                                                                    (Control.Monad.Primitive.PrimState
                                                                       (GHC.ST.ST
                                                                          GHC.Prim.RealWorld))
                                                                    a>_R))
                                                  (((GHC.Prim.State#
                                                       (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                 <GHC.Prim.RealWorld>_N)))_R
                                                    ->_R ((#,#)
                                                            <'GHC.Types.TupleRep '[]>_R
                                                            <'GHC.Types.LiftedRep>_R
                                                            (GHC.Prim.State#
                                                               (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                         <GHC.Prim.RealWorld>_N)))_R
                                                            <Data.Primitive.Array.MutableArray
                                                               (Control.Monad.Primitive.PrimState
                                                                  (GHC.ST.ST GHC.Prim.RealWorld))
                                                               a>_R)_R)
                                                   ->_R <GHC.ST.ST
                                                           GHC.Prim.RealWorld
                                                           (Data.Primitive.Array.MutableArray
                                                              (Control.Monad.Primitive.PrimState
                                                                 (GHC.ST.ST GHC.Prim.RealWorld))
                                                              a)>_R)))) of ds2 { (#,#) ipv3 ipv4 ->
                            letrec {
                              $s$wfoldlM'_loop :: GHC.Prim.State# GHC.Prim.RealWorld
                                                  -> GHC.Prim.Int#
                                                  -> GHC.Prim.Int#
                                                  -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                                        Data.Vector.Vector a #)
                                <join 3> {- Arity: 3, Strictness: <S,U><S,U><L,U> -}
                              = \ (sc3 :: GHC.Prim.State# GHC.Prim.RealWorld)
                                  (sc4 :: GHC.Prim.Int#)
                                  (sc5 :: GHC.Prim.Int#) ->
                                case GHC.Prim.tagToEnum#
                                       @ GHC.Types.Bool
                                       (GHC.Prim.>=# sc4 ipv1) of wild {
                                  GHC.Types.False
                                  -> case GHC.Prim.writeArray#
                                            @ (Control.Monad.Primitive.PrimState
                                                 (GHC.ST.ST GHC.Prim.RealWorld))
                                            @ a
                                            ipv4
                                            sc5
                                            (case GHC.Prim.indexArray#
                                                    @ a
                                                    ipv2
                                                    (GHC.Prim.+# ipv sc4) of ds3 { Unit# ipv5 ->
                                             sc2 ipv5 })
                                            sc3
                                              `cast`
                                            (Nth:2
                                                 (Nth:2
                                                      (Trans
                                                           (<GHC.ST.STRep GHC.Prim.RealWorld ()>_R
                                                            ->_R Sym (GHC.ST.N:ST[0]
                                                                          <GHC.Prim.RealWorld>_N
                                                                          <()>_R))
                                                           (((GHC.Prim.State#
                                                                (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                          <GHC.Prim.RealWorld>_N)))_R
                                                             ->_R ((#,#)
                                                                     <'GHC.Types.TupleRep '[]>_R
                                                                     <'GHC.Types.LiftedRep>_R
                                                                     (GHC.Prim.State#
                                                                        (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                  <GHC.Prim.RealWorld>_N)))_R
                                                                     <()>_R)_R)
                                                            ->_R <GHC.ST.ST
                                                                    GHC.Prim.RealWorld
                                                                    ()>_R)))) of s'# { DEFAULT ->
                                     $s$wfoldlM'_loop
                                       s'#
                                         `cast`
                                       (Nth:2
                                            (Nth:3
                                                 (Nth:2
                                                      (Trans
                                                           (((GHC.Prim.State#
                                                                (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                     <GHC.Prim.RealWorld>_N))_R
                                                             ->_R ((#,#)
                                                                     <'GHC.Types.TupleRep '[]>_R
                                                                     <'GHC.Types.LiftedRep>_R
                                                                     (GHC.Prim.State#
                                                                        (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                             <GHC.Prim.RealWorld>_N))_R
                                                                     <()>_R)_R)
                                                            ->_R <GHC.ST.ST
                                                                    GHC.Prim.RealWorld ()>_R)
                                                           (<GHC.ST.STRep GHC.Prim.RealWorld ()>_R
                                                            ->_R GHC.ST.N:ST[0]
                                                                     <GHC.Prim.RealWorld>_N
                                                                     <()>_R)))))
                                       (GHC.Prim.+# sc4 1#)
                                       (GHC.Prim.+# sc5 1#) }
                                  GHC.Types.True
                                  -> case GHC.Prim.unsafeFreezeArray#
                                            @ (Control.Monad.Primitive.PrimState
                                                 (GHC.ST.ST GHC.Prim.RealWorld))
                                            @ a
                                            ipv4
                                            sc3
                                              `cast`
                                            (Nth:2
                                                 (Nth:2
                                                      (Trans
                                                           (<GHC.ST.STRep
                                                               GHC.Prim.RealWorld
                                                               (Data.Primitive.Array.Array a)>_R
                                                            ->_R Sym (GHC.ST.N:ST[0]
                                                                          <GHC.Prim.RealWorld>_N
                                                                          <Data.Primitive.Array.Array
                                                                             a>_R))
                                                           (((GHC.Prim.State#
                                                                (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                          <GHC.Prim.RealWorld>_N)))_R
                                                             ->_R ((#,#)
                                                                     <'GHC.Types.TupleRep '[]>_R
                                                                     <'GHC.Types.LiftedRep>_R
                                                                     (GHC.Prim.State#
                                                                        (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                  <GHC.Prim.RealWorld>_N)))_R
                                                                     <Data.Primitive.Array.Array
                                                                        a>_R)_R)
                                                            ->_R <GHC.ST.ST
                                                                    GHC.Prim.RealWorld
                                                                    (Data.Primitive.Array.Array
                                                                       a)>_R)))) of ds1 { (#,#) ipv5 ipv6 ->
                                     (# ipv5
                                          `cast`
                                        (Nth:2
                                             (Nth:3
                                                  (Nth:2
                                                       (Trans
                                                            (((GHC.Prim.State#
                                                                 (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                      <GHC.Prim.RealWorld>_N))_R
                                                              ->_R ((#,#)
                                                                      <'GHC.Types.TupleRep '[]>_R
                                                                      <'GHC.Types.LiftedRep>_R
                                                                      (GHC.Prim.State#
                                                                         (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                              <GHC.Prim.RealWorld>_N))_R
                                                                      <Data.Primitive.Array.Array
                                                                         a>_R)_R)
                                                             ->_R <GHC.ST.ST
                                                                     GHC.Prim.RealWorld
                                                                     (Data.Primitive.Array.Array
                                                                        a)>_R)
                                                            (<GHC.ST.STRep
                                                                GHC.Prim.RealWorld
                                                                (Data.Primitive.Array.Array a)>_R
                                                             ->_R GHC.ST.N:ST[0]
                                                                      <GHC.Prim.RealWorld>_N
                                                                      <Data.Primitive.Array.Array
                                                                         a>_R))))),
                                        Data.Vector.Vector @ a 0# sc5 ipv6 #) } }
                            } in
                            $s$wfoldlM'_loop
                              ipv3
                                `cast`
                              (Nth:2
                                   (Nth:3
                                        (Nth:2
                                             (Trans
                                                  (((GHC.Prim.State#
                                                       (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                            <GHC.Prim.RealWorld>_N))_R
                                                    ->_R ((#,#)
                                                            <'GHC.Types.TupleRep '[]>_R
                                                            <'GHC.Types.LiftedRep>_R
                                                            (GHC.Prim.State#
                                                               (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                    <GHC.Prim.RealWorld>_N))_R
                                                            <Data.Primitive.Array.MutableArray
                                                               (Control.Monad.Primitive.PrimState
                                                                  (GHC.ST.ST GHC.Prim.RealWorld))
                                                               a>_R)_R)
                                                   ->_R <GHC.ST.ST
                                                           GHC.Prim.RealWorld
                                                           (Data.Primitive.Array.MutableArray
                                                              (Control.Monad.Primitive.PrimState
                                                                 (GHC.ST.ST GHC.Prim.RealWorld))
                                                              a)>_R)
                                                  (<GHC.ST.STRep
                                                      GHC.Prim.RealWorld
                                                      (Data.Primitive.Array.MutableArray
                                                         (Control.Monad.Primitive.PrimState
                                                            (GHC.ST.ST GHC.Prim.RealWorld))
                                                         a)>_R
                                                   ->_R GHC.ST.N:ST[0]
                                                            <GHC.Prim.RealWorld>_N
                                                            <Data.Primitive.Array.MutableArray
                                                               (Control.Monad.Primitive.PrimState
                                                                  (GHC.ST.ST GHC.Prim.RealWorld))
                                                               a>_R)))))
                              0#
                              0# }) of ds1 { (#,#) ipv3 ipv4 ->
                    ipv4 } })) -}
3435455de223a292a66afccee7caf4fd
  $fMultilinearTensora_$s$w$c$| ::
    [GHC.Types.Char]
    -> [GHC.Types.Char]
    -> Multilinear.Generic.Tensor a
    -> Multilinear.Generic.Tensor a
  {- Arity: 3, Strictness: <L,U><L,U><S,1*U> -}
3435455de223a292a66afccee7caf4fd
  $fMultilinearTensora_$s$w$cindices ::
    Multilinear.Index.Infinite.Index
    -> [Multilinear.Generic.Tensor a] -> [Multilinear.Index.TIndex]
  {- Arity: 2, Strictness: <L,1*U><L,1*U>m2 -}
3435455de223a292a66afccee7caf4fd
  $fMultilinearTensora_$s$w$cindices1 ::
    Multilinear.Index.Finite.Index
    -> Data.Vector.Vector (Multilinear.Generic.Tensor a)
    -> [Multilinear.Index.TIndex]
  {- Arity: 2, Strictness: <L,1*U><L,1*U(U,U,U)>m2 -}
3435455de223a292a66afccee7caf4fd
  $fNFDataTensor ::
    Control.DeepSeq.NFData a =>
    Control.DeepSeq.NFData (Multilinear.Generic.Tensor a)
  DFunId
  {- Arity: 2, HasNoCafRefs, Strictness: <L,C(U())><S,1*U>,
     Inline: (sat-args=0),
     Unfolding: InlineRule (1, False, True)
                Multilinear.Generic.$fNFDataTensor_$crnf
                  `cast`
                (forall (a :: <*>_N).
                 <Control.DeepSeq.NFData a>_R
                 ->_R Sym (Control.DeepSeq.N:NFData[0]
                               <Multilinear.Generic.Tensor a>_N)) -}
3435455de223a292a66afccee7caf4fd
  $fNFDataTensor_$crnf ::
    Control.DeepSeq.NFData a => Multilinear.Generic.Tensor a -> ()
  {- Arity: 2, HasNoCafRefs, Strictness: <L,C(U())><S,1*U> -}
3435455de223a292a66afccee7caf4fd
  $fNumTensor ::
    GHC.Num.Num a => GHC.Num.Num (Multilinear.Generic.Tensor a)
  DFunId
  {- Arity: 1,
     Strictness: <L,U(C(C(U)),C(C(U)),C(C(U)),A,C(U),C(U),C(U))>m,
     Inline: CONLIKE,
     Unfolding: DFun: @ a (v :: GHC.Num.Num a).
                  @ (Multilinear.Generic.Tensor a)
                  (Multilinear.Generic.dot_$c+ @ a v)
                  (Multilinear.Generic.$fNumTensor_$c- @ a v)
                  (Multilinear.Generic.dot_$c* @ a v)
                  (Multilinear.Generic.$fNumTensor_$cnegate @ a v)
                  (Multilinear.Generic.$fNumTensor_$cabs @ a v)
                  (Multilinear.Generic.$fNumTensor_$csignum @ a v)
                  (Multilinear.Generic.$fNumTensor_$cfromInteger @ a v) -}
3435455de223a292a66afccee7caf4fd
  $fNumTensor_$c- ::
    GHC.Num.Num a =>
    Multilinear.Generic.Tensor a
    -> Multilinear.Generic.Tensor a -> Multilinear.Generic.Tensor a
  {- Arity: 3, Strictness: <L,U(A,C(C(U)),A,A,A,A,A)><S,U><S,U>,
     Inline: (sat-args=2),
     Unfolding(loop-breaker): InlineRule (3, False, False)
                              (\ @ a
                                 ($dNum :: GHC.Num.Num a)
                                 (t1 :: Multilinear.Generic.Tensor a)
                                 (t2 :: Multilinear.Generic.Tensor a) ->
                               let {
                                 commonIndices :: [GHC.Base.String]
                                 = GHC.Base.build
                                     @ [GHC.Types.Char]
                                     (\ @ b
                                        (c :: [GHC.Types.Char] -> b -> b)[OneShot]
                                        (n :: b)[OneShot] ->
                                      GHC.Base.foldr
                                        @ Multilinear.Index.TIndex
                                        @ b
                                        (GHC.Base.mapFB
                                           @ [GHC.Types.Char]
                                           @ b
                                           @ Multilinear.Index.TIndex
                                           (GHC.List.filterFB
                                              @ [GHC.Types.Char]
                                              @ b
                                              c
                                              (let {
                                                 ds :: [GHC.Base.String]
                                                 = GHC.Base.build
                                                     @ [GHC.Types.Char]
                                                     (\ @ b1
                                                        (c1 :: [GHC.Types.Char]
                                                               -> b1 -> b1)[OneShot]
                                                        (n1 :: b1)[OneShot] ->
                                                      GHC.Base.foldr
                                                        @ Multilinear.Index.TIndex
                                                        @ b1
                                                        (GHC.Base.mapFB
                                                           @ [GHC.Types.Char]
                                                           @ b1
                                                           @ Multilinear.Index.TIndex
                                                           c1
                                                           Multilinear.Index.tIndexName)
                                                        n1
                                                        (Multilinear.Generic.$fMultilinearTensora_$cindices
                                                           @ a
                                                           $dNum
                                                           t2))
                                               } in
                                               \ (ds1 :: GHC.Base.String) ->
                                               GHC.List.elem
                                                 @ GHC.Base.String
                                                 GHC.Classes.$fEq[]_$s$fEq[]1
                                                 ds1
                                                 ds))
                                           Multilinear.Index.tIndexName)
                                        n
                                        (Multilinear.Generic.$fMultilinearTensora_$cindices
                                           @ a
                                           $dNum
                                           t1))
                               } in
                               Multilinear.Generic.mergeScalars
                                 @ a
                                 (Multilinear.Generic._elemByElem'
                                    @ a
                                    $dNum
                                    (GHC.Base.foldr
                                       @ GHC.Base.String
                                       @ (Multilinear.Generic.Tensor a
                                          -> Multilinear.Generic.Tensor a)
                                       (\ (ds :: GHC.Base.String)
                                          (ds1 :: Multilinear.Generic.Tensor a
                                                  -> Multilinear.Generic.Tensor a)[OneShot]
                                          (v :: Multilinear.Generic.Tensor a)[OneShot] ->
                                        case v of z { DEFAULT ->
                                        ds1
                                          (Multilinear.Generic.$fMultilinearTensora_$cshiftRightmost
                                             @ a
                                             $dNum
                                             z
                                             ds) })
                                       (GHC.Base.id @ (Multilinear.Generic.Tensor a))
                                       commonIndices
                                       t1)
                                    (GHC.Base.foldr
                                       @ GHC.Base.String
                                       @ (Multilinear.Generic.Tensor a
                                          -> Multilinear.Generic.Tensor a)
                                       (\ (ds :: GHC.Base.String)
                                          (ds1 :: Multilinear.Generic.Tensor a
                                                  -> Multilinear.Generic.Tensor a)[OneShot]
                                          (v :: Multilinear.Generic.Tensor a)[OneShot] ->
                                        case v of z { DEFAULT ->
                                        ds1
                                          (Multilinear.Generic.$fMultilinearTensora_$cshiftRightmost
                                             @ a
                                             $dNum
                                             z
                                             ds) })
                                       (GHC.Base.id @ (Multilinear.Generic.Tensor a))
                                       commonIndices
                                       t2)
                                    (GHC.Num.- @ a $dNum)
                                    (Multilinear.Generic.zipT
                                       @ a
                                       $dNum
                                       (Multilinear.Generic.$fNumTensor_$c- @ a $dNum)
                                       (Multilinear.Generic.$fMultilinearTensora_$c.- @ a $dNum)
                                       (Multilinear.Generic.$fMultilinearTensora_$c-. @ a $dNum)
                                       (GHC.Num.- @ a $dNum)))) -}
3435455de223a292a66afccee7caf4fd
  $fNumTensor_$cabs ::
    GHC.Num.Num a =>
    Multilinear.Generic.Tensor a -> Multilinear.Generic.Tensor a
  {- Arity: 2, Strictness: <L,1*U(A,A,A,A,1*C(U),A,A)><S,1*U>,
     Inline: (sat-args=1),
     Unfolding: InlineRule (2, False, False)
                (\ @ a
                   ($dNum :: GHC.Num.Num a)
                   (t :: Multilinear.Generic.Tensor a) ->
                 Multilinear.Generic.$fMultilinearTensora_$cfmap
                   @ a
                   @ a
                   (GHC.Num.abs @ a $dNum)
                   t) -}
3435455de223a292a66afccee7caf4fd
  $fNumTensor_$cfromInteger ::
    GHC.Num.Num a =>
    GHC.Integer.Type.Integer -> Multilinear.Generic.Tensor a
  {- Arity: 2, HasNoCafRefs,
     Strictness: <L,1*U(A,A,A,A,A,A,1*C1(U))><L,U>m1,
     Inline: (sat-args=1),
     Unfolding: InlineRule (2, False, False)
                (\ @ a ($dNum :: GHC.Num.Num a) (x :: GHC.Integer.Type.Integer) ->
                 Multilinear.Generic.Scalar
                   @ a
                   (GHC.Num.fromInteger @ a $dNum x)) -}
3435455de223a292a66afccee7caf4fd
  $fNumTensor_$cnegate ::
    GHC.Num.Num a =>
    Multilinear.Generic.Tensor a -> Multilinear.Generic.Tensor a
  {- Arity: 2, Strictness: <L,U(A,C(C(U)),A,A,A,A,1*C1(U))><S,U>,
     Inline: (sat-args=1),
     Unfolding: InlineRule (2, False, False)
                (\ @ a
                   ($dNum :: GHC.Num.Num a)
                   (x :: Multilinear.Generic.Tensor a) ->
                 Multilinear.Generic.$fNumTensor_$c-
                   @ a
                   $dNum
                   (Multilinear.Generic.Scalar @ a (GHC.Num.fromInteger @ a $dNum 0))
                   x) -}
3435455de223a292a66afccee7caf4fd
  $fNumTensor_$csignum ::
    GHC.Num.Num a =>
    Multilinear.Generic.Tensor a -> Multilinear.Generic.Tensor a
  {- Arity: 2, Strictness: <L,1*U(A,A,A,A,A,1*C(U),A)><S,1*U>,
     Inline: (sat-args=1),
     Unfolding: InlineRule (2, False, False)
                (\ @ a
                   ($dNum :: GHC.Num.Num a)
                   (t :: Multilinear.Generic.Tensor a) ->
                 Multilinear.Generic.$fMultilinearTensora_$cfmap
                   @ a
                   @ a
                   (GHC.Num.signum @ a $dNum)
                   t) -}
3435455de223a292a66afccee7caf4fd
  $fOrdTensor ::
    GHC.Classes.Ord a => GHC.Classes.Ord (Multilinear.Generic.Tensor a)
  DFunId
  {- Arity: 1, HasNoCafRefs,
     Strictness: <L,U(U(C(C1(U)),A),C(C1(U)),A,C(C1(U)),A,A,A,A)>m,
     Inline: CONLIKE,
     Unfolding: DFun: @ a (v :: GHC.Classes.Ord a).
                  @ (Multilinear.Generic.Tensor a)
                  (Multilinear.Generic.$fOrdTensor_$cp1Ord @ a v)
                  (Multilinear.Generic.$fOrdTensor_$ccompare @ a v)
                  (Multilinear.Generic.$fOrdTensor_$c< @ a v)
                  (Multilinear.Generic.$fOrdTensor_$c<= @ a v)
                  (Multilinear.Generic.$fOrdTensor_$c> @ a v)
                  (Multilinear.Generic.$fOrdTensor_$c>= @ a v)
                  (Multilinear.Generic.$fOrdTensor_$cmax @ a v)
                  (Multilinear.Generic.$fOrdTensor_$cmin @ a v) -}
3435455de223a292a66afccee7caf4fd
  $fOrdTensor_$c< ::
    GHC.Classes.Ord a =>
    Multilinear.Generic.Tensor a
    -> Multilinear.Generic.Tensor a -> GHC.Types.Bool
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,U(U(C(C1(U)),A),C(C1(U)),A,C(C1(U)),A,A,A,A)><L,U><L,U>,
     Unfolding: InlineRule (3, True, False)
                (\ @ a
                   ($dOrd :: GHC.Classes.Ord a)
                   (x :: Multilinear.Generic.Tensor a)
                   (y :: Multilinear.Generic.Tensor a) ->
                 case Multilinear.Generic.$fOrdTensor_$ccompare
                        @ a
                        $dOrd
                        x
                        y of wild {
                   DEFAULT -> GHC.Types.False GHC.Types.LT -> GHC.Types.True }) -}
3435455de223a292a66afccee7caf4fd
  $fOrdTensor_$c<= ::
    GHC.Classes.Ord a =>
    Multilinear.Generic.Tensor a
    -> Multilinear.Generic.Tensor a -> GHC.Types.Bool
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,U(U(C(C1(U)),A),C(C1(U)),A,C(C1(U)),A,A,A,A)><S,1*U><S,1*U>,
     Inline: (sat-args=2),
     Unfolding(loop-breaker): InlineRule (3, False, False)
                              (\ @ a ($dOrd :: GHC.Classes.Ord a) ->
                               let {
                                 $dOrd1 :: GHC.Classes.Ord (Multilinear.Generic.Tensor a)
                                 = Multilinear.Generic.$fOrdTensor @ a $dOrd
                               } in
                               \ (ds :: Multilinear.Generic.Tensor a)
                                 (ds1 :: Multilinear.Generic.Tensor a) ->
                               case ds of wild {
                                 DEFAULT
                                 -> case ds1 of wild1 {
                                      DEFAULT
                                      -> case wild of wild2 {
                                           DEFAULT
                                           -> case wild1 of wild3 {
                                                DEFAULT
                                                -> case wild2 of wild4 {
                                                     Multilinear.Generic.SimpleFinite ds2 ts1
                                                     -> case wild3 of wild5 {
                                                          Multilinear.Generic.SimpleFinite ds3 ts2
                                                          -> Data.Vector.$fOrdVector_$c<=
                                                               @ a
                                                               $dOrd
                                                               ts1
                                                               ts2
                                                          Multilinear.Generic.FiniteTensor ds3 ds4
                                                          -> GHC.Types.True
                                                          Multilinear.Generic.InfiniteTensor ds3 ds4
                                                          -> GHC.Types.True }
                                                     Multilinear.Generic.FiniteTensor ds2 ts1
                                                     -> case wild3 of wild5 {
                                                          Multilinear.Generic.SimpleFinite ds3 ds4
                                                          -> GHC.Types.False
                                                          Multilinear.Generic.FiniteTensor ds3 ts2
                                                          -> case (Data.Vector.Fusion.Bundle.Monadic.cmpBy
                                                                     @ Data.Vector.Fusion.Util.Id
                                                                     @ (Multilinear.Generic.Tensor
                                                                          a)
                                                                     @ (Multilinear.Generic.Tensor
                                                                          a)
                                                                     @ Data.Vector.Vector
                                                                     Data.Vector.Fusion.Util.$fMonadId
                                                                     (Multilinear.Generic.$fOrdTensor_$ccompare
                                                                        @ a
                                                                        $dOrd)
                                                                     (Data.Vector.Generic.stream
                                                                        @ Data.Vector.Vector
                                                                        @ (Multilinear.Generic.Tensor
                                                                             a)
                                                                        (Data.Vector.$fVectorVectora
                                                                           @ (Multilinear.Generic.Tensor
                                                                                a))
                                                                        ts1)
                                                                     (Data.Vector.Generic.stream
                                                                        @ Data.Vector.Vector
                                                                        @ (Multilinear.Generic.Tensor
                                                                             a)
                                                                        (Data.Vector.$fVectorVectora
                                                                           @ (Multilinear.Generic.Tensor
                                                                                a))
                                                                        ts2))
                                                                    `cast`
                                                                  (Data.Vector.Fusion.Util.N:Id[0]
                                                                       <GHC.Types.Ordering>_R) of wild6 {
                                                               DEFAULT -> GHC.Types.True
                                                               GHC.Types.GT -> GHC.Types.False }
                                                          Multilinear.Generic.InfiniteTensor ds3 ds4
                                                          -> GHC.Types.True }
                                                     Multilinear.Generic.InfiniteTensor ds2 ts1
                                                     -> case wild3 of wild5 {
                                                          DEFAULT -> GHC.Types.False
                                                          Multilinear.Generic.InfiniteTensor ds3 ts2
                                                          -> case GHC.Classes.$fOrd[]_$ccompare
                                                                    @ (Multilinear.Generic.Tensor a)
                                                                    $dOrd1
                                                                    ts1
                                                                    ts2 of wild6 {
                                                               DEFAULT -> GHC.Types.True
                                                               GHC.Types.GT -> GHC.Types.False } } }
                                                Multilinear.Generic.Scalar ds2 -> GHC.Types.False }
                                           Multilinear.Generic.Scalar x1
                                           -> case wild1 of wild3 {
                                                DEFAULT -> GHC.Types.True
                                                Multilinear.Generic.Scalar x2
                                                -> GHC.Classes.<= @ a $dOrd x1 x2 } }
                                      Multilinear.Generic.Err ds2 -> GHC.Types.False }
                                 Multilinear.Generic.Err msg1
                                 -> case ds1 of wild1 {
                                      DEFAULT -> GHC.Types.True
                                      Multilinear.Generic.Err msg2
                                      -> GHC.Classes.$fOrd[]_$s$c<=1 msg1 msg2 } }) -}
3435455de223a292a66afccee7caf4fd
  $fOrdTensor_$c> ::
    GHC.Classes.Ord a =>
    Multilinear.Generic.Tensor a
    -> Multilinear.Generic.Tensor a -> GHC.Types.Bool
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,U(U(C(C1(U)),A),C(C1(U)),A,C(C1(U)),A,A,A,A)><L,U><L,U>,
     Unfolding: InlineRule (3, True, False)
                (\ @ a
                   ($dOrd :: GHC.Classes.Ord a)
                   (x :: Multilinear.Generic.Tensor a)
                   (y :: Multilinear.Generic.Tensor a) ->
                 case Multilinear.Generic.$fOrdTensor_$ccompare
                        @ a
                        $dOrd
                        x
                        y of wild {
                   DEFAULT -> GHC.Types.False GHC.Types.GT -> GHC.Types.True }) -}
3435455de223a292a66afccee7caf4fd
  $fOrdTensor_$c>= ::
    GHC.Classes.Ord a =>
    Multilinear.Generic.Tensor a
    -> Multilinear.Generic.Tensor a -> GHC.Types.Bool
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,U(U(C(C1(U)),A),C(C1(U)),A,C(C1(U)),A,A,A,A)><L,U><L,U>,
     Unfolding: InlineRule (3, True, False)
                (\ @ a
                   ($dOrd :: GHC.Classes.Ord a)
                   (x :: Multilinear.Generic.Tensor a)
                   (y :: Multilinear.Generic.Tensor a) ->
                 case Multilinear.Generic.$fOrdTensor_$ccompare
                        @ a
                        $dOrd
                        x
                        y of wild {
                   DEFAULT -> GHC.Types.True GHC.Types.LT -> GHC.Types.False }) -}
3435455de223a292a66afccee7caf4fd
  $fOrdTensor_$ccompare ::
    GHC.Classes.Ord a =>
    Multilinear.Generic.Tensor a
    -> Multilinear.Generic.Tensor a -> GHC.Types.Ordering
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,U(U(C(C1(U)),A),C(C1(U)),A,C(C1(U)),A,A,A,A)><L,U><L,U> -}
3435455de223a292a66afccee7caf4fd
  $fOrdTensor_$cmax ::
    GHC.Classes.Ord a =>
    Multilinear.Generic.Tensor a
    -> Multilinear.Generic.Tensor a -> Multilinear.Generic.Tensor a
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,U(U(C(C1(U)),A),C(C1(U)),A,C(C1(U)),A,A,A,A)><S,U><S,U> -}
3435455de223a292a66afccee7caf4fd
  $fOrdTensor_$cmin ::
    GHC.Classes.Ord a =>
    Multilinear.Generic.Tensor a
    -> Multilinear.Generic.Tensor a -> Multilinear.Generic.Tensor a
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,U(U(C(C1(U)),A),C(C1(U)),A,C(C1(U)),A,A,A,A)><S,U><S,U> -}
3435455de223a292a66afccee7caf4fd
  $fOrdTensor_$cp1Ord ::
    GHC.Classes.Ord a => GHC.Classes.Eq (Multilinear.Generic.Tensor a)
  {- Arity: 1, HasNoCafRefs,
     Strictness: <L,1*U(1*U(C(C1(U)),A),A,A,A,A,A,A,A)>m,
     Unfolding: InlineRule (1, True, False)
                (\ @ a ($dOrd :: GHC.Classes.Ord a) ->
                 Multilinear.Generic.$fEqTensor
                   @ a
                   (GHC.Classes.$p1Ord @ a $dOrd)) -}
3435455de223a292a66afccee7caf4fd
  $fSerializeTensor ::
    Data.Serialize.Serialize a =>
    Data.Serialize.Serialize (Multilinear.Generic.Tensor a)
  DFunId
  {- Arity: 1,
     Strictness: <L,U(C(U(1*U,C(C(U)))),C(C1(C1(C1(C1(C1(U)))))))>m,
     Inline: CONLIKE,
     Unfolding: DFun: @ a (v :: Data.Serialize.Serialize a).
                  @ (Multilinear.Generic.Tensor a)
                  (Multilinear.Generic.$fSerializeTensor_$cput @ a v)
                  (Multilinear.Generic.$fSerializeTensor1 @ a v)
                    `cast`
                  (Sym (Data.Serialize.Get.N:Get[0]
                            <Multilinear.Generic.Tensor a>_R)) -}
3435455de223a292a66afccee7caf4fd
  $fSerializeTensor1 ::
    Data.Serialize.Serialize a =>
    forall r.
    Data.Serialize.Get.Input
    -> Data.Serialize.Get.Buffer
    -> Data.Serialize.Get.More
    -> GHC.Types.Int
    -> Data.Serialize.Get.Failure r
    -> Data.Serialize.Get.Success (Multilinear.Generic.Tensor a) r
    -> Data.Serialize.Get.Result r
  {- Arity: 7,
     Strictness: <L,U(A,C(C1(C1(C1(C1(C1(U)))))))><S(SLSS),1*U(U,U,U,U)><L,U><L,U><L,U(U)><L,U><L,C(C1(C1(C1(C1(U)))))>,
     Inline: [0],
     Unfolding: InlineRule (7, True, False)
                (\ @ a
                   (w :: Data.Serialize.Serialize a)
                   @ r
                   (w1 :: Data.Serialize.Get.Input)
                   (w2 :: Data.Serialize.Get.Buffer)
                   (w3 :: Data.Serialize.Get.More)
                   (w4 :: GHC.Types.Int)
                   (w5 :: Data.Serialize.Get.Failure r)
                   (w6 :: Data.Serialize.Get.Success
                            (Multilinear.Generic.Tensor a) r) ->
                 case w1 of ww { Data.ByteString.Internal.PS ww1 ww2 ww3 ww4 ->
                 Multilinear.Generic.$w$cget
                   @ a
                   w
                   @ r
                   ww1
                   ww2
                   ww3
                   ww4
                   w2
                   w3
                   w4
                   w5
                   w6 }) -}
3435455de223a292a66afccee7caf4fd
  $fSerializeTensor_$cput ::
    Data.Serialize.Serialize a =>
    Data.Serialize.Put.Putter (Multilinear.Generic.Tensor a)
  {- Arity: 1,
     Strictness: <L,U(C(U(1*U,C(C(U)))),C(C1(C1(C1(C1(C1(U)))))))> -}
3435455de223a292a66afccee7caf4fd
  $fShowTensor ::
    (GHC.Show.Show a, GHC.Num.Num a) =>
    GHC.Show.Show (Multilinear.Generic.Tensor a)
  DFunId
  {- Arity: 2, Strictness: <L,U(A,C(U),A)><L,A>m, Inline: CONLIKE,
     Unfolding: DFun: @ a (v :: GHC.Show.Show a) (v1 :: GHC.Num.Num a).
                  @ (Multilinear.Generic.Tensor a)
                  (Multilinear.Generic.$fShowTensor_$cshowsPrec @ a v v1)
                  (Multilinear.Generic.$fShowTensor_$cshow @ a v v1)
                  (Multilinear.Generic.$fShowTensor_$cshowList @ a v v1) -}
3435455de223a292a66afccee7caf4fd
  $fShowTensor_$cshow ::
    (GHC.Show.Show a, GHC.Num.Num a) =>
    Multilinear.Generic.Tensor a -> GHC.Base.String
  {- Arity: 3, Strictness: <L,U(A,C(U),A)><L,A><S,1*U>, Inline: [0],
     Unfolding: InlineRule (3, True, True)
                (\ @ a
                   (w :: GHC.Show.Show a)
                   (w1 :: GHC.Num.Num a)
                   (w2 :: Multilinear.Generic.Tensor a) ->
                 Multilinear.Generic.$w$cshow @ a w w2) -}
3435455de223a292a66afccee7caf4fd
  $fShowTensor_$cshowList ::
    (GHC.Show.Show a, GHC.Num.Num a) =>
    [Multilinear.Generic.Tensor a] -> GHC.Show.ShowS
  {- Arity: 4, Strictness: <L,U(A,C(U),A)><L,A><S,1*U><L,U>,
     Inline: [0],
     Unfolding: InlineRule (4, True, True)
                (\ @ a
                   (w :: GHC.Show.Show a)
                   (w1 :: GHC.Num.Num a)
                   (w2 :: [Multilinear.Generic.Tensor a])
                   (w3 :: GHC.Base.String) ->
                 Multilinear.Generic.$w$cshowList @ a w w2 w3) -}
3435455de223a292a66afccee7caf4fd
  $fShowTensor_$cshowsPrec ::
    (GHC.Show.Show a, GHC.Num.Num a) =>
    GHC.Types.Int -> Multilinear.Generic.Tensor a -> GHC.Show.ShowS
  {- Arity: 5, Strictness: <L,U(A,C(U),A)><L,A><L,A><S,1*U><L,1*U>,
     Unfolding: InlineRule (5, True, False)
                (\ @ a
                   ($dShow :: GHC.Show.Show a)
                   ($dNum :: GHC.Num.Num a)
                   (ds :: GHC.Types.Int)
                   (x :: Multilinear.Generic.Tensor a)
                   (s :: GHC.Base.String) ->
                 GHC.Base.augment
                   @ GHC.Types.Char
                   (\ @ b
                      (c :: GHC.Types.Char -> b -> b)[OneShot]
                      (n :: b)[OneShot] ->
                    GHC.Base.foldr
                      @ GHC.Types.Char
                      @ b
                      c
                      n
                      (Multilinear.Generic.$fShowTensor_$cshow @ a $dShow $dNum x))
                   s) -}
3435455de223a292a66afccee7caf4fd
  $fToJSONTensor ::
    Data.Aeson.Types.ToJSON.ToJSON a =>
    Data.Aeson.Types.ToJSON.ToJSON (Multilinear.Generic.Tensor a)
  DFunId
  {- Arity: 1, Strictness: <L,U(C(U),A,A,A)>m, Inline: CONLIKE,
     Unfolding: DFun: @ a (v :: Data.Aeson.Types.ToJSON.ToJSON a).
                  @ (Multilinear.Generic.Tensor a)
                  (Multilinear.Generic.$fMultilinearTensora_$ctoJSON @ a v)
                  (Multilinear.Generic.$fToJSONTensor_$ctoEncoding @ a v)
                  (Multilinear.Generic.$fToJSONTensor_$ctoJSONList @ a v)
                  (Multilinear.Generic.$fToJSONTensor_$ctoEncodingList @ a v) -}
3435455de223a292a66afccee7caf4fd
  $fToJSONTensor_$ctoEncoding ::
    Data.Aeson.Types.ToJSON.ToJSON a =>
    Multilinear.Generic.Tensor a
    -> Data.Aeson.Encoding.Internal.Encoding
  {- Arity: 2, Strictness: <L,U(C(U),A,A,A)><S,1*U>,
     Inline: (sat-args=0),
     Unfolding: InlineRule (1, False, False)
                (\ @ a
                   ($dToJSON :: Data.Aeson.Types.ToJSON.ToJSON a)
                   (x :: Multilinear.Generic.Tensor a) ->
                 Data.Aeson.Encoding.Builder.encodeToBuilder
                   (Multilinear.Generic.$fMultilinearTensora_$ctoJSON @ a $dToJSON x))
                  `cast`
                (forall (a :: <*>_N).
                 <Data.Aeson.Types.ToJSON.ToJSON a>_R
                 ->_R <Multilinear.Generic.Tensor a>_R
                 ->_R Sym (Data.Aeson.Encoding.Internal.N:Encoding'[0]
                               <Data.Aeson.Types.Internal.Value>_P)) -}
3435455de223a292a66afccee7caf4fd
  $fToJSONTensor_$ctoEncodingList ::
    Data.Aeson.Types.ToJSON.ToJSON a =>
    [Multilinear.Generic.Tensor a]
    -> Data.Aeson.Encoding.Internal.Encoding
  {- Arity: 2, Strictness: <L,U(C(U),A,A,A)><S,1*U>,
     Inline: (sat-args=0),
     Unfolding: InlineRule (1, False, False)
                (\ @ a ($dToJSON :: Data.Aeson.Types.ToJSON.ToJSON a) ->
                 Data.Aeson.Encoding.Internal.list
                   @ (Multilinear.Generic.Tensor a)
                   (Multilinear.Generic.$fToJSONTensor_$ctoEncoding @ a $dToJSON)) -}
3435455de223a292a66afccee7caf4fd
  $fToJSONTensor_$ctoJSONList ::
    Data.Aeson.Types.ToJSON.ToJSON a =>
    [Multilinear.Generic.Tensor a] -> Data.Aeson.Types.Internal.Value
  {- Arity: 2, Strictness: <L,U(C(U),A,A,A)><S,1*U>m2,
     Inline: (sat-args=0),
     Unfolding: InlineRule (1, False, False)
                (\ @ a ($dToJSON :: Data.Aeson.Types.ToJSON.ToJSON a) ->
                 let {
                   f9 :: Multilinear.Generic.Tensor a
                         -> Data.Aeson.Types.Internal.Value
                     {- Arity: 1 -}
                   = Multilinear.Generic.$fMultilinearTensora_$ctoJSON @ a $dToJSON
                 } in
                 \ (x :: [Multilinear.Generic.Tensor a]) ->
                 Data.Aeson.Types.Internal.$WArray
                   (Data.Vector.Generic.new
                      @ Data.Vector.Vector
                      @ Data.Aeson.Types.Internal.Value
                      (Data.Vector.$fVectorVectora @ Data.Aeson.Types.Internal.Value)
                      (Data.Vector.Generic.New.unstream
                         @ Data.Vector.Vector
                         @ Data.Aeson.Types.Internal.Value
                         (Data.Vector.$fVectorVectora @ Data.Aeson.Types.Internal.Value)
                         (Data.Vector.Fusion.Bundle.Monadic.unsafeFromList
                            @ Data.Vector.Fusion.Util.Id
                            @ Data.Aeson.Types.Internal.Value
                            @ Data.Vector.Vector
                            Data.Vector.Fusion.Util.$fMonadId
                            Data.Vector.Fusion.Bundle.Size.Unknown
                            (GHC.Base.build
                               @ Data.Aeson.Types.Internal.Value
                               (\ @ b1
                                  (c :: Data.Aeson.Types.Internal.Value -> b1 -> b1)[OneShot]
                                  (n1 :: b1)[OneShot] ->
                                GHC.Base.foldr
                                  @ (Multilinear.Generic.Tensor a)
                                  @ b1
                                  (GHC.Base.mapFB
                                     @ Data.Aeson.Types.Internal.Value
                                     @ b1
                                     @ (Multilinear.Generic.Tensor a)
                                     c
                                     f9)
                                  n1
                                  x)))))) -}
ede8bb03eb10970a2c43018ad71f6bac
  $s$WSSym1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Multilinear.Generic.$s$WSSym2) -}
7b27c4b32bcac60bc3b9e7a19c11a72c
  $s$WSSym10 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Multilinear.Generic.$s$WSSym11) -}
80ccf4cf34c838c2006ddcd5b85a32ae
  $s$WSSym11 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("tensorsFinite"#) -}
99e36dec463309440f8d9e7f3bd033dd
  $s$WSSym13 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Multilinear.Generic.$s$WSSym14) -}
1b2c4e7e0ab193e39ab5d20c183a2661
  $s$WSSym14 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("tensorInfiniteIndex"#) -}
ddf1eff263e8f6f49a805e14f52d41a8
  $s$WSSym16 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Multilinear.Generic.$s$WSSym17) -}
a547f8d5ffa4e45dabd817da93652f7f
  $s$WSSym17 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("tensorsInfinite"#) -}
46e262fa154c55dcc2b8b408cdadca84
  $s$WSSym19 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Multilinear.Generic.$s$WSSym20) -}
89de83ff1af9a6e3d9d543ea18e0f8da
  $s$WSSym2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("scalarVal"#) -}
f6f6aeaca27319e324569f06cd42dcf7
  $s$WSSym20 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("errMessage"#) -}
9f9a66f0aa8a081cf9f97a1798c396ec
  $s$WSSym4 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Multilinear.Generic.$s$WSSym5) -}
0aa8a3ce7a1204e04f619ada759ed2a3
  $s$WSSym5 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("tensorFiniteIndex"#) -}
955f827901cf9c69c492fcd303fac05c
  $s$WSSym7 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Multilinear.Generic.$s$WSSym8) -}
69cb196be771798607de0dfff9a51a06
  $s$WSSym8 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("tensorScalars"#) -}
9b21503e320bed6d249e84c6de7fe1ab
  $s$fConstructorMetaMetaCons ::
    GHC.Generics.Constructor
      ('GHC.Generics.MetaCons
         "Err" 'GHC.Generics.PrefixI 'GHC.Types.True)
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ GHC.Generics.Meta
                  @ ('GHC.Generics.MetaCons
                       "Err" 'GHC.Generics.PrefixI 'GHC.Types.True)
                  (\ @ k
                     @ t :: GHC.Generics.Meta -> (k -> *) -> k -> *
                     @ f1 :: k -> *
                     @ a :: k
                     (ds :: t ('GHC.Generics.MetaCons
                                 "Err" 'GHC.Generics.PrefixI 'GHC.Types.True) f1 a) ->
                   Multilinear.Generic.$s$fConstructorMetaMetaCons1)
                  (\ @ k
                     @ t :: GHC.Generics.Meta -> (k -> *) -> k -> *
                     @ f1 :: k -> *
                     @ a :: k
                     (ds :: t ('GHC.Generics.MetaCons
                                 "Err" 'GHC.Generics.PrefixI 'GHC.Types.True) f1 a) ->
                   GHC.Generics.Prefix)
                  (\ @ k
                     @ t :: GHC.Generics.Meta -> (k -> *) -> k -> *
                     @ f1 :: k -> *
                     @ a :: k
                     (ds :: t ('GHC.Generics.MetaCons
                                 "Err" 'GHC.Generics.PrefixI 'GHC.Types.True) f1 a) ->
                   GHC.Types.True) -}
c423ea3dcbdb81c8169ae46b4a64cd35
  $s$fConstructorMetaMetaCons1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Multilinear.Generic.$s$fConstructorMetaMetaCons2) -}
9aa05b0905ef603faefc69acfb8e864b
  $s$fConstructorMetaMetaCons10 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Multilinear.Generic.$s$fConstructorMetaMetaCons11) -}
c2383726a27fd3023a07f89df79ab0d1
  $s$fConstructorMetaMetaCons11 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("SimpleFinite"#) -}
52a030e6f448a944a7cc8b97e7f71e7f
  $s$fConstructorMetaMetaCons12 ::
    GHC.Generics.Constructor
      ('GHC.Generics.MetaCons
         "Scalar" 'GHC.Generics.PrefixI 'GHC.Types.True)
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ GHC.Generics.Meta
                  @ ('GHC.Generics.MetaCons
                       "Scalar" 'GHC.Generics.PrefixI 'GHC.Types.True)
                  (\ @ k
                     @ t :: GHC.Generics.Meta -> (k -> *) -> k -> *
                     @ f1 :: k -> *
                     @ a :: k
                     (ds :: t ('GHC.Generics.MetaCons
                                 "Scalar" 'GHC.Generics.PrefixI 'GHC.Types.True) f1 a) ->
                   Multilinear.Generic.$s$fConstructorMetaMetaCons13)
                  (\ @ k
                     @ t :: GHC.Generics.Meta -> (k -> *) -> k -> *
                     @ f1 :: k -> *
                     @ a :: k
                     (ds :: t ('GHC.Generics.MetaCons
                                 "Scalar" 'GHC.Generics.PrefixI 'GHC.Types.True) f1 a) ->
                   GHC.Generics.Prefix)
                  (\ @ k
                     @ t :: GHC.Generics.Meta -> (k -> *) -> k -> *
                     @ f1 :: k -> *
                     @ a :: k
                     (ds :: t ('GHC.Generics.MetaCons
                                 "Scalar" 'GHC.Generics.PrefixI 'GHC.Types.True) f1 a) ->
                   GHC.Types.True) -}
1c0186ebbc708d8b19d8d3e98f299a0b
  $s$fConstructorMetaMetaCons13 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Multilinear.Generic.$s$fConstructorMetaMetaCons14) -}
12990ae508fa2ca37822633d51075734
  $s$fConstructorMetaMetaCons14 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Scalar"#) -}
28b7bb1851b7610275ae8f709a70e964
  $s$fConstructorMetaMetaCons2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Err"#) -}
db8aef41d3d744916b12dc340fafe828
  $s$fConstructorMetaMetaCons3 ::
    GHC.Generics.Constructor
      ('GHC.Generics.MetaCons
         "InfiniteTensor" 'GHC.Generics.PrefixI 'GHC.Types.True)
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ GHC.Generics.Meta
                  @ ('GHC.Generics.MetaCons
                       "InfiniteTensor" 'GHC.Generics.PrefixI 'GHC.Types.True)
                  (\ @ k
                     @ t :: GHC.Generics.Meta -> (k -> *) -> k -> *
                     @ f1 :: k -> *
                     @ a :: k
                     (ds :: t ('GHC.Generics.MetaCons
                                 "InfiniteTensor" 'GHC.Generics.PrefixI 'GHC.Types.True) f1 a) ->
                   Multilinear.Generic.$s$fConstructorMetaMetaCons4)
                  (\ @ k
                     @ t :: GHC.Generics.Meta -> (k -> *) -> k -> *
                     @ f1 :: k -> *
                     @ a :: k
                     (ds :: t ('GHC.Generics.MetaCons
                                 "InfiniteTensor" 'GHC.Generics.PrefixI 'GHC.Types.True) f1 a) ->
                   GHC.Generics.Prefix)
                  (\ @ k
                     @ t :: GHC.Generics.Meta -> (k -> *) -> k -> *
                     @ f1 :: k -> *
                     @ a :: k
                     (ds :: t ('GHC.Generics.MetaCons
                                 "InfiniteTensor" 'GHC.Generics.PrefixI 'GHC.Types.True) f1 a) ->
                   GHC.Types.True) -}
c100415391fe0a5d98a8c7a69f1dd4f7
  $s$fConstructorMetaMetaCons4 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Multilinear.Generic.$s$fConstructorMetaMetaCons5) -}
241f9e3004681a7e3f9009809c0beb25
  $s$fConstructorMetaMetaCons5 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("InfiniteTensor"#) -}
b71388ded20ead8501293d1aabcc393f
  $s$fConstructorMetaMetaCons6 ::
    GHC.Generics.Constructor
      ('GHC.Generics.MetaCons
         "FiniteTensor" 'GHC.Generics.PrefixI 'GHC.Types.True)
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ GHC.Generics.Meta
                  @ ('GHC.Generics.MetaCons
                       "FiniteTensor" 'GHC.Generics.PrefixI 'GHC.Types.True)
                  (\ @ k
                     @ t :: GHC.Generics.Meta -> (k -> *) -> k -> *
                     @ f1 :: k -> *
                     @ a :: k
                     (ds :: t ('GHC.Generics.MetaCons
                                 "FiniteTensor" 'GHC.Generics.PrefixI 'GHC.Types.True) f1 a) ->
                   Multilinear.Generic.$s$fConstructorMetaMetaCons7)
                  (\ @ k
                     @ t :: GHC.Generics.Meta -> (k -> *) -> k -> *
                     @ f1 :: k -> *
                     @ a :: k
                     (ds :: t ('GHC.Generics.MetaCons
                                 "FiniteTensor" 'GHC.Generics.PrefixI 'GHC.Types.True) f1 a) ->
                   GHC.Generics.Prefix)
                  (\ @ k
                     @ t :: GHC.Generics.Meta -> (k -> *) -> k -> *
                     @ f1 :: k -> *
                     @ a :: k
                     (ds :: t ('GHC.Generics.MetaCons
                                 "FiniteTensor" 'GHC.Generics.PrefixI 'GHC.Types.True) f1 a) ->
                   GHC.Types.True) -}
6ad79652f2d8743be37cde9a8cbb49f5
  $s$fConstructorMetaMetaCons7 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Multilinear.Generic.$s$fConstructorMetaMetaCons8) -}
38fb3721ec8d195ac5b62876732ff6b2
  $s$fConstructorMetaMetaCons8 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("FiniteTensor"#) -}
3426dba7b71e2a188f94a8971ebaf5c3
  $s$fConstructorMetaMetaCons9 ::
    GHC.Generics.Constructor
      ('GHC.Generics.MetaCons
         "SimpleFinite" 'GHC.Generics.PrefixI 'GHC.Types.True)
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ GHC.Generics.Meta
                  @ ('GHC.Generics.MetaCons
                       "SimpleFinite" 'GHC.Generics.PrefixI 'GHC.Types.True)
                  (\ @ k
                     @ t :: GHC.Generics.Meta -> (k -> *) -> k -> *
                     @ f1 :: k -> *
                     @ a :: k
                     (ds :: t ('GHC.Generics.MetaCons
                                 "SimpleFinite" 'GHC.Generics.PrefixI 'GHC.Types.True) f1 a) ->
                   Multilinear.Generic.$s$fConstructorMetaMetaCons10)
                  (\ @ k
                     @ t :: GHC.Generics.Meta -> (k -> *) -> k -> *
                     @ f1 :: k -> *
                     @ a :: k
                     (ds :: t ('GHC.Generics.MetaCons
                                 "SimpleFinite" 'GHC.Generics.PrefixI 'GHC.Types.True) f1 a) ->
                   GHC.Generics.Prefix)
                  (\ @ k
                     @ t :: GHC.Generics.Meta -> (k -> *) -> k -> *
                     @ f1 :: k -> *
                     @ a :: k
                     (ds :: t ('GHC.Generics.MetaCons
                                 "SimpleFinite" 'GHC.Generics.PrefixI 'GHC.Types.True) f1 a) ->
                   GHC.Types.True) -}
150d81504232fe90414df2d6a48e8038
  $s$fFromJSON[] ::
    Data.Aeson.Types.FromJSON.FromJSON [GHC.Types.Char]
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ [GHC.Types.Char]
                  Data.Aeson.Types.FromJSON.$fFromJSONChar_$cparseJSONList
                  (Data.Aeson.Types.FromJSON.$fFromJSONKey[]_$cparseJSONList
                     @ GHC.Types.Char
                     Data.Aeson.Types.FromJSON.$fFromJSONChar) -}
2014b8aa1f1acaaad832678b57b165ed
  $s$fSelectorMetaMetaSel ::
    GHC.Generics.Selector
      ('GHC.Generics.MetaSel
         ('GHC.Base.Just "errMessage")
         'GHC.Generics.NoSourceUnpackedness
         'GHC.Generics.NoSourceStrictness
         'GHC.Generics.DecidedLazy)
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ GHC.Generics.Meta
                  @ ('GHC.Generics.MetaSel
                       ('GHC.Base.Just "errMessage")
                       'GHC.Generics.NoSourceUnpackedness
                       'GHC.Generics.NoSourceStrictness
                       'GHC.Generics.DecidedLazy)
                  (\ @ k
                     @ t :: GHC.Generics.Meta -> (k -> *) -> k -> *
                     @ f :: k -> *
                     @ a :: k
                     (eta :: t ('GHC.Generics.MetaSel
                                  ('GHC.Base.Just "errMessage")
                                  'GHC.Generics.NoSourceUnpackedness
                                  'GHC.Generics.NoSourceStrictness
                                  'GHC.Generics.DecidedLazy) f a) ->
                   Multilinear.Generic.$s$WSSym19)
                  (\ @ k
                     @ t :: GHC.Generics.Meta -> (k -> *) -> k -> *
                     @ f :: k -> *
                     @ a :: k
                     (ds1 :: t ('GHC.Generics.MetaSel
                                  ('GHC.Base.Just "errMessage")
                                  'GHC.Generics.NoSourceUnpackedness
                                  'GHC.Generics.NoSourceStrictness
                                  'GHC.Generics.DecidedLazy) f a) ->
                   GHC.Generics.NoSourceUnpackedness)
                  (\ @ k
                     @ t :: GHC.Generics.Meta -> (k -> *) -> k -> *
                     @ f :: k -> *
                     @ a :: k
                     (ds1 :: t ('GHC.Generics.MetaSel
                                  ('GHC.Base.Just "errMessage")
                                  'GHC.Generics.NoSourceUnpackedness
                                  'GHC.Generics.NoSourceStrictness
                                  'GHC.Generics.DecidedLazy) f a) ->
                   GHC.Generics.NoSourceStrictness)
                  (\ @ k
                     @ t :: GHC.Generics.Meta -> (k -> *) -> k -> *
                     @ f :: k -> *
                     @ a :: k
                     (ds1 :: t ('GHC.Generics.MetaSel
                                  ('GHC.Base.Just "errMessage")
                                  'GHC.Generics.NoSourceUnpackedness
                                  'GHC.Generics.NoSourceStrictness
                                  'GHC.Generics.DecidedLazy) f a) ->
                   GHC.Generics.DecidedLazy) -}
a11dcedd21bccd9dc70bdbb93d623db1
  $s$fSelectorMetaMetaSel1 ::
    GHC.Generics.Selector
      ('GHC.Generics.MetaSel
         ('GHC.Base.Just "tensorsInfinite")
         'GHC.Generics.NoSourceUnpackedness
         'GHC.Generics.NoSourceStrictness
         'GHC.Generics.DecidedLazy)
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ GHC.Generics.Meta
                  @ ('GHC.Generics.MetaSel
                       ('GHC.Base.Just "tensorsInfinite")
                       'GHC.Generics.NoSourceUnpackedness
                       'GHC.Generics.NoSourceStrictness
                       'GHC.Generics.DecidedLazy)
                  (\ @ k
                     @ t :: GHC.Generics.Meta -> (k -> *) -> k -> *
                     @ f :: k -> *
                     @ a :: k
                     (eta :: t ('GHC.Generics.MetaSel
                                  ('GHC.Base.Just "tensorsInfinite")
                                  'GHC.Generics.NoSourceUnpackedness
                                  'GHC.Generics.NoSourceStrictness
                                  'GHC.Generics.DecidedLazy) f a) ->
                   Multilinear.Generic.$s$WSSym16)
                  (\ @ k
                     @ t :: GHC.Generics.Meta -> (k -> *) -> k -> *
                     @ f :: k -> *
                     @ a :: k
                     (ds1 :: t ('GHC.Generics.MetaSel
                                  ('GHC.Base.Just "tensorsInfinite")
                                  'GHC.Generics.NoSourceUnpackedness
                                  'GHC.Generics.NoSourceStrictness
                                  'GHC.Generics.DecidedLazy) f a) ->
                   GHC.Generics.NoSourceUnpackedness)
                  (\ @ k
                     @ t :: GHC.Generics.Meta -> (k -> *) -> k -> *
                     @ f :: k -> *
                     @ a :: k
                     (ds1 :: t ('GHC.Generics.MetaSel
                                  ('GHC.Base.Just "tensorsInfinite")
                                  'GHC.Generics.NoSourceUnpackedness
                                  'GHC.Generics.NoSourceStrictness
                                  'GHC.Generics.DecidedLazy) f a) ->
                   GHC.Generics.NoSourceStrictness)
                  (\ @ k
                     @ t :: GHC.Generics.Meta -> (k -> *) -> k -> *
                     @ f :: k -> *
                     @ a :: k
                     (ds1 :: t ('GHC.Generics.MetaSel
                                  ('GHC.Base.Just "tensorsInfinite")
                                  'GHC.Generics.NoSourceUnpackedness
                                  'GHC.Generics.NoSourceStrictness
                                  'GHC.Generics.DecidedLazy) f a) ->
                   GHC.Generics.DecidedLazy) -}
2ede0398ec89d40397ed9622377b4218
  $s$fSelectorMetaMetaSel2 ::
    GHC.Generics.Selector
      ('GHC.Generics.MetaSel
         ('GHC.Base.Just "tensorInfiniteIndex")
         'GHC.Generics.NoSourceUnpackedness
         'GHC.Generics.NoSourceStrictness
         'GHC.Generics.DecidedLazy)
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ GHC.Generics.Meta
                  @ ('GHC.Generics.MetaSel
                       ('GHC.Base.Just "tensorInfiniteIndex")
                       'GHC.Generics.NoSourceUnpackedness
                       'GHC.Generics.NoSourceStrictness
                       'GHC.Generics.DecidedLazy)
                  (\ @ k
                     @ t :: GHC.Generics.Meta -> (k -> *) -> k -> *
                     @ f :: k -> *
                     @ a :: k
                     (eta :: t ('GHC.Generics.MetaSel
                                  ('GHC.Base.Just "tensorInfiniteIndex")
                                  'GHC.Generics.NoSourceUnpackedness
                                  'GHC.Generics.NoSourceStrictness
                                  'GHC.Generics.DecidedLazy) f a) ->
                   Multilinear.Generic.$s$WSSym13)
                  (\ @ k
                     @ t :: GHC.Generics.Meta -> (k -> *) -> k -> *
                     @ f :: k -> *
                     @ a :: k
                     (ds1 :: t ('GHC.Generics.MetaSel
                                  ('GHC.Base.Just "tensorInfiniteIndex")
                                  'GHC.Generics.NoSourceUnpackedness
                                  'GHC.Generics.NoSourceStrictness
                                  'GHC.Generics.DecidedLazy) f a) ->
                   GHC.Generics.NoSourceUnpackedness)
                  (\ @ k
                     @ t :: GHC.Generics.Meta -> (k -> *) -> k -> *
                     @ f :: k -> *
                     @ a :: k
                     (ds1 :: t ('GHC.Generics.MetaSel
                                  ('GHC.Base.Just "tensorInfiniteIndex")
                                  'GHC.Generics.NoSourceUnpackedness
                                  'GHC.Generics.NoSourceStrictness
                                  'GHC.Generics.DecidedLazy) f a) ->
                   GHC.Generics.NoSourceStrictness)
                  (\ @ k
                     @ t :: GHC.Generics.Meta -> (k -> *) -> k -> *
                     @ f :: k -> *
                     @ a :: k
                     (ds1 :: t ('GHC.Generics.MetaSel
                                  ('GHC.Base.Just "tensorInfiniteIndex")
                                  'GHC.Generics.NoSourceUnpackedness
                                  'GHC.Generics.NoSourceStrictness
                                  'GHC.Generics.DecidedLazy) f a) ->
                   GHC.Generics.DecidedLazy) -}
abbb587ddf6a4042f8716baf92430ebd
  $s$fSelectorMetaMetaSel3 ::
    GHC.Generics.Selector
      ('GHC.Generics.MetaSel
         ('GHC.Base.Just "tensorsFinite")
         'GHC.Generics.NoSourceUnpackedness
         'GHC.Generics.NoSourceStrictness
         'GHC.Generics.DecidedLazy)
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ GHC.Generics.Meta
                  @ ('GHC.Generics.MetaSel
                       ('GHC.Base.Just "tensorsFinite")
                       'GHC.Generics.NoSourceUnpackedness
                       'GHC.Generics.NoSourceStrictness
                       'GHC.Generics.DecidedLazy)
                  (\ @ k
                     @ t :: GHC.Generics.Meta -> (k -> *) -> k -> *
                     @ f :: k -> *
                     @ a :: k
                     (eta :: t ('GHC.Generics.MetaSel
                                  ('GHC.Base.Just "tensorsFinite")
                                  'GHC.Generics.NoSourceUnpackedness
                                  'GHC.Generics.NoSourceStrictness
                                  'GHC.Generics.DecidedLazy) f a) ->
                   Multilinear.Generic.$s$WSSym10)
                  (\ @ k
                     @ t :: GHC.Generics.Meta -> (k -> *) -> k -> *
                     @ f :: k -> *
                     @ a :: k
                     (ds1 :: t ('GHC.Generics.MetaSel
                                  ('GHC.Base.Just "tensorsFinite")
                                  'GHC.Generics.NoSourceUnpackedness
                                  'GHC.Generics.NoSourceStrictness
                                  'GHC.Generics.DecidedLazy) f a) ->
                   GHC.Generics.NoSourceUnpackedness)
                  (\ @ k
                     @ t :: GHC.Generics.Meta -> (k -> *) -> k -> *
                     @ f :: k -> *
                     @ a :: k
                     (ds1 :: t ('GHC.Generics.MetaSel
                                  ('GHC.Base.Just "tensorsFinite")
                                  'GHC.Generics.NoSourceUnpackedness
                                  'GHC.Generics.NoSourceStrictness
                                  'GHC.Generics.DecidedLazy) f a) ->
                   GHC.Generics.NoSourceStrictness)
                  (\ @ k
                     @ t :: GHC.Generics.Meta -> (k -> *) -> k -> *
                     @ f :: k -> *
                     @ a :: k
                     (ds1 :: t ('GHC.Generics.MetaSel
                                  ('GHC.Base.Just "tensorsFinite")
                                  'GHC.Generics.NoSourceUnpackedness
                                  'GHC.Generics.NoSourceStrictness
                                  'GHC.Generics.DecidedLazy) f a) ->
                   GHC.Generics.DecidedLazy) -}
bcf45a1a87bdd836b9b00dadb69a60a5
  $s$fSelectorMetaMetaSel4 ::
    GHC.Generics.Selector
      ('GHC.Generics.MetaSel
         ('GHC.Base.Just "tensorScalars")
         'GHC.Generics.NoSourceUnpackedness
         'GHC.Generics.NoSourceStrictness
         'GHC.Generics.DecidedLazy)
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ GHC.Generics.Meta
                  @ ('GHC.Generics.MetaSel
                       ('GHC.Base.Just "tensorScalars")
                       'GHC.Generics.NoSourceUnpackedness
                       'GHC.Generics.NoSourceStrictness
                       'GHC.Generics.DecidedLazy)
                  (\ @ k
                     @ t :: GHC.Generics.Meta -> (k -> *) -> k -> *
                     @ f :: k -> *
                     @ a :: k
                     (eta :: t ('GHC.Generics.MetaSel
                                  ('GHC.Base.Just "tensorScalars")
                                  'GHC.Generics.NoSourceUnpackedness
                                  'GHC.Generics.NoSourceStrictness
                                  'GHC.Generics.DecidedLazy) f a) ->
                   Multilinear.Generic.$s$WSSym7)
                  (\ @ k
                     @ t :: GHC.Generics.Meta -> (k -> *) -> k -> *
                     @ f :: k -> *
                     @ a :: k
                     (ds1 :: t ('GHC.Generics.MetaSel
                                  ('GHC.Base.Just "tensorScalars")
                                  'GHC.Generics.NoSourceUnpackedness
                                  'GHC.Generics.NoSourceStrictness
                                  'GHC.Generics.DecidedLazy) f a) ->
                   GHC.Generics.NoSourceUnpackedness)
                  (\ @ k
                     @ t :: GHC.Generics.Meta -> (k -> *) -> k -> *
                     @ f :: k -> *
                     @ a :: k
                     (ds1 :: t ('GHC.Generics.MetaSel
                                  ('GHC.Base.Just "tensorScalars")
                                  'GHC.Generics.NoSourceUnpackedness
                                  'GHC.Generics.NoSourceStrictness
                                  'GHC.Generics.DecidedLazy) f a) ->
                   GHC.Generics.NoSourceStrictness)
                  (\ @ k
                     @ t :: GHC.Generics.Meta -> (k -> *) -> k -> *
                     @ f :: k -> *
                     @ a :: k
                     (ds1 :: t ('GHC.Generics.MetaSel
                                  ('GHC.Base.Just "tensorScalars")
                                  'GHC.Generics.NoSourceUnpackedness
                                  'GHC.Generics.NoSourceStrictness
                                  'GHC.Generics.DecidedLazy) f a) ->
                   GHC.Generics.DecidedLazy) -}
2a15af370a2bfa3557b9f236a49e3537
  $s$fSelectorMetaMetaSel5 ::
    GHC.Generics.Selector
      ('GHC.Generics.MetaSel
         ('GHC.Base.Just "tensorFiniteIndex")
         'GHC.Generics.NoSourceUnpackedness
         'GHC.Generics.NoSourceStrictness
         'GHC.Generics.DecidedLazy)
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ GHC.Generics.Meta
                  @ ('GHC.Generics.MetaSel
                       ('GHC.Base.Just "tensorFiniteIndex")
                       'GHC.Generics.NoSourceUnpackedness
                       'GHC.Generics.NoSourceStrictness
                       'GHC.Generics.DecidedLazy)
                  (\ @ k
                     @ t :: GHC.Generics.Meta -> (k -> *) -> k -> *
                     @ f :: k -> *
                     @ a :: k
                     (eta :: t ('GHC.Generics.MetaSel
                                  ('GHC.Base.Just "tensorFiniteIndex")
                                  'GHC.Generics.NoSourceUnpackedness
                                  'GHC.Generics.NoSourceStrictness
                                  'GHC.Generics.DecidedLazy) f a) ->
                   Multilinear.Generic.$s$WSSym4)
                  (\ @ k
                     @ t :: GHC.Generics.Meta -> (k -> *) -> k -> *
                     @ f :: k -> *
                     @ a :: k
                     (ds1 :: t ('GHC.Generics.MetaSel
                                  ('GHC.Base.Just "tensorFiniteIndex")
                                  'GHC.Generics.NoSourceUnpackedness
                                  'GHC.Generics.NoSourceStrictness
                                  'GHC.Generics.DecidedLazy) f a) ->
                   GHC.Generics.NoSourceUnpackedness)
                  (\ @ k
                     @ t :: GHC.Generics.Meta -> (k -> *) -> k -> *
                     @ f :: k -> *
                     @ a :: k
                     (ds1 :: t ('GHC.Generics.MetaSel
                                  ('GHC.Base.Just "tensorFiniteIndex")
                                  'GHC.Generics.NoSourceUnpackedness
                                  'GHC.Generics.NoSourceStrictness
                                  'GHC.Generics.DecidedLazy) f a) ->
                   GHC.Generics.NoSourceStrictness)
                  (\ @ k
                     @ t :: GHC.Generics.Meta -> (k -> *) -> k -> *
                     @ f :: k -> *
                     @ a :: k
                     (ds1 :: t ('GHC.Generics.MetaSel
                                  ('GHC.Base.Just "tensorFiniteIndex")
                                  'GHC.Generics.NoSourceUnpackedness
                                  'GHC.Generics.NoSourceStrictness
                                  'GHC.Generics.DecidedLazy) f a) ->
                   GHC.Generics.DecidedLazy) -}
1487b2659a02405b8da00e64eb1fb51e
  $s$fSelectorMetaMetaSel6 ::
    GHC.Generics.Selector
      ('GHC.Generics.MetaSel
         ('GHC.Base.Just "scalarVal")
         'GHC.Generics.NoSourceUnpackedness
         'GHC.Generics.NoSourceStrictness
         'GHC.Generics.DecidedLazy)
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ GHC.Generics.Meta
                  @ ('GHC.Generics.MetaSel
                       ('GHC.Base.Just "scalarVal")
                       'GHC.Generics.NoSourceUnpackedness
                       'GHC.Generics.NoSourceStrictness
                       'GHC.Generics.DecidedLazy)
                  (\ @ k
                     @ t :: GHC.Generics.Meta -> (k -> *) -> k -> *
                     @ f :: k -> *
                     @ a :: k
                     (eta :: t ('GHC.Generics.MetaSel
                                  ('GHC.Base.Just "scalarVal")
                                  'GHC.Generics.NoSourceUnpackedness
                                  'GHC.Generics.NoSourceStrictness
                                  'GHC.Generics.DecidedLazy) f a) ->
                   Multilinear.Generic.$s$WSSym1)
                  (\ @ k
                     @ t :: GHC.Generics.Meta -> (k -> *) -> k -> *
                     @ f :: k -> *
                     @ a :: k
                     (ds1 :: t ('GHC.Generics.MetaSel
                                  ('GHC.Base.Just "scalarVal")
                                  'GHC.Generics.NoSourceUnpackedness
                                  'GHC.Generics.NoSourceStrictness
                                  'GHC.Generics.DecidedLazy) f a) ->
                   GHC.Generics.NoSourceUnpackedness)
                  (\ @ k
                     @ t :: GHC.Generics.Meta -> (k -> *) -> k -> *
                     @ f :: k -> *
                     @ a :: k
                     (ds1 :: t ('GHC.Generics.MetaSel
                                  ('GHC.Base.Just "scalarVal")
                                  'GHC.Generics.NoSourceUnpackedness
                                  'GHC.Generics.NoSourceStrictness
                                  'GHC.Generics.DecidedLazy) f a) ->
                   GHC.Generics.NoSourceStrictness)
                  (\ @ k
                     @ t :: GHC.Generics.Meta -> (k -> *) -> k -> *
                     @ f :: k -> *
                     @ a :: k
                     (ds1 :: t ('GHC.Generics.MetaSel
                                  ('GHC.Base.Just "scalarVal")
                                  'GHC.Generics.NoSourceUnpackedness
                                  'GHC.Generics.NoSourceStrictness
                                  'GHC.Generics.DecidedLazy) f a) ->
                   GHC.Generics.DecidedLazy) -}
bf676197d6908110a69cdee12d97c1d1
  $tc'Err :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   1963516476474454595##
                   4576454096677540858##
                   Multilinear.Generic.$trModule
                   Multilinear.Generic.$tc'Err2
                   1#
                   Multilinear.Generic.$tc'Err1) -}
569cf3af0c4fa6494271f4a65e665dd3
  $tc'Err1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
1039449aa08596082a65249477653db1
  $tc'Err2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Multilinear.Generic.$tc'Err3) -}
9427932e4510eca356edcafb482b43e6
  $tc'Err3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Err"#) -}
851b325328d9f18a7bd99714bab37e4a
  $tc'FiniteTensor :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   7758093626395805837##
                   12001447158850790610##
                   Multilinear.Generic.$trModule
                   Multilinear.Generic.$tc'FiniteTensor2
                   1#
                   Multilinear.Generic.$tc'FiniteTensor1) -}
863bfb87e0401b57b2edf81e89728afe
  $tc'FiniteTensor1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
97fffbd50b2ce620d8d3a0fdfef8fdb8
  $tc'FiniteTensor2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Multilinear.Generic.$tc'FiniteTensor3) -}
1e851f73da08596dd34845dd6af4f61a
  $tc'FiniteTensor3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'FiniteTensor"#) -}
490405afde97ba5250c04260cd52e10f
  $tc'InfiniteTensor :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   740301108945413275##
                   13903810680752549909##
                   Multilinear.Generic.$trModule
                   Multilinear.Generic.$tc'InfiniteTensor2
                   1#
                   Multilinear.Generic.$tc'InfiniteTensor1) -}
a472b78235b1c8cdea40ca12b2118f06
  $tc'InfiniteTensor1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
0b53b31604a4613417fd6eb3e10e6ca8
  $tc'InfiniteTensor2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Multilinear.Generic.$tc'InfiniteTensor3) -}
b8a2f3070f1d5c34ecea3477e9013baa
  $tc'InfiniteTensor3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'InfiniteTensor"#) -}
44196d08e23864ad1b82caf0a502249d
  $tc'Scalar :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   13747371015800476797##
                   5437695278280203454##
                   Multilinear.Generic.$trModule
                   Multilinear.Generic.$tc'Scalar2
                   1#
                   Multilinear.Generic.$tc'Scalar1) -}
a678e4df2aed9f43cb9f06bd3c4630aa
  $tc'Scalar1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
c3483733f62af98a95ebe07a1ba41ad2
  $tc'Scalar2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Multilinear.Generic.$tc'Scalar3) -}
a6fa0d2768743c303ac863103f576584
  $tc'Scalar3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Scalar"#) -}
2febb4d911a2124960ab9f7a8b24f8f9
  $tc'SimpleFinite :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   16671508413083863819##
                   13597405064163617469##
                   Multilinear.Generic.$trModule
                   Multilinear.Generic.$tc'SimpleFinite2
                   1#
                   Multilinear.Generic.$tc'SimpleFinite1) -}
1321eebc237f2440afd77a9524fe1fc7
  $tc'SimpleFinite1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
8babb425b7a246cb72d15bbe051d488b
  $tc'SimpleFinite2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Multilinear.Generic.$tc'SimpleFinite3) -}
b16588439b276fadf7fb48ef41a97f86
  $tc'SimpleFinite3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'SimpleFinite"#) -}
624b12893262691ebb7263bff1663ccd
  $tcTensor :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   7966991142364853196##
                   7449668093321317776##
                   Multilinear.Generic.$trModule
                   Multilinear.Generic.$tcTensor1
                   0#
                   GHC.Types.krep$*Arr*) -}
e3ce1292c8274d0e3493eceafd77bd25
  $tcTensor1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Multilinear.Generic.$tcTensor2) -}
e9266c704dffa3196a8a5794e0cfb5d7
  $tcTensor2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Tensor"#) -}
1b7f4291fbad63a8dcd8c449c69cdf21
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module
                   Multilinear.Generic.$trModule3
                   Multilinear.Generic.$trModule1) -}
48bbeca69c186df9bb6f3b2b7d6896de
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Multilinear.Generic.$trModule2) -}
ed3023e50bc91bb9484184e951261635
  $trModule2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Multilinear.Generic"#) -}
0dd155aa4cc845b6b12c134a1b744dc1
  $trModule3 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Multilinear.Generic.$trModule4) -}
0bab633cd3e4702c98dd37886bde0a25
  $trModule4 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("Multilinear-0.8.0.0-4dpV53DlxV5EwwV6FZreVP"#) -}
3435455de223a292a66afccee7caf4fd
  $w$c$| ::
    Multilinear.Generic.Tensor a
    -> (GHC.Base.String, GHC.Base.String)
    -> Multilinear.Generic.Tensor a
  {- Arity: 2, Strictness: <S,1*U><L,1*U(U,U)>, Inline: [0],
     Unfolding: <stable> (\ @ a
                            (w :: Multilinear.Generic.Tensor a)
                            (w1 :: (GHC.Base.String, GHC.Base.String)) ->
                          case w of wild {
                            Multilinear.Generic.Scalar x -> Multilinear.Generic.Scalar @ a x
                            Multilinear.Generic.SimpleFinite ds ts
                            -> case ds of wild1 {
                                 Multilinear.Index.Finite.Covariant isize ds1
                                 -> case w1 of wild2 { (,) ds2 ds3 ->
                                    case ds3 of wild3 {
                                      [] -> wild
                                      : d ds4
                                      -> Multilinear.Generic.SimpleFinite
                                           @ a
                                           (Multilinear.Index.Finite.Covariant
                                              isize
                                              (GHC.Types.:
                                                 @ GHC.Types.Char
                                                 d
                                                 (GHC.Types.[] @ GHC.Types.Char)))
                                           ts } }
                                 Multilinear.Index.Finite.Contravariant isize ds1
                                 -> case w1 of wild2 { (,) ds2 ds3 ->
                                    case ds2 of wild3 {
                                      [] -> wild
                                      : u ds4
                                      -> Multilinear.Generic.SimpleFinite
                                           @ a
                                           (Multilinear.Index.Finite.Contravariant
                                              isize
                                              (GHC.Types.:
                                                 @ GHC.Types.Char
                                                 u
                                                 (GHC.Types.[] @ GHC.Types.Char)))
                                           ts } }
                                 Multilinear.Index.Finite.Indifferent ipv ipv1 -> wild }
                            Multilinear.Generic.FiniteTensor ds ts
                            -> case ds of wild1 {
                                 Multilinear.Index.Finite.Covariant isize ds1
                                 -> case w1 of wild2 { (,) us ds2 ->
                                    case ds2 of wild3 {
                                      [] -> wild
                                      : d ds3
                                      -> Multilinear.Generic.FiniteTensor
                                           @ a
                                           (Multilinear.Index.Finite.Covariant
                                              isize
                                              (GHC.Types.:
                                                 @ GHC.Types.Char
                                                 d
                                                 (GHC.Types.[] @ GHC.Types.Char)))
                                           (case ts of v2 { Data.Vector.Vector ipv ipv1 ipv2 ->
                                            case GHC.Magic.runRW#
                                                   @ ('GHC.Types.TupleRep
                                                        '['GHC.Types.TupleRep '[],
                                                          'GHC.Types.LiftedRep])
                                                   @ (# GHC.Prim.State# GHC.Prim.RealWorld,
                                                        Data.Vector.Vector
                                                          (Multilinear.Generic.Tensor a) #)
                                                   (\ (s1 :: GHC.Prim.State#
                                                               GHC.Prim.RealWorld)[OneShot] ->
                                                    case GHC.Prim.newArray#
                                                           @ (Multilinear.Generic.Tensor a)
                                                           @ (Control.Monad.Primitive.PrimState
                                                                (GHC.ST.ST GHC.Prim.RealWorld))
                                                           ipv1
                                                           (Data.Vector.Mutable.uninitialised
                                                              @ (Multilinear.Generic.Tensor a))
                                                           s1
                                                             `cast`
                                                           (Nth:2
                                                                (Nth:2
                                                                     (Trans
                                                                          (<GHC.ST.STRep
                                                                              GHC.Prim.RealWorld
                                                                              (Data.Primitive.Array.MutableArray
                                                                                 (Control.Monad.Primitive.PrimState
                                                                                    (GHC.ST.ST
                                                                                       GHC.Prim.RealWorld))
                                                                                 (Multilinear.Generic.Tensor
                                                                                    a))>_R
                                                                           ->_R Sym (GHC.ST.N:ST[0]
                                                                                         <GHC.Prim.RealWorld>_N
                                                                                         <Data.Primitive.Array.MutableArray
                                                                                            (Control.Monad.Primitive.PrimState
                                                                                               (GHC.ST.ST
                                                                                                  GHC.Prim.RealWorld))
                                                                                            (Multilinear.Generic.Tensor
                                                                                               a)>_R))
                                                                          (((GHC.Prim.State#
                                                                               (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                         <GHC.Prim.RealWorld>_N)))_R
                                                                            ->_R ((#,#)
                                                                                    <'GHC.Types.TupleRep
                                                                                       '[]>_R
                                                                                    <'GHC.Types.LiftedRep>_R
                                                                                    (GHC.Prim.State#
                                                                                       (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                                 <GHC.Prim.RealWorld>_N)))_R
                                                                                    <Data.Primitive.Array.MutableArray
                                                                                       (Control.Monad.Primitive.PrimState
                                                                                          (GHC.ST.ST
                                                                                             GHC.Prim.RealWorld))
                                                                                       (Multilinear.Generic.Tensor
                                                                                          a)>_R)_R)
                                                                           ->_R <GHC.ST.ST
                                                                                   GHC.Prim.RealWorld
                                                                                   (Data.Primitive.Array.MutableArray
                                                                                      (Control.Monad.Primitive.PrimState
                                                                                         (GHC.ST.ST
                                                                                            GHC.Prim.RealWorld))
                                                                                      (Multilinear.Generic.Tensor
                                                                                         a))>_R)))) of ds4 { (#,#) ipv3 ipv4 ->
                                                    letrec {
                                                      foldlM'_loop :: GHC.Types.SPEC
                                                                      -> GHC.Types.Int
                                                                      -> GHC.Types.Int
                                                                      -> GHC.ST.ST
                                                                           GHC.Prim.RealWorld
                                                                           GHC.Types.Int
                                                        {- Arity: 3 -}
                                                      = \ (ds5 :: GHC.Types.SPEC)
                                                          (z :: GHC.Types.Int)
                                                          (s7 :: GHC.Types.Int) ->
                                                        case ds5 of ds6 { DEFAULT ->
                                                        case z of z1 { GHC.Types.I# ipv6 ->
                                                        (\ (s8 :: GHC.Prim.State#
                                                                    GHC.Prim.RealWorld) ->
                                                         case s7 of wild4 { GHC.Types.I# x ->
                                                         case GHC.Prim.tagToEnum#
                                                                @ GHC.Types.Bool
                                                                (GHC.Prim.>=# x ipv1) of wild5 {
                                                           GHC.Types.False
                                                           -> case GHC.Prim.indexArray#
                                                                     @ (Multilinear.Generic.Tensor
                                                                          a)
                                                                     ipv2
                                                                     (GHC.Prim.+#
                                                                        ipv
                                                                        x) of ds7 { Unit# ipv5 ->
                                                              case GHC.Prim.writeArray#
                                                                     @ (Control.Monad.Primitive.PrimState
                                                                          (GHC.ST.ST
                                                                             GHC.Prim.RealWorld))
                                                                     @ (Multilinear.Generic.Tensor
                                                                          a)
                                                                     ipv4
                                                                     ipv6
                                                                     (Multilinear.Generic.$fMultilinearTensora_$s$w$c$|
                                                                        @ a
                                                                        us
                                                                        ds3
                                                                        ipv5)
                                                                     s8
                                                                       `cast`
                                                                     (Nth:2
                                                                          (Nth:2
                                                                               (Trans
                                                                                    (<GHC.ST.STRep
                                                                                        GHC.Prim.RealWorld
                                                                                        ()>_R
                                                                                     ->_R Sym (GHC.ST.N:ST[0]
                                                                                                   <GHC.Prim.RealWorld>_N
                                                                                                   <()>_R))
                                                                                    (((GHC.Prim.State#
                                                                                         (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                                   <GHC.Prim.RealWorld>_N)))_R
                                                                                      ->_R ((#,#)
                                                                                              <'GHC.Types.TupleRep
                                                                                                 '[]>_R
                                                                                              <'GHC.Types.LiftedRep>_R
                                                                                              (GHC.Prim.State#
                                                                                                 (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                                           <GHC.Prim.RealWorld>_N)))_R
                                                                                              <()>_R)_R)
                                                                                     ->_R <GHC.ST.ST
                                                                                             GHC.Prim.RealWorld
                                                                                             ()>_R)))) of s'# { DEFAULT ->
                                                              (foldlM'_loop
                                                                 GHC.Types.SPEC
                                                                 (GHC.Types.I#
                                                                    (GHC.Prim.+# ipv6 1#))
                                                                 (GHC.Types.I# (GHC.Prim.+# x 1#)))
                                                                `cast`
                                                              (GHC.ST.N:ST[0]
                                                                   <GHC.Prim.RealWorld>_N
                                                                   <GHC.Types.Int>_R)
                                                                s'#
                                                                  `cast`
                                                                (Nth:2
                                                                     (Nth:3
                                                                          (Nth:2
                                                                               (Trans
                                                                                    (((GHC.Prim.State#
                                                                                         (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                              <GHC.Prim.RealWorld>_N))_R
                                                                                      ->_R ((#,#)
                                                                                              <'GHC.Types.TupleRep
                                                                                                 '[]>_R
                                                                                              <'GHC.Types.LiftedRep>_R
                                                                                              (GHC.Prim.State#
                                                                                                 (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                                      <GHC.Prim.RealWorld>_N))_R
                                                                                              <()>_R)_R)
                                                                                     ->_R <GHC.ST.ST
                                                                                             GHC.Prim.RealWorld
                                                                                             ()>_R)
                                                                                    (<GHC.ST.STRep
                                                                                        GHC.Prim.RealWorld
                                                                                        ()>_R
                                                                                     ->_R GHC.ST.N:ST[0]
                                                                                              <GHC.Prim.RealWorld>_N
                                                                                              <()>_R))))) } }
                                                           GHC.Types.True -> (# s8, z1 #) } })
                                                          `cast`
                                                        (Sym (GHC.ST.N:ST[0]
                                                                  <GHC.Prim.RealWorld>_N
                                                                  <GHC.Types.Int>_R)) } }
                                                    } in
                                                    case (foldlM'_loop
                                                            GHC.Types.SPEC
                                                            (GHC.Types.I# 0#)
                                                            (GHC.Types.I# 0#))
                                                           `cast`
                                                         (GHC.ST.N:ST[0]
                                                              <GHC.Prim.RealWorld>_N
                                                              <GHC.Types.Int>_R)
                                                           ipv3
                                                             `cast`
                                                           (Nth:2
                                                                (Nth:3
                                                                     (Nth:2
                                                                          (Trans
                                                                               (((GHC.Prim.State#
                                                                                    (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                         <GHC.Prim.RealWorld>_N))_R
                                                                                 ->_R ((#,#)
                                                                                         <'GHC.Types.TupleRep
                                                                                            '[]>_R
                                                                                         <'GHC.Types.LiftedRep>_R
                                                                                         (GHC.Prim.State#
                                                                                            (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                                 <GHC.Prim.RealWorld>_N))_R
                                                                                         <Data.Primitive.Array.MutableArray
                                                                                            (Control.Monad.Primitive.PrimState
                                                                                               (GHC.ST.ST
                                                                                                  GHC.Prim.RealWorld))
                                                                                            (Multilinear.Generic.Tensor
                                                                                               a)>_R)_R)
                                                                                ->_R <GHC.ST.ST
                                                                                        GHC.Prim.RealWorld
                                                                                        (Data.Primitive.Array.MutableArray
                                                                                           (Control.Monad.Primitive.PrimState
                                                                                              (GHC.ST.ST
                                                                                                 GHC.Prim.RealWorld))
                                                                                           (Multilinear.Generic.Tensor
                                                                                              a))>_R)
                                                                               (<GHC.ST.STRep
                                                                                   GHC.Prim.RealWorld
                                                                                   (Data.Primitive.Array.MutableArray
                                                                                      (Control.Monad.Primitive.PrimState
                                                                                         (GHC.ST.ST
                                                                                            GHC.Prim.RealWorld))
                                                                                      (Multilinear.Generic.Tensor
                                                                                         a))>_R
                                                                                ->_R GHC.ST.N:ST[0]
                                                                                         <GHC.Prim.RealWorld>_N
                                                                                         <Data.Primitive.Array.MutableArray
                                                                                            (Control.Monad.Primitive.PrimState
                                                                                               (GHC.ST.ST
                                                                                                  GHC.Prim.RealWorld))
                                                                                            (Multilinear.Generic.Tensor
                                                                                               a)>_R))))) of ds5 { (#,#) ipv6 ipv7 ->
                                                    case ipv7 of dt { GHC.Types.I# dt1 ->
                                                    case GHC.Prim.unsafeFreezeArray#
                                                           @ (Control.Monad.Primitive.PrimState
                                                                (GHC.ST.ST GHC.Prim.RealWorld))
                                                           @ (Multilinear.Generic.Tensor a)
                                                           ipv4
                                                           ipv6
                                                             `cast`
                                                           (Nth:2
                                                                (Nth:2
                                                                     (Trans
                                                                          (<GHC.ST.STRep
                                                                              GHC.Prim.RealWorld
                                                                              (Data.Primitive.Array.Array
                                                                                 (Multilinear.Generic.Tensor
                                                                                    a))>_R
                                                                           ->_R Sym (GHC.ST.N:ST[0]
                                                                                         <GHC.Prim.RealWorld>_N
                                                                                         <Data.Primitive.Array.Array
                                                                                            (Multilinear.Generic.Tensor
                                                                                               a)>_R))
                                                                          (((GHC.Prim.State#
                                                                               (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                         <GHC.Prim.RealWorld>_N)))_R
                                                                            ->_R ((#,#)
                                                                                    <'GHC.Types.TupleRep
                                                                                       '[]>_R
                                                                                    <'GHC.Types.LiftedRep>_R
                                                                                    (GHC.Prim.State#
                                                                                       (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                                 <GHC.Prim.RealWorld>_N)))_R
                                                                                    <Data.Primitive.Array.Array
                                                                                       (Multilinear.Generic.Tensor
                                                                                          a)>_R)_R)
                                                                           ->_R <GHC.ST.ST
                                                                                   GHC.Prim.RealWorld
                                                                                   (Data.Primitive.Array.Array
                                                                                      (Multilinear.Generic.Tensor
                                                                                         a))>_R)))) of ds6 { (#,#) ipv5 ipv9 ->
                                                    (# ipv5
                                                         `cast`
                                                       (Nth:2
                                                            (Nth:3
                                                                 (Nth:2
                                                                      (Trans
                                                                           (((GHC.Prim.State#
                                                                                (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                     <GHC.Prim.RealWorld>_N))_R
                                                                             ->_R ((#,#)
                                                                                     <'GHC.Types.TupleRep
                                                                                        '[]>_R
                                                                                     <'GHC.Types.LiftedRep>_R
                                                                                     (GHC.Prim.State#
                                                                                        (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                             <GHC.Prim.RealWorld>_N))_R
                                                                                     <Data.Primitive.Array.Array
                                                                                        (Multilinear.Generic.Tensor
                                                                                           a)>_R)_R)
                                                                            ->_R <GHC.ST.ST
                                                                                    GHC.Prim.RealWorld
                                                                                    (Data.Primitive.Array.Array
                                                                                       (Multilinear.Generic.Tensor
                                                                                          a))>_R)
                                                                           (<GHC.ST.STRep
                                                                               GHC.Prim.RealWorld
                                                                               (Data.Primitive.Array.Array
                                                                                  (Multilinear.Generic.Tensor
                                                                                     a))>_R
                                                                            ->_R GHC.ST.N:ST[0]
                                                                                     <GHC.Prim.RealWorld>_N
                                                                                     <Data.Primitive.Array.Array
                                                                                        (Multilinear.Generic.Tensor
                                                                                           a)>_R))))),
                                                       Data.Vector.Vector
                                                         @ (Multilinear.Generic.Tensor a)
                                                         0#
                                                         dt1
                                                         ipv9 #) } } } }) of ds4 { (#,#) ipv3 ipv4 ->
                                            ipv4 } }) } }
                                 Multilinear.Index.Finite.Contravariant isize ds1
                                 -> case w1 of wild2 { (,) ds2 ds3 ->
                                    case ds2 of wild3 {
                                      [] -> wild
                                      : u us
                                      -> Multilinear.Generic.FiniteTensor
                                           @ a
                                           (Multilinear.Index.Finite.Contravariant
                                              isize
                                              (GHC.Types.:
                                                 @ GHC.Types.Char
                                                 u
                                                 (GHC.Types.[] @ GHC.Types.Char)))
                                           (case ts of v2 { Data.Vector.Vector ipv ipv1 ipv2 ->
                                            case GHC.Magic.runRW#
                                                   @ ('GHC.Types.TupleRep
                                                        '['GHC.Types.TupleRep '[],
                                                          'GHC.Types.LiftedRep])
                                                   @ (# GHC.Prim.State# GHC.Prim.RealWorld,
                                                        Data.Vector.Vector
                                                          (Multilinear.Generic.Tensor a) #)
                                                   (\ (s1 :: GHC.Prim.State#
                                                               GHC.Prim.RealWorld)[OneShot] ->
                                                    case GHC.Prim.newArray#
                                                           @ (Multilinear.Generic.Tensor a)
                                                           @ (Control.Monad.Primitive.PrimState
                                                                (GHC.ST.ST GHC.Prim.RealWorld))
                                                           ipv1
                                                           (Data.Vector.Mutable.uninitialised
                                                              @ (Multilinear.Generic.Tensor a))
                                                           s1
                                                             `cast`
                                                           (Nth:2
                                                                (Nth:2
                                                                     (Trans
                                                                          (<GHC.ST.STRep
                                                                              GHC.Prim.RealWorld
                                                                              (Data.Primitive.Array.MutableArray
                                                                                 (Control.Monad.Primitive.PrimState
                                                                                    (GHC.ST.ST
                                                                                       GHC.Prim.RealWorld))
                                                                                 (Multilinear.Generic.Tensor
                                                                                    a))>_R
                                                                           ->_R Sym (GHC.ST.N:ST[0]
                                                                                         <GHC.Prim.RealWorld>_N
                                                                                         <Data.Primitive.Array.MutableArray
                                                                                            (Control.Monad.Primitive.PrimState
                                                                                               (GHC.ST.ST
                                                                                                  GHC.Prim.RealWorld))
                                                                                            (Multilinear.Generic.Tensor
                                                                                               a)>_R))
                                                                          (((GHC.Prim.State#
                                                                               (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                         <GHC.Prim.RealWorld>_N)))_R
                                                                            ->_R ((#,#)
                                                                                    <'GHC.Types.TupleRep
                                                                                       '[]>_R
                                                                                    <'GHC.Types.LiftedRep>_R
                                                                                    (GHC.Prim.State#
                                                                                       (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                                 <GHC.Prim.RealWorld>_N)))_R
                                                                                    <Data.Primitive.Array.MutableArray
                                                                                       (Control.Monad.Primitive.PrimState
                                                                                          (GHC.ST.ST
                                                                                             GHC.Prim.RealWorld))
                                                                                       (Multilinear.Generic.Tensor
                                                                                          a)>_R)_R)
                                                                           ->_R <GHC.ST.ST
                                                                                   GHC.Prim.RealWorld
                                                                                   (Data.Primitive.Array.MutableArray
                                                                                      (Control.Monad.Primitive.PrimState
                                                                                         (GHC.ST.ST
                                                                                            GHC.Prim.RealWorld))
                                                                                      (Multilinear.Generic.Tensor
                                                                                         a))>_R)))) of ds4 { (#,#) ipv3 ipv4 ->
                                                    letrec {
                                                      foldlM'_loop :: GHC.Types.SPEC
                                                                      -> GHC.Types.Int
                                                                      -> GHC.Types.Int
                                                                      -> GHC.ST.ST
                                                                           GHC.Prim.RealWorld
                                                                           GHC.Types.Int
                                                        {- Arity: 3 -}
                                                      = \ (ds5 :: GHC.Types.SPEC)
                                                          (z :: GHC.Types.Int)
                                                          (s7 :: GHC.Types.Int) ->
                                                        case ds5 of ds6 { DEFAULT ->
                                                        case z of z1 { GHC.Types.I# ipv6 ->
                                                        (\ (s8 :: GHC.Prim.State#
                                                                    GHC.Prim.RealWorld) ->
                                                         case s7 of wild4 { GHC.Types.I# x ->
                                                         case GHC.Prim.tagToEnum#
                                                                @ GHC.Types.Bool
                                                                (GHC.Prim.>=# x ipv1) of wild5 {
                                                           GHC.Types.False
                                                           -> case GHC.Prim.indexArray#
                                                                     @ (Multilinear.Generic.Tensor
                                                                          a)
                                                                     ipv2
                                                                     (GHC.Prim.+#
                                                                        ipv
                                                                        x) of ds7 { Unit# ipv5 ->
                                                              case GHC.Prim.writeArray#
                                                                     @ (Control.Monad.Primitive.PrimState
                                                                          (GHC.ST.ST
                                                                             GHC.Prim.RealWorld))
                                                                     @ (Multilinear.Generic.Tensor
                                                                          a)
                                                                     ipv4
                                                                     ipv6
                                                                     (Multilinear.Generic.$fMultilinearTensora_$s$w$c$|
                                                                        @ a
                                                                        us
                                                                        ds3
                                                                        ipv5)
                                                                     s8
                                                                       `cast`
                                                                     (Nth:2
                                                                          (Nth:2
                                                                               (Trans
                                                                                    (<GHC.ST.STRep
                                                                                        GHC.Prim.RealWorld
                                                                                        ()>_R
                                                                                     ->_R Sym (GHC.ST.N:ST[0]
                                                                                                   <GHC.Prim.RealWorld>_N
                                                                                                   <()>_R))
                                                                                    (((GHC.Prim.State#
                                                                                         (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                                   <GHC.Prim.RealWorld>_N)))_R
                                                                                      ->_R ((#,#)
                                                                                              <'GHC.Types.TupleRep
                                                                                                 '[]>_R
                                                                                              <'GHC.Types.LiftedRep>_R
                                                                                              (GHC.Prim.State#
                                                                                                 (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                                           <GHC.Prim.RealWorld>_N)))_R
                                                                                              <()>_R)_R)
                                                                                     ->_R <GHC.ST.ST
                                                                                             GHC.Prim.RealWorld
                                                                                             ()>_R)))) of s'# { DEFAULT ->
                                                              (foldlM'_loop
                                                                 GHC.Types.SPEC
                                                                 (GHC.Types.I#
                                                                    (GHC.Prim.+# ipv6 1#))
                                                                 (GHC.Types.I# (GHC.Prim.+# x 1#)))
                                                                `cast`
                                                              (GHC.ST.N:ST[0]
                                                                   <GHC.Prim.RealWorld>_N
                                                                   <GHC.Types.Int>_R)
                                                                s'#
                                                                  `cast`
                                                                (Nth:2
                                                                     (Nth:3
                                                                          (Nth:2
                                                                               (Trans
                                                                                    (((GHC.Prim.State#
                                                                                         (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                              <GHC.Prim.RealWorld>_N))_R
                                                                                      ->_R ((#,#)
                                                                                              <'GHC.Types.TupleRep
                                                                                                 '[]>_R
                                                                                              <'GHC.Types.LiftedRep>_R
                                                                                              (GHC.Prim.State#
                                                                                                 (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                                      <GHC.Prim.RealWorld>_N))_R
                                                                                              <()>_R)_R)
                                                                                     ->_R <GHC.ST.ST
                                                                                             GHC.Prim.RealWorld
                                                                                             ()>_R)
                                                                                    (<GHC.ST.STRep
                                                                                        GHC.Prim.RealWorld
                                                                                        ()>_R
                                                                                     ->_R GHC.ST.N:ST[0]
                                                                                              <GHC.Prim.RealWorld>_N
                                                                                              <()>_R))))) } }
                                                           GHC.Types.True -> (# s8, z1 #) } })
                                                          `cast`
                                                        (Sym (GHC.ST.N:ST[0]
                                                                  <GHC.Prim.RealWorld>_N
                                                                  <GHC.Types.Int>_R)) } }
                                                    } in
                                                    case (foldlM'_loop
                                                            GHC.Types.SPEC
                                                            (GHC.Types.I# 0#)
                                                            (GHC.Types.I# 0#))
                                                           `cast`
                                                         (GHC.ST.N:ST[0]
                                                              <GHC.Prim.RealWorld>_N
                                                              <GHC.Types.Int>_R)
                                                           ipv3
                                                             `cast`
                                                           (Nth:2
                                                                (Nth:3
                                                                     (Nth:2
                                                                          (Trans
                                                                               (((GHC.Prim.State#
                                                                                    (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                         <GHC.Prim.RealWorld>_N))_R
                                                                                 ->_R ((#,#)
                                                                                         <'GHC.Types.TupleRep
                                                                                            '[]>_R
                                                                                         <'GHC.Types.LiftedRep>_R
                                                                                         (GHC.Prim.State#
                                                                                            (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                                 <GHC.Prim.RealWorld>_N))_R
                                                                                         <Data.Primitive.Array.MutableArray
                                                                                            (Control.Monad.Primitive.PrimState
                                                                                               (GHC.ST.ST
                                                                                                  GHC.Prim.RealWorld))
                                                                                            (Multilinear.Generic.Tensor
                                                                                               a)>_R)_R)
                                                                                ->_R <GHC.ST.ST
                                                                                        GHC.Prim.RealWorld
                                                                                        (Data.Primitive.Array.MutableArray
                                                                                           (Control.Monad.Primitive.PrimState
                                                                                              (GHC.ST.ST
                                                                                                 GHC.Prim.RealWorld))
                                                                                           (Multilinear.Generic.Tensor
                                                                                              a))>_R)
                                                                               (<GHC.ST.STRep
                                                                                   GHC.Prim.RealWorld
                                                                                   (Data.Primitive.Array.MutableArray
                                                                                      (Control.Monad.Primitive.PrimState
                                                                                         (GHC.ST.ST
                                                                                            GHC.Prim.RealWorld))
                                                                                      (Multilinear.Generic.Tensor
                                                                                         a))>_R
                                                                                ->_R GHC.ST.N:ST[0]
                                                                                         <GHC.Prim.RealWorld>_N
                                                                                         <Data.Primitive.Array.MutableArray
                                                                                            (Control.Monad.Primitive.PrimState
                                                                                               (GHC.ST.ST
                                                                                                  GHC.Prim.RealWorld))
                                                                                            (Multilinear.Generic.Tensor
                                                                                               a)>_R))))) of ds5 { (#,#) ipv6 ipv7 ->
                                                    case ipv7 of dt { GHC.Types.I# dt1 ->
                                                    case GHC.Prim.unsafeFreezeArray#
                                                           @ (Control.Monad.Primitive.PrimState
                                                                (GHC.ST.ST GHC.Prim.RealWorld))
                                                           @ (Multilinear.Generic.Tensor a)
                                                           ipv4
                                                           ipv6
                                                             `cast`
                                                           (Nth:2
                                                                (Nth:2
                                                                     (Trans
                                                                          (<GHC.ST.STRep
                                                                              GHC.Prim.RealWorld
                                                                              (Data.Primitive.Array.Array
                                                                                 (Multilinear.Generic.Tensor
                                                                                    a))>_R
                                                                           ->_R Sym (GHC.ST.N:ST[0]
                                                                                         <GHC.Prim.RealWorld>_N
                                                                                         <Data.Primitive.Array.Array
                                                                                            (Multilinear.Generic.Tensor
                                                                                               a)>_R))
                                                                          (((GHC.Prim.State#
                                                                               (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                         <GHC.Prim.RealWorld>_N)))_R
                                                                            ->_R ((#,#)
                                                                                    <'GHC.Types.TupleRep
                                                                                       '[]>_R
                                                                                    <'GHC.Types.LiftedRep>_R
                                                                                    (GHC.Prim.State#
                                                                                       (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                                 <GHC.Prim.RealWorld>_N)))_R
                                                                                    <Data.Primitive.Array.Array
                                                                                       (Multilinear.Generic.Tensor
                                                                                          a)>_R)_R)
                                                                           ->_R <GHC.ST.ST
                                                                                   GHC.Prim.RealWorld
                                                                                   (Data.Primitive.Array.Array
                                                                                      (Multilinear.Generic.Tensor
                                                                                         a))>_R)))) of ds6 { (#,#) ipv5 ipv9 ->
                                                    (# ipv5
                                                         `cast`
                                                       (Nth:2
                                                            (Nth:3
                                                                 (Nth:2
                                                                      (Trans
                                                                           (((GHC.Prim.State#
                                                                                (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                     <GHC.Prim.RealWorld>_N))_R
                                                                             ->_R ((#,#)
                                                                                     <'GHC.Types.TupleRep
                                                                                        '[]>_R
                                                                                     <'GHC.Types.LiftedRep>_R
                                                                                     (GHC.Prim.State#
                                                                                        (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                             <GHC.Prim.RealWorld>_N))_R
                                                                                     <Data.Primitive.Array.Array
                                                                                        (Multilinear.Generic.Tensor
                                                                                           a)>_R)_R)
                                                                            ->_R <GHC.ST.ST
                                                                                    GHC.Prim.RealWorld
                                                                                    (Data.Primitive.Array.Array
                                                                                       (Multilinear.Generic.Tensor
                                                                                          a))>_R)
                                                                           (<GHC.ST.STRep
                                                                               GHC.Prim.RealWorld
                                                                               (Data.Primitive.Array.Array
                                                                                  (Multilinear.Generic.Tensor
                                                                                     a))>_R
                                                                            ->_R GHC.ST.N:ST[0]
                                                                                     <GHC.Prim.RealWorld>_N
                                                                                     <Data.Primitive.Array.Array
                                                                                        (Multilinear.Generic.Tensor
                                                                                           a)>_R))))),
                                                       Data.Vector.Vector
                                                         @ (Multilinear.Generic.Tensor a)
                                                         0#
                                                         dt1
                                                         ipv9 #) } } } }) of ds4 { (#,#) ipv3 ipv4 ->
                                            ipv4 } }) } }
                                 Multilinear.Index.Finite.Indifferent ipv ipv1 -> wild }
                            Multilinear.Generic.InfiniteTensor ds ts
                            -> case ds of wild1 {
                                 Multilinear.Index.Infinite.Covariant ds1
                                 -> case w1 of wild2 { (,) us ds2 ->
                                    case ds2 of wild3 {
                                      [] -> wild
                                      : d ds3
                                      -> Multilinear.Generic.InfiniteTensor
                                           @ a
                                           (Multilinear.Index.Infinite.Covariant
                                              (GHC.Types.:
                                                 @ GHC.Types.Char
                                                 d
                                                 (GHC.Types.[] @ GHC.Types.Char)))
                                           (letrec {
                                              go8 :: [Multilinear.Generic.Tensor a]
                                                     -> [Multilinear.Generic.Tensor a]
                                                {- Arity: 1 -}
                                              = \ (ds4 :: [Multilinear.Generic.Tensor a]) ->
                                                case ds4 of wild4 {
                                                  []
                                                  -> GHC.Types.[] @ (Multilinear.Generic.Tensor a)
                                                  : y ys
                                                  -> GHC.Types.:
                                                       @ (Multilinear.Generic.Tensor a)
                                                       (Multilinear.Generic.$fMultilinearTensora_$s$w$c$|
                                                          @ a
                                                          us
                                                          ds3
                                                          y)
                                                       (go8 ys) }
                                            } in
                                            go8 ts) } }
                                 Multilinear.Index.Infinite.Contravariant ds1
                                 -> case w1 of wild2 { (,) ds2 ds3 ->
                                    case ds2 of wild3 {
                                      [] -> wild
                                      : u us
                                      -> Multilinear.Generic.InfiniteTensor
                                           @ a
                                           (Multilinear.Index.Infinite.Contravariant
                                              (GHC.Types.:
                                                 @ GHC.Types.Char
                                                 u
                                                 (GHC.Types.[] @ GHC.Types.Char)))
                                           (letrec {
                                              go8 :: [Multilinear.Generic.Tensor a]
                                                     -> [Multilinear.Generic.Tensor a]
                                                {- Arity: 1 -}
                                              = \ (ds4 :: [Multilinear.Generic.Tensor a]) ->
                                                case ds4 of wild4 {
                                                  []
                                                  -> GHC.Types.[] @ (Multilinear.Generic.Tensor a)
                                                  : y ys
                                                  -> GHC.Types.:
                                                       @ (Multilinear.Generic.Tensor a)
                                                       (Multilinear.Generic.$fMultilinearTensora_$s$w$c$|
                                                          @ a
                                                          us
                                                          ds3
                                                          y)
                                                       (go8 ys) }
                                            } in
                                            go8 ts) } }
                                 Multilinear.Index.Infinite.Indifferent ipv -> wild }
                            Multilinear.Generic.Err msg
                            -> Multilinear.Generic.Err @ a msg }) -}
3435455de223a292a66afccee7caf4fd
  $w$c.|. ::
    Data.Bits.Bits a =>
    Multilinear.Generic.Tensor a
    -> Multilinear.Generic.Tensor a -> Multilinear.Generic.Tensor a
  {- Arity: 3,
     Strictness: <L,U(A,A,C(C(U)),A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A)><S,U><S,U>,
     Inline: [0],
     Unfolding(loop-breaker): <stable> (\ @ a
                                          (w :: Data.Bits.Bits a)
                                          (w1 :: Multilinear.Generic.Tensor a)
                                          (w2 :: Multilinear.Generic.Tensor a) ->
                                        let {
                                          commonIndices :: [GHC.Base.String]
                                          = let {
                                              ds :: [GHC.Base.String]
                                              = letrec {
                                                  go8 :: [Multilinear.Index.TIndex]
                                                         -> [[GHC.Types.Char]]
                                                    {- Arity: 1 -}
                                                  = \ (ds1 :: [Multilinear.Index.TIndex]) ->
                                                    case ds1 of wild {
                                                      [] -> GHC.Types.[] @ [GHC.Types.Char]
                                                      : y ys
                                                      -> GHC.Types.:
                                                           @ [GHC.Types.Char]
                                                           (Multilinear.Index.tIndexName y)
                                                           (go8 ys) }
                                                } in
                                                go8 (Multilinear.Generic.$w$cindices @ a w2)
                                            } in
                                            letrec {
                                              go8 :: [Multilinear.Index.TIndex]
                                                     -> [[GHC.Types.Char]]
                                                {- Arity: 1 -}
                                              = \ (ds1 :: [Multilinear.Index.TIndex]) ->
                                                case ds1 of wild {
                                                  [] -> GHC.Types.[] @ [GHC.Types.Char]
                                                  : y ys
                                                  -> let {
                                                       x :: [GHC.Types.Char]
                                                       = case y of wild1 {
                                                           Multilinear.Index.Covariant ds2 ds3
                                                           -> ds3
                                                           Multilinear.Index.Contravariant ds2 ds3
                                                           -> ds3
                                                           Multilinear.Index.Indifferent ds2 ds3
                                                           -> ds3 }
                                                     } in
                                                     case GHC.List.elem
                                                            @ GHC.Base.String
                                                            GHC.Classes.$fEq[]_$s$fEq[]1
                                                            x
                                                            ds of wild1 {
                                                       GHC.Types.False -> go8 ys
                                                       GHC.Types.True
                                                       -> GHC.Types.:
                                                            @ [GHC.Types.Char]
                                                            x
                                                            (go8 ys) } }
                                            } in
                                            go8 (Multilinear.Generic.$w$cindices @ a w1)
                                        } in
                                        letrec {
                                          go8 :: [GHC.Base.String]
                                                 -> Multilinear.Generic.Tensor a
                                                 -> Multilinear.Generic.Tensor a
                                            {- Arity: 1 -}
                                          = \ (ds :: [GHC.Base.String]) ->
                                            case ds of wild {
                                              [] -> GHC.Base.id @ (Multilinear.Generic.Tensor a)
                                              : y ys
                                              -> \ (v :: Multilinear.Generic.Tensor a)[OneShot] ->
                                                 case v of z { DEFAULT ->
                                                 go8
                                                   ys
                                                   (Multilinear.Generic.$w$cshiftRightmost
                                                      @ a
                                                      z
                                                      y) } }
                                        } in
                                        letrec {
                                          go9 :: [GHC.Base.String]
                                                 -> Multilinear.Generic.Tensor a
                                                 -> Multilinear.Generic.Tensor a
                                            {- Arity: 1 -}
                                          = \ (ds :: [GHC.Base.String]) ->
                                            case ds of wild {
                                              [] -> GHC.Base.id @ (Multilinear.Generic.Tensor a)
                                              : y ys
                                              -> \ (v :: Multilinear.Generic.Tensor a)[OneShot] ->
                                                 case v of z { DEFAULT ->
                                                 go9
                                                   ys
                                                   (Multilinear.Generic.$w$cshiftRightmost
                                                      @ a
                                                      z
                                                      y) } }
                                        } in
                                        Multilinear.Generic.mergeScalars
                                          @ a
                                          (Multilinear.Generic.$w_elemByElem'
                                             @ a
                                             (go8 commonIndices w1)
                                             (go9 commonIndices w2)
                                             (Data.Bits..|. @ a w)
                                             (Multilinear.Generic.zipT
                                                @ a
                                                (Control.Exception.Base.absentError
                                                   @ (GHC.Num.Num a)
                                                   "w Num a"#)
                                                (\ (w3 :: Multilinear.Generic.Tensor a)
                                                   (w4 :: Multilinear.Generic.Tensor a) ->
                                                 Multilinear.Generic.$w$c.|. @ a w w3 w4)
                                                (\ (t :: Multilinear.Generic.Tensor a) (e :: a) ->
                                                 Multilinear.Generic.$fMultilinearTensora_$cfmap
                                                   @ a
                                                   @ a
                                                   (\ (ds :: a) -> Data.Bits..|. @ a w ds e)
                                                   t)
                                                (\ (e :: a) (t :: Multilinear.Generic.Tensor a) ->
                                                 Multilinear.Generic.$fMultilinearTensora_$cfmap
                                                   @ a
                                                   @ a
                                                   (Data.Bits..|. @ a w e)
                                                   t)
                                                (Data.Bits..|. @ a w)))) -}
3435455de223a292a66afccee7caf4fd
  $w$c/\ ::
    Multilinear.Generic.Tensor a
    -> GHC.Base.String -> Multilinear.Generic.Tensor a
  {- Arity: 2, Strictness: <S,1*U><L,U>, Inline: [0],
     Unfolding(loop-breaker): <stable> (\ @ a
                                          (w :: Multilinear.Generic.Tensor a)
                                          (w1 :: GHC.Base.String) ->
                                        case w of wild {
                                          Multilinear.Generic.Scalar x
                                          -> Multilinear.Generic.Scalar @ a x
                                          Multilinear.Generic.SimpleFinite index ts
                                          -> case index of wild1 {
                                               Multilinear.Index.Finite.Covariant ds1 ds2
                                               -> case GHC.Base.eqString ds2 w1 of wild2 {
                                                    GHC.Types.False -> wild
                                                    GHC.Types.True
                                                    -> Multilinear.Generic.SimpleFinite
                                                         @ a
                                                         (Multilinear.Index.Finite.Contravariant
                                                            ds1
                                                            w1)
                                                         ts }
                                               Multilinear.Index.Finite.Contravariant ds1 ds2
                                               -> case GHC.Base.eqString ds2 w1 of wild2 {
                                                    GHC.Types.False -> wild
                                                    GHC.Types.True
                                                    -> Multilinear.Generic.SimpleFinite
                                                         @ a
                                                         (Multilinear.Index.Finite.Contravariant
                                                            ds1
                                                            w1)
                                                         ts }
                                               Multilinear.Index.Finite.Indifferent ds1 ds2
                                               -> case GHC.Base.eqString ds2 w1 of wild2 {
                                                    GHC.Types.False -> wild
                                                    GHC.Types.True
                                                    -> Multilinear.Generic.SimpleFinite
                                                         @ a
                                                         (Multilinear.Index.Finite.Contravariant
                                                            ds1
                                                            w1)
                                                         ts } }
                                          Multilinear.Generic.FiniteTensor index ts
                                          -> let {
                                               $j :: Multilinear.Generic.Tensor a <join 0>
                                               = Multilinear.Generic.FiniteTensor
                                                   @ a
                                                   index
                                                   (case ts of v2 { Data.Vector.Vector ipv ipv1 ipv2 ->
                                                    case GHC.Magic.runRW#
                                                           @ ('GHC.Types.TupleRep
                                                                '['GHC.Types.TupleRep '[],
                                                                  'GHC.Types.LiftedRep])
                                                           @ (# GHC.Prim.State# GHC.Prim.RealWorld,
                                                                Data.Vector.Vector
                                                                  (Multilinear.Generic.Tensor a) #)
                                                           (\ (s1 :: GHC.Prim.State#
                                                                       GHC.Prim.RealWorld)[OneShot] ->
                                                            case GHC.Prim.newArray#
                                                                   @ (Multilinear.Generic.Tensor a)
                                                                   @ (Control.Monad.Primitive.PrimState
                                                                        (GHC.ST.ST
                                                                           GHC.Prim.RealWorld))
                                                                   ipv1
                                                                   (Data.Vector.Mutable.uninitialised
                                                                      @ (Multilinear.Generic.Tensor
                                                                           a))
                                                                   s1
                                                                     `cast`
                                                                   (Nth:2
                                                                        (Nth:2
                                                                             (Trans
                                                                                  (<GHC.ST.STRep
                                                                                      GHC.Prim.RealWorld
                                                                                      (Data.Primitive.Array.MutableArray
                                                                                         (Control.Monad.Primitive.PrimState
                                                                                            (GHC.ST.ST
                                                                                               GHC.Prim.RealWorld))
                                                                                         (Multilinear.Generic.Tensor
                                                                                            a))>_R
                                                                                   ->_R Sym (GHC.ST.N:ST[0]
                                                                                                 <GHC.Prim.RealWorld>_N
                                                                                                 <Data.Primitive.Array.MutableArray
                                                                                                    (Control.Monad.Primitive.PrimState
                                                                                                       (GHC.ST.ST
                                                                                                          GHC.Prim.RealWorld))
                                                                                                    (Multilinear.Generic.Tensor
                                                                                                       a)>_R))
                                                                                  (((GHC.Prim.State#
                                                                                       (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                                 <GHC.Prim.RealWorld>_N)))_R
                                                                                    ->_R ((#,#)
                                                                                            <'GHC.Types.TupleRep
                                                                                               '[]>_R
                                                                                            <'GHC.Types.LiftedRep>_R
                                                                                            (GHC.Prim.State#
                                                                                               (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                                         <GHC.Prim.RealWorld>_N)))_R
                                                                                            <Data.Primitive.Array.MutableArray
                                                                                               (Control.Monad.Primitive.PrimState
                                                                                                  (GHC.ST.ST
                                                                                                     GHC.Prim.RealWorld))
                                                                                               (Multilinear.Generic.Tensor
                                                                                                  a)>_R)_R)
                                                                                   ->_R <GHC.ST.ST
                                                                                           GHC.Prim.RealWorld
                                                                                           (Data.Primitive.Array.MutableArray
                                                                                              (Control.Monad.Primitive.PrimState
                                                                                                 (GHC.ST.ST
                                                                                                    GHC.Prim.RealWorld))
                                                                                              (Multilinear.Generic.Tensor
                                                                                                 a))>_R)))) of ds2 { (#,#) ipv3 ipv4 ->
                                                            letrec {
                                                              foldlM'_loop :: GHC.Types.SPEC
                                                                              -> GHC.Types.Int
                                                                              -> GHC.Types.Int
                                                                              -> GHC.ST.ST
                                                                                   GHC.Prim.RealWorld
                                                                                   GHC.Types.Int
                                                                {- Arity: 3 -}
                                                              = \ (ds4 :: GHC.Types.SPEC)
                                                                  (z :: GHC.Types.Int)
                                                                  (s7 :: GHC.Types.Int) ->
                                                                case ds4 of ds5 { DEFAULT ->
                                                                case z of z1 { GHC.Types.I# ipv6 ->
                                                                (\ (s8 :: GHC.Prim.State#
                                                                            GHC.Prim.RealWorld) ->
                                                                 case s7 of wild1 { GHC.Types.I# x ->
                                                                 case GHC.Prim.tagToEnum#
                                                                        @ GHC.Types.Bool
                                                                        (GHC.Prim.>=#
                                                                           x
                                                                           ipv1) of wild2 {
                                                                   GHC.Types.False
                                                                   -> case GHC.Prim.indexArray#
                                                                             @ (Multilinear.Generic.Tensor
                                                                                  a)
                                                                             ipv2
                                                                             (GHC.Prim.+#
                                                                                ipv
                                                                                x) of ds3 { Unit# ipv5 ->
                                                                      case GHC.Prim.writeArray#
                                                                             @ (Control.Monad.Primitive.PrimState
                                                                                  (GHC.ST.ST
                                                                                     GHC.Prim.RealWorld))
                                                                             @ (Multilinear.Generic.Tensor
                                                                                  a)
                                                                             ipv4
                                                                             ipv6
                                                                             (Multilinear.Generic.$w$c/\
                                                                                @ a
                                                                                ipv5
                                                                                w1)
                                                                             s8
                                                                               `cast`
                                                                             (Nth:2
                                                                                  (Nth:2
                                                                                       (Trans
                                                                                            (<GHC.ST.STRep
                                                                                                GHC.Prim.RealWorld
                                                                                                ()>_R
                                                                                             ->_R Sym (GHC.ST.N:ST[0]
                                                                                                           <GHC.Prim.RealWorld>_N
                                                                                                           <()>_R))
                                                                                            (((GHC.Prim.State#
                                                                                                 (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                                           <GHC.Prim.RealWorld>_N)))_R
                                                                                              ->_R ((#,#)
                                                                                                      <'GHC.Types.TupleRep
                                                                                                         '[]>_R
                                                                                                      <'GHC.Types.LiftedRep>_R
                                                                                                      (GHC.Prim.State#
                                                                                                         (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                                                   <GHC.Prim.RealWorld>_N)))_R
                                                                                                      <()>_R)_R)
                                                                                             ->_R <GHC.ST.ST
                                                                                                     GHC.Prim.RealWorld
                                                                                                     ()>_R)))) of s'# { DEFAULT ->
                                                                      (foldlM'_loop
                                                                         GHC.Types.SPEC
                                                                         (GHC.Types.I#
                                                                            (GHC.Prim.+# ipv6 1#))
                                                                         (GHC.Types.I#
                                                                            (GHC.Prim.+# x 1#)))
                                                                        `cast`
                                                                      (GHC.ST.N:ST[0]
                                                                           <GHC.Prim.RealWorld>_N
                                                                           <GHC.Types.Int>_R)
                                                                        s'#
                                                                          `cast`
                                                                        (Nth:2
                                                                             (Nth:3
                                                                                  (Nth:2
                                                                                       (Trans
                                                                                            (((GHC.Prim.State#
                                                                                                 (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                                      <GHC.Prim.RealWorld>_N))_R
                                                                                              ->_R ((#,#)
                                                                                                      <'GHC.Types.TupleRep
                                                                                                         '[]>_R
                                                                                                      <'GHC.Types.LiftedRep>_R
                                                                                                      (GHC.Prim.State#
                                                                                                         (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                                              <GHC.Prim.RealWorld>_N))_R
                                                                                                      <()>_R)_R)
                                                                                             ->_R <GHC.ST.ST
                                                                                                     GHC.Prim.RealWorld
                                                                                                     ()>_R)
                                                                                            (<GHC.ST.STRep
                                                                                                GHC.Prim.RealWorld
                                                                                                ()>_R
                                                                                             ->_R GHC.ST.N:ST[0]
                                                                                                      <GHC.Prim.RealWorld>_N
                                                                                                      <()>_R))))) } }
                                                                   GHC.Types.True
                                                                   -> (# s8, z1 #) } })
                                                                  `cast`
                                                                (Sym (GHC.ST.N:ST[0]
                                                                          <GHC.Prim.RealWorld>_N
                                                                          <GHC.Types.Int>_R)) } }
                                                            } in
                                                            case (foldlM'_loop
                                                                    GHC.Types.SPEC
                                                                    (GHC.Types.I# 0#)
                                                                    (GHC.Types.I# 0#))
                                                                   `cast`
                                                                 (GHC.ST.N:ST[0]
                                                                      <GHC.Prim.RealWorld>_N
                                                                      <GHC.Types.Int>_R)
                                                                   ipv3
                                                                     `cast`
                                                                   (Nth:2
                                                                        (Nth:3
                                                                             (Nth:2
                                                                                  (Trans
                                                                                       (((GHC.Prim.State#
                                                                                            (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                                 <GHC.Prim.RealWorld>_N))_R
                                                                                         ->_R ((#,#)
                                                                                                 <'GHC.Types.TupleRep
                                                                                                    '[]>_R
                                                                                                 <'GHC.Types.LiftedRep>_R
                                                                                                 (GHC.Prim.State#
                                                                                                    (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                                         <GHC.Prim.RealWorld>_N))_R
                                                                                                 <Data.Primitive.Array.MutableArray
                                                                                                    (Control.Monad.Primitive.PrimState
                                                                                                       (GHC.ST.ST
                                                                                                          GHC.Prim.RealWorld))
                                                                                                    (Multilinear.Generic.Tensor
                                                                                                       a)>_R)_R)
                                                                                        ->_R <GHC.ST.ST
                                                                                                GHC.Prim.RealWorld
                                                                                                (Data.Primitive.Array.MutableArray
                                                                                                   (Control.Monad.Primitive.PrimState
                                                                                                      (GHC.ST.ST
                                                                                                         GHC.Prim.RealWorld))
                                                                                                   (Multilinear.Generic.Tensor
                                                                                                      a))>_R)
                                                                                       (<GHC.ST.STRep
                                                                                           GHC.Prim.RealWorld
                                                                                           (Data.Primitive.Array.MutableArray
                                                                                              (Control.Monad.Primitive.PrimState
                                                                                                 (GHC.ST.ST
                                                                                                    GHC.Prim.RealWorld))
                                                                                              (Multilinear.Generic.Tensor
                                                                                                 a))>_R
                                                                                        ->_R GHC.ST.N:ST[0]
                                                                                                 <GHC.Prim.RealWorld>_N
                                                                                                 <Data.Primitive.Array.MutableArray
                                                                                                    (Control.Monad.Primitive.PrimState
                                                                                                       (GHC.ST.ST
                                                                                                          GHC.Prim.RealWorld))
                                                                                                    (Multilinear.Generic.Tensor
                                                                                                       a)>_R))))) of ds1 { (#,#) ipv6 ipv7 ->
                                                            case ipv7 of dt { GHC.Types.I# dt1 ->
                                                            case GHC.Prim.unsafeFreezeArray#
                                                                   @ (Control.Monad.Primitive.PrimState
                                                                        (GHC.ST.ST
                                                                           GHC.Prim.RealWorld))
                                                                   @ (Multilinear.Generic.Tensor a)
                                                                   ipv4
                                                                   ipv6
                                                                     `cast`
                                                                   (Nth:2
                                                                        (Nth:2
                                                                             (Trans
                                                                                  (<GHC.ST.STRep
                                                                                      GHC.Prim.RealWorld
                                                                                      (Data.Primitive.Array.Array
                                                                                         (Multilinear.Generic.Tensor
                                                                                            a))>_R
                                                                                   ->_R Sym (GHC.ST.N:ST[0]
                                                                                                 <GHC.Prim.RealWorld>_N
                                                                                                 <Data.Primitive.Array.Array
                                                                                                    (Multilinear.Generic.Tensor
                                                                                                       a)>_R))
                                                                                  (((GHC.Prim.State#
                                                                                       (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                                 <GHC.Prim.RealWorld>_N)))_R
                                                                                    ->_R ((#,#)
                                                                                            <'GHC.Types.TupleRep
                                                                                               '[]>_R
                                                                                            <'GHC.Types.LiftedRep>_R
                                                                                            (GHC.Prim.State#
                                                                                               (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                                         <GHC.Prim.RealWorld>_N)))_R
                                                                                            <Data.Primitive.Array.Array
                                                                                               (Multilinear.Generic.Tensor
                                                                                                  a)>_R)_R)
                                                                                   ->_R <GHC.ST.ST
                                                                                           GHC.Prim.RealWorld
                                                                                           (Data.Primitive.Array.Array
                                                                                              (Multilinear.Generic.Tensor
                                                                                                 a))>_R)))) of ds3 { (#,#) ipv5 ipv9 ->
                                                            (# ipv5
                                                                 `cast`
                                                               (Nth:2
                                                                    (Nth:3
                                                                         (Nth:2
                                                                              (Trans
                                                                                   (((GHC.Prim.State#
                                                                                        (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                             <GHC.Prim.RealWorld>_N))_R
                                                                                     ->_R ((#,#)
                                                                                             <'GHC.Types.TupleRep
                                                                                                '[]>_R
                                                                                             <'GHC.Types.LiftedRep>_R
                                                                                             (GHC.Prim.State#
                                                                                                (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                                     <GHC.Prim.RealWorld>_N))_R
                                                                                             <Data.Primitive.Array.Array
                                                                                                (Multilinear.Generic.Tensor
                                                                                                   a)>_R)_R)
                                                                                    ->_R <GHC.ST.ST
                                                                                            GHC.Prim.RealWorld
                                                                                            (Data.Primitive.Array.Array
                                                                                               (Multilinear.Generic.Tensor
                                                                                                  a))>_R)
                                                                                   (<GHC.ST.STRep
                                                                                       GHC.Prim.RealWorld
                                                                                       (Data.Primitive.Array.Array
                                                                                          (Multilinear.Generic.Tensor
                                                                                             a))>_R
                                                                                    ->_R GHC.ST.N:ST[0]
                                                                                             <GHC.Prim.RealWorld>_N
                                                                                             <Data.Primitive.Array.Array
                                                                                                (Multilinear.Generic.Tensor
                                                                                                   a)>_R))))),
                                                               Data.Vector.Vector
                                                                 @ (Multilinear.Generic.Tensor a)
                                                                 0#
                                                                 dt1
                                                                 ipv9 #) } } } }) of ds1 { (#,#) ipv3 ipv4 ->
                                                    ipv4 } })
                                             } in
                                             let {
                                               $j1 :: Multilinear.Generic.Tensor a <join 0>
                                               = Multilinear.Generic.FiniteTensor
                                                   @ a
                                                   (Multilinear.Index.Finite.Contravariant
                                                      (Multilinear.Index.Finite.indexSize index)
                                                      w1)
                                                   (case ts of v2 { Data.Vector.Vector ipv ipv1 ipv2 ->
                                                    case GHC.Magic.runRW#
                                                           @ ('GHC.Types.TupleRep
                                                                '['GHC.Types.TupleRep '[],
                                                                  'GHC.Types.LiftedRep])
                                                           @ (# GHC.Prim.State# GHC.Prim.RealWorld,
                                                                Data.Vector.Vector
                                                                  (Multilinear.Generic.Tensor a) #)
                                                           (\ (s1 :: GHC.Prim.State#
                                                                       GHC.Prim.RealWorld)[OneShot] ->
                                                            case GHC.Prim.newArray#
                                                                   @ (Multilinear.Generic.Tensor a)
                                                                   @ (Control.Monad.Primitive.PrimState
                                                                        (GHC.ST.ST
                                                                           GHC.Prim.RealWorld))
                                                                   ipv1
                                                                   (Data.Vector.Mutable.uninitialised
                                                                      @ (Multilinear.Generic.Tensor
                                                                           a))
                                                                   s1
                                                                     `cast`
                                                                   (Nth:2
                                                                        (Nth:2
                                                                             (Trans
                                                                                  (<GHC.ST.STRep
                                                                                      GHC.Prim.RealWorld
                                                                                      (Data.Primitive.Array.MutableArray
                                                                                         (Control.Monad.Primitive.PrimState
                                                                                            (GHC.ST.ST
                                                                                               GHC.Prim.RealWorld))
                                                                                         (Multilinear.Generic.Tensor
                                                                                            a))>_R
                                                                                   ->_R Sym (GHC.ST.N:ST[0]
                                                                                                 <GHC.Prim.RealWorld>_N
                                                                                                 <Data.Primitive.Array.MutableArray
                                                                                                    (Control.Monad.Primitive.PrimState
                                                                                                       (GHC.ST.ST
                                                                                                          GHC.Prim.RealWorld))
                                                                                                    (Multilinear.Generic.Tensor
                                                                                                       a)>_R))
                                                                                  (((GHC.Prim.State#
                                                                                       (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                                 <GHC.Prim.RealWorld>_N)))_R
                                                                                    ->_R ((#,#)
                                                                                            <'GHC.Types.TupleRep
                                                                                               '[]>_R
                                                                                            <'GHC.Types.LiftedRep>_R
                                                                                            (GHC.Prim.State#
                                                                                               (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                                         <GHC.Prim.RealWorld>_N)))_R
                                                                                            <Data.Primitive.Array.MutableArray
                                                                                               (Control.Monad.Primitive.PrimState
                                                                                                  (GHC.ST.ST
                                                                                                     GHC.Prim.RealWorld))
                                                                                               (Multilinear.Generic.Tensor
                                                                                                  a)>_R)_R)
                                                                                   ->_R <GHC.ST.ST
                                                                                           GHC.Prim.RealWorld
                                                                                           (Data.Primitive.Array.MutableArray
                                                                                              (Control.Monad.Primitive.PrimState
                                                                                                 (GHC.ST.ST
                                                                                                    GHC.Prim.RealWorld))
                                                                                              (Multilinear.Generic.Tensor
                                                                                                 a))>_R)))) of ds2 { (#,#) ipv3 ipv4 ->
                                                            letrec {
                                                              foldlM'_loop :: GHC.Types.SPEC
                                                                              -> GHC.Types.Int
                                                                              -> GHC.Types.Int
                                                                              -> GHC.ST.ST
                                                                                   GHC.Prim.RealWorld
                                                                                   GHC.Types.Int
                                                                {- Arity: 3 -}
                                                              = \ (ds4 :: GHC.Types.SPEC)
                                                                  (z :: GHC.Types.Int)
                                                                  (s7 :: GHC.Types.Int) ->
                                                                case ds4 of ds5 { DEFAULT ->
                                                                case z of z1 { GHC.Types.I# ipv6 ->
                                                                (\ (s8 :: GHC.Prim.State#
                                                                            GHC.Prim.RealWorld) ->
                                                                 case s7 of wild1 { GHC.Types.I# x ->
                                                                 case GHC.Prim.tagToEnum#
                                                                        @ GHC.Types.Bool
                                                                        (GHC.Prim.>=#
                                                                           x
                                                                           ipv1) of wild2 {
                                                                   GHC.Types.False
                                                                   -> case GHC.Prim.indexArray#
                                                                             @ (Multilinear.Generic.Tensor
                                                                                  a)
                                                                             ipv2
                                                                             (GHC.Prim.+#
                                                                                ipv
                                                                                x) of ds3 { Unit# ipv5 ->
                                                                      case GHC.Prim.writeArray#
                                                                             @ (Control.Monad.Primitive.PrimState
                                                                                  (GHC.ST.ST
                                                                                     GHC.Prim.RealWorld))
                                                                             @ (Multilinear.Generic.Tensor
                                                                                  a)
                                                                             ipv4
                                                                             ipv6
                                                                             (Multilinear.Generic.$w$c/\
                                                                                @ a
                                                                                ipv5
                                                                                w1)
                                                                             s8
                                                                               `cast`
                                                                             (Nth:2
                                                                                  (Nth:2
                                                                                       (Trans
                                                                                            (<GHC.ST.STRep
                                                                                                GHC.Prim.RealWorld
                                                                                                ()>_R
                                                                                             ->_R Sym (GHC.ST.N:ST[0]
                                                                                                           <GHC.Prim.RealWorld>_N
                                                                                                           <()>_R))
                                                                                            (((GHC.Prim.State#
                                                                                                 (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                                           <GHC.Prim.RealWorld>_N)))_R
                                                                                              ->_R ((#,#)
                                                                                                      <'GHC.Types.TupleRep
                                                                                                         '[]>_R
                                                                                                      <'GHC.Types.LiftedRep>_R
                                                                                                      (GHC.Prim.State#
                                                                                                         (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                                                   <GHC.Prim.RealWorld>_N)))_R
                                                                                                      <()>_R)_R)
                                                                                             ->_R <GHC.ST.ST
                                                                                                     GHC.Prim.RealWorld
                                                                                                     ()>_R)))) of s'# { DEFAULT ->
                                                                      (foldlM'_loop
                                                                         GHC.Types.SPEC
                                                                         (GHC.Types.I#
                                                                            (GHC.Prim.+# ipv6 1#))
                                                                         (GHC.Types.I#
                                                                            (GHC.Prim.+# x 1#)))
                                                                        `cast`
                                                                      (GHC.ST.N:ST[0]
                                                                           <GHC.Prim.RealWorld>_N
                                                                           <GHC.Types.Int>_R)
                                                                        s'#
                                                                          `cast`
                                                                        (Nth:2
                                                                             (Nth:3
                                                                                  (Nth:2
                                                                                       (Trans
                                                                                            (((GHC.Prim.State#
                                                                                                 (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                                      <GHC.Prim.RealWorld>_N))_R
                                                                                              ->_R ((#,#)
                                                                                                      <'GHC.Types.TupleRep
                                                                                                         '[]>_R
                                                                                                      <'GHC.Types.LiftedRep>_R
                                                                                                      (GHC.Prim.State#
                                                                                                         (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                                              <GHC.Prim.RealWorld>_N))_R
                                                                                                      <()>_R)_R)
                                                                                             ->_R <GHC.ST.ST
                                                                                                     GHC.Prim.RealWorld
                                                                                                     ()>_R)
                                                                                            (<GHC.ST.STRep
                                                                                                GHC.Prim.RealWorld
                                                                                                ()>_R
                                                                                             ->_R GHC.ST.N:ST[0]
                                                                                                      <GHC.Prim.RealWorld>_N
                                                                                                      <()>_R))))) } }
                                                                   GHC.Types.True
                                                                   -> (# s8, z1 #) } })
                                                                  `cast`
                                                                (Sym (GHC.ST.N:ST[0]
                                                                          <GHC.Prim.RealWorld>_N
                                                                          <GHC.Types.Int>_R)) } }
                                                            } in
                                                            case (foldlM'_loop
                                                                    GHC.Types.SPEC
                                                                    (GHC.Types.I# 0#)
                                                                    (GHC.Types.I# 0#))
                                                                   `cast`
                                                                 (GHC.ST.N:ST[0]
                                                                      <GHC.Prim.RealWorld>_N
                                                                      <GHC.Types.Int>_R)
                                                                   ipv3
                                                                     `cast`
                                                                   (Nth:2
                                                                        (Nth:3
                                                                             (Nth:2
                                                                                  (Trans
                                                                                       (((GHC.Prim.State#
                                                                                            (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                                 <GHC.Prim.RealWorld>_N))_R
                                                                                         ->_R ((#,#)
                                                                                                 <'GHC.Types.TupleRep
                                                                                                    '[]>_R
                                                                                                 <'GHC.Types.LiftedRep>_R
                                                                                                 (GHC.Prim.State#
                                                                                                    (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                                         <GHC.Prim.RealWorld>_N))_R
                                                                                                 <Data.Primitive.Array.MutableArray
                                                                                                    (Control.Monad.Primitive.PrimState
                                                                                                       (GHC.ST.ST
                                                                                                          GHC.Prim.RealWorld))
                                                                                                    (Multilinear.Generic.Tensor
                                                                                                       a)>_R)_R)
                                                                                        ->_R <GHC.ST.ST
                                                                                                GHC.Prim.RealWorld
                                                                                                (Data.Primitive.Array.MutableArray
                                                                                                   (Control.Monad.Primitive.PrimState
                                                                                                      (GHC.ST.ST
                                                                                                         GHC.Prim.RealWorld))
                                                                                                   (Multilinear.Generic.Tensor
                                                                                                      a))>_R)
                                                                                       (<GHC.ST.STRep
                                                                                           GHC.Prim.RealWorld
                                                                                           (Data.Primitive.Array.MutableArray
                                                                                              (Control.Monad.Primitive.PrimState
                                                                                                 (GHC.ST.ST
                                                                                                    GHC.Prim.RealWorld))
                                                                                              (Multilinear.Generic.Tensor
                                                                                                 a))>_R
                                                                                        ->_R GHC.ST.N:ST[0]
                                                                                                 <GHC.Prim.RealWorld>_N
                                                                                                 <Data.Primitive.Array.MutableArray
                                                                                                    (Control.Monad.Primitive.PrimState
                                                                                                       (GHC.ST.ST
                                                                                                          GHC.Prim.RealWorld))
                                                                                                    (Multilinear.Generic.Tensor
                                                                                                       a)>_R))))) of ds1 { (#,#) ipv6 ipv7 ->
                                                            case ipv7 of dt { GHC.Types.I# dt1 ->
                                                            case GHC.Prim.unsafeFreezeArray#
                                                                   @ (Control.Monad.Primitive.PrimState
                                                                        (GHC.ST.ST
                                                                           GHC.Prim.RealWorld))
                                                                   @ (Multilinear.Generic.Tensor a)
                                                                   ipv4
                                                                   ipv6
                                                                     `cast`
                                                                   (Nth:2
                                                                        (Nth:2
                                                                             (Trans
                                                                                  (<GHC.ST.STRep
                                                                                      GHC.Prim.RealWorld
                                                                                      (Data.Primitive.Array.Array
                                                                                         (Multilinear.Generic.Tensor
                                                                                            a))>_R
                                                                                   ->_R Sym (GHC.ST.N:ST[0]
                                                                                                 <GHC.Prim.RealWorld>_N
                                                                                                 <Data.Primitive.Array.Array
                                                                                                    (Multilinear.Generic.Tensor
                                                                                                       a)>_R))
                                                                                  (((GHC.Prim.State#
                                                                                       (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                                 <GHC.Prim.RealWorld>_N)))_R
                                                                                    ->_R ((#,#)
                                                                                            <'GHC.Types.TupleRep
                                                                                               '[]>_R
                                                                                            <'GHC.Types.LiftedRep>_R
                                                                                            (GHC.Prim.State#
                                                                                               (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                                         <GHC.Prim.RealWorld>_N)))_R
                                                                                            <Data.Primitive.Array.Array
                                                                                               (Multilinear.Generic.Tensor
                                                                                                  a)>_R)_R)
                                                                                   ->_R <GHC.ST.ST
                                                                                           GHC.Prim.RealWorld
                                                                                           (Data.Primitive.Array.Array
                                                                                              (Multilinear.Generic.Tensor
                                                                                                 a))>_R)))) of ds3 { (#,#) ipv5 ipv9 ->
                                                            (# ipv5
                                                                 `cast`
                                                               (Nth:2
                                                                    (Nth:3
                                                                         (Nth:2
                                                                              (Trans
                                                                                   (((GHC.Prim.State#
                                                                                        (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                             <GHC.Prim.RealWorld>_N))_R
                                                                                     ->_R ((#,#)
                                                                                             <'GHC.Types.TupleRep
                                                                                                '[]>_R
                                                                                             <'GHC.Types.LiftedRep>_R
                                                                                             (GHC.Prim.State#
                                                                                                (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                                     <GHC.Prim.RealWorld>_N))_R
                                                                                             <Data.Primitive.Array.Array
                                                                                                (Multilinear.Generic.Tensor
                                                                                                   a)>_R)_R)
                                                                                    ->_R <GHC.ST.ST
                                                                                            GHC.Prim.RealWorld
                                                                                            (Data.Primitive.Array.Array
                                                                                               (Multilinear.Generic.Tensor
                                                                                                  a))>_R)
                                                                                   (<GHC.ST.STRep
                                                                                       GHC.Prim.RealWorld
                                                                                       (Data.Primitive.Array.Array
                                                                                          (Multilinear.Generic.Tensor
                                                                                             a))>_R
                                                                                    ->_R GHC.ST.N:ST[0]
                                                                                             <GHC.Prim.RealWorld>_N
                                                                                             <Data.Primitive.Array.Array
                                                                                                (Multilinear.Generic.Tensor
                                                                                                   a)>_R))))),
                                                               Data.Vector.Vector
                                                                 @ (Multilinear.Generic.Tensor a)
                                                                 0#
                                                                 dt1
                                                                 ipv9 #) } } } }) of ds1 { (#,#) ipv3 ipv4 ->
                                                    ipv4 } })
                                             } in
                                             case index of wild1 {
                                               Multilinear.Index.Finite.Covariant ds1 ds2
                                               -> case GHC.Base.eqString ds2 w1 of wild2 {
                                                    GHC.Types.False -> $j GHC.Types.True -> $j1 }
                                               Multilinear.Index.Finite.Contravariant ds1 ds2
                                               -> case GHC.Base.eqString ds2 w1 of wild2 {
                                                    GHC.Types.False -> $j GHC.Types.True -> $j1 }
                                               Multilinear.Index.Finite.Indifferent ds1 ds2
                                               -> case GHC.Base.eqString ds2 w1 of wild2 {
                                                    GHC.Types.False -> $j GHC.Types.True -> $j1 } }
                                          Multilinear.Generic.InfiniteTensor index ts
                                          -> let {
                                               $j :: Multilinear.Generic.Tensor a <join 0>
                                               = Multilinear.Generic.InfiniteTensor
                                                   @ a
                                                   index
                                                   (letrec {
                                                      go8 :: [Multilinear.Generic.Tensor a]
                                                             -> [Multilinear.Generic.Tensor a]
                                                        {- Arity: 1 -}
                                                      = \ (ds :: [Multilinear.Generic.Tensor a]) ->
                                                        case ds of wild1 {
                                                          []
                                                          -> GHC.Types.[]
                                                               @ (Multilinear.Generic.Tensor a)
                                                          : y ys
                                                          -> GHC.Types.:
                                                               @ (Multilinear.Generic.Tensor a)
                                                               (Multilinear.Generic.$w$c/\ @ a y w1)
                                                               (go8 ys) }
                                                    } in
                                                    go8 ts)
                                             } in
                                             let {
                                               $j1 :: Multilinear.Generic.Tensor a <join 0>
                                               = Multilinear.Generic.InfiniteTensor
                                                   @ a
                                                   (Multilinear.Index.Infinite.Contravariant w1)
                                                   (letrec {
                                                      go8 :: [Multilinear.Generic.Tensor a]
                                                             -> [Multilinear.Generic.Tensor a]
                                                        {- Arity: 1 -}
                                                      = \ (ds :: [Multilinear.Generic.Tensor a]) ->
                                                        case ds of wild1 {
                                                          []
                                                          -> GHC.Types.[]
                                                               @ (Multilinear.Generic.Tensor a)
                                                          : y ys
                                                          -> GHC.Types.:
                                                               @ (Multilinear.Generic.Tensor a)
                                                               (Multilinear.Generic.$w$c/\ @ a y w1)
                                                               (go8 ys) }
                                                    } in
                                                    go8 ts)
                                             } in
                                             case index of wild1 {
                                               Multilinear.Index.Infinite.Covariant ds1
                                               -> case GHC.Base.eqString ds1 w1 of wild2 {
                                                    GHC.Types.False -> $j GHC.Types.True -> $j1 }
                                               Multilinear.Index.Infinite.Contravariant ds1
                                               -> case GHC.Base.eqString ds1 w1 of wild2 {
                                                    GHC.Types.False -> $j GHC.Types.True -> $j1 }
                                               Multilinear.Index.Infinite.Indifferent ds1
                                               -> case GHC.Base.eqString ds1 w1 of wild2 {
                                                    GHC.Types.False -> $j GHC.Types.True -> $j1 } }
                                          Multilinear.Generic.Err msg
                                          -> Multilinear.Generic.Err @ a msg }) -}
3435455de223a292a66afccee7caf4fd
  $w$c\/ ::
    Multilinear.Generic.Tensor a
    -> GHC.Base.String -> Multilinear.Generic.Tensor a
  {- Arity: 2, Strictness: <S,1*U><L,U>, Inline: [0],
     Unfolding(loop-breaker): <stable> (\ @ a
                                          (w :: Multilinear.Generic.Tensor a)
                                          (w1 :: GHC.Base.String) ->
                                        case w of wild {
                                          Multilinear.Generic.Scalar x
                                          -> Multilinear.Generic.Scalar @ a x
                                          Multilinear.Generic.SimpleFinite index ts
                                          -> case index of wild1 {
                                               Multilinear.Index.Finite.Covariant ds1 ds2
                                               -> case GHC.Base.eqString ds2 w1 of wild2 {
                                                    GHC.Types.False -> wild
                                                    GHC.Types.True
                                                    -> Multilinear.Generic.SimpleFinite
                                                         @ a
                                                         (Multilinear.Index.Finite.Covariant ds1 w1)
                                                         ts }
                                               Multilinear.Index.Finite.Contravariant ds1 ds2
                                               -> case GHC.Base.eqString ds2 w1 of wild2 {
                                                    GHC.Types.False -> wild
                                                    GHC.Types.True
                                                    -> Multilinear.Generic.SimpleFinite
                                                         @ a
                                                         (Multilinear.Index.Finite.Covariant ds1 w1)
                                                         ts }
                                               Multilinear.Index.Finite.Indifferent ds1 ds2
                                               -> case GHC.Base.eqString ds2 w1 of wild2 {
                                                    GHC.Types.False -> wild
                                                    GHC.Types.True
                                                    -> Multilinear.Generic.SimpleFinite
                                                         @ a
                                                         (Multilinear.Index.Finite.Covariant ds1 w1)
                                                         ts } }
                                          Multilinear.Generic.FiniteTensor index ts
                                          -> let {
                                               $j :: Multilinear.Generic.Tensor a <join 0>
                                               = Multilinear.Generic.FiniteTensor
                                                   @ a
                                                   index
                                                   (case ts of v2 { Data.Vector.Vector ipv ipv1 ipv2 ->
                                                    case GHC.Magic.runRW#
                                                           @ ('GHC.Types.TupleRep
                                                                '['GHC.Types.TupleRep '[],
                                                                  'GHC.Types.LiftedRep])
                                                           @ (# GHC.Prim.State# GHC.Prim.RealWorld,
                                                                Data.Vector.Vector
                                                                  (Multilinear.Generic.Tensor a) #)
                                                           (\ (s1 :: GHC.Prim.State#
                                                                       GHC.Prim.RealWorld)[OneShot] ->
                                                            case GHC.Prim.newArray#
                                                                   @ (Multilinear.Generic.Tensor a)
                                                                   @ (Control.Monad.Primitive.PrimState
                                                                        (GHC.ST.ST
                                                                           GHC.Prim.RealWorld))
                                                                   ipv1
                                                                   (Data.Vector.Mutable.uninitialised
                                                                      @ (Multilinear.Generic.Tensor
                                                                           a))
                                                                   s1
                                                                     `cast`
                                                                   (Nth:2
                                                                        (Nth:2
                                                                             (Trans
                                                                                  (<GHC.ST.STRep
                                                                                      GHC.Prim.RealWorld
                                                                                      (Data.Primitive.Array.MutableArray
                                                                                         (Control.Monad.Primitive.PrimState
                                                                                            (GHC.ST.ST
                                                                                               GHC.Prim.RealWorld))
                                                                                         (Multilinear.Generic.Tensor
                                                                                            a))>_R
                                                                                   ->_R Sym (GHC.ST.N:ST[0]
                                                                                                 <GHC.Prim.RealWorld>_N
                                                                                                 <Data.Primitive.Array.MutableArray
                                                                                                    (Control.Monad.Primitive.PrimState
                                                                                                       (GHC.ST.ST
                                                                                                          GHC.Prim.RealWorld))
                                                                                                    (Multilinear.Generic.Tensor
                                                                                                       a)>_R))
                                                                                  (((GHC.Prim.State#
                                                                                       (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                                 <GHC.Prim.RealWorld>_N)))_R
                                                                                    ->_R ((#,#)
                                                                                            <'GHC.Types.TupleRep
                                                                                               '[]>_R
                                                                                            <'GHC.Types.LiftedRep>_R
                                                                                            (GHC.Prim.State#
                                                                                               (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                                         <GHC.Prim.RealWorld>_N)))_R
                                                                                            <Data.Primitive.Array.MutableArray
                                                                                               (Control.Monad.Primitive.PrimState
                                                                                                  (GHC.ST.ST
                                                                                                     GHC.Prim.RealWorld))
                                                                                               (Multilinear.Generic.Tensor
                                                                                                  a)>_R)_R)
                                                                                   ->_R <GHC.ST.ST
                                                                                           GHC.Prim.RealWorld
                                                                                           (Data.Primitive.Array.MutableArray
                                                                                              (Control.Monad.Primitive.PrimState
                                                                                                 (GHC.ST.ST
                                                                                                    GHC.Prim.RealWorld))
                                                                                              (Multilinear.Generic.Tensor
                                                                                                 a))>_R)))) of ds2 { (#,#) ipv3 ipv4 ->
                                                            letrec {
                                                              foldlM'_loop :: GHC.Types.SPEC
                                                                              -> GHC.Types.Int
                                                                              -> GHC.Types.Int
                                                                              -> GHC.ST.ST
                                                                                   GHC.Prim.RealWorld
                                                                                   GHC.Types.Int
                                                                {- Arity: 3 -}
                                                              = \ (ds4 :: GHC.Types.SPEC)
                                                                  (z :: GHC.Types.Int)
                                                                  (s7 :: GHC.Types.Int) ->
                                                                case ds4 of ds5 { DEFAULT ->
                                                                case z of z1 { GHC.Types.I# ipv6 ->
                                                                (\ (s8 :: GHC.Prim.State#
                                                                            GHC.Prim.RealWorld) ->
                                                                 case s7 of wild1 { GHC.Types.I# x ->
                                                                 case GHC.Prim.tagToEnum#
                                                                        @ GHC.Types.Bool
                                                                        (GHC.Prim.>=#
                                                                           x
                                                                           ipv1) of wild2 {
                                                                   GHC.Types.False
                                                                   -> case GHC.Prim.indexArray#
                                                                             @ (Multilinear.Generic.Tensor
                                                                                  a)
                                                                             ipv2
                                                                             (GHC.Prim.+#
                                                                                ipv
                                                                                x) of ds3 { Unit# ipv5 ->
                                                                      case GHC.Prim.writeArray#
                                                                             @ (Control.Monad.Primitive.PrimState
                                                                                  (GHC.ST.ST
                                                                                     GHC.Prim.RealWorld))
                                                                             @ (Multilinear.Generic.Tensor
                                                                                  a)
                                                                             ipv4
                                                                             ipv6
                                                                             (Multilinear.Generic.$w$c\/
                                                                                @ a
                                                                                ipv5
                                                                                w1)
                                                                             s8
                                                                               `cast`
                                                                             (Nth:2
                                                                                  (Nth:2
                                                                                       (Trans
                                                                                            (<GHC.ST.STRep
                                                                                                GHC.Prim.RealWorld
                                                                                                ()>_R
                                                                                             ->_R Sym (GHC.ST.N:ST[0]
                                                                                                           <GHC.Prim.RealWorld>_N
                                                                                                           <()>_R))
                                                                                            (((GHC.Prim.State#
                                                                                                 (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                                           <GHC.Prim.RealWorld>_N)))_R
                                                                                              ->_R ((#,#)
                                                                                                      <'GHC.Types.TupleRep
                                                                                                         '[]>_R
                                                                                                      <'GHC.Types.LiftedRep>_R
                                                                                                      (GHC.Prim.State#
                                                                                                         (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                                                   <GHC.Prim.RealWorld>_N)))_R
                                                                                                      <()>_R)_R)
                                                                                             ->_R <GHC.ST.ST
                                                                                                     GHC.Prim.RealWorld
                                                                                                     ()>_R)))) of s'# { DEFAULT ->
                                                                      (foldlM'_loop
                                                                         GHC.Types.SPEC
                                                                         (GHC.Types.I#
                                                                            (GHC.Prim.+# ipv6 1#))
                                                                         (GHC.Types.I#
                                                                            (GHC.Prim.+# x 1#)))
                                                                        `cast`
                                                                      (GHC.ST.N:ST[0]
                                                                           <GHC.Prim.RealWorld>_N
                                                                           <GHC.Types.Int>_R)
                                                                        s'#
                                                                          `cast`
                                                                        (Nth:2
                                                                             (Nth:3
                                                                                  (Nth:2
                                                                                       (Trans
                                                                                            (((GHC.Prim.State#
                                                                                                 (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                                      <GHC.Prim.RealWorld>_N))_R
                                                                                              ->_R ((#,#)
                                                                                                      <'GHC.Types.TupleRep
                                                                                                         '[]>_R
                                                                                                      <'GHC.Types.LiftedRep>_R
                                                                                                      (GHC.Prim.State#
                                                                                                         (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                                              <GHC.Prim.RealWorld>_N))_R
                                                                                                      <()>_R)_R)
                                                                                             ->_R <GHC.ST.ST
                                                                                                     GHC.Prim.RealWorld
                                                                                                     ()>_R)
                                                                                            (<GHC.ST.STRep
                                                                                                GHC.Prim.RealWorld
                                                                                                ()>_R
                                                                                             ->_R GHC.ST.N:ST[0]
                                                                                                      <GHC.Prim.RealWorld>_N
                                                                                                      <()>_R))))) } }
                                                                   GHC.Types.True
                                                                   -> (# s8, z1 #) } })
                                                                  `cast`
                                                                (Sym (GHC.ST.N:ST[0]
                                                                          <GHC.Prim.RealWorld>_N
                                                                          <GHC.Types.Int>_R)) } }
                                                            } in
                                                            case (foldlM'_loop
                                                                    GHC.Types.SPEC
                                                                    (GHC.Types.I# 0#)
                                                                    (GHC.Types.I# 0#))
                                                                   `cast`
                                                                 (GHC.ST.N:ST[0]
                                                                      <GHC.Prim.RealWorld>_N
                                                                      <GHC.Types.Int>_R)
                                                                   ipv3
                                                                     `cast`
                                                                   (Nth:2
                                                                        (Nth:3
                                                                             (Nth:2
                                                                                  (Trans
                                                                                       (((GHC.Prim.State#
                                                                                            (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                                 <GHC.Prim.RealWorld>_N))_R
                                                                                         ->_R ((#,#)
                                                                                                 <'GHC.Types.TupleRep
                                                                                                    '[]>_R
                                                                                                 <'GHC.Types.LiftedRep>_R
                                                                                                 (GHC.Prim.State#
                                                                                                    (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                                         <GHC.Prim.RealWorld>_N))_R
                                                                                                 <Data.Primitive.Array.MutableArray
                                                                                                    (Control.Monad.Primitive.PrimState
                                                                                                       (GHC.ST.ST
                                                                                                          GHC.Prim.RealWorld))
                                                                                                    (Multilinear.Generic.Tensor
                                                                                                       a)>_R)_R)
                                                                                        ->_R <GHC.ST.ST
                                                                                                GHC.Prim.RealWorld
                                                                                                (Data.Primitive.Array.MutableArray
                                                                                                   (Control.Monad.Primitive.PrimState
                                                                                                      (GHC.ST.ST
                                                                                                         GHC.Prim.RealWorld))
                                                                                                   (Multilinear.Generic.Tensor
                                                                                                      a))>_R)
                                                                                       (<GHC.ST.STRep
                                                                                           GHC.Prim.RealWorld
                                                                                           (Data.Primitive.Array.MutableArray
                                                                                              (Control.Monad.Primitive.PrimState
                                                                                                 (GHC.ST.ST
                                                                                                    GHC.Prim.RealWorld))
                                                                                              (Multilinear.Generic.Tensor
                                                                                                 a))>_R
                                                                                        ->_R GHC.ST.N:ST[0]
                                                                                                 <GHC.Prim.RealWorld>_N
                                                                                                 <Data.Primitive.Array.MutableArray
                                                                                                    (Control.Monad.Primitive.PrimState
                                                                                                       (GHC.ST.ST
                                                                                                          GHC.Prim.RealWorld))
                                                                                                    (Multilinear.Generic.Tensor
                                                                                                       a)>_R))))) of ds1 { (#,#) ipv6 ipv7 ->
                                                            case ipv7 of dt { GHC.Types.I# dt1 ->
                                                            case GHC.Prim.unsafeFreezeArray#
                                                                   @ (Control.Monad.Primitive.PrimState
                                                                        (GHC.ST.ST
                                                                           GHC.Prim.RealWorld))
                                                                   @ (Multilinear.Generic.Tensor a)
                                                                   ipv4
                                                                   ipv6
                                                                     `cast`
                                                                   (Nth:2
                                                                        (Nth:2
                                                                             (Trans
                                                                                  (<GHC.ST.STRep
                                                                                      GHC.Prim.RealWorld
                                                                                      (Data.Primitive.Array.Array
                                                                                         (Multilinear.Generic.Tensor
                                                                                            a))>_R
                                                                                   ->_R Sym (GHC.ST.N:ST[0]
                                                                                                 <GHC.Prim.RealWorld>_N
                                                                                                 <Data.Primitive.Array.Array
                                                                                                    (Multilinear.Generic.Tensor
                                                                                                       a)>_R))
                                                                                  (((GHC.Prim.State#
                                                                                       (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                                 <GHC.Prim.RealWorld>_N)))_R
                                                                                    ->_R ((#,#)
                                                                                            <'GHC.Types.TupleRep
                                                                                               '[]>_R
                                                                                            <'GHC.Types.LiftedRep>_R
                                                                                            (GHC.Prim.State#
                                                                                               (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                                         <GHC.Prim.RealWorld>_N)))_R
                                                                                            <Data.Primitive.Array.Array
                                                                                               (Multilinear.Generic.Tensor
                                                                                                  a)>_R)_R)
                                                                                   ->_R <GHC.ST.ST
                                                                                           GHC.Prim.RealWorld
                                                                                           (Data.Primitive.Array.Array
                                                                                              (Multilinear.Generic.Tensor
                                                                                                 a))>_R)))) of ds3 { (#,#) ipv5 ipv9 ->
                                                            (# ipv5
                                                                 `cast`
                                                               (Nth:2
                                                                    (Nth:3
                                                                         (Nth:2
                                                                              (Trans
                                                                                   (((GHC.Prim.State#
                                                                                        (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                             <GHC.Prim.RealWorld>_N))_R
                                                                                     ->_R ((#,#)
                                                                                             <'GHC.Types.TupleRep
                                                                                                '[]>_R
                                                                                             <'GHC.Types.LiftedRep>_R
                                                                                             (GHC.Prim.State#
                                                                                                (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                                     <GHC.Prim.RealWorld>_N))_R
                                                                                             <Data.Primitive.Array.Array
                                                                                                (Multilinear.Generic.Tensor
                                                                                                   a)>_R)_R)
                                                                                    ->_R <GHC.ST.ST
                                                                                            GHC.Prim.RealWorld
                                                                                            (Data.Primitive.Array.Array
                                                                                               (Multilinear.Generic.Tensor
                                                                                                  a))>_R)
                                                                                   (<GHC.ST.STRep
                                                                                       GHC.Prim.RealWorld
                                                                                       (Data.Primitive.Array.Array
                                                                                          (Multilinear.Generic.Tensor
                                                                                             a))>_R
                                                                                    ->_R GHC.ST.N:ST[0]
                                                                                             <GHC.Prim.RealWorld>_N
                                                                                             <Data.Primitive.Array.Array
                                                                                                (Multilinear.Generic.Tensor
                                                                                                   a)>_R))))),
                                                               Data.Vector.Vector
                                                                 @ (Multilinear.Generic.Tensor a)
                                                                 0#
                                                                 dt1
                                                                 ipv9 #) } } } }) of ds1 { (#,#) ipv3 ipv4 ->
                                                    ipv4 } })
                                             } in
                                             let {
                                               $j1 :: Multilinear.Generic.Tensor a <join 0>
                                               = Multilinear.Generic.FiniteTensor
                                                   @ a
                                                   (Multilinear.Index.Finite.Covariant
                                                      (Multilinear.Index.Finite.indexSize index)
                                                      w1)
                                                   (case ts of v2 { Data.Vector.Vector ipv ipv1 ipv2 ->
                                                    case GHC.Magic.runRW#
                                                           @ ('GHC.Types.TupleRep
                                                                '['GHC.Types.TupleRep '[],
                                                                  'GHC.Types.LiftedRep])
                                                           @ (# GHC.Prim.State# GHC.Prim.RealWorld,
                                                                Data.Vector.Vector
                                                                  (Multilinear.Generic.Tensor a) #)
                                                           (\ (s1 :: GHC.Prim.State#
                                                                       GHC.Prim.RealWorld)[OneShot] ->
                                                            case GHC.Prim.newArray#
                                                                   @ (Multilinear.Generic.Tensor a)
                                                                   @ (Control.Monad.Primitive.PrimState
                                                                        (GHC.ST.ST
                                                                           GHC.Prim.RealWorld))
                                                                   ipv1
                                                                   (Data.Vector.Mutable.uninitialised
                                                                      @ (Multilinear.Generic.Tensor
                                                                           a))
                                                                   s1
                                                                     `cast`
                                                                   (Nth:2
                                                                        (Nth:2
                                                                             (Trans
                                                                                  (<GHC.ST.STRep
                                                                                      GHC.Prim.RealWorld
                                                                                      (Data.Primitive.Array.MutableArray
                                                                                         (Control.Monad.Primitive.PrimState
                                                                                            (GHC.ST.ST
                                                                                               GHC.Prim.RealWorld))
                                                                                         (Multilinear.Generic.Tensor
                                                                                            a))>_R
                                                                                   ->_R Sym (GHC.ST.N:ST[0]
                                                                                                 <GHC.Prim.RealWorld>_N
                                                                                                 <Data.Primitive.Array.MutableArray
                                                                                                    (Control.Monad.Primitive.PrimState
                                                                                                       (GHC.ST.ST
                                                                                                          GHC.Prim.RealWorld))
                                                                                                    (Multilinear.Generic.Tensor
                                                                                                       a)>_R))
                                                                                  (((GHC.Prim.State#
                                                                                       (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                                 <GHC.Prim.RealWorld>_N)))_R
                                                                                    ->_R ((#,#)
                                                                                            <'GHC.Types.TupleRep
                                                                                               '[]>_R
                                                                                            <'GHC.Types.LiftedRep>_R
                                                                                            (GHC.Prim.State#
                                                                                               (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                                         <GHC.Prim.RealWorld>_N)))_R
                                                                                            <Data.Primitive.Array.MutableArray
                                                                                               (Control.Monad.Primitive.PrimState
                                                                                                  (GHC.ST.ST
                                                                                                     GHC.Prim.RealWorld))
                                                                                               (Multilinear.Generic.Tensor
                                                                                                  a)>_R)_R)
                                                                                   ->_R <GHC.ST.ST
                                                                                           GHC.Prim.RealWorld
                                                                                           (Data.Primitive.Array.MutableArray
                                                                                              (Control.Monad.Primitive.PrimState
                                                                                                 (GHC.ST.ST
                                                                                                    GHC.Prim.RealWorld))
                                                                                              (Multilinear.Generic.Tensor
                                                                                                 a))>_R)))) of ds2 { (#,#) ipv3 ipv4 ->
                                                            letrec {
                                                              foldlM'_loop :: GHC.Types.SPEC
                                                                              -> GHC.Types.Int
                                                                              -> GHC.Types.Int
                                                                              -> GHC.ST.ST
                                                                                   GHC.Prim.RealWorld
                                                                                   GHC.Types.Int
                                                                {- Arity: 3 -}
                                                              = \ (ds4 :: GHC.Types.SPEC)
                                                                  (z :: GHC.Types.Int)
                                                                  (s7 :: GHC.Types.Int) ->
                                                                case ds4 of ds5 { DEFAULT ->
                                                                case z of z1 { GHC.Types.I# ipv6 ->
                                                                (\ (s8 :: GHC.Prim.State#
                                                                            GHC.Prim.RealWorld) ->
                                                                 case s7 of wild1 { GHC.Types.I# x ->
                                                                 case GHC.Prim.tagToEnum#
                                                                        @ GHC.Types.Bool
                                                                        (GHC.Prim.>=#
                                                                           x
                                                                           ipv1) of wild2 {
                                                                   GHC.Types.False
                                                                   -> case GHC.Prim.indexArray#
                                                                             @ (Multilinear.Generic.Tensor
                                                                                  a)
                                                                             ipv2
                                                                             (GHC.Prim.+#
                                                                                ipv
                                                                                x) of ds3 { Unit# ipv5 ->
                                                                      case GHC.Prim.writeArray#
                                                                             @ (Control.Monad.Primitive.PrimState
                                                                                  (GHC.ST.ST
                                                                                     GHC.Prim.RealWorld))
                                                                             @ (Multilinear.Generic.Tensor
                                                                                  a)
                                                                             ipv4
                                                                             ipv6
                                                                             (Multilinear.Generic.$w$c\/
                                                                                @ a
                                                                                ipv5
                                                                                w1)
                                                                             s8
                                                                               `cast`
                                                                             (Nth:2
                                                                                  (Nth:2
                                                                                       (Trans
                                                                                            (<GHC.ST.STRep
                                                                                                GHC.Prim.RealWorld
                                                                                                ()>_R
                                                                                             ->_R Sym (GHC.ST.N:ST[0]
                                                                                                           <GHC.Prim.RealWorld>_N
                                                                                                           <()>_R))
                                                                                            (((GHC.Prim.State#
                                                                                                 (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                                           <GHC.Prim.RealWorld>_N)))_R
                                                                                              ->_R ((#,#)
                                                                                                      <'GHC.Types.TupleRep
                                                                                                         '[]>_R
                                                                                                      <'GHC.Types.LiftedRep>_R
                                                                                                      (GHC.Prim.State#
                                                                                                         (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                                                   <GHC.Prim.RealWorld>_N)))_R
                                                                                                      <()>_R)_R)
                                                                                             ->_R <GHC.ST.ST
                                                                                                     GHC.Prim.RealWorld
                                                                                                     ()>_R)))) of s'# { DEFAULT ->
                                                                      (foldlM'_loop
                                                                         GHC.Types.SPEC
                                                                         (GHC.Types.I#
                                                                            (GHC.Prim.+# ipv6 1#))
                                                                         (GHC.Types.I#
                                                                            (GHC.Prim.+# x 1#)))
                                                                        `cast`
                                                                      (GHC.ST.N:ST[0]
                                                                           <GHC.Prim.RealWorld>_N
                                                                           <GHC.Types.Int>_R)
                                                                        s'#
                                                                          `cast`
                                                                        (Nth:2
                                                                             (Nth:3
                                                                                  (Nth:2
                                                                                       (Trans
                                                                                            (((GHC.Prim.State#
                                                                                                 (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                                      <GHC.Prim.RealWorld>_N))_R
                                                                                              ->_R ((#,#)
                                                                                                      <'GHC.Types.TupleRep
                                                                                                         '[]>_R
                                                                                                      <'GHC.Types.LiftedRep>_R
                                                                                                      (GHC.Prim.State#
                                                                                                         (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                                              <GHC.Prim.RealWorld>_N))_R
                                                                                                      <()>_R)_R)
                                                                                             ->_R <GHC.ST.ST
                                                                                                     GHC.Prim.RealWorld
                                                                                                     ()>_R)
                                                                                            (<GHC.ST.STRep
                                                                                                GHC.Prim.RealWorld
                                                                                                ()>_R
                                                                                             ->_R GHC.ST.N:ST[0]
                                                                                                      <GHC.Prim.RealWorld>_N
                                                                                                      <()>_R))))) } }
                                                                   GHC.Types.True
                                                                   -> (# s8, z1 #) } })
                                                                  `cast`
                                                                (Sym (GHC.ST.N:ST[0]
                                                                          <GHC.Prim.RealWorld>_N
                                                                          <GHC.Types.Int>_R)) } }
                                                            } in
                                                            case (foldlM'_loop
                                                                    GHC.Types.SPEC
                                                                    (GHC.Types.I# 0#)
                                                                    (GHC.Types.I# 0#))
                                                                   `cast`
                                                                 (GHC.ST.N:ST[0]
                                                                      <GHC.Prim.RealWorld>_N
                                                                      <GHC.Types.Int>_R)
                                                                   ipv3
                                                                     `cast`
                                                                   (Nth:2
                                                                        (Nth:3
                                                                             (Nth:2
                                                                                  (Trans
                                                                                       (((GHC.Prim.State#
                                                                                            (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                                 <GHC.Prim.RealWorld>_N))_R
                                                                                         ->_R ((#,#)
                                                                                                 <'GHC.Types.TupleRep
                                                                                                    '[]>_R
                                                                                                 <'GHC.Types.LiftedRep>_R
                                                                                                 (GHC.Prim.State#
                                                                                                    (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                                         <GHC.Prim.RealWorld>_N))_R
                                                                                                 <Data.Primitive.Array.MutableArray
                                                                                                    (Control.Monad.Primitive.PrimState
                                                                                                       (GHC.ST.ST
                                                                                                          GHC.Prim.RealWorld))
                                                                                                    (Multilinear.Generic.Tensor
                                                                                                       a)>_R)_R)
                                                                                        ->_R <GHC.ST.ST
                                                                                                GHC.Prim.RealWorld
                                                                                                (Data.Primitive.Array.MutableArray
                                                                                                   (Control.Monad.Primitive.PrimState
                                                                                                      (GHC.ST.ST
                                                                                                         GHC.Prim.RealWorld))
                                                                                                   (Multilinear.Generic.Tensor
                                                                                                      a))>_R)
                                                                                       (<GHC.ST.STRep
                                                                                           GHC.Prim.RealWorld
                                                                                           (Data.Primitive.Array.MutableArray
                                                                                              (Control.Monad.Primitive.PrimState
                                                                                                 (GHC.ST.ST
                                                                                                    GHC.Prim.RealWorld))
                                                                                              (Multilinear.Generic.Tensor
                                                                                                 a))>_R
                                                                                        ->_R GHC.ST.N:ST[0]
                                                                                                 <GHC.Prim.RealWorld>_N
                                                                                                 <Data.Primitive.Array.MutableArray
                                                                                                    (Control.Monad.Primitive.PrimState
                                                                                                       (GHC.ST.ST
                                                                                                          GHC.Prim.RealWorld))
                                                                                                    (Multilinear.Generic.Tensor
                                                                                                       a)>_R))))) of ds1 { (#,#) ipv6 ipv7 ->
                                                            case ipv7 of dt { GHC.Types.I# dt1 ->
                                                            case GHC.Prim.unsafeFreezeArray#
                                                                   @ (Control.Monad.Primitive.PrimState
                                                                        (GHC.ST.ST
                                                                           GHC.Prim.RealWorld))
                                                                   @ (Multilinear.Generic.Tensor a)
                                                                   ipv4
                                                                   ipv6
                                                                     `cast`
                                                                   (Nth:2
                                                                        (Nth:2
                                                                             (Trans
                                                                                  (<GHC.ST.STRep
                                                                                      GHC.Prim.RealWorld
                                                                                      (Data.Primitive.Array.Array
                                                                                         (Multilinear.Generic.Tensor
                                                                                            a))>_R
                                                                                   ->_R Sym (GHC.ST.N:ST[0]
                                                                                                 <GHC.Prim.RealWorld>_N
                                                                                                 <Data.Primitive.Array.Array
                                                                                                    (Multilinear.Generic.Tensor
                                                                                                       a)>_R))
                                                                                  (((GHC.Prim.State#
                                                                                       (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                                 <GHC.Prim.RealWorld>_N)))_R
                                                                                    ->_R ((#,#)
                                                                                            <'GHC.Types.TupleRep
                                                                                               '[]>_R
                                                                                            <'GHC.Types.LiftedRep>_R
                                                                                            (GHC.Prim.State#
                                                                                               (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                                         <GHC.Prim.RealWorld>_N)))_R
                                                                                            <Data.Primitive.Array.Array
                                                                                               (Multilinear.Generic.Tensor
                                                                                                  a)>_R)_R)
                                                                                   ->_R <GHC.ST.ST
                                                                                           GHC.Prim.RealWorld
                                                                                           (Data.Primitive.Array.Array
                                                                                              (Multilinear.Generic.Tensor
                                                                                                 a))>_R)))) of ds3 { (#,#) ipv5 ipv9 ->
                                                            (# ipv5
                                                                 `cast`
                                                               (Nth:2
                                                                    (Nth:3
                                                                         (Nth:2
                                                                              (Trans
                                                                                   (((GHC.Prim.State#
                                                                                        (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                             <GHC.Prim.RealWorld>_N))_R
                                                                                     ->_R ((#,#)
                                                                                             <'GHC.Types.TupleRep
                                                                                                '[]>_R
                                                                                             <'GHC.Types.LiftedRep>_R
                                                                                             (GHC.Prim.State#
                                                                                                (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                                     <GHC.Prim.RealWorld>_N))_R
                                                                                             <Data.Primitive.Array.Array
                                                                                                (Multilinear.Generic.Tensor
                                                                                                   a)>_R)_R)
                                                                                    ->_R <GHC.ST.ST
                                                                                            GHC.Prim.RealWorld
                                                                                            (Data.Primitive.Array.Array
                                                                                               (Multilinear.Generic.Tensor
                                                                                                  a))>_R)
                                                                                   (<GHC.ST.STRep
                                                                                       GHC.Prim.RealWorld
                                                                                       (Data.Primitive.Array.Array
                                                                                          (Multilinear.Generic.Tensor
                                                                                             a))>_R
                                                                                    ->_R GHC.ST.N:ST[0]
                                                                                             <GHC.Prim.RealWorld>_N
                                                                                             <Data.Primitive.Array.Array
                                                                                                (Multilinear.Generic.Tensor
                                                                                                   a)>_R))))),
                                                               Data.Vector.Vector
                                                                 @ (Multilinear.Generic.Tensor a)
                                                                 0#
                                                                 dt1
                                                                 ipv9 #) } } } }) of ds1 { (#,#) ipv3 ipv4 ->
                                                    ipv4 } })
                                             } in
                                             case index of wild1 {
                                               Multilinear.Index.Finite.Covariant ds1 ds2
                                               -> case GHC.Base.eqString ds2 w1 of wild2 {
                                                    GHC.Types.False -> $j GHC.Types.True -> $j1 }
                                               Multilinear.Index.Finite.Contravariant ds1 ds2
                                               -> case GHC.Base.eqString ds2 w1 of wild2 {
                                                    GHC.Types.False -> $j GHC.Types.True -> $j1 }
                                               Multilinear.Index.Finite.Indifferent ds1 ds2
                                               -> case GHC.Base.eqString ds2 w1 of wild2 {
                                                    GHC.Types.False -> $j GHC.Types.True -> $j1 } }
                                          Multilinear.Generic.InfiniteTensor index ts
                                          -> let {
                                               $j :: Multilinear.Generic.Tensor a <join 0>
                                               = Multilinear.Generic.InfiniteTensor
                                                   @ a
                                                   index
                                                   (letrec {
                                                      go8 :: [Multilinear.Generic.Tensor a]
                                                             -> [Multilinear.Generic.Tensor a]
                                                        {- Arity: 1 -}
                                                      = \ (ds :: [Multilinear.Generic.Tensor a]) ->
                                                        case ds of wild1 {
                                                          []
                                                          -> GHC.Types.[]
                                                               @ (Multilinear.Generic.Tensor a)
                                                          : y ys
                                                          -> GHC.Types.:
                                                               @ (Multilinear.Generic.Tensor a)
                                                               (Multilinear.Generic.$w$c\/ @ a y w1)
                                                               (go8 ys) }
                                                    } in
                                                    go8 ts)
                                             } in
                                             let {
                                               $j1 :: Multilinear.Generic.Tensor a <join 0>
                                               = Multilinear.Generic.InfiniteTensor
                                                   @ a
                                                   (Multilinear.Index.Infinite.Covariant w1)
                                                   (letrec {
                                                      go8 :: [Multilinear.Generic.Tensor a]
                                                             -> [Multilinear.Generic.Tensor a]
                                                        {- Arity: 1 -}
                                                      = \ (ds :: [Multilinear.Generic.Tensor a]) ->
                                                        case ds of wild1 {
                                                          []
                                                          -> GHC.Types.[]
                                                               @ (Multilinear.Generic.Tensor a)
                                                          : y ys
                                                          -> GHC.Types.:
                                                               @ (Multilinear.Generic.Tensor a)
                                                               (Multilinear.Generic.$w$c\/ @ a y w1)
                                                               (go8 ys) }
                                                    } in
                                                    go8 ts)
                                             } in
                                             case index of wild1 {
                                               Multilinear.Index.Infinite.Covariant ds1
                                               -> case GHC.Base.eqString ds1 w1 of wild2 {
                                                    GHC.Types.False -> $j GHC.Types.True -> $j1 }
                                               Multilinear.Index.Infinite.Contravariant ds1
                                               -> case GHC.Base.eqString ds1 w1 of wild2 {
                                                    GHC.Types.False -> $j GHC.Types.True -> $j1 }
                                               Multilinear.Index.Infinite.Indifferent ds1
                                               -> case GHC.Base.eqString ds1 w1 of wild2 {
                                                    GHC.Types.False -> $j GHC.Types.True -> $j1 } }
                                          Multilinear.Generic.Err msg
                                          -> Multilinear.Generic.Err @ a msg }) -}
3435455de223a292a66afccee7caf4fd
  $w$cel ::
    Multilinear.Generic.Tensor a
    -> (GHC.Base.String, [GHC.Types.Int])
    -> Multilinear.Generic.Tensor a
  {- Arity: 2, Strictness: <S,1*U><L,1*U(U,U)>, Inline: [0],
     Unfolding(loop-breaker): <stable> (\ @ a
                                          (w :: Multilinear.Generic.Tensor a)
                                          (w1 :: (GHC.Base.String, [GHC.Types.Int])) ->
                                        case w of wild {
                                          Multilinear.Generic.Scalar x
                                          -> Multilinear.Generic.Scalar @ a x
                                          Multilinear.Generic.SimpleFinite index1 ds
                                          -> case w1 of wild1 { (,) inds vals ->
                                             letrec {
                                               go8 :: [GHC.Types.Char]
                                                      -> [GHC.Types.Int]
                                                      -> Data.Monoid.First
                                                           (GHC.Types.Char, GHC.Types.Int)
                                                 {- Arity: 2 -}
                                               = \ (ds1 :: [GHC.Types.Char])
                                                   (_ys :: [GHC.Types.Int]) ->
                                                 case ds1 of wild2 {
                                                   []
                                                   -> (GHC.Base.Nothing
                                                         @ (GHC.Types.Char, GHC.Types.Int))
                                                        `cast`
                                                      (Sym (Data.Monoid.N:First[0]) <(GHC.Types.Char,
                                                                                      GHC.Types.Int)>_N)
                                                   : ipv ipv1
                                                   -> case _ys of wild3 {
                                                        []
                                                        -> (GHC.Base.Nothing
                                                              @ (GHC.Types.Char, GHC.Types.Int))
                                                             `cast`
                                                           (Sym (Data.Monoid.N:First[0]) <(GHC.Types.Char,
                                                                                           GHC.Types.Int)>_N)
                                                        : ipv2 ipv3
                                                        -> case index1 of wild4 {
                                                             Multilinear.Index.Finite.Covariant ds2 ds3
                                                             -> case GHC.Base.eqString
                                                                       (GHC.Types.:
                                                                          @ GHC.Types.Char
                                                                          ipv
                                                                          (GHC.Types.[]
                                                                             @ GHC.Types.Char))
                                                                       ds3 of wild5 {
                                                                  GHC.Types.False -> go8 ipv1 ipv3
                                                                  GHC.Types.True
                                                                  -> (GHC.Base.Just
                                                                        @ (GHC.Types.Char,
                                                                           GHC.Types.Int)
                                                                        (ipv, ipv2))
                                                                       `cast`
                                                                     (Sym (Data.Monoid.N:First[0]) <(GHC.Types.Char,
                                                                                                     GHC.Types.Int)>_N) }
                                                             Multilinear.Index.Finite.Contravariant ds2 ds3
                                                             -> case GHC.Base.eqString
                                                                       (GHC.Types.:
                                                                          @ GHC.Types.Char
                                                                          ipv
                                                                          (GHC.Types.[]
                                                                             @ GHC.Types.Char))
                                                                       ds3 of wild5 {
                                                                  GHC.Types.False -> go8 ipv1 ipv3
                                                                  GHC.Types.True
                                                                  -> (GHC.Base.Just
                                                                        @ (GHC.Types.Char,
                                                                           GHC.Types.Int)
                                                                        (ipv, ipv2))
                                                                       `cast`
                                                                     (Sym (Data.Monoid.N:First[0]) <(GHC.Types.Char,
                                                                                                     GHC.Types.Int)>_N) }
                                                             Multilinear.Index.Finite.Indifferent ds2 ds3
                                                             -> case GHC.Base.eqString
                                                                       (GHC.Types.:
                                                                          @ GHC.Types.Char
                                                                          ipv
                                                                          (GHC.Types.[]
                                                                             @ GHC.Types.Char))
                                                                       ds3 of wild5 {
                                                                  GHC.Types.False -> go8 ipv1 ipv3
                                                                  GHC.Types.True
                                                                  -> (GHC.Base.Just
                                                                        @ (GHC.Types.Char,
                                                                           GHC.Types.Int)
                                                                        (ipv, ipv2))
                                                                       `cast`
                                                                     (Sym (Data.Monoid.N:First[0]) <(GHC.Types.Char,
                                                                                                     GHC.Types.Int)>_N) } } } }
                                             } in
                                             case (go8 inds vals)
                                                    `cast`
                                                  (Data.Monoid.N:First[0] <(GHC.Types.Char,
                                                                            GHC.Types.Int)>_N) of wild2 {
                                               GHC.Base.Nothing -> wild
                                               GHC.Base.Just ipv
                                               -> let {
                                                    $j :: Multilinear.Generic.Tensor a <join 0>
                                                    = GHC.Err.error
                                                        @ 'GHC.Types.LiftedRep
                                                        @ (Multilinear.Generic.Tensor a)
                                                        (GHC.Stack.Types.PushCallStack
                                                           (GHC.CString.unpackCString# "error"#)
                                                           (GHC.Stack.Types.SrcLoc
                                                              (GHC.CString.unpackCString#
                                                                 "Multilinear-0.8.0.0-4dpV53DlxV5EwwV6FZreVP"#)
                                                              (GHC.CString.unpackCString#
                                                                 "Multilinear.Generic"#)
                                                              (GHC.CString.unpackCString#
                                                                 "src\\Multilinear\\Generic.hs"#)
                                                              (GHC.Types.I# 183#)
                                                              (GHC.Types.I# 62#)
                                                              (GHC.Types.I# 183#)
                                                              (GHC.Types.I# 112#))
                                                           GHC.Stack.Types.EmptyCallStack)
                                                          `cast`
                                                        (Sym (GHC.Classes.N:IP[0]
                                                                  <"callStack">_N
                                                                  <GHC.Stack.Types.CallStack>_N))
                                                        (GHC.CString.unpackAppendCString#
                                                           "Index + "#
                                                           (let {
                                                              z :: GHC.Prim.Addr#
                                                              = " out of bonds!"#
                                                            } in
                                                            let {
                                                              z1 :: [GHC.Types.Char]
                                                              = GHC.CString.unpackCString# z
                                                            } in
                                                            letrec {
                                                              go9 :: [GHC.Types.Char]
                                                                     -> [GHC.Types.Char]
                                                                {- Arity: 1 -}
                                                              = \ (ds1 :: [GHC.Types.Char]) ->
                                                                case ds1 of wild3 {
                                                                  [] -> z1
                                                                  : y ys
                                                                  -> GHC.Types.:
                                                                       @ GHC.Types.Char
                                                                       y
                                                                       (go9 ys) }
                                                            } in
                                                            go9
                                                              (Multilinear.Index.Finite.$fShowIndex_$cshow
                                                                 index1)))
                                                  } in
                                                  case index1 of wild3 {
                                                    Multilinear.Index.Finite.Covariant ds1 ds2
                                                    -> case ipv of wild4 { (,) ds4 y ->
                                                       case y of wild5 { GHC.Types.I# x ->
                                                       case ds1 of wild6 { GHC.Types.I# y1 ->
                                                       case GHC.Prim.tagToEnum#
                                                              @ GHC.Types.Bool
                                                              (GHC.Prim.>=# x y1) of wild7 {
                                                         GHC.Types.False
                                                         -> Multilinear.Generic.Scalar
                                                              @ a
                                                              (let {
                                                                 file :: GHC.Prim.Addr#
                                                                 = ".\\Data\\Vector\\Generic.hs"#
                                                               } in
                                                               case GHC.Prim.tagToEnum#
                                                                      @ GHC.Types.Bool
                                                                      (GHC.Prim.>=# x 0#) of wild8 {
                                                                 GHC.Types.False
                                                                 -> case ds of v2 { Data.Vector.Vector ipv1 ipv2 ipv3 ->
                                                                    Data.Vector.Internal.Check.$wcheckError
                                                                      @ a
                                                                      (GHC.CString.unpackCString#
                                                                         file)
                                                                      245#
                                                                      Data.Vector.Internal.Check.Bounds
                                                                      (GHC.CString.unpackCString#
                                                                         "(!)"#)
                                                                      (Data.Vector.Internal.Check.checkIndex_msg#
                                                                         x
                                                                         ipv2) }
                                                                 GHC.Types.True
                                                                 -> case ds of v2 { Data.Vector.Vector ipv1 ipv2 ipv3 ->
                                                                    case GHC.Prim.tagToEnum#
                                                                           @ GHC.Types.Bool
                                                                           (GHC.Prim.<#
                                                                              x
                                                                              ipv2) of wild9 {
                                                                      GHC.Types.False
                                                                      -> Data.Vector.Internal.Check.$wcheckError
                                                                           @ a
                                                                           (GHC.CString.unpackCString#
                                                                              file)
                                                                           245#
                                                                           Data.Vector.Internal.Check.Bounds
                                                                           (GHC.CString.unpackCString#
                                                                              "(!)"#)
                                                                           (Data.Vector.Internal.Check.checkIndex_msg#
                                                                              x
                                                                              ipv2)
                                                                      GHC.Types.True
                                                                      -> case GHC.Prim.indexArray#
                                                                                @ a
                                                                                ipv3
                                                                                (GHC.Prim.+#
                                                                                   ipv1
                                                                                   x) of ds3 { Unit# ipv4 ->
                                                                         ipv4 } } } })
                                                         GHC.Types.True -> $j } } } }
                                                    Multilinear.Index.Finite.Contravariant ds1 ds2
                                                    -> case ipv of wild4 { (,) ds4 y ->
                                                       case y of wild5 { GHC.Types.I# x ->
                                                       case ds1 of wild6 { GHC.Types.I# y1 ->
                                                       case GHC.Prim.tagToEnum#
                                                              @ GHC.Types.Bool
                                                              (GHC.Prim.>=# x y1) of wild7 {
                                                         GHC.Types.False
                                                         -> Multilinear.Generic.Scalar
                                                              @ a
                                                              (let {
                                                                 file :: GHC.Prim.Addr#
                                                                 = ".\\Data\\Vector\\Generic.hs"#
                                                               } in
                                                               case GHC.Prim.tagToEnum#
                                                                      @ GHC.Types.Bool
                                                                      (GHC.Prim.>=# x 0#) of wild8 {
                                                                 GHC.Types.False
                                                                 -> case ds of v2 { Data.Vector.Vector ipv1 ipv2 ipv3 ->
                                                                    Data.Vector.Internal.Check.$wcheckError
                                                                      @ a
                                                                      (GHC.CString.unpackCString#
                                                                         file)
                                                                      245#
                                                                      Data.Vector.Internal.Check.Bounds
                                                                      (GHC.CString.unpackCString#
                                                                         "(!)"#)
                                                                      (Data.Vector.Internal.Check.checkIndex_msg#
                                                                         x
                                                                         ipv2) }
                                                                 GHC.Types.True
                                                                 -> case ds of v2 { Data.Vector.Vector ipv1 ipv2 ipv3 ->
                                                                    case GHC.Prim.tagToEnum#
                                                                           @ GHC.Types.Bool
                                                                           (GHC.Prim.<#
                                                                              x
                                                                              ipv2) of wild9 {
                                                                      GHC.Types.False
                                                                      -> Data.Vector.Internal.Check.$wcheckError
                                                                           @ a
                                                                           (GHC.CString.unpackCString#
                                                                              file)
                                                                           245#
                                                                           Data.Vector.Internal.Check.Bounds
                                                                           (GHC.CString.unpackCString#
                                                                              "(!)"#)
                                                                           (Data.Vector.Internal.Check.checkIndex_msg#
                                                                              x
                                                                              ipv2)
                                                                      GHC.Types.True
                                                                      -> case GHC.Prim.indexArray#
                                                                                @ a
                                                                                ipv3
                                                                                (GHC.Prim.+#
                                                                                   ipv1
                                                                                   x) of ds3 { Unit# ipv4 ->
                                                                         ipv4 } } } })
                                                         GHC.Types.True -> $j } } } }
                                                    Multilinear.Index.Finite.Indifferent ds1 ds2
                                                    -> case ipv of wild4 { (,) ds4 y ->
                                                       case y of wild5 { GHC.Types.I# x ->
                                                       case ds1 of wild6 { GHC.Types.I# y1 ->
                                                       case GHC.Prim.tagToEnum#
                                                              @ GHC.Types.Bool
                                                              (GHC.Prim.>=# x y1) of wild7 {
                                                         GHC.Types.False
                                                         -> Multilinear.Generic.Scalar
                                                              @ a
                                                              (let {
                                                                 file :: GHC.Prim.Addr#
                                                                 = ".\\Data\\Vector\\Generic.hs"#
                                                               } in
                                                               case GHC.Prim.tagToEnum#
                                                                      @ GHC.Types.Bool
                                                                      (GHC.Prim.>=# x 0#) of wild8 {
                                                                 GHC.Types.False
                                                                 -> case ds of v2 { Data.Vector.Vector ipv1 ipv2 ipv3 ->
                                                                    Data.Vector.Internal.Check.$wcheckError
                                                                      @ a
                                                                      (GHC.CString.unpackCString#
                                                                         file)
                                                                      245#
                                                                      Data.Vector.Internal.Check.Bounds
                                                                      (GHC.CString.unpackCString#
                                                                         "(!)"#)
                                                                      (Data.Vector.Internal.Check.checkIndex_msg#
                                                                         x
                                                                         ipv2) }
                                                                 GHC.Types.True
                                                                 -> case ds of v2 { Data.Vector.Vector ipv1 ipv2 ipv3 ->
                                                                    case GHC.Prim.tagToEnum#
                                                                           @ GHC.Types.Bool
                                                                           (GHC.Prim.<#
                                                                              x
                                                                              ipv2) of wild9 {
                                                                      GHC.Types.False
                                                                      -> Data.Vector.Internal.Check.$wcheckError
                                                                           @ a
                                                                           (GHC.CString.unpackCString#
                                                                              file)
                                                                           245#
                                                                           Data.Vector.Internal.Check.Bounds
                                                                           (GHC.CString.unpackCString#
                                                                              "(!)"#)
                                                                           (Data.Vector.Internal.Check.checkIndex_msg#
                                                                              x
                                                                              ipv2)
                                                                      GHC.Types.True
                                                                      -> case GHC.Prim.indexArray#
                                                                                @ a
                                                                                ipv3
                                                                                (GHC.Prim.+#
                                                                                   ipv1
                                                                                   x) of ds3 { Unit# ipv4 ->
                                                                         ipv4 } } } })
                                                         GHC.Types.True -> $j } } } } } } }
                                          Multilinear.Generic.FiniteTensor index1 v1
                                          -> case w1 of wild1 { (,) inds vals ->
                                             let {
                                               indvals :: [(GHC.Types.Char, GHC.Types.Int)]
                                               = letrec {
                                                   go8 :: [GHC.Types.Char]
                                                          -> [GHC.Types.Int]
                                                          -> [(GHC.Types.Char, GHC.Types.Int)]
                                                     {- Arity: 2 -}
                                                   = \ (ds :: [GHC.Types.Char])
                                                       (_ys :: [GHC.Types.Int]) ->
                                                     case ds of wild2 {
                                                       []
                                                       -> GHC.Types.[]
                                                            @ (GHC.Types.Char, GHC.Types.Int)
                                                       : ipv ipv1
                                                       -> case _ys of wild3 {
                                                            []
                                                            -> GHC.Types.[]
                                                                 @ (GHC.Types.Char, GHC.Types.Int)
                                                            : ipv2 ipv3
                                                            -> GHC.Types.:
                                                                 @ (GHC.Types.Char, GHC.Types.Int)
                                                                 (ipv, ipv2)
                                                                 (go8 ipv1 ipv3) } }
                                                 } in
                                                 go8 inds vals
                                             } in
                                             let {
                                               indvals1 :: [(GHC.Types.Char, GHC.Types.Int)]
                                               = letrec {
                                                   go8 :: [(GHC.Types.Char, GHC.Types.Int)]
                                                          -> [(GHC.Types.Char, GHC.Types.Int)]
                                                     {- Arity: 1 -}
                                                   = \ (ds :: [(GHC.Types.Char, GHC.Types.Int)]) ->
                                                     case ds of wild2 {
                                                       []
                                                       -> GHC.Types.[]
                                                            @ (GHC.Types.Char, GHC.Types.Int)
                                                       : y ys
                                                       -> case y of wild3 { (,) n ds1 ->
                                                          case index1 of wild4 {
                                                            Multilinear.Index.Finite.Covariant ds2 ds3
                                                            -> case GHC.Classes.$fEqModule_$s$c==
                                                                      (GHC.Types.:
                                                                         @ GHC.Types.Char
                                                                         n
                                                                         (GHC.Types.[]
                                                                            @ GHC.Types.Char))
                                                                      ds3 of wild5 {
                                                                 GHC.Types.False
                                                                 -> GHC.Types.:
                                                                      @ (GHC.Types.Char,
                                                                         GHC.Types.Int)
                                                                      wild3
                                                                      (go8 ys)
                                                                 GHC.Types.True -> go8 ys }
                                                            Multilinear.Index.Finite.Contravariant ds2 ds3
                                                            -> case GHC.Classes.$fEqModule_$s$c==
                                                                      (GHC.Types.:
                                                                         @ GHC.Types.Char
                                                                         n
                                                                         (GHC.Types.[]
                                                                            @ GHC.Types.Char))
                                                                      ds3 of wild5 {
                                                                 GHC.Types.False
                                                                 -> GHC.Types.:
                                                                      @ (GHC.Types.Char,
                                                                         GHC.Types.Int)
                                                                      wild3
                                                                      (go8 ys)
                                                                 GHC.Types.True -> go8 ys }
                                                            Multilinear.Index.Finite.Indifferent ds2 ds3
                                                            -> case GHC.Classes.$fEqModule_$s$c==
                                                                      (GHC.Types.:
                                                                         @ GHC.Types.Char
                                                                         n
                                                                         (GHC.Types.[]
                                                                            @ GHC.Types.Char))
                                                                      ds3 of wild5 {
                                                                 GHC.Types.False
                                                                 -> GHC.Types.:
                                                                      @ (GHC.Types.Char,
                                                                         GHC.Types.Int)
                                                                      wild3
                                                                      (go8 ys)
                                                                 GHC.Types.True -> go8 ys } } } }
                                                 } in
                                                 go8 indvals
                                             } in
                                             letrec {
                                               go8 :: [(GHC.Types.Char, GHC.Types.Int)]
                                                      -> Data.Monoid.First
                                                           (GHC.Types.Char, GHC.Types.Int)
                                                 {- Arity: 1 -}
                                               = \ (ds :: [(GHC.Types.Char, GHC.Types.Int)]) ->
                                                 case ds of wild2 {
                                                   []
                                                   -> (GHC.Base.Nothing
                                                         @ (GHC.Types.Char, GHC.Types.Int))
                                                        `cast`
                                                      (Sym (Data.Monoid.N:First[0]) <(GHC.Types.Char,
                                                                                      GHC.Types.Int)>_N)
                                                   : y ys
                                                   -> case y of wild3 { (,) n ds1 ->
                                                      case index1 of wild4 {
                                                        Multilinear.Index.Finite.Covariant ds2 ds3
                                                        -> case GHC.Base.eqString
                                                                  (GHC.Types.:
                                                                     @ GHC.Types.Char
                                                                     n
                                                                     (GHC.Types.[]
                                                                        @ GHC.Types.Char))
                                                                  ds3 of wild5 {
                                                             GHC.Types.False -> go8 ys
                                                             GHC.Types.True
                                                             -> (GHC.Base.Just
                                                                   @ (GHC.Types.Char, GHC.Types.Int)
                                                                   wild3)
                                                                  `cast`
                                                                (Sym (Data.Monoid.N:First[0]) <(GHC.Types.Char,
                                                                                                GHC.Types.Int)>_N) }
                                                        Multilinear.Index.Finite.Contravariant ds2 ds3
                                                        -> case GHC.Base.eqString
                                                                  (GHC.Types.:
                                                                     @ GHC.Types.Char
                                                                     n
                                                                     (GHC.Types.[]
                                                                        @ GHC.Types.Char))
                                                                  ds3 of wild5 {
                                                             GHC.Types.False -> go8 ys
                                                             GHC.Types.True
                                                             -> (GHC.Base.Just
                                                                   @ (GHC.Types.Char, GHC.Types.Int)
                                                                   wild3)
                                                                  `cast`
                                                                (Sym (Data.Monoid.N:First[0]) <(GHC.Types.Char,
                                                                                                GHC.Types.Int)>_N) }
                                                        Multilinear.Index.Finite.Indifferent ds2 ds3
                                                        -> case GHC.Base.eqString
                                                                  (GHC.Types.:
                                                                     @ GHC.Types.Char
                                                                     n
                                                                     (GHC.Types.[]
                                                                        @ GHC.Types.Char))
                                                                  ds3 of wild5 {
                                                             GHC.Types.False -> go8 ys
                                                             GHC.Types.True
                                                             -> (GHC.Base.Just
                                                                   @ (GHC.Types.Char, GHC.Types.Int)
                                                                   wild3)
                                                                  `cast`
                                                                (Sym (Data.Monoid.N:First[0]) <(GHC.Types.Char,
                                                                                                GHC.Types.Int)>_N) } } } }
                                             } in
                                             case (go8 indvals)
                                                    `cast`
                                                  (Data.Monoid.N:First[0] <(GHC.Types.Char,
                                                                            GHC.Types.Int)>_N) of wild2 {
                                               GHC.Base.Nothing
                                               -> Multilinear.Generic.FiniteTensor
                                                    @ a
                                                    index1
                                                    (case v1 of v2 { Data.Vector.Vector ipv ipv1 ipv2 ->
                                                     case GHC.Magic.runRW#
                                                            @ ('GHC.Types.TupleRep
                                                                 '['GHC.Types.TupleRep '[],
                                                                   'GHC.Types.LiftedRep])
                                                            @ (# GHC.Prim.State# GHC.Prim.RealWorld,
                                                                 Data.Vector.Vector
                                                                   (Multilinear.Generic.Tensor a) #)
                                                            (\ (s1 :: GHC.Prim.State#
                                                                        GHC.Prim.RealWorld)[OneShot] ->
                                                             case GHC.Prim.newArray#
                                                                    @ (Multilinear.Generic.Tensor a)
                                                                    @ (Control.Monad.Primitive.PrimState
                                                                         (GHC.ST.ST
                                                                            GHC.Prim.RealWorld))
                                                                    ipv1
                                                                    (Data.Vector.Mutable.uninitialised
                                                                       @ (Multilinear.Generic.Tensor
                                                                            a))
                                                                    s1
                                                                      `cast`
                                                                    (Nth:2
                                                                         (Nth:2
                                                                              (Trans
                                                                                   (<GHC.ST.STRep
                                                                                       GHC.Prim.RealWorld
                                                                                       (Data.Primitive.Array.MutableArray
                                                                                          (Control.Monad.Primitive.PrimState
                                                                                             (GHC.ST.ST
                                                                                                GHC.Prim.RealWorld))
                                                                                          (Multilinear.Generic.Tensor
                                                                                             a))>_R
                                                                                    ->_R Sym (GHC.ST.N:ST[0]
                                                                                                  <GHC.Prim.RealWorld>_N
                                                                                                  <Data.Primitive.Array.MutableArray
                                                                                                     (Control.Monad.Primitive.PrimState
                                                                                                        (GHC.ST.ST
                                                                                                           GHC.Prim.RealWorld))
                                                                                                     (Multilinear.Generic.Tensor
                                                                                                        a)>_R))
                                                                                   (((GHC.Prim.State#
                                                                                        (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                                  <GHC.Prim.RealWorld>_N)))_R
                                                                                     ->_R ((#,#)
                                                                                             <'GHC.Types.TupleRep
                                                                                                '[]>_R
                                                                                             <'GHC.Types.LiftedRep>_R
                                                                                             (GHC.Prim.State#
                                                                                                (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                                          <GHC.Prim.RealWorld>_N)))_R
                                                                                             <Data.Primitive.Array.MutableArray
                                                                                                (Control.Monad.Primitive.PrimState
                                                                                                   (GHC.ST.ST
                                                                                                      GHC.Prim.RealWorld))
                                                                                                (Multilinear.Generic.Tensor
                                                                                                   a)>_R)_R)
                                                                                    ->_R <GHC.ST.ST
                                                                                            GHC.Prim.RealWorld
                                                                                            (Data.Primitive.Array.MutableArray
                                                                                               (Control.Monad.Primitive.PrimState
                                                                                                  (GHC.ST.ST
                                                                                                     GHC.Prim.RealWorld))
                                                                                               (Multilinear.Generic.Tensor
                                                                                                  a))>_R)))) of ds2 { (#,#) ipv3 ipv4 ->
                                                             letrec {
                                                               foldlM'_loop :: GHC.Types.SPEC
                                                                               -> GHC.Types.Int
                                                                               -> GHC.Types.Int
                                                                               -> GHC.ST.ST
                                                                                    GHC.Prim.RealWorld
                                                                                    GHC.Types.Int
                                                                 {- Arity: 3 -}
                                                               = \ (ds4 :: GHC.Types.SPEC)
                                                                   (z :: GHC.Types.Int)
                                                                   (s7 :: GHC.Types.Int) ->
                                                                 case ds4 of ds5 { DEFAULT ->
                                                                 case z of z1 { GHC.Types.I# ipv6 ->
                                                                 (\ (s8 :: GHC.Prim.State#
                                                                             GHC.Prim.RealWorld) ->
                                                                  case s7 of wild3 { GHC.Types.I# x ->
                                                                  case GHC.Prim.tagToEnum#
                                                                         @ GHC.Types.Bool
                                                                         (GHC.Prim.>=#
                                                                            x
                                                                            ipv1) of wild4 {
                                                                    GHC.Types.False
                                                                    -> case GHC.Prim.indexArray#
                                                                              @ (Multilinear.Generic.Tensor
                                                                                   a)
                                                                              ipv2
                                                                              (GHC.Prim.+#
                                                                                 ipv
                                                                                 x) of ds3 { Unit# ipv5 ->
                                                                       case GHC.Prim.writeArray#
                                                                              @ (Control.Monad.Primitive.PrimState
                                                                                   (GHC.ST.ST
                                                                                      GHC.Prim.RealWorld))
                                                                              @ (Multilinear.Generic.Tensor
                                                                                   a)
                                                                              ipv4
                                                                              ipv6
                                                                              (Multilinear.Generic.$w$cel
                                                                                 @ a
                                                                                 ipv5
                                                                                 (inds, vals))
                                                                              s8
                                                                                `cast`
                                                                              (Nth:2
                                                                                   (Nth:2
                                                                                        (Trans
                                                                                             (<GHC.ST.STRep
                                                                                                 GHC.Prim.RealWorld
                                                                                                 ()>_R
                                                                                              ->_R Sym (GHC.ST.N:ST[0]
                                                                                                            <GHC.Prim.RealWorld>_N
                                                                                                            <()>_R))
                                                                                             (((GHC.Prim.State#
                                                                                                  (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                                            <GHC.Prim.RealWorld>_N)))_R
                                                                                               ->_R ((#,#)
                                                                                                       <'GHC.Types.TupleRep
                                                                                                          '[]>_R
                                                                                                       <'GHC.Types.LiftedRep>_R
                                                                                                       (GHC.Prim.State#
                                                                                                          (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                                                    <GHC.Prim.RealWorld>_N)))_R
                                                                                                       <()>_R)_R)
                                                                                              ->_R <GHC.ST.ST
                                                                                                      GHC.Prim.RealWorld
                                                                                                      ()>_R)))) of s'# { DEFAULT ->
                                                                       (foldlM'_loop
                                                                          GHC.Types.SPEC
                                                                          (GHC.Types.I#
                                                                             (GHC.Prim.+# ipv6 1#))
                                                                          (GHC.Types.I#
                                                                             (GHC.Prim.+# x 1#)))
                                                                         `cast`
                                                                       (GHC.ST.N:ST[0]
                                                                            <GHC.Prim.RealWorld>_N
                                                                            <GHC.Types.Int>_R)
                                                                         s'#
                                                                           `cast`
                                                                         (Nth:2
                                                                              (Nth:3
                                                                                   (Nth:2
                                                                                        (Trans
                                                                                             (((GHC.Prim.State#
                                                                                                  (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                                       <GHC.Prim.RealWorld>_N))_R
                                                                                               ->_R ((#,#)
                                                                                                       <'GHC.Types.TupleRep
                                                                                                          '[]>_R
                                                                                                       <'GHC.Types.LiftedRep>_R
                                                                                                       (GHC.Prim.State#
                                                                                                          (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                                               <GHC.Prim.RealWorld>_N))_R
                                                                                                       <()>_R)_R)
                                                                                              ->_R <GHC.ST.ST
                                                                                                      GHC.Prim.RealWorld
                                                                                                      ()>_R)
                                                                                             (<GHC.ST.STRep
                                                                                                 GHC.Prim.RealWorld
                                                                                                 ()>_R
                                                                                              ->_R GHC.ST.N:ST[0]
                                                                                                       <GHC.Prim.RealWorld>_N
                                                                                                       <()>_R))))) } }
                                                                    GHC.Types.True
                                                                    -> (# s8, z1 #) } })
                                                                   `cast`
                                                                 (Sym (GHC.ST.N:ST[0]
                                                                           <GHC.Prim.RealWorld>_N
                                                                           <GHC.Types.Int>_R)) } }
                                                             } in
                                                             case (foldlM'_loop
                                                                     GHC.Types.SPEC
                                                                     (GHC.Types.I# 0#)
                                                                     (GHC.Types.I# 0#))
                                                                    `cast`
                                                                  (GHC.ST.N:ST[0]
                                                                       <GHC.Prim.RealWorld>_N
                                                                       <GHC.Types.Int>_R)
                                                                    ipv3
                                                                      `cast`
                                                                    (Nth:2
                                                                         (Nth:3
                                                                              (Nth:2
                                                                                   (Trans
                                                                                        (((GHC.Prim.State#
                                                                                             (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                                  <GHC.Prim.RealWorld>_N))_R
                                                                                          ->_R ((#,#)
                                                                                                  <'GHC.Types.TupleRep
                                                                                                     '[]>_R
                                                                                                  <'GHC.Types.LiftedRep>_R
                                                                                                  (GHC.Prim.State#
                                                                                                     (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                                          <GHC.Prim.RealWorld>_N))_R
                                                                                                  <Data.Primitive.Array.MutableArray
                                                                                                     (Control.Monad.Primitive.PrimState
                                                                                                        (GHC.ST.ST
                                                                                                           GHC.Prim.RealWorld))
                                                                                                     (Multilinear.Generic.Tensor
                                                                                                        a)>_R)_R)
                                                                                         ->_R <GHC.ST.ST
                                                                                                 GHC.Prim.RealWorld
                                                                                                 (Data.Primitive.Array.MutableArray
                                                                                                    (Control.Monad.Primitive.PrimState
                                                                                                       (GHC.ST.ST
                                                                                                          GHC.Prim.RealWorld))
                                                                                                    (Multilinear.Generic.Tensor
                                                                                                       a))>_R)
                                                                                        (<GHC.ST.STRep
                                                                                            GHC.Prim.RealWorld
                                                                                            (Data.Primitive.Array.MutableArray
                                                                                               (Control.Monad.Primitive.PrimState
                                                                                                  (GHC.ST.ST
                                                                                                     GHC.Prim.RealWorld))
                                                                                               (Multilinear.Generic.Tensor
                                                                                                  a))>_R
                                                                                         ->_R GHC.ST.N:ST[0]
                                                                                                  <GHC.Prim.RealWorld>_N
                                                                                                  <Data.Primitive.Array.MutableArray
                                                                                                     (Control.Monad.Primitive.PrimState
                                                                                                        (GHC.ST.ST
                                                                                                           GHC.Prim.RealWorld))
                                                                                                     (Multilinear.Generic.Tensor
                                                                                                        a)>_R))))) of ds1 { (#,#) ipv6 ipv7 ->
                                                             case ipv7 of dt { GHC.Types.I# dt1 ->
                                                             case GHC.Prim.unsafeFreezeArray#
                                                                    @ (Control.Monad.Primitive.PrimState
                                                                         (GHC.ST.ST
                                                                            GHC.Prim.RealWorld))
                                                                    @ (Multilinear.Generic.Tensor a)
                                                                    ipv4
                                                                    ipv6
                                                                      `cast`
                                                                    (Nth:2
                                                                         (Nth:2
                                                                              (Trans
                                                                                   (<GHC.ST.STRep
                                                                                       GHC.Prim.RealWorld
                                                                                       (Data.Primitive.Array.Array
                                                                                          (Multilinear.Generic.Tensor
                                                                                             a))>_R
                                                                                    ->_R Sym (GHC.ST.N:ST[0]
                                                                                                  <GHC.Prim.RealWorld>_N
                                                                                                  <Data.Primitive.Array.Array
                                                                                                     (Multilinear.Generic.Tensor
                                                                                                        a)>_R))
                                                                                   (((GHC.Prim.State#
                                                                                        (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                                  <GHC.Prim.RealWorld>_N)))_R
                                                                                     ->_R ((#,#)
                                                                                             <'GHC.Types.TupleRep
                                                                                                '[]>_R
                                                                                             <'GHC.Types.LiftedRep>_R
                                                                                             (GHC.Prim.State#
                                                                                                (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                                          <GHC.Prim.RealWorld>_N)))_R
                                                                                             <Data.Primitive.Array.Array
                                                                                                (Multilinear.Generic.Tensor
                                                                                                   a)>_R)_R)
                                                                                    ->_R <GHC.ST.ST
                                                                                            GHC.Prim.RealWorld
                                                                                            (Data.Primitive.Array.Array
                                                                                               (Multilinear.Generic.Tensor
                                                                                                  a))>_R)))) of ds3 { (#,#) ipv5 ipv9 ->
                                                             (# ipv5
                                                                  `cast`
                                                                (Nth:2
                                                                     (Nth:3
                                                                          (Nth:2
                                                                               (Trans
                                                                                    (((GHC.Prim.State#
                                                                                         (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                              <GHC.Prim.RealWorld>_N))_R
                                                                                      ->_R ((#,#)
                                                                                              <'GHC.Types.TupleRep
                                                                                                 '[]>_R
                                                                                              <'GHC.Types.LiftedRep>_R
                                                                                              (GHC.Prim.State#
                                                                                                 (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                                      <GHC.Prim.RealWorld>_N))_R
                                                                                              <Data.Primitive.Array.Array
                                                                                                 (Multilinear.Generic.Tensor
                                                                                                    a)>_R)_R)
                                                                                     ->_R <GHC.ST.ST
                                                                                             GHC.Prim.RealWorld
                                                                                             (Data.Primitive.Array.Array
                                                                                                (Multilinear.Generic.Tensor
                                                                                                   a))>_R)
                                                                                    (<GHC.ST.STRep
                                                                                        GHC.Prim.RealWorld
                                                                                        (Data.Primitive.Array.Array
                                                                                           (Multilinear.Generic.Tensor
                                                                                              a))>_R
                                                                                     ->_R GHC.ST.N:ST[0]
                                                                                              <GHC.Prim.RealWorld>_N
                                                                                              <Data.Primitive.Array.Array
                                                                                                 (Multilinear.Generic.Tensor
                                                                                                    a)>_R))))),
                                                                Data.Vector.Vector
                                                                  @ (Multilinear.Generic.Tensor a)
                                                                  0#
                                                                  dt1
                                                                  ipv9 #) } } } }) of ds1 { (#,#) ipv3 ipv4 ->
                                                     ipv4 } })
                                               GHC.Base.Just ipv
                                               -> let {
                                                    karg :: [GHC.Types.Char]
                                                    = letrec {
                                                        go9 :: [(GHC.Types.Char, GHC.Types.Int)]
                                                               -> [GHC.Types.Char]
                                                          {- Arity: 1 -}
                                                        = \ (ds :: [(GHC.Types.Char,
                                                                     GHC.Types.Int)]) ->
                                                          case ds of wild3 {
                                                            [] -> GHC.Types.[] @ GHC.Types.Char
                                                            : y ys
                                                            -> GHC.Types.:
                                                                 @ GHC.Types.Char
                                                                 (Data.Tuple.fst
                                                                    @ GHC.Types.Char
                                                                    @ GHC.Types.Int
                                                                    y)
                                                                 (go9 ys) }
                                                      } in
                                                      go9 indvals1
                                                  } in
                                                  let {
                                                    karg1 :: [GHC.Types.Int]
                                                    = letrec {
                                                        go9 :: [(GHC.Types.Char, GHC.Types.Int)]
                                                               -> [GHC.Types.Int]
                                                          {- Arity: 1 -}
                                                        = \ (ds :: [(GHC.Types.Char,
                                                                     GHC.Types.Int)]) ->
                                                          case ds of wild3 {
                                                            [] -> GHC.Types.[] @ GHC.Types.Int
                                                            : y ys
                                                            -> GHC.Types.:
                                                                 @ GHC.Types.Int
                                                                 (Data.Tuple.snd
                                                                    @ GHC.Types.Char
                                                                    @ GHC.Types.Int
                                                                    y)
                                                                 (go9 ys) }
                                                      } in
                                                      go9 indvals1
                                                  } in
                                                  let {
                                                    $j :: Multilinear.Generic.Tensor a <join 0>
                                                    = GHC.Err.error
                                                        @ 'GHC.Types.LiftedRep
                                                        @ (Multilinear.Generic.Tensor a)
                                                        (GHC.Stack.Types.PushCallStack
                                                           (GHC.CString.unpackCString# "error"#)
                                                           (GHC.Stack.Types.SrcLoc
                                                              (GHC.CString.unpackCString#
                                                                 "Multilinear-0.8.0.0-4dpV53DlxV5EwwV6FZreVP"#)
                                                              (GHC.CString.unpackCString#
                                                                 "Multilinear.Generic"#)
                                                              (GHC.CString.unpackCString#
                                                                 "src\\Multilinear\\Generic.hs"#)
                                                              (GHC.Types.I# 184#)
                                                              (GHC.Types.I# 62#)
                                                              (GHC.Types.I# 184#)
                                                              (GHC.Types.I# 112#))
                                                           GHC.Stack.Types.EmptyCallStack)
                                                          `cast`
                                                        (Sym (GHC.Classes.N:IP[0]
                                                                  <"callStack">_N
                                                                  <GHC.Stack.Types.CallStack>_N))
                                                        (GHC.CString.unpackAppendCString#
                                                           "Index + "#
                                                           (let {
                                                              z :: GHC.Prim.Addr#
                                                              = " out of bonds!"#
                                                            } in
                                                            let {
                                                              z1 :: [GHC.Types.Char]
                                                              = GHC.CString.unpackCString# z
                                                            } in
                                                            letrec {
                                                              go9 :: [GHC.Types.Char]
                                                                     -> [GHC.Types.Char]
                                                                {- Arity: 1 -}
                                                              = \ (ds :: [GHC.Types.Char]) ->
                                                                case ds of wild3 {
                                                                  [] -> z1
                                                                  : y ys
                                                                  -> GHC.Types.:
                                                                       @ GHC.Types.Char
                                                                       y
                                                                       (go9 ys) }
                                                            } in
                                                            go9
                                                              (Multilinear.Index.Finite.$fShowIndex_$cshow
                                                                 index1)))
                                                  } in
                                                  case index1 of wild3 {
                                                    Multilinear.Index.Finite.Covariant ds1 ds2
                                                    -> case ipv of wild4 { (,) ds4 y ->
                                                       case y of wild5 { GHC.Types.I# x ->
                                                       case ds1 of wild6 { GHC.Types.I# y1 ->
                                                       case GHC.Prim.tagToEnum#
                                                              @ GHC.Types.Bool
                                                              (GHC.Prim.>=# x y1) of wild7 {
                                                         GHC.Types.False
                                                         -> let {
                                                              file :: GHC.Prim.Addr#
                                                              = ".\\Data\\Vector\\Generic.hs"#
                                                            } in
                                                            case GHC.Prim.tagToEnum#
                                                                   @ GHC.Types.Bool
                                                                   (GHC.Prim.>=# x 0#) of wild8 {
                                                              GHC.Types.False
                                                              -> case v1 of v2 { Data.Vector.Vector ipv1 ipv2 ipv3 ->
                                                                 Data.Vector.Internal.Check.$wcheckError
                                                                   @ (Multilinear.Generic.Tensor a)
                                                                   (GHC.CString.unpackCString# file)
                                                                   245#
                                                                   Data.Vector.Internal.Check.Bounds
                                                                   (GHC.CString.unpackCString#
                                                                      "(!)"#)
                                                                   (Data.Vector.Internal.Check.checkIndex_msg#
                                                                      x
                                                                      ipv2) }
                                                              GHC.Types.True
                                                              -> case v1 of v2 { Data.Vector.Vector ipv1 ipv2 ipv3 ->
                                                                 case GHC.Prim.tagToEnum#
                                                                        @ GHC.Types.Bool
                                                                        (GHC.Prim.<#
                                                                           x
                                                                           ipv2) of wild9 {
                                                                   GHC.Types.False
                                                                   -> Data.Vector.Internal.Check.$wcheckError
                                                                        @ (Multilinear.Generic.Tensor
                                                                             a)
                                                                        (GHC.CString.unpackCString#
                                                                           file)
                                                                        245#
                                                                        Data.Vector.Internal.Check.Bounds
                                                                        (GHC.CString.unpackCString#
                                                                           "(!)"#)
                                                                        (Data.Vector.Internal.Check.checkIndex_msg#
                                                                           x
                                                                           ipv2)
                                                                   GHC.Types.True
                                                                   -> case GHC.Prim.indexArray#
                                                                             @ (Multilinear.Generic.Tensor
                                                                                  a)
                                                                             ipv3
                                                                             (GHC.Prim.+#
                                                                                ipv1
                                                                                x) of ds3 { Unit# ipv4 ->
                                                                      Multilinear.Generic.$w$cel
                                                                        @ a
                                                                        ipv4
                                                                        (karg, karg1) } } } }
                                                         GHC.Types.True -> $j } } } }
                                                    Multilinear.Index.Finite.Contravariant ds1 ds2
                                                    -> case ipv of wild4 { (,) ds4 y ->
                                                       case y of wild5 { GHC.Types.I# x ->
                                                       case ds1 of wild6 { GHC.Types.I# y1 ->
                                                       case GHC.Prim.tagToEnum#
                                                              @ GHC.Types.Bool
                                                              (GHC.Prim.>=# x y1) of wild7 {
                                                         GHC.Types.False
                                                         -> let {
                                                              file :: GHC.Prim.Addr#
                                                              = ".\\Data\\Vector\\Generic.hs"#
                                                            } in
                                                            case GHC.Prim.tagToEnum#
                                                                   @ GHC.Types.Bool
                                                                   (GHC.Prim.>=# x 0#) of wild8 {
                                                              GHC.Types.False
                                                              -> case v1 of v2 { Data.Vector.Vector ipv1 ipv2 ipv3 ->
                                                                 Data.Vector.Internal.Check.$wcheckError
                                                                   @ (Multilinear.Generic.Tensor a)
                                                                   (GHC.CString.unpackCString# file)
                                                                   245#
                                                                   Data.Vector.Internal.Check.Bounds
                                                                   (GHC.CString.unpackCString#
                                                                      "(!)"#)
                                                                   (Data.Vector.Internal.Check.checkIndex_msg#
                                                                      x
                                                                      ipv2) }
                                                              GHC.Types.True
                                                              -> case v1 of v2 { Data.Vector.Vector ipv1 ipv2 ipv3 ->
                                                                 case GHC.Prim.tagToEnum#
                                                                        @ GHC.Types.Bool
                                                                        (GHC.Prim.<#
                                                                           x
                                                                           ipv2) of wild9 {
                                                                   GHC.Types.False
                                                                   -> Data.Vector.Internal.Check.$wcheckError
                                                                        @ (Multilinear.Generic.Tensor
                                                                             a)
                                                                        (GHC.CString.unpackCString#
                                                                           file)
                                                                        245#
                                                                        Data.Vector.Internal.Check.Bounds
                                                                        (GHC.CString.unpackCString#
                                                                           "(!)"#)
                                                                        (Data.Vector.Internal.Check.checkIndex_msg#
                                                                           x
                                                                           ipv2)
                                                                   GHC.Types.True
                                                                   -> case GHC.Prim.indexArray#
                                                                             @ (Multilinear.Generic.Tensor
                                                                                  a)
                                                                             ipv3
                                                                             (GHC.Prim.+#
                                                                                ipv1
                                                                                x) of ds3 { Unit# ipv4 ->
                                                                      Multilinear.Generic.$w$cel
                                                                        @ a
                                                                        ipv4
                                                                        (karg, karg1) } } } }
                                                         GHC.Types.True -> $j } } } }
                                                    Multilinear.Index.Finite.Indifferent ds1 ds2
                                                    -> case ipv of wild4 { (,) ds4 y ->
                                                       case y of wild5 { GHC.Types.I# x ->
                                                       case ds1 of wild6 { GHC.Types.I# y1 ->
                                                       case GHC.Prim.tagToEnum#
                                                              @ GHC.Types.Bool
                                                              (GHC.Prim.>=# x y1) of wild7 {
                                                         GHC.Types.False
                                                         -> let {
                                                              file :: GHC.Prim.Addr#
                                                              = ".\\Data\\Vector\\Generic.hs"#
                                                            } in
                                                            case GHC.Prim.tagToEnum#
                                                                   @ GHC.Types.Bool
                                                                   (GHC.Prim.>=# x 0#) of wild8 {
                                                              GHC.Types.False
                                                              -> case v1 of v2 { Data.Vector.Vector ipv1 ipv2 ipv3 ->
                                                                 Data.Vector.Internal.Check.$wcheckError
                                                                   @ (Multilinear.Generic.Tensor a)
                                                                   (GHC.CString.unpackCString# file)
                                                                   245#
                                                                   Data.Vector.Internal.Check.Bounds
                                                                   (GHC.CString.unpackCString#
                                                                      "(!)"#)
                                                                   (Data.Vector.Internal.Check.checkIndex_msg#
                                                                      x
                                                                      ipv2) }
                                                              GHC.Types.True
                                                              -> case v1 of v2 { Data.Vector.Vector ipv1 ipv2 ipv3 ->
                                                                 case GHC.Prim.tagToEnum#
                                                                        @ GHC.Types.Bool
                                                                        (GHC.Prim.<#
                                                                           x
                                                                           ipv2) of wild9 {
                                                                   GHC.Types.False
                                                                   -> Data.Vector.Internal.Check.$wcheckError
                                                                        @ (Multilinear.Generic.Tensor
                                                                             a)
                                                                        (GHC.CString.unpackCString#
                                                                           file)
                                                                        245#
                                                                        Data.Vector.Internal.Check.Bounds
                                                                        (GHC.CString.unpackCString#
                                                                           "(!)"#)
                                                                        (Data.Vector.Internal.Check.checkIndex_msg#
                                                                           x
                                                                           ipv2)
                                                                   GHC.Types.True
                                                                   -> case GHC.Prim.indexArray#
                                                                             @ (Multilinear.Generic.Tensor
                                                                                  a)
                                                                             ipv3
                                                                             (GHC.Prim.+#
                                                                                ipv1
                                                                                x) of ds3 { Unit# ipv4 ->
                                                                      Multilinear.Generic.$w$cel
                                                                        @ a
                                                                        ipv4
                                                                        (karg, karg1) } } } }
                                                         GHC.Types.True -> $j } } } } } } }
                                          Multilinear.Generic.InfiniteTensor index1 v1
                                          -> case w1 of wild1 { (,) inds vals ->
                                             let {
                                               indvals :: [(GHC.Types.Char, GHC.Types.Int)]
                                               = letrec {
                                                   go8 :: [GHC.Types.Char]
                                                          -> [GHC.Types.Int]
                                                          -> [(GHC.Types.Char, GHC.Types.Int)]
                                                     {- Arity: 2 -}
                                                   = \ (ds :: [GHC.Types.Char])
                                                       (_ys :: [GHC.Types.Int]) ->
                                                     case ds of wild2 {
                                                       []
                                                       -> GHC.Types.[]
                                                            @ (GHC.Types.Char, GHC.Types.Int)
                                                       : ipv ipv1
                                                       -> case _ys of wild3 {
                                                            []
                                                            -> GHC.Types.[]
                                                                 @ (GHC.Types.Char, GHC.Types.Int)
                                                            : ipv2 ipv3
                                                            -> GHC.Types.:
                                                                 @ (GHC.Types.Char, GHC.Types.Int)
                                                                 (ipv, ipv2)
                                                                 (go8 ipv1 ipv3) } }
                                                 } in
                                                 go8 inds vals
                                             } in
                                             let {
                                               indvals1 :: [(GHC.Types.Char, GHC.Types.Int)]
                                               = letrec {
                                                   go8 :: [(GHC.Types.Char, GHC.Types.Int)]
                                                          -> [(GHC.Types.Char, GHC.Types.Int)]
                                                     {- Arity: 1 -}
                                                   = \ (ds :: [(GHC.Types.Char, GHC.Types.Int)]) ->
                                                     case ds of wild2 {
                                                       []
                                                       -> GHC.Types.[]
                                                            @ (GHC.Types.Char, GHC.Types.Int)
                                                       : y ys
                                                       -> case y of wild3 { (,) n ds1 ->
                                                          case index1 of wild4 {
                                                            Multilinear.Index.Infinite.Covariant ds2
                                                            -> case GHC.Classes.$fEqModule_$s$c==
                                                                      (GHC.Types.:
                                                                         @ GHC.Types.Char
                                                                         n
                                                                         (GHC.Types.[]
                                                                            @ GHC.Types.Char))
                                                                      ds2 of wild5 {
                                                                 GHC.Types.False
                                                                 -> GHC.Types.:
                                                                      @ (GHC.Types.Char,
                                                                         GHC.Types.Int)
                                                                      wild3
                                                                      (go8 ys)
                                                                 GHC.Types.True -> go8 ys }
                                                            Multilinear.Index.Infinite.Contravariant ds2
                                                            -> case GHC.Classes.$fEqModule_$s$c==
                                                                      (GHC.Types.:
                                                                         @ GHC.Types.Char
                                                                         n
                                                                         (GHC.Types.[]
                                                                            @ GHC.Types.Char))
                                                                      ds2 of wild5 {
                                                                 GHC.Types.False
                                                                 -> GHC.Types.:
                                                                      @ (GHC.Types.Char,
                                                                         GHC.Types.Int)
                                                                      wild3
                                                                      (go8 ys)
                                                                 GHC.Types.True -> go8 ys }
                                                            Multilinear.Index.Infinite.Indifferent ds2
                                                            -> case GHC.Classes.$fEqModule_$s$c==
                                                                      (GHC.Types.:
                                                                         @ GHC.Types.Char
                                                                         n
                                                                         (GHC.Types.[]
                                                                            @ GHC.Types.Char))
                                                                      ds2 of wild5 {
                                                                 GHC.Types.False
                                                                 -> GHC.Types.:
                                                                      @ (GHC.Types.Char,
                                                                         GHC.Types.Int)
                                                                      wild3
                                                                      (go8 ys)
                                                                 GHC.Types.True -> go8 ys } } } }
                                                 } in
                                                 go8 indvals
                                             } in
                                             letrec {
                                               go8 :: [(GHC.Types.Char, GHC.Types.Int)]
                                                      -> Data.Monoid.First
                                                           (GHC.Types.Char, GHC.Types.Int)
                                                 {- Arity: 1 -}
                                               = \ (ds :: [(GHC.Types.Char, GHC.Types.Int)]) ->
                                                 case ds of wild2 {
                                                   []
                                                   -> (GHC.Base.Nothing
                                                         @ (GHC.Types.Char, GHC.Types.Int))
                                                        `cast`
                                                      (Sym (Data.Monoid.N:First[0]) <(GHC.Types.Char,
                                                                                      GHC.Types.Int)>_N)
                                                   : y ys
                                                   -> case y of wild3 { (,) n ds1 ->
                                                      case index1 of wild4 {
                                                        Multilinear.Index.Infinite.Covariant ds2
                                                        -> case GHC.Base.eqString
                                                                  (GHC.Types.:
                                                                     @ GHC.Types.Char
                                                                     n
                                                                     (GHC.Types.[]
                                                                        @ GHC.Types.Char))
                                                                  ds2 of wild5 {
                                                             GHC.Types.False -> go8 ys
                                                             GHC.Types.True
                                                             -> (GHC.Base.Just
                                                                   @ (GHC.Types.Char, GHC.Types.Int)
                                                                   wild3)
                                                                  `cast`
                                                                (Sym (Data.Monoid.N:First[0]) <(GHC.Types.Char,
                                                                                                GHC.Types.Int)>_N) }
                                                        Multilinear.Index.Infinite.Contravariant ds2
                                                        -> case GHC.Base.eqString
                                                                  (GHC.Types.:
                                                                     @ GHC.Types.Char
                                                                     n
                                                                     (GHC.Types.[]
                                                                        @ GHC.Types.Char))
                                                                  ds2 of wild5 {
                                                             GHC.Types.False -> go8 ys
                                                             GHC.Types.True
                                                             -> (GHC.Base.Just
                                                                   @ (GHC.Types.Char, GHC.Types.Int)
                                                                   wild3)
                                                                  `cast`
                                                                (Sym (Data.Monoid.N:First[0]) <(GHC.Types.Char,
                                                                                                GHC.Types.Int)>_N) }
                                                        Multilinear.Index.Infinite.Indifferent ds2
                                                        -> case GHC.Base.eqString
                                                                  (GHC.Types.:
                                                                     @ GHC.Types.Char
                                                                     n
                                                                     (GHC.Types.[]
                                                                        @ GHC.Types.Char))
                                                                  ds2 of wild5 {
                                                             GHC.Types.False -> go8 ys
                                                             GHC.Types.True
                                                             -> (GHC.Base.Just
                                                                   @ (GHC.Types.Char, GHC.Types.Int)
                                                                   wild3)
                                                                  `cast`
                                                                (Sym (Data.Monoid.N:First[0]) <(GHC.Types.Char,
                                                                                                GHC.Types.Int)>_N) } } } }
                                             } in
                                             case (go8 indvals)
                                                    `cast`
                                                  (Data.Monoid.N:First[0] <(GHC.Types.Char,
                                                                            GHC.Types.Int)>_N) of wild2 {
                                               GHC.Base.Nothing
                                               -> Multilinear.Generic.InfiniteTensor
                                                    @ a
                                                    index1
                                                    (letrec {
                                                       go9 :: [Multilinear.Generic.Tensor a]
                                                              -> [Multilinear.Generic.Tensor a]
                                                         {- Arity: 1 -}
                                                       = \ (ds :: [Multilinear.Generic.Tensor a]) ->
                                                         case ds of wild3 {
                                                           []
                                                           -> GHC.Types.[]
                                                                @ (Multilinear.Generic.Tensor a)
                                                           : y ys
                                                           -> GHC.Types.:
                                                                @ (Multilinear.Generic.Tensor a)
                                                                (Multilinear.Generic.$w$cel
                                                                   @ a
                                                                   y
                                                                   (inds, vals))
                                                                (go9 ys) }
                                                     } in
                                                     go9 v1)
                                               GHC.Base.Just ipv
                                               -> case ipv of wild3 { (,) ds1 y ->
                                                  case y of ww { GHC.Types.I# ww1 ->
                                                  Multilinear.Generic.$w$cel
                                                    @ a
                                                    (GHC.List.$w!!
                                                       @ (Multilinear.Generic.Tensor a)
                                                       v1
                                                       ww1)
                                                    (letrec {
                                                       go9 :: [(GHC.Types.Char, GHC.Types.Int)]
                                                              -> [GHC.Types.Char]
                                                         {- Arity: 1 -}
                                                       = \ (ds :: [(GHC.Types.Char,
                                                                    GHC.Types.Int)]) ->
                                                         case ds of wild4 {
                                                           [] -> GHC.Types.[] @ GHC.Types.Char
                                                           : y1 ys
                                                           -> GHC.Types.:
                                                                @ GHC.Types.Char
                                                                (Data.Tuple.fst
                                                                   @ GHC.Types.Char
                                                                   @ GHC.Types.Int
                                                                   y1)
                                                                (go9 ys) }
                                                     } in
                                                     go9 indvals1,
                                                     letrec {
                                                       go9 :: [(GHC.Types.Char, GHC.Types.Int)]
                                                              -> [GHC.Types.Int]
                                                         {- Arity: 1 -}
                                                       = \ (ds :: [(GHC.Types.Char,
                                                                    GHC.Types.Int)]) ->
                                                         case ds of wild4 {
                                                           [] -> GHC.Types.[] @ GHC.Types.Int
                                                           : y1 ys
                                                           -> GHC.Types.:
                                                                @ GHC.Types.Int
                                                                (Data.Tuple.snd
                                                                   @ GHC.Types.Char
                                                                   @ GHC.Types.Int
                                                                   y1)
                                                                (go9 ys) }
                                                     } in
                                                     go9 indvals1) } } } }
                                          Multilinear.Generic.Err msg
                                          -> Multilinear.Generic.Err @ a msg }) -}
3435455de223a292a66afccee7caf4fd
  $w$cequiv ::
    Multilinear.Generic.Tensor a
    -> Multilinear.Generic.Tensor a -> GHC.Types.Bool
  {- Arity: 2, Strictness: <S,1*U><S,1*U>, Inline: [0],
     Unfolding: (\ @ a
                   (w :: Multilinear.Generic.Tensor a)
                   (w1 :: Multilinear.Generic.Tensor a) ->
                 Data.Set.Internal.$fEqSet_$c==
                   @ Multilinear.Index.TIndex
                   Multilinear.Index.$fEqTIndex
                   (Multilinear.$dmequiv_$sfromList
                      (Multilinear.Generic.$w$cindices @ a w))
                   (Multilinear.$dmequiv_$sfromList
                      (Multilinear.Generic.$w$cindices @ a w1))) -}
3435455de223a292a66afccee7caf4fd
  $w$cfromBinaryFile ::
    Data.Serialize.Serialize a =>
    GHC.Base.String
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Either.Either
            [GHC.Types.Char] (Multilinear.Generic.Tensor a) #)
  {- Arity: 3,
     Strictness: <L,U(C(U(1*U,C(C(U)))),C(C1(C1(C1(C1(C1(U)))))))><L,U><S,U>,
     Inline: [0],
     Unfolding: (\ @ a
                   (w :: Data.Serialize.Serialize a)
                   (w1 :: GHC.Base.String)
                   (w2 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case GHC.IO.Handle.FD.openBinaryFile1
                        w1
                        GHC.IO.IOMode.ReadMode
                        w2 of ds1 { (#,#) ipv ipv1 ->
                 case Data.ByteString.Lazy.getContents2
                        ipv1
                        ipv of ds2 { (#,#) ipv2 ipv3 ->
                 (# ipv2,
                    Data.Serialize.decodeLazy
                      @ (Multilinear.Generic.Tensor a)
                      (Multilinear.Generic.$fSerializeTensor @ a w)
                      (Codec.Compression.Zlib.Internal.foldDecompressStreamWithInput
                         @ Data.ByteString.Lazy.Internal.ByteString
                         Data.ByteString.Lazy.Internal.$WChunk
                         Codec.Compression.Zlib.Internal.decompress2
                         Codec.Compression.Zlib.Internal.decompress1
                         Codec.Compression.GZip.decompress1
                         ipv3) #) } }) -}
3435455de223a292a66afccee7caf4fd
  $w$cfromJSONFile ::
    Data.Aeson.Types.FromJSON.FromJSON a =>
    GHC.Base.String
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          GHC.Base.Maybe (Multilinear.Generic.Tensor a) #)
  {- Arity: 3, Strictness: <L,U(C(C(C1(C1(U)))),A)><L,U><S,U>,
     Inline: [0],
     Unfolding: (\ @ a
                   (w :: Data.Aeson.Types.FromJSON.FromJSON a)
                   (w1 :: GHC.Base.String)
                   (w2 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case GHC.IO.Handle.FD.openBinaryFile1
                        w1
                        GHC.IO.IOMode.ReadMode
                        w2 of ds1 { (#,#) ipv ipv1 ->
                 case Data.ByteString.Lazy.getContents2
                        ipv1
                        ipv of ds2 { (#,#) ipv2 ipv3 ->
                 (# ipv2,
                    case ipv3 of wild {
                      Data.ByteString.Lazy.Internal.Empty
                      -> case Multilinear.Generic.$fMultilinearTensora3 of wild1 {
                           Data.Attoparsec.ByteString.Lazy.Fail ipv4 ipv5 ipv6
                           -> GHC.Base.Nothing @ (Multilinear.Generic.Tensor a)
                           Data.Attoparsec.ByteString.Lazy.Done ds v2
                           -> case (Multilinear.Generic.$fMultilinearTensora_$cparseJSON
                                      @ a
                                      w
                                      v2)
                                     `cast`
                                   (Data.Aeson.Types.Internal.N:Parser[0]
                                        <Multilinear.Generic.Tensor a>_R)
                                     @ Data.Aeson.Types.Internal.Result
                                     @ (Multilinear.Generic.Tensor a)
                                     (GHC.Types.[] @ Data.Aeson.Types.Internal.JSONPathElement)
                                     (Multilinear.Generic.$fMultilinearTensora2 @ a)
                                     (Data.Aeson.Types.Internal.Success
                                        @ (Multilinear.Generic.Tensor a)) of wild2 {
                                Data.Aeson.Types.Internal.Error ipv4
                                -> GHC.Base.Nothing @ (Multilinear.Generic.Tensor a)
                                Data.Aeson.Types.Internal.Success a1
                                -> GHC.Base.Just @ (Multilinear.Generic.Tensor a) a1 } }
                      Data.ByteString.Lazy.Internal.Chunk dt dt1 dt2 dt3 xs
                      -> case Data.Attoparsec.ByteString.Lazy.parse_go
                                @ Data.Aeson.Types.Internal.Value
                                (Data.Aeson.Parser.Internal.$wjsonEOF
                                   @ Data.Aeson.Types.Internal.Value
                                   dt
                                   dt1
                                   dt2
                                   dt3
                                   dt3
                                   0#
                                   0#
                                   Data.Attoparsec.Internal.Types.Incomplete
                                   (Data.Attoparsec.ByteString.Internal.failK
                                      @ Data.Aeson.Types.Internal.Value)
                                     `cast`
                                   (Sub (Sym (Data.Attoparsec.Internal.Types.D:R:StateByteString[0]))
                                    ->_R <Data.Attoparsec.Internal.Types.Pos
                                          -> Data.Attoparsec.Internal.Types.More
                                          -> [GHC.Base.String]
                                          -> GHC.Base.String
                                          -> Data.Attoparsec.Internal.Types.IResult
                                               Data.ByteString.Internal.ByteString
                                               Data.Aeson.Types.Internal.Value>_R)
                                   (Data.Attoparsec.ByteString.Internal.successK
                                      @ Data.Aeson.Types.Internal.Value)
                                     `cast`
                                   (Sub (Sym (Data.Attoparsec.Internal.Types.D:R:StateByteString[0]))
                                    ->_R <Data.Attoparsec.Internal.Types.Pos
                                          -> Data.Attoparsec.Internal.Types.More
                                          -> Data.Aeson.Types.Internal.Value
                                          -> Data.Attoparsec.Internal.Types.IResult
                                               Data.ByteString.Internal.ByteString
                                               Data.Aeson.Types.Internal.Value>_R))
                                xs of wild1 {
                           Data.Attoparsec.ByteString.Lazy.Fail ipv4 ipv5 ipv6
                           -> GHC.Base.Nothing @ (Multilinear.Generic.Tensor a)
                           Data.Attoparsec.ByteString.Lazy.Done ds v2
                           -> case (Multilinear.Generic.$fMultilinearTensora_$cparseJSON
                                      @ a
                                      w
                                      v2)
                                     `cast`
                                   (Data.Aeson.Types.Internal.N:Parser[0]
                                        <Multilinear.Generic.Tensor a>_R)
                                     @ Data.Aeson.Types.Internal.Result
                                     @ (Multilinear.Generic.Tensor a)
                                     (GHC.Types.[] @ Data.Aeson.Types.Internal.JSONPathElement)
                                     (Multilinear.Generic.$fMultilinearTensora2 @ a)
                                     (Data.Aeson.Types.Internal.Success
                                        @ (Multilinear.Generic.Tensor a)) of wild2 {
                                Data.Aeson.Types.Internal.Error ipv4
                                -> GHC.Base.Nothing @ (Multilinear.Generic.Tensor a)
                                Data.Aeson.Types.Internal.Success a1
                                -> GHC.Base.Just
                                     @ (Multilinear.Generic.Tensor a)
                                     a1 } } } #) } }) -}
3435455de223a292a66afccee7caf4fd
  $w$cget ::
    Data.Serialize.Serialize a =>
    forall r.
    GHC.Prim.Addr#
    -> GHC.ForeignPtr.ForeignPtrContents
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> Data.Serialize.Get.Buffer
    -> Data.Serialize.Get.More
    -> GHC.Types.Int
    -> Data.Serialize.Get.Failure r
    -> Data.Serialize.Get.Success (Multilinear.Generic.Tensor a) r
    -> Data.Serialize.Get.Result r
  {- Arity: 10,
     Strictness: <L,U(A,C(C1(C1(C1(C1(C1(U)))))))><L,U><L,U><L,U><S,U><L,U><L,U><L,U(U)><L,U><L,C(C1(C1(C1(C1(U)))))>,
     Inline: [0] -}
3435455de223a292a66afccee7caf4fd
  $w$cindices ::
    Multilinear.Generic.Tensor a -> [Multilinear.Index.TIndex]
  {- Arity: 1, Strictness: <S,1*U>, Inline: [0],
     Unfolding(loop-breaker): <stable> (\ @ a
                                          (w :: Multilinear.Generic.Tensor a) ->
                                        case w of wild {
                                          DEFAULT -> GHC.Types.[] @ Multilinear.Index.TIndex
                                          Multilinear.Generic.SimpleFinite i ds
                                          -> GHC.Types.:
                                               @ Multilinear.Index.TIndex
                                               (Multilinear.Index.Finite.$fIndexIndex_$ctoTIndex i)
                                               (GHC.Types.[] @ Multilinear.Index.TIndex)
                                          Multilinear.Generic.FiniteTensor i ts
                                          -> GHC.Types.:
                                               @ Multilinear.Index.TIndex
                                               (Multilinear.Index.Finite.$fIndexIndex_$ctoTIndex i)
                                               (case ts of v2 { Data.Vector.Vector ipv ipv1 ipv2 ->
                                                case GHC.Prim.tagToEnum#
                                                       @ GHC.Types.Bool
                                                       (GHC.Prim.>=# 0# ipv1) of wild1 {
                                                  GHC.Types.False
                                                  -> case GHC.Prim.indexArray#
                                                            @ (Multilinear.Generic.Tensor a)
                                                            ipv2
                                                            ipv of ds3 { Unit# ipv3 ->
                                                     Multilinear.Generic.$w$cindices @ a ipv3 }
                                                  GHC.Types.True
                                                  -> case GHC.List.badHead
                                                     ret_ty [Multilinear.Index.TIndex]
                                                     of {} } })
                                          Multilinear.Generic.InfiniteTensor i ts
                                          -> GHC.Types.:
                                               @ Multilinear.Index.TIndex
                                               (Multilinear.Index.Infinite.$fIndexIndex_$ctoTIndex
                                                  i)
                                               (case ts of wild1 {
                                                  []
                                                  -> case GHC.List.badHead
                                                     ret_ty [Multilinear.Index.TIndex]
                                                     of {}
                                                  : x ds1
                                                  -> Multilinear.Generic.$w$cindices @ a x }) }) -}
3435455de223a292a66afccee7caf4fd
  $w$corder ::
    Multilinear.Generic.Tensor a -> (# GHC.Types.Int, GHC.Types.Int #)
  {- Arity: 1, Strictness: <S,1*U>, Inline: [0],
     Unfolding(loop-breaker): <stable> (\ @ a
                                          (w :: Multilinear.Generic.Tensor a) ->
                                        case w of wild {
                                          DEFAULT
                                          -> let {
                                               ds :: (GHC.Types.Int, GHC.Types.Int)
                                               = case wild of wild1 {
                                                   Multilinear.Generic.FiniteTensor ds1 ts
                                                   -> case ts of v2 { Data.Vector.Vector ipv ipv1 ipv2 ->
                                                      case GHC.Prim.tagToEnum#
                                                             @ GHC.Types.Bool
                                                             (GHC.Prim.<# 0# ipv1) of wild2 {
                                                        GHC.Types.False
                                                        -> case Data.Vector.Internal.Check.$wcheckError
                                                                  @ (Multilinear.Generic.Tensor a)
                                                                  (GHC.CString.unpackCString#
                                                                     ".\\Data\\Vector\\Generic.hs"#)
                                                                  245#
                                                                  Data.Vector.Internal.Check.Bounds
                                                                  (GHC.CString.unpackCString#
                                                                     "(!)"#)
                                                                  (Data.Vector.Internal.Check.checkIndex_msg#
                                                                     0#
                                                                     ipv1)
                                                           ret_ty (GHC.Types.Int, GHC.Types.Int)
                                                           of {}
                                                        GHC.Types.True
                                                        -> case GHC.Prim.indexArray#
                                                                  @ (Multilinear.Generic.Tensor a)
                                                                  ipv2
                                                                  ipv of ds3 { Unit# ipv3 ->
                                                           case Multilinear.Generic.$w$corder
                                                                  @ a
                                                                  ipv3 of ww { (#,#) ww1 ww2 ->
                                                           (ww1, ww2) } } } }
                                                   Multilinear.Generic.InfiniteTensor ds1 ts
                                                   -> case ts of wild2 {
                                                        []
                                                        -> case GHC.List.badHead
                                                           ret_ty (GHC.Types.Int, GHC.Types.Int)
                                                           of {}
                                                        : x ds2
                                                        -> case Multilinear.Generic.$w$corder
                                                                  @ a
                                                                  x of ww { (#,#) ww1 ww2 ->
                                                           (ww1, ww2) } } }
                                             } in
                                             case wild of wild1 {
                                               Multilinear.Generic.FiniteTensor i ds1
                                               -> case i of wild2 {
                                                    Multilinear.Index.Finite.Covariant size name
                                                    -> (# case ds of wild3 { (,) cnvr covr ->
                                                          cnvr },
                                                          case ds of wild3 { (,) cnvr covr ->
                                                          case covr of wild4 { GHC.Types.I# x ->
                                                          GHC.Types.I# (GHC.Prim.+# x 1#) } } #)
                                                    Multilinear.Index.Finite.Contravariant size name
                                                    -> (# case ds of wild3 { (,) cnvr covr ->
                                                          case cnvr of wild4 { GHC.Types.I# x ->
                                                          GHC.Types.I# (GHC.Prim.+# x 1#) } },
                                                          case ds of wild3 { (,) cnvr covr ->
                                                          covr } #)
                                                    Multilinear.Index.Finite.Indifferent size name
                                                    -> (# case ds of wild3 { (,) cnvr covr ->
                                                          cnvr },
                                                          case ds of wild3 { (,) cnvr covr ->
                                                          covr } #) }
                                               Multilinear.Generic.InfiniteTensor i ds1
                                               -> case i of wild2 {
                                                    Multilinear.Index.Infinite.Covariant name
                                                    -> (# case ds of wild3 { (,) cnvr covr ->
                                                          cnvr },
                                                          case ds of wild3 { (,) cnvr covr ->
                                                          case covr of wild4 { GHC.Types.I# x ->
                                                          GHC.Types.I# (GHC.Prim.+# x 1#) } } #)
                                                    Multilinear.Index.Infinite.Contravariant name
                                                    -> (# case ds of wild3 { (,) cnvr covr ->
                                                          case cnvr of wild4 { GHC.Types.I# x ->
                                                          GHC.Types.I# (GHC.Prim.+# x 1#) } },
                                                          case ds of wild3 { (,) cnvr covr ->
                                                          covr } #)
                                                    Multilinear.Index.Infinite.Indifferent name
                                                    -> (# case ds of wild3 { (,) cnvr covr ->
                                                          cnvr },
                                                          case ds of wild3 { (,) cnvr covr ->
                                                          covr } #) } }
                                          Multilinear.Generic.Scalar ds
                                          -> (# GHC.Types.I# 0#, GHC.Types.I# 0# #)
                                          Multilinear.Generic.SimpleFinite index ds
                                          -> case index of wild1 {
                                               Multilinear.Index.Finite.Covariant ds1 ds2
                                               -> (# GHC.Types.I# 0#, GHC.Types.I# 1# #)
                                               Multilinear.Index.Finite.Contravariant ds1 ds2
                                               -> (# GHC.Types.I# 1#, GHC.Types.I# 0# #)
                                               Multilinear.Index.Finite.Indifferent ds1 ds2
                                               -> (# GHC.Types.I# 0#, GHC.Types.I# 0# #) }
                                          Multilinear.Generic.Err ds
                                          -> (# GHC.Types.I# -1#, GHC.Types.I# -1# #) }) -}
3435455de223a292a66afccee7caf4fd
  $w$cshiftLeft ::
    Multilinear.Generic.Tensor a
    -> GHC.Base.String -> Multilinear.Generic.Tensor a
  {- Arity: 2, Strictness: <S,U><L,U>, Inline: [0] -}
3435455de223a292a66afccee7caf4fd
  $w$cshiftLeftmost ::
    Multilinear.Generic.Tensor a
    -> GHC.Base.String -> Multilinear.Generic.Tensor a
  {- Arity: 2, Strictness: <S,U><S,U>, Inline: [0],
     Unfolding: (\ @ a
                   (w :: Multilinear.Generic.Tensor a)
                   (w1 :: GHC.Base.String) ->
                 letrec {
                   go8 :: Multilinear.Generic.Tensor a -> Multilinear.Generic.Tensor a
                     <join 1> {- Arity: 1, Strictness: <S,U> -}
                   = \ (x :: Multilinear.Generic.Tensor a) ->
                     case Multilinear.Generic.$w$cindices @ a x of wild {
                       []
                       -> case GHC.List.badHead
                          ret_ty (Multilinear.Generic.Tensor a)
                          of {}
                       : y ys
                       -> case y of wild1 {
                            Multilinear.Index.Covariant ds1 ds2
                            -> case GHC.Base.eqString w1 ds2 of wild2 {
                                 GHC.Types.False -> go8 (Multilinear.Generic.$w$cshiftLeft @ a x w1)
                                 GHC.Types.True -> x }
                            Multilinear.Index.Contravariant ds1 ds2
                            -> case GHC.Base.eqString w1 ds2 of wild2 {
                                 GHC.Types.False -> go8 (Multilinear.Generic.$w$cshiftLeft @ a x w1)
                                 GHC.Types.True -> x }
                            Multilinear.Index.Indifferent ds1 ds2
                            -> case GHC.Base.eqString w1 ds2 of wild2 {
                                 GHC.Types.False -> go8 (Multilinear.Generic.$w$cshiftLeft @ a x w1)
                                 GHC.Types.True -> x } } }
                 } in
                 go8 w) -}
3435455de223a292a66afccee7caf4fd
  $w$cshiftRight ::
    Multilinear.Generic.Tensor a
    -> GHC.Base.String -> Multilinear.Generic.Tensor a
  {- Arity: 2, Strictness: <S,U><L,U>, Inline: [0],
     Unfolding(loop-breaker): <stable> (\ @ a
                                          (w :: Multilinear.Generic.Tensor a)
                                          (w1 :: GHC.Base.String) ->
                                        case w of wild {
                                          Multilinear.Generic.Scalar x
                                          -> Multilinear.Generic.Scalar @ a x
                                          Multilinear.Generic.SimpleFinite ds ds1 -> wild
                                          Multilinear.Generic.FiniteTensor index1 ts1
                                          -> letrec {
                                               go8 :: [Multilinear.Index.TIndex]
                                                      -> GHC.Types.Int -> GHC.Types.Int
                                                 {- Arity: 1 -}
                                               = \ (ds :: [Multilinear.Index.TIndex]) ->
                                                 case ds of wild1 {
                                                   [] -> GHC.Base.id @ GHC.Types.Int
                                                   : y ys
                                                   -> let {
                                                        ys1 :: GHC.Types.Int -> GHC.Types.Int
                                                        = go8 ys
                                                      } in
                                                      \ (a1 :: GHC.Types.Int) ->
                                                      case a1 of a2 { GHC.Types.I# ipv ->
                                                      ys1 (GHC.Types.I# (GHC.Prim.+# ipv 1#)) } }
                                             } in
                                             let {
                                               $j :: Multilinear.Generic.Tensor a <join 0>
                                               = letrec {
                                                   go9 :: [Multilinear.Index.TIndex]
                                                          -> GHC.Types.Int -> GHC.Types.Int
                                                     {- Arity: 1 -}
                                                   = \ (ds :: [Multilinear.Index.TIndex]) ->
                                                     case ds of wild1 {
                                                       [] -> GHC.Base.id @ GHC.Types.Int
                                                       : y ys
                                                       -> let {
                                                            ys1 :: GHC.Types.Int -> GHC.Types.Int
                                                            = go9 ys
                                                          } in
                                                          \ (a1 :: GHC.Types.Int) ->
                                                          case a1 of a2 { GHC.Types.I# ipv ->
                                                          ys1
                                                            (GHC.Types.I# (GHC.Prim.+# ipv 1#)) } }
                                                 } in
                                                 let {
                                                   $j1 :: Multilinear.Generic.Tensor a <join 0>
                                                   = Multilinear.Generic.mergeScalars_$smergeScalars
                                                       @ a
                                                       (case ts1 of v2 { Data.Vector.Vector ipv ipv1 ipv2 ->
                                                        case GHC.Prim.tagToEnum#
                                                               @ GHC.Types.Bool
                                                               (GHC.Prim.<# 0# ipv1) of wild3 {
                                                          GHC.Types.False
                                                          -> case Data.Vector.Internal.Check.$wcheckError
                                                                    @ (Multilinear.Generic.Tensor a)
                                                                    (GHC.CString.unpackCString#
                                                                       ".\\Data\\Vector\\Generic.hs"#)
                                                                    245#
                                                                    Data.Vector.Internal.Check.Bounds
                                                                    (GHC.CString.unpackCString#
                                                                       "(!)"#)
                                                                    (Data.Vector.Internal.Check.checkIndex_msg#
                                                                       0#
                                                                       ipv1)
                                                             ret_ty Multilinear.Index.Finite.Index
                                                             of {}
                                                          GHC.Types.True
                                                          -> case GHC.Prim.indexArray#
                                                                    @ (Multilinear.Generic.Tensor a)
                                                                    ipv2
                                                                    ipv of ds3 { Unit# ipv3 ->
                                                             case ipv3 of wild1 {
                                                               DEFAULT
                                                               -> Multilinear.Generic.$fMultilinearTensora12
                                                               Multilinear.Generic.SimpleFinite ds ds1
                                                               -> ds
                                                               Multilinear.Generic.FiniteTensor ds ds1
                                                               -> ds } } } })
                                                       (case GHC.Magic.runRW#
                                                               @ ('GHC.Types.TupleRep
                                                                    '['GHC.Types.TupleRep '[],
                                                                      'GHC.Types.LiftedRep])
                                                               @ (# GHC.Prim.State#
                                                                      GHC.Prim.RealWorld,
                                                                    Data.Vector.Vector
                                                                      (Multilinear.Generic.Tensor
                                                                         a) #)
                                                               (\ (s1 :: GHC.Prim.State#
                                                                           GHC.Prim.RealWorld)[OneShot] ->
                                                                case GHC.Prim.newArray#
                                                                       @ (Multilinear.Generic.Tensor
                                                                            a)
                                                                       @ (Control.Monad.Primitive.PrimState
                                                                            (GHC.ST.ST
                                                                               GHC.Prim.RealWorld))
                                                                       0#
                                                                       (Data.Vector.Mutable.uninitialised
                                                                          @ (Multilinear.Generic.Tensor
                                                                               a))
                                                                       s1
                                                                         `cast`
                                                                       (Nth:2
                                                                            (Nth:2
                                                                                 (Trans
                                                                                      (<GHC.ST.STRep
                                                                                          GHC.Prim.RealWorld
                                                                                          (Data.Primitive.Array.MutableArray
                                                                                             (Control.Monad.Primitive.PrimState
                                                                                                (GHC.ST.ST
                                                                                                   GHC.Prim.RealWorld))
                                                                                             (Multilinear.Generic.Tensor
                                                                                                a))>_R
                                                                                       ->_R Sym (GHC.ST.N:ST[0]
                                                                                                     <GHC.Prim.RealWorld>_N
                                                                                                     <Data.Primitive.Array.MutableArray
                                                                                                        (Control.Monad.Primitive.PrimState
                                                                                                           (GHC.ST.ST
                                                                                                              GHC.Prim.RealWorld))
                                                                                                        (Multilinear.Generic.Tensor
                                                                                                           a)>_R))
                                                                                      (((GHC.Prim.State#
                                                                                           (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                                     <GHC.Prim.RealWorld>_N)))_R
                                                                                        ->_R ((#,#)
                                                                                                <'GHC.Types.TupleRep
                                                                                                   '[]>_R
                                                                                                <'GHC.Types.LiftedRep>_R
                                                                                                (GHC.Prim.State#
                                                                                                   (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                                             <GHC.Prim.RealWorld>_N)))_R
                                                                                                <Data.Primitive.Array.MutableArray
                                                                                                   (Control.Monad.Primitive.PrimState
                                                                                                      (GHC.ST.ST
                                                                                                         GHC.Prim.RealWorld))
                                                                                                   (Multilinear.Generic.Tensor
                                                                                                      a)>_R)_R)
                                                                                       ->_R <GHC.ST.ST
                                                                                               GHC.Prim.RealWorld
                                                                                               (Data.Primitive.Array.MutableArray
                                                                                                  (Control.Monad.Primitive.PrimState
                                                                                                     (GHC.ST.ST
                                                                                                        GHC.Prim.RealWorld))
                                                                                                  (Multilinear.Generic.Tensor
                                                                                                     a))>_R)))) of ds2 { (#,#) ipv ipv1 ->
                                                                letrec {
                                                                  foldlM_loop :: GHC.Types.SPEC
                                                                                 -> (Data.Vector.Generic.Base.Mutable
                                                                                       Data.Vector.Vector
                                                                                       (Control.Monad.Primitive.PrimState
                                                                                          (GHC.ST.ST
                                                                                             GHC.Prim.RealWorld))
                                                                                       (Multilinear.Generic.Tensor
                                                                                          a),
                                                                                     GHC.Types.Int)
                                                                                 -> [[Multilinear.Generic.Tensor
                                                                                        a]]
                                                                                 -> GHC.ST.ST
                                                                                      GHC.Prim.RealWorld
                                                                                      (Data.Vector.Generic.Base.Mutable
                                                                                         Data.Vector.Vector
                                                                                         (Control.Monad.Primitive.PrimState
                                                                                            (GHC.ST.ST
                                                                                               GHC.Prim.RealWorld))
                                                                                         (Multilinear.Generic.Tensor
                                                                                            a),
                                                                                       GHC.Types.Int)
                                                                    {- Arity: 3 -}
                                                                  = \ (ds4 :: GHC.Types.SPEC)
                                                                      (z :: (Data.Vector.Generic.Base.Mutable
                                                                               Data.Vector.Vector
                                                                               (Control.Monad.Primitive.PrimState
                                                                                  (GHC.ST.ST
                                                                                     GHC.Prim.RealWorld))
                                                                               (Multilinear.Generic.Tensor
                                                                                  a),
                                                                             GHC.Types.Int))
                                                                      (s7 :: [[Multilinear.Generic.Tensor
                                                                                 a]]) ->
                                                                    case ds4 of ds5 { DEFAULT ->
                                                                    (\ (s8 :: GHC.Prim.State#
                                                                                GHC.Prim.RealWorld) ->
                                                                     case s7 of wild1 {
                                                                       [] -> (# s8, z #)
                                                                       : x xs1
                                                                       -> case z of wild5 { (,) v3 i1 ->
                                                                          case v3
                                                                                 `cast`
                                                                               (Sub (Data.Vector.D:R:MutableVector[0]) <Control.Monad.Primitive.PrimState
                                                                                                                          (GHC.ST.ST
                                                                                                                             GHC.Prim.RealWorld)>_N <Multilinear.Generic.Tensor
                                                                                                                                                       a>_N) of wild2 { Data.Vector.Mutable.MVector dt dt1 dt2 ->
                                                                          case i1 of wild7 { GHC.Types.I# x1 ->
                                                                          let {
                                                                            y :: GHC.Prim.Int#
                                                                            = GHC.Prim.+# x1 1#
                                                                          } in
                                                                          let {
                                                                            $j2 :: GHC.Prim.State#
                                                                                     GHC.Prim.RealWorld
                                                                                   -> Data.Vector.Generic.Base.Mutable
                                                                                        Data.Vector.Vector
                                                                                        (Control.Monad.Primitive.PrimState
                                                                                           (GHC.ST.ST
                                                                                              GHC.Prim.RealWorld))
                                                                                        (Multilinear.Generic.Tensor
                                                                                           a)
                                                                                   -> (# GHC.Prim.State#
                                                                                           GHC.Prim.RealWorld,
                                                                                         (Data.Vector.Generic.Base.Mutable
                                                                                            Data.Vector.Vector
                                                                                            (Control.Monad.Primitive.PrimState
                                                                                               (GHC.ST.ST
                                                                                                  GHC.Prim.RealWorld))
                                                                                            (Multilinear.Generic.Tensor
                                                                                               a),
                                                                                          GHC.Types.Int) #)
                                                                              <join 2> {- Arity: 2 -}
                                                                            = \ (ipv2 :: GHC.Prim.State#
                                                                                           GHC.Prim.RealWorld)[OneShot]
                                                                                (ipv3 :: Data.Vector.Generic.Base.Mutable
                                                                                           Data.Vector.Vector
                                                                                           (Control.Monad.Primitive.PrimState
                                                                                              (GHC.ST.ST
                                                                                                 GHC.Prim.RealWorld))
                                                                                           (Multilinear.Generic.Tensor
                                                                                              a))[OneShot] ->
                                                                              case ipv3
                                                                                     `cast`
                                                                                   (Sub (Data.Vector.D:R:MutableVector[0]) <Control.Monad.Primitive.PrimState
                                                                                                                              (GHC.ST.ST
                                                                                                                                 GHC.Prim.RealWorld)>_N <Multilinear.Generic.Tensor
                                                                                                                                                           a>_N) of wild3 { Data.Vector.Mutable.MVector dt4 dt5 dt6 ->
                                                                              case GHC.Prim.writeArray#
                                                                                     @ (Control.Monad.Primitive.PrimState
                                                                                          (GHC.ST.ST
                                                                                             GHC.Prim.RealWorld))
                                                                                     @ (Multilinear.Generic.Tensor
                                                                                          a)
                                                                                     dt6
                                                                                     (GHC.Prim.+#
                                                                                        dt4
                                                                                        x1)
                                                                                     (Multilinear.Generic.FiniteTensor
                                                                                        @ a
                                                                                        index1
                                                                                        (case GHC.Magic.runRW#
                                                                                                @ ('GHC.Types.TupleRep
                                                                                                     '['GHC.Types.TupleRep
                                                                                                         '[],
                                                                                                       'GHC.Types.LiftedRep])
                                                                                                @ (# GHC.Prim.State#
                                                                                                       GHC.Prim.RealWorld,
                                                                                                     Data.Vector.Vector
                                                                                                       (Multilinear.Generic.Tensor
                                                                                                          a) #)
                                                                                                (\ (s2 :: GHC.Prim.State#
                                                                                                            GHC.Prim.RealWorld)[OneShot] ->
                                                                                                 case GHC.Prim.newArray#
                                                                                                        @ (Multilinear.Generic.Tensor
                                                                                                             a)
                                                                                                        @ (Control.Monad.Primitive.PrimState
                                                                                                             (GHC.ST.ST
                                                                                                                GHC.Prim.RealWorld))
                                                                                                        0#
                                                                                                        (Data.Vector.Mutable.uninitialised
                                                                                                           @ (Multilinear.Generic.Tensor
                                                                                                                a))
                                                                                                        s2
                                                                                                          `cast`
                                                                                                        (Nth:2
                                                                                                             (Nth:2
                                                                                                                  (Trans
                                                                                                                       (<GHC.ST.STRep
                                                                                                                           GHC.Prim.RealWorld
                                                                                                                           (Data.Primitive.Array.MutableArray
                                                                                                                              (Control.Monad.Primitive.PrimState
                                                                                                                                 (GHC.ST.ST
                                                                                                                                    GHC.Prim.RealWorld))
                                                                                                                              (Multilinear.Generic.Tensor
                                                                                                                                 a))>_R
                                                                                                                        ->_R Sym (GHC.ST.N:ST[0]
                                                                                                                                      <GHC.Prim.RealWorld>_N
                                                                                                                                      <Data.Primitive.Array.MutableArray
                                                                                                                                         (Control.Monad.Primitive.PrimState
                                                                                                                                            (GHC.ST.ST
                                                                                                                                               GHC.Prim.RealWorld))
                                                                                                                                         (Multilinear.Generic.Tensor
                                                                                                                                            a)>_R))
                                                                                                                       (((GHC.Prim.State#
                                                                                                                            (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                                                                      <GHC.Prim.RealWorld>_N)))_R
                                                                                                                         ->_R ((#,#)
                                                                                                                                 <'GHC.Types.TupleRep
                                                                                                                                    '[]>_R
                                                                                                                                 <'GHC.Types.LiftedRep>_R
                                                                                                                                 (GHC.Prim.State#
                                                                                                                                    (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                                                                              <GHC.Prim.RealWorld>_N)))_R
                                                                                                                                 <Data.Primitive.Array.MutableArray
                                                                                                                                    (Control.Monad.Primitive.PrimState
                                                                                                                                       (GHC.ST.ST
                                                                                                                                          GHC.Prim.RealWorld))
                                                                                                                                    (Multilinear.Generic.Tensor
                                                                                                                                       a)>_R)_R)
                                                                                                                        ->_R <GHC.ST.ST
                                                                                                                                GHC.Prim.RealWorld
                                                                                                                                (Data.Primitive.Array.MutableArray
                                                                                                                                   (Control.Monad.Primitive.PrimState
                                                                                                                                      (GHC.ST.ST
                                                                                                                                         GHC.Prim.RealWorld))
                                                                                                                                   (Multilinear.Generic.Tensor
                                                                                                                                      a))>_R)))) of ds1 { (#,#) ipv4 ipv5 ->
                                                                                                 letrec {
                                                                                                   foldlM_loop1 :: GHC.Types.SPEC
                                                                                                                   -> (Data.Vector.Generic.Base.Mutable
                                                                                                                         Data.Vector.Vector
                                                                                                                         (Control.Monad.Primitive.PrimState
                                                                                                                            (GHC.ST.ST
                                                                                                                               GHC.Prim.RealWorld))
                                                                                                                         (Multilinear.Generic.Tensor
                                                                                                                            a),
                                                                                                                       GHC.Types.Int)
                                                                                                                   -> [Multilinear.Generic.Tensor
                                                                                                                         a]
                                                                                                                   -> GHC.ST.ST
                                                                                                                        GHC.Prim.RealWorld
                                                                                                                        (Data.Vector.Generic.Base.Mutable
                                                                                                                           Data.Vector.Vector
                                                                                                                           (Control.Monad.Primitive.PrimState
                                                                                                                              (GHC.ST.ST
                                                                                                                                 GHC.Prim.RealWorld))
                                                                                                                           (Multilinear.Generic.Tensor
                                                                                                                              a),
                                                                                                                         GHC.Types.Int)
                                                                                                     {- Arity: 3 -}
                                                                                                   = \ (ds3 :: GHC.Types.SPEC)
                                                                                                       (z1 :: (Data.Vector.Generic.Base.Mutable
                                                                                                                 Data.Vector.Vector
                                                                                                                 (Control.Monad.Primitive.PrimState
                                                                                                                    (GHC.ST.ST
                                                                                                                       GHC.Prim.RealWorld))
                                                                                                                 (Multilinear.Generic.Tensor
                                                                                                                    a),
                                                                                                               GHC.Types.Int))
                                                                                                       (s3 :: [Multilinear.Generic.Tensor
                                                                                                                 a]) ->
                                                                                                     case ds3 of ds7 { DEFAULT ->
                                                                                                     (\ (s4 :: GHC.Prim.State#
                                                                                                                 GHC.Prim.RealWorld) ->
                                                                                                      case s3 of wild4 {
                                                                                                        []
                                                                                                        -> (# s4,
                                                                                                              z1 #)
                                                                                                        : x2 xs2
                                                                                                        -> case z1 of wild6 { (,) v1 i2 ->
                                                                                                           case v1
                                                                                                                  `cast`
                                                                                                                (Sub (Data.Vector.D:R:MutableVector[0]) <Control.Monad.Primitive.PrimState
                                                                                                                                                           (GHC.ST.ST
                                                                                                                                                              GHC.Prim.RealWorld)>_N <Multilinear.Generic.Tensor
                                                                                                                                                                                        a>_N) of wild8 { Data.Vector.Mutable.MVector dt7 dt8 dt9 ->
                                                                                                           case i2 of wild9 { GHC.Types.I# x3 ->
                                                                                                           let {
                                                                                                             y1 :: GHC.Prim.Int#
                                                                                                             = GHC.Prim.+#
                                                                                                                 x3
                                                                                                                 1#
                                                                                                           } in
                                                                                                           case GHC.Prim.tagToEnum#
                                                                                                                  @ GHC.Types.Bool
                                                                                                                  (GHC.Prim.<#
                                                                                                                     dt8
                                                                                                                     y1) of wild10 {
                                                                                                             GHC.Types.False
                                                                                                             -> case GHC.Prim.writeArray#
                                                                                                                       @ (Control.Monad.Primitive.PrimState
                                                                                                                            (GHC.ST.ST
                                                                                                                               GHC.Prim.RealWorld))
                                                                                                                       @ (Multilinear.Generic.Tensor
                                                                                                                            a)
                                                                                                                       dt9
                                                                                                                       (GHC.Prim.+#
                                                                                                                          dt7
                                                                                                                          x3)
                                                                                                                       x2
                                                                                                                       s4
                                                                                                                         `cast`
                                                                                                                       (Nth:2
                                                                                                                            (Nth:2
                                                                                                                                 (Trans
                                                                                                                                      (<GHC.ST.STRep
                                                                                                                                          GHC.Prim.RealWorld
                                                                                                                                          ()>_R
                                                                                                                                       ->_R Sym (GHC.ST.N:ST[0]
                                                                                                                                                     <GHC.Prim.RealWorld>_N
                                                                                                                                                     <()>_R))
                                                                                                                                      (((GHC.Prim.State#
                                                                                                                                           (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                                                                                     <GHC.Prim.RealWorld>_N)))_R
                                                                                                                                        ->_R ((#,#)
                                                                                                                                                <'GHC.Types.TupleRep
                                                                                                                                                   '[]>_R
                                                                                                                                                <'GHC.Types.LiftedRep>_R
                                                                                                                                                (GHC.Prim.State#
                                                                                                                                                   (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                                                                                             <GHC.Prim.RealWorld>_N)))_R
                                                                                                                                                <()>_R)_R)
                                                                                                                                       ->_R <GHC.ST.ST
                                                                                                                                               GHC.Prim.RealWorld
                                                                                                                                               ()>_R)))) of s'# { DEFAULT ->
                                                                                                                (foldlM_loop1
                                                                                                                   GHC.Types.SPEC
                                                                                                                   (wild8
                                                                                                                      `cast`
                                                                                                                    (Sub (Sym (Data.Vector.D:R:MutableVector[0])) <Control.Monad.Primitive.PrimState
                                                                                                                                                                     (GHC.ST.ST
                                                                                                                                                                        GHC.Prim.RealWorld)>_N <Multilinear.Generic.Tensor
                                                                                                                                                                                                  a>_N),
                                                                                                                    GHC.Types.I#
                                                                                                                      y1)
                                                                                                                   xs2)
                                                                                                                  `cast`
                                                                                                                (GHC.ST.N:ST[0]
                                                                                                                     <GHC.Prim.RealWorld>_N
                                                                                                                     <(Data.Vector.Generic.Base.Mutable
                                                                                                                         Data.Vector.Vector
                                                                                                                         (Control.Monad.Primitive.PrimState
                                                                                                                            (GHC.ST.ST
                                                                                                                               GHC.Prim.RealWorld))
                                                                                                                         (Multilinear.Generic.Tensor
                                                                                                                            a),
                                                                                                                       GHC.Types.Int)>_R)
                                                                                                                  s'#
                                                                                                                    `cast`
                                                                                                                  (Nth:2
                                                                                                                       (Nth:3
                                                                                                                            (Nth:2
                                                                                                                                 (Trans
                                                                                                                                      (((GHC.Prim.State#
                                                                                                                                           (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                                                                                <GHC.Prim.RealWorld>_N))_R
                                                                                                                                        ->_R ((#,#)
                                                                                                                                                <'GHC.Types.TupleRep
                                                                                                                                                   '[]>_R
                                                                                                                                                <'GHC.Types.LiftedRep>_R
                                                                                                                                                (GHC.Prim.State#
                                                                                                                                                   (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                                                                                        <GHC.Prim.RealWorld>_N))_R
                                                                                                                                                <()>_R)_R)
                                                                                                                                       ->_R <GHC.ST.ST
                                                                                                                                               GHC.Prim.RealWorld
                                                                                                                                               ()>_R)
                                                                                                                                      (<GHC.ST.STRep
                                                                                                                                          GHC.Prim.RealWorld
                                                                                                                                          ()>_R
                                                                                                                                       ->_R GHC.ST.N:ST[0]
                                                                                                                                                <GHC.Prim.RealWorld>_N
                                                                                                                                                <()>_R))))) }
                                                                                                             GHC.Types.True
                                                                                                             -> case GHC.Prim.tagToEnum#
                                                                                                                       @ GHC.Types.Bool
                                                                                                                       (GHC.Prim.<=#
                                                                                                                          dt8
                                                                                                                          1#) of wild11 {
                                                                                                                  GHC.Types.False
                                                                                                                  -> let {
                                                                                                                       y2 :: GHC.Prim.Int#
                                                                                                                       = GHC.Prim.-#
                                                                                                                           y1
                                                                                                                           dt8
                                                                                                                     } in
                                                                                                                     case GHC.Prim.tagToEnum#
                                                                                                                            @ GHC.Types.Bool
                                                                                                                            (GHC.Prim.<=#
                                                                                                                               dt8
                                                                                                                               y2) of wild13 {
                                                                                                                       GHC.Types.False
                                                                                                                       -> let {
                                                                                                                            n# :: GHC.Prim.Int#
                                                                                                                            = GHC.Prim.+#
                                                                                                                                dt8
                                                                                                                                dt8
                                                                                                                          } in
                                                                                                                          case GHC.Prim.newArray#
                                                                                                                                 @ (Multilinear.Generic.Tensor
                                                                                                                                      a)
                                                                                                                                 @ (Control.Monad.Primitive.PrimState
                                                                                                                                      (GHC.ST.ST
                                                                                                                                         GHC.Prim.RealWorld))
                                                                                                                                 n#
                                                                                                                                 (Data.Vector.Mutable.uninitialised
                                                                                                                                    @ (Multilinear.Generic.Tensor
                                                                                                                                         a))
                                                                                                                                 s4
                                                                                                                                   `cast`
                                                                                                                                 (Nth:2
                                                                                                                                      (Nth:2
                                                                                                                                           (Trans
                                                                                                                                                (<GHC.ST.STRep
                                                                                                                                                    GHC.Prim.RealWorld
                                                                                                                                                    (Data.Primitive.Array.MutableArray
                                                                                                                                                       (Control.Monad.Primitive.PrimState
                                                                                                                                                          (GHC.ST.ST
                                                                                                                                                             GHC.Prim.RealWorld))
                                                                                                                                                       (Multilinear.Generic.Tensor
                                                                                                                                                          a))>_R
                                                                                                                                                 ->_R Sym (GHC.ST.N:ST[0]
                                                                                                                                                               <GHC.Prim.RealWorld>_N
                                                                                                                                                               <Data.Primitive.Array.MutableArray
                                                                                                                                                                  (Control.Monad.Primitive.PrimState
                                                                                                                                                                     (GHC.ST.ST
                                                                                                                                                                        GHC.Prim.RealWorld))
                                                                                                                                                                  (Multilinear.Generic.Tensor
                                                                                                                                                                     a)>_R))
                                                                                                                                                (((GHC.Prim.State#
                                                                                                                                                     (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                                                                                               <GHC.Prim.RealWorld>_N)))_R
                                                                                                                                                  ->_R ((#,#)
                                                                                                                                                          <'GHC.Types.TupleRep
                                                                                                                                                             '[]>_R
                                                                                                                                                          <'GHC.Types.LiftedRep>_R
                                                                                                                                                          (GHC.Prim.State#
                                                                                                                                                             (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                                                                                                       <GHC.Prim.RealWorld>_N)))_R
                                                                                                                                                          <Data.Primitive.Array.MutableArray
                                                                                                                                                             (Control.Monad.Primitive.PrimState
                                                                                                                                                                (GHC.ST.ST
                                                                                                                                                                   GHC.Prim.RealWorld))
                                                                                                                                                             (Multilinear.Generic.Tensor
                                                                                                                                                                a)>_R)_R)
                                                                                                                                                 ->_R <GHC.ST.ST
                                                                                                                                                         GHC.Prim.RealWorld
                                                                                                                                                         (Data.Primitive.Array.MutableArray
                                                                                                                                                            (Control.Monad.Primitive.PrimState
                                                                                                                                                               (GHC.ST.ST
                                                                                                                                                                  GHC.Prim.RealWorld))
                                                                                                                                                            (Multilinear.Generic.Tensor
                                                                                                                                                               a))>_R)))) of ds8 { (#,#) ipv6 ipv7 ->
                                                                                                                          case GHC.Prim.copyMutableArray#
                                                                                                                                 @ (Control.Monad.Primitive.PrimState
                                                                                                                                      (GHC.ST.ST
                                                                                                                                         GHC.Prim.RealWorld))
                                                                                                                                 @ (Multilinear.Generic.Tensor
                                                                                                                                      a)
                                                                                                                                 dt9
                                                                                                                                 dt7
                                                                                                                                 ipv7
                                                                                                                                 0#
                                                                                                                                 dt8
                                                                                                                                 ipv6 of s'# { DEFAULT ->
                                                                                                                          case GHC.Prim.writeArray#
                                                                                                                                 @ (Control.Monad.Primitive.PrimState
                                                                                                                                      (GHC.ST.ST
                                                                                                                                         GHC.Prim.RealWorld))
                                                                                                                                 @ (Multilinear.Generic.Tensor
                                                                                                                                      a)
                                                                                                                                 ipv7
                                                                                                                                 x3
                                                                                                                                 x2
                                                                                                                                 s'# of s'#1 { DEFAULT ->
                                                                                                                          (foldlM_loop1
                                                                                                                             GHC.Types.SPEC
                                                                                                                             ((Data.Vector.Mutable.MVector
                                                                                                                                 @ (Control.Monad.Primitive.PrimState
                                                                                                                                      (GHC.ST.ST
                                                                                                                                         GHC.Prim.RealWorld))
                                                                                                                                 @ (Multilinear.Generic.Tensor
                                                                                                                                      a)
                                                                                                                                 0#
                                                                                                                                 n#
                                                                                                                                 ipv7)
                                                                                                                                `cast`
                                                                                                                              (Sub (Sym (Data.Vector.D:R:MutableVector[0])) <Control.Monad.Primitive.PrimState
                                                                                                                                                                               (GHC.ST.ST
                                                                                                                                                                                  GHC.Prim.RealWorld)>_N <Multilinear.Generic.Tensor
                                                                                                                                                                                                            a>_N),
                                                                                                                              GHC.Types.I#
                                                                                                                                y1)
                                                                                                                             xs2)
                                                                                                                            `cast`
                                                                                                                          (GHC.ST.N:ST[0]
                                                                                                                               <GHC.Prim.RealWorld>_N
                                                                                                                               <(Data.Vector.Generic.Base.Mutable
                                                                                                                                   Data.Vector.Vector
                                                                                                                                   (Control.Monad.Primitive.PrimState
                                                                                                                                      (GHC.ST.ST
                                                                                                                                         GHC.Prim.RealWorld))
                                                                                                                                   (Multilinear.Generic.Tensor
                                                                                                                                      a),
                                                                                                                                 GHC.Types.Int)>_R)
                                                                                                                            s'#1
                                                                                                                              `cast`
                                                                                                                            (Nth:2
                                                                                                                                 (Nth:3
                                                                                                                                      (Nth:2
                                                                                                                                           (Trans
                                                                                                                                                (((GHC.Prim.State#
                                                                                                                                                     (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                                                                                          <GHC.Prim.RealWorld>_N))_R
                                                                                                                                                  ->_R ((#,#)
                                                                                                                                                          <'GHC.Types.TupleRep
                                                                                                                                                             '[]>_R
                                                                                                                                                          <'GHC.Types.LiftedRep>_R
                                                                                                                                                          (GHC.Prim.State#
                                                                                                                                                             (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                                                                                                  <GHC.Prim.RealWorld>_N))_R
                                                                                                                                                          <()>_R)_R)
                                                                                                                                                 ->_R <GHC.ST.ST
                                                                                                                                                         GHC.Prim.RealWorld
                                                                                                                                                         ()>_R)
                                                                                                                                                (<GHC.ST.STRep
                                                                                                                                                    GHC.Prim.RealWorld
                                                                                                                                                    ()>_R
                                                                                                                                                 ->_R GHC.ST.N:ST[0]
                                                                                                                                                          <GHC.Prim.RealWorld>_N
                                                                                                                                                          <()>_R))))) } } }
                                                                                                                       GHC.Types.True
                                                                                                                       -> let {
                                                                                                                            n# :: GHC.Prim.Int#
                                                                                                                            = GHC.Prim.+#
                                                                                                                                dt8
                                                                                                                                y2
                                                                                                                          } in
                                                                                                                          case GHC.Prim.newArray#
                                                                                                                                 @ (Multilinear.Generic.Tensor
                                                                                                                                      a)
                                                                                                                                 @ (Control.Monad.Primitive.PrimState
                                                                                                                                      (GHC.ST.ST
                                                                                                                                         GHC.Prim.RealWorld))
                                                                                                                                 n#
                                                                                                                                 (Data.Vector.Mutable.uninitialised
                                                                                                                                    @ (Multilinear.Generic.Tensor
                                                                                                                                         a))
                                                                                                                                 s4
                                                                                                                                   `cast`
                                                                                                                                 (Nth:2
                                                                                                                                      (Nth:2
                                                                                                                                           (Trans
                                                                                                                                                (<GHC.ST.STRep
                                                                                                                                                    GHC.Prim.RealWorld
                                                                                                                                                    (Data.Primitive.Array.MutableArray
                                                                                                                                                       (Control.Monad.Primitive.PrimState
                                                                                                                                                          (GHC.ST.ST
                                                                                                                                                             GHC.Prim.RealWorld))
                                                                                                                                                       (Multilinear.Generic.Tensor
                                                                                                                                                          a))>_R
                                                                                                                                                 ->_R Sym (GHC.ST.N:ST[0]
                                                                                                                                                               <GHC.Prim.RealWorld>_N
                                                                                                                                                               <Data.Primitive.Array.MutableArray
                                                                                                                                                                  (Control.Monad.Primitive.PrimState
                                                                                                                                                                     (GHC.ST.ST
                                                                                                                                                                        GHC.Prim.RealWorld))
                                                                                                                                                                  (Multilinear.Generic.Tensor
                                                                                                                                                                     a)>_R))
                                                                                                                                                (((GHC.Prim.State#
                                                                                                                                                     (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                                                                                               <GHC.Prim.RealWorld>_N)))_R
                                                                                                                                                  ->_R ((#,#)
                                                                                                                                                          <'GHC.Types.TupleRep
                                                                                                                                                             '[]>_R
                                                                                                                                                          <'GHC.Types.LiftedRep>_R
                                                                                                                                                          (GHC.Prim.State#
                                                                                                                                                             (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                                                                                                       <GHC.Prim.RealWorld>_N)))_R
                                                                                                                                                          <Data.Primitive.Array.MutableArray
                                                                                                                                                             (Control.Monad.Primitive.PrimState
                                                                                                                                                                (GHC.ST.ST
                                                                                                                                                                   GHC.Prim.RealWorld))
                                                                                                                                                             (Multilinear.Generic.Tensor
                                                                                                                                                                a)>_R)_R)
                                                                                                                                                 ->_R <GHC.ST.ST
                                                                                                                                                         GHC.Prim.RealWorld
                                                                                                                                                         (Data.Primitive.Array.MutableArray
                                                                                                                                                            (Control.Monad.Primitive.PrimState
                                                                                                                                                               (GHC.ST.ST
                                                                                                                                                                  GHC.Prim.RealWorld))
                                                                                                                                                            (Multilinear.Generic.Tensor
                                                                                                                                                               a))>_R)))) of ds8 { (#,#) ipv6 ipv7 ->
                                                                                                                          case GHC.Prim.copyMutableArray#
                                                                                                                                 @ (Control.Monad.Primitive.PrimState
                                                                                                                                      (GHC.ST.ST
                                                                                                                                         GHC.Prim.RealWorld))
                                                                                                                                 @ (Multilinear.Generic.Tensor
                                                                                                                                      a)
                                                                                                                                 dt9
                                                                                                                                 dt7
                                                                                                                                 ipv7
                                                                                                                                 0#
                                                                                                                                 dt8
                                                                                                                                 ipv6 of s'# { DEFAULT ->
                                                                                                                          case GHC.Prim.writeArray#
                                                                                                                                 @ (Control.Monad.Primitive.PrimState
                                                                                                                                      (GHC.ST.ST
                                                                                                                                         GHC.Prim.RealWorld))
                                                                                                                                 @ (Multilinear.Generic.Tensor
                                                                                                                                      a)
                                                                                                                                 ipv7
                                                                                                                                 x3
                                                                                                                                 x2
                                                                                                                                 s'# of s'#1 { DEFAULT ->
                                                                                                                          (foldlM_loop1
                                                                                                                             GHC.Types.SPEC
                                                                                                                             ((Data.Vector.Mutable.MVector
                                                                                                                                 @ (Control.Monad.Primitive.PrimState
                                                                                                                                      (GHC.ST.ST
                                                                                                                                         GHC.Prim.RealWorld))
                                                                                                                                 @ (Multilinear.Generic.Tensor
                                                                                                                                      a)
                                                                                                                                 0#
                                                                                                                                 n#
                                                                                                                                 ipv7)
                                                                                                                                `cast`
                                                                                                                              (Sub (Sym (Data.Vector.D:R:MutableVector[0])) <Control.Monad.Primitive.PrimState
                                                                                                                                                                               (GHC.ST.ST
                                                                                                                                                                                  GHC.Prim.RealWorld)>_N <Multilinear.Generic.Tensor
                                                                                                                                                                                                            a>_N),
                                                                                                                              GHC.Types.I#
                                                                                                                                y1)
                                                                                                                             xs2)
                                                                                                                            `cast`
                                                                                                                          (GHC.ST.N:ST[0]
                                                                                                                               <GHC.Prim.RealWorld>_N
                                                                                                                               <(Data.Vector.Generic.Base.Mutable
                                                                                                                                   Data.Vector.Vector
                                                                                                                                   (Control.Monad.Primitive.PrimState
                                                                                                                                      (GHC.ST.ST
                                                                                                                                         GHC.Prim.RealWorld))
                                                                                                                                   (Multilinear.Generic.Tensor
                                                                                                                                      a),
                                                                                                                                 GHC.Types.Int)>_R)
                                                                                                                            s'#1
                                                                                                                              `cast`
                                                                                                                            (Nth:2
                                                                                                                                 (Nth:3
                                                                                                                                      (Nth:2
                                                                                                                                           (Trans
                                                                                                                                                (((GHC.Prim.State#
                                                                                                                                                     (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                                                                                          <GHC.Prim.RealWorld>_N))_R
                                                                                                                                                  ->_R ((#,#)
                                                                                                                                                          <'GHC.Types.TupleRep
                                                                                                                                                             '[]>_R
                                                                                                                                                          <'GHC.Types.LiftedRep>_R
                                                                                                                                                          (GHC.Prim.State#
                                                                                                                                                             (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                                                                                                  <GHC.Prim.RealWorld>_N))_R
                                                                                                                                                          <()>_R)_R)
                                                                                                                                                 ->_R <GHC.ST.ST
                                                                                                                                                         GHC.Prim.RealWorld
                                                                                                                                                         ()>_R)
                                                                                                                                                (<GHC.ST.STRep
                                                                                                                                                    GHC.Prim.RealWorld
                                                                                                                                                    ()>_R
                                                                                                                                                 ->_R GHC.ST.N:ST[0]
                                                                                                                                                          <GHC.Prim.RealWorld>_N
                                                                                                                                                          <()>_R))))) } } } }
                                                                                                                  GHC.Types.True
                                                                                                                  -> let {
                                                                                                                       y2 :: GHC.Prim.Int#
                                                                                                                       = GHC.Prim.-#
                                                                                                                           y1
                                                                                                                           dt8
                                                                                                                     } in
                                                                                                                     case GHC.Prim.tagToEnum#
                                                                                                                            @ GHC.Types.Bool
                                                                                                                            (GHC.Prim.<=#
                                                                                                                               1#
                                                                                                                               y2) of wild13 {
                                                                                                                       GHC.Types.False
                                                                                                                       -> let {
                                                                                                                            n# :: GHC.Prim.Int#
                                                                                                                            = GHC.Prim.+#
                                                                                                                                dt8
                                                                                                                                1#
                                                                                                                          } in
                                                                                                                          case GHC.Prim.newArray#
                                                                                                                                 @ (Multilinear.Generic.Tensor
                                                                                                                                      a)
                                                                                                                                 @ (Control.Monad.Primitive.PrimState
                                                                                                                                      (GHC.ST.ST
                                                                                                                                         GHC.Prim.RealWorld))
                                                                                                                                 n#
                                                                                                                                 (Data.Vector.Mutable.uninitialised
                                                                                                                                    @ (Multilinear.Generic.Tensor
                                                                                                                                         a))
                                                                                                                                 s4
                                                                                                                                   `cast`
                                                                                                                                 (Nth:2
                                                                                                                                      (Nth:2
                                                                                                                                           (Trans
                                                                                                                                                (<GHC.ST.STRep
                                                                                                                                                    GHC.Prim.RealWorld
                                                                                                                                                    (Data.Primitive.Array.MutableArray
                                                                                                                                                       (Control.Monad.Primitive.PrimState
                                                                                                                                                          (GHC.ST.ST
                                                                                                                                                             GHC.Prim.RealWorld))
                                                                                                                                                       (Multilinear.Generic.Tensor
                                                                                                                                                          a))>_R
                                                                                                                                                 ->_R Sym (GHC.ST.N:ST[0]
                                                                                                                                                               <GHC.Prim.RealWorld>_N
                                                                                                                                                               <Data.Primitive.Array.MutableArray
                                                                                                                                                                  (Control.Monad.Primitive.PrimState
                                                                                                                                                                     (GHC.ST.ST
                                                                                                                                                                        GHC.Prim.RealWorld))
                                                                                                                                                                  (Multilinear.Generic.Tensor
                                                                                                                                                                     a)>_R))
                                                                                                                                                (((GHC.Prim.State#
                                                                                                                                                     (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                                                                                               <GHC.Prim.RealWorld>_N)))_R
                                                                                                                                                  ->_R ((#,#)
                                                                                                                                                          <'GHC.Types.TupleRep
                                                                                                                                                             '[]>_R
                                                                                                                                                          <'GHC.Types.LiftedRep>_R
                                                                                                                                                          (GHC.Prim.State#
                                                                                                                                                             (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                                                                                                       <GHC.Prim.RealWorld>_N)))_R
                                                                                                                                                          <Data.Primitive.Array.MutableArray
                                                                                                                                                             (Control.Monad.Primitive.PrimState
                                                                                                                                                                (GHC.ST.ST
                                                                                                                                                                   GHC.Prim.RealWorld))
                                                                                                                                                             (Multilinear.Generic.Tensor
                                                                                                                                                                a)>_R)_R)
                                                                                                                                                 ->_R <GHC.ST.ST
                                                                                                                                                         GHC.Prim.RealWorld
                                                                                                                                                         (Data.Primitive.Array.MutableArray
                                                                                                                                                            (Control.Monad.Primitive.PrimState
                                                                                                                                                               (GHC.ST.ST
                                                                                                                                                                  GHC.Prim.RealWorld))
                                                                                                                                                            (Multilinear.Generic.Tensor
                                                                                                                                                               a))>_R)))) of ds8 { (#,#) ipv6 ipv7 ->
                                                                                                                          case GHC.Prim.copyMutableArray#
                                                                                                                                 @ (Control.Monad.Primitive.PrimState
                                                                                                                                      (GHC.ST.ST
                                                                                                                                         GHC.Prim.RealWorld))
                                                                                                                                 @ (Multilinear.Generic.Tensor
                                                                                                                                      a)
                                                                                                                                 dt9
                                                                                                                                 dt7
                                                                                                                                 ipv7
                                                                                                                                 0#
                                                                                                                                 dt8
                                                                                                                                 ipv6 of s'# { DEFAULT ->
                                                                                                                          case GHC.Prim.writeArray#
                                                                                                                                 @ (Control.Monad.Primitive.PrimState
                                                                                                                                      (GHC.ST.ST
                                                                                                                                         GHC.Prim.RealWorld))
                                                                                                                                 @ (Multilinear.Generic.Tensor
                                                                                                                                      a)
                                                                                                                                 ipv7
                                                                                                                                 x3
                                                                                                                                 x2
                                                                                                                                 s'# of s'#1 { DEFAULT ->
                                                                                                                          (foldlM_loop1
                                                                                                                             GHC.Types.SPEC
                                                                                                                             ((Data.Vector.Mutable.MVector
                                                                                                                                 @ (Control.Monad.Primitive.PrimState
                                                                                                                                      (GHC.ST.ST
                                                                                                                                         GHC.Prim.RealWorld))
                                                                                                                                 @ (Multilinear.Generic.Tensor
                                                                                                                                      a)
                                                                                                                                 0#
                                                                                                                                 n#
                                                                                                                                 ipv7)
                                                                                                                                `cast`
                                                                                                                              (Sub (Sym (Data.Vector.D:R:MutableVector[0])) <Control.Monad.Primitive.PrimState
                                                                                                                                                                               (GHC.ST.ST
                                                                                                                                                                                  GHC.Prim.RealWorld)>_N <Multilinear.Generic.Tensor
                                                                                                                                                                                                            a>_N),
                                                                                                                              GHC.Types.I#
                                                                                                                                y1)
                                                                                                                             xs2)
                                                                                                                            `cast`
                                                                                                                          (GHC.ST.N:ST[0]
                                                                                                                               <GHC.Prim.RealWorld>_N
                                                                                                                               <(Data.Vector.Generic.Base.Mutable
                                                                                                                                   Data.Vector.Vector
                                                                                                                                   (Control.Monad.Primitive.PrimState
                                                                                                                                      (GHC.ST.ST
                                                                                                                                         GHC.Prim.RealWorld))
                                                                                                                                   (Multilinear.Generic.Tensor
                                                                                                                                      a),
                                                                                                                                 GHC.Types.Int)>_R)
                                                                                                                            s'#1
                                                                                                                              `cast`
                                                                                                                            (Nth:2
                                                                                                                                 (Nth:3
                                                                                                                                      (Nth:2
                                                                                                                                           (Trans
                                                                                                                                                (((GHC.Prim.State#
                                                                                                                                                     (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                                                                                          <GHC.Prim.RealWorld>_N))_R
                                                                                                                                                  ->_R ((#,#)
                                                                                                                                                          <'GHC.Types.TupleRep
                                                                                                                                                             '[]>_R
                                                                                                                                                          <'GHC.Types.LiftedRep>_R
                                                                                                                                                          (GHC.Prim.State#
                                                                                                                                                             (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                                                                                                  <GHC.Prim.RealWorld>_N))_R
                                                                                                                                                          <()>_R)_R)
                                                                                                                                                 ->_R <GHC.ST.ST
                                                                                                                                                         GHC.Prim.RealWorld
                                                                                                                                                         ()>_R)
                                                                                                                                                (<GHC.ST.STRep
                                                                                                                                                    GHC.Prim.RealWorld
                                                                                                                                                    ()>_R
                                                                                                                                                 ->_R GHC.ST.N:ST[0]
                                                                                                                                                          <GHC.Prim.RealWorld>_N
                                                                                                                                                          <()>_R))))) } } }
                                                                                                                       GHC.Types.True
                                                                                                                       -> let {
                                                                                                                            n# :: GHC.Prim.Int#
                                                                                                                            = GHC.Prim.+#
                                                                                                                                dt8
                                                                                                                                y2
                                                                                                                          } in
                                                                                                                          case GHC.Prim.newArray#
                                                                                                                                 @ (Multilinear.Generic.Tensor
                                                                                                                                      a)
                                                                                                                                 @ (Control.Monad.Primitive.PrimState
                                                                                                                                      (GHC.ST.ST
                                                                                                                                         GHC.Prim.RealWorld))
                                                                                                                                 n#
                                                                                                                                 (Data.Vector.Mutable.uninitialised
                                                                                                                                    @ (Multilinear.Generic.Tensor
                                                                                                                                         a))
                                                                                                                                 s4
                                                                                                                                   `cast`
                                                                                                                                 (Nth:2
                                                                                                                                      (Nth:2
                                                                                                                                           (Trans
                                                                                                                                                (<GHC.ST.STRep
                                                                                                                                                    GHC.Prim.RealWorld
                                                                                                                                                    (Data.Primitive.Array.MutableArray
                                                                                                                                                       (Control.Monad.Primitive.PrimState
                                                                                                                                                          (GHC.ST.ST
                                                                                                                                                             GHC.Prim.RealWorld))
                                                                                                                                                       (Multilinear.Generic.Tensor
                                                                                                                                                          a))>_R
                                                                                                                                                 ->_R Sym (GHC.ST.N:ST[0]
                                                                                                                                                               <GHC.Prim.RealWorld>_N
                                                                                                                                                               <Data.Primitive.Array.MutableArray
                                                                                                                                                                  (Control.Monad.Primitive.PrimState
                                                                                                                                                                     (GHC.ST.ST
                                                                                                                                                                        GHC.Prim.RealWorld))
                                                                                                                                                                  (Multilinear.Generic.Tensor
                                                                                                                                                                     a)>_R))
                                                                                                                                                (((GHC.Prim.State#
                                                                                                                                                     (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                                                                                               <GHC.Prim.RealWorld>_N)))_R
                                                                                                                                                  ->_R ((#,#)
                                                                                                                                                          <'GHC.Types.TupleRep
                                                                                                                                                             '[]>_R
                                                                                                                                                          <'GHC.Types.LiftedRep>_R
                                                                                                                                                          (GHC.Prim.State#
                                                                                                                                                             (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                                                                                                       <GHC.Prim.RealWorld>_N)))_R
                                                                                                                                                          <Data.Primitive.Array.MutableArray
                                                                                                                                                             (Control.Monad.Primitive.PrimState
                                                                                                                                                                (GHC.ST.ST
                                                                                                                                                                   GHC.Prim.RealWorld))
                                                                                                                                                             (Multilinear.Generic.Tensor
                                                                                                                                                                a)>_R)_R)
                                                                                                                                                 ->_R <GHC.ST.ST
                                                                                                                                                         GHC.Prim.RealWorld
                                                                                                                                                         (Data.Primitive.Array.MutableArray
                                                                                                                                                            (Control.Monad.Primitive.PrimState
                                                                                                                                                               (GHC.ST.ST
                                                                                                                                                                  GHC.Prim.RealWorld))
                                                                                                                                                            (Multilinear.Generic.Tensor
                                                                                                                                                               a))>_R)))) of ds8 { (#,#) ipv6 ipv7 ->
                                                                                                                          case GHC.Prim.copyMutableArray#
                                                                                                                                 @ (Control.Monad.Primitive.PrimState
                                                                                                                                      (GHC.ST.ST
                                                                                                                                         GHC.Prim.RealWorld))
                                                                                                                                 @ (Multilinear.Generic.Tensor
                                                                                                                                      a)
                                                                                                                                 dt9
                                                                                                                                 dt7
                                                                                                                                 ipv7
                                                                                                                                 0#
                                                                                                                                 dt8
                                                                                                                                 ipv6 of s'# { DEFAULT ->
                                                                                                                          case GHC.Prim.writeArray#
                                                                                                                                 @ (Control.Monad.Primitive.PrimState
                                                                                                                                      (GHC.ST.ST
                                                                                                                                         GHC.Prim.RealWorld))
                                                                                                                                 @ (Multilinear.Generic.Tensor
                                                                                                                                      a)
                                                                                                                                 ipv7
                                                                                                                                 x3
                                                                                                                                 x2
                                                                                                                                 s'# of s'#1 { DEFAULT ->
                                                                                                                          (foldlM_loop1
                                                                                                                             GHC.Types.SPEC
                                                                                                                             ((Data.Vector.Mutable.MVector
                                                                                                                                 @ (Control.Monad.Primitive.PrimState
                                                                                                                                      (GHC.ST.ST
                                                                                                                                         GHC.Prim.RealWorld))
                                                                                                                                 @ (Multilinear.Generic.Tensor
                                                                                                                                      a)
                                                                                                                                 0#
                                                                                                                                 n#
                                                                                                                                 ipv7)
                                                                                                                                `cast`
                                                                                                                              (Sub (Sym (Data.Vector.D:R:MutableVector[0])) <Control.Monad.Primitive.PrimState
                                                                                                                                                                               (GHC.ST.ST
                                                                                                                                                                                  GHC.Prim.RealWorld)>_N <Multilinear.Generic.Tensor
                                                                                                                                                                                                            a>_N),
                                                                                                                              GHC.Types.I#
                                                                                                                                y1)
                                                                                                                             xs2)
                                                                                                                            `cast`
                                                                                                                          (GHC.ST.N:ST[0]
                                                                                                                               <GHC.Prim.RealWorld>_N
                                                                                                                               <(Data.Vector.Generic.Base.Mutable
                                                                                                                                   Data.Vector.Vector
                                                                                                                                   (Control.Monad.Primitive.PrimState
                                                                                                                                      (GHC.ST.ST
                                                                                                                                         GHC.Prim.RealWorld))
                                                                                                                                   (Multilinear.Generic.Tensor
                                                                                                                                      a),
                                                                                                                                 GHC.Types.Int)>_R)
                                                                                                                            s'#1
                                                                                                                              `cast`
                                                                                                                            (Nth:2
                                                                                                                                 (Nth:3
                                                                                                                                      (Nth:2
                                                                                                                                           (Trans
                                                                                                                                                (((GHC.Prim.State#
                                                                                                                                                     (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                                                                                          <GHC.Prim.RealWorld>_N))_R
                                                                                                                                                  ->_R ((#,#)
                                                                                                                                                          <'GHC.Types.TupleRep
                                                                                                                                                             '[]>_R
                                                                                                                                                          <'GHC.Types.LiftedRep>_R
                                                                                                                                                          (GHC.Prim.State#
                                                                                                                                                             (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                                                                                                  <GHC.Prim.RealWorld>_N))_R
                                                                                                                                                          <()>_R)_R)
                                                                                                                                                 ->_R <GHC.ST.ST
                                                                                                                                                         GHC.Prim.RealWorld
                                                                                                                                                         ()>_R)
                                                                                                                                                (<GHC.ST.STRep
                                                                                                                                                    GHC.Prim.RealWorld
                                                                                                                                                    ()>_R
                                                                                                                                                 ->_R GHC.ST.N:ST[0]
                                                                                                                                                          <GHC.Prim.RealWorld>_N
                                                                                                                                                          <()>_R))))) } } } } } } } } } })
                                                                                                       `cast`
                                                                                                     (Sym (GHC.ST.N:ST[0]
                                                                                                               <GHC.Prim.RealWorld>_N
                                                                                                               <(Data.Vector.Generic.Base.Mutable
                                                                                                                   Data.Vector.Vector
                                                                                                                   (Control.Monad.Primitive.PrimState
                                                                                                                      (GHC.ST.ST
                                                                                                                         GHC.Prim.RealWorld))
                                                                                                                   (Multilinear.Generic.Tensor
                                                                                                                      a),
                                                                                                                 GHC.Types.Int)>_R)) }
                                                                                                 } in
                                                                                                 case (foldlM_loop1
                                                                                                         GHC.Types.SPEC
                                                                                                         ((Data.Vector.Mutable.MVector
                                                                                                             @ (Control.Monad.Primitive.PrimState
                                                                                                                  (GHC.ST.ST
                                                                                                                     GHC.Prim.RealWorld))
                                                                                                             @ (Multilinear.Generic.Tensor
                                                                                                                  a)
                                                                                                             0#
                                                                                                             0#
                                                                                                             ipv5)
                                                                                                            `cast`
                                                                                                          (Sub (Sym (Data.Vector.D:R:MutableVector[0])) <Control.Monad.Primitive.PrimState
                                                                                                                                                           (GHC.ST.ST
                                                                                                                                                              GHC.Prim.RealWorld)>_N <Multilinear.Generic.Tensor
                                                                                                                                                                                        a>_N),
                                                                                                          GHC.Types.I#
                                                                                                            0#)
                                                                                                         x)
                                                                                                        `cast`
                                                                                                      (GHC.ST.N:ST[0]
                                                                                                           <GHC.Prim.RealWorld>_N
                                                                                                           <(Data.Vector.Generic.Base.Mutable
                                                                                                               Data.Vector.Vector
                                                                                                               (Control.Monad.Primitive.PrimState
                                                                                                                  (GHC.ST.ST
                                                                                                                     GHC.Prim.RealWorld))
                                                                                                               (Multilinear.Generic.Tensor
                                                                                                                  a),
                                                                                                             GHC.Types.Int)>_R)
                                                                                                        ipv4
                                                                                                          `cast`
                                                                                                        (Nth:2
                                                                                                             (Nth:3
                                                                                                                  (Nth:2
                                                                                                                       (Trans
                                                                                                                            (((GHC.Prim.State#
                                                                                                                                 (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                                                                      <GHC.Prim.RealWorld>_N))_R
                                                                                                                              ->_R ((#,#)
                                                                                                                                      <'GHC.Types.TupleRep
                                                                                                                                         '[]>_R
                                                                                                                                      <'GHC.Types.LiftedRep>_R
                                                                                                                                      (GHC.Prim.State#
                                                                                                                                         (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                                                                              <GHC.Prim.RealWorld>_N))_R
                                                                                                                                      <Data.Primitive.Array.MutableArray
                                                                                                                                         (Control.Monad.Primitive.PrimState
                                                                                                                                            (GHC.ST.ST
                                                                                                                                               GHC.Prim.RealWorld))
                                                                                                                                         (Multilinear.Generic.Tensor
                                                                                                                                            a)>_R)_R)
                                                                                                                             ->_R <GHC.ST.ST
                                                                                                                                     GHC.Prim.RealWorld
                                                                                                                                     (Data.Primitive.Array.MutableArray
                                                                                                                                        (Control.Monad.Primitive.PrimState
                                                                                                                                           (GHC.ST.ST
                                                                                                                                              GHC.Prim.RealWorld))
                                                                                                                                        (Multilinear.Generic.Tensor
                                                                                                                                           a))>_R)
                                                                                                                            (<GHC.ST.STRep
                                                                                                                                GHC.Prim.RealWorld
                                                                                                                                (Data.Primitive.Array.MutableArray
                                                                                                                                   (Control.Monad.Primitive.PrimState
                                                                                                                                      (GHC.ST.ST
                                                                                                                                         GHC.Prim.RealWorld))
                                                                                                                                   (Multilinear.Generic.Tensor
                                                                                                                                      a))>_R
                                                                                                                             ->_R GHC.ST.N:ST[0]
                                                                                                                                      <GHC.Prim.RealWorld>_N
                                                                                                                                      <Data.Primitive.Array.MutableArray
                                                                                                                                         (Control.Monad.Primitive.PrimState
                                                                                                                                            (GHC.ST.ST
                                                                                                                                               GHC.Prim.RealWorld))
                                                                                                                                         (Multilinear.Generic.Tensor
                                                                                                                                            a)>_R))))) of ds3 { (#,#) ipv6 ipv7 ->
                                                                                                 case ipv7 of wild4 { (,) v' n ->
                                                                                                 case v'
                                                                                                        `cast`
                                                                                                      (Sub (Data.Vector.D:R:MutableVector[0]) <Control.Monad.Primitive.PrimState
                                                                                                                                                 (GHC.ST.ST
                                                                                                                                                    GHC.Prim.RealWorld)>_N <Multilinear.Generic.Tensor
                                                                                                                                                                              a>_N) of wild6 { Data.Vector.Mutable.MVector dt7 dt8 dt9 ->
                                                                                                 case n of dt10 { GHC.Types.I# dt11 ->
                                                                                                 case GHC.Prim.unsafeFreezeArray#
                                                                                                        @ (Control.Monad.Primitive.PrimState
                                                                                                             (GHC.ST.ST
                                                                                                                GHC.Prim.RealWorld))
                                                                                                        @ (Multilinear.Generic.Tensor
                                                                                                             a)
                                                                                                        dt9
                                                                                                        ipv6
                                                                                                          `cast`
                                                                                                        (Nth:2
                                                                                                             (Nth:2
                                                                                                                  (Trans
                                                                                                                       (<GHC.ST.STRep
                                                                                                                           GHC.Prim.RealWorld
                                                                                                                           (Data.Primitive.Array.Array
                                                                                                                              (Multilinear.Generic.Tensor
                                                                                                                                 a))>_R
                                                                                                                        ->_R Sym (GHC.ST.N:ST[0]
                                                                                                                                      <GHC.Prim.RealWorld>_N
                                                                                                                                      <Data.Primitive.Array.Array
                                                                                                                                         (Multilinear.Generic.Tensor
                                                                                                                                            a)>_R))
                                                                                                                       (((GHC.Prim.State#
                                                                                                                            (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                                                                      <GHC.Prim.RealWorld>_N)))_R
                                                                                                                         ->_R ((#,#)
                                                                                                                                 <'GHC.Types.TupleRep
                                                                                                                                    '[]>_R
                                                                                                                                 <'GHC.Types.LiftedRep>_R
                                                                                                                                 (GHC.Prim.State#
                                                                                                                                    (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                                                                              <GHC.Prim.RealWorld>_N)))_R
                                                                                                                                 <Data.Primitive.Array.Array
                                                                                                                                    (Multilinear.Generic.Tensor
                                                                                                                                       a)>_R)_R)
                                                                                                                        ->_R <GHC.ST.ST
                                                                                                                                GHC.Prim.RealWorld
                                                                                                                                (Data.Primitive.Array.Array
                                                                                                                                   (Multilinear.Generic.Tensor
                                                                                                                                      a))>_R)))) of ds7 { (#,#) ipv9 ipv10 ->
                                                                                                 (# ipv9
                                                                                                      `cast`
                                                                                                    (Nth:2
                                                                                                         (Nth:3
                                                                                                              (Nth:2
                                                                                                                   (Trans
                                                                                                                        (((GHC.Prim.State#
                                                                                                                             (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                                                                  <GHC.Prim.RealWorld>_N))_R
                                                                                                                          ->_R ((#,#)
                                                                                                                                  <'GHC.Types.TupleRep
                                                                                                                                     '[]>_R
                                                                                                                                  <'GHC.Types.LiftedRep>_R
                                                                                                                                  (GHC.Prim.State#
                                                                                                                                     (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                                                                          <GHC.Prim.RealWorld>_N))_R
                                                                                                                                  <Data.Primitive.Array.Array
                                                                                                                                     (Multilinear.Generic.Tensor
                                                                                                                                        a)>_R)_R)
                                                                                                                         ->_R <GHC.ST.ST
                                                                                                                                 GHC.Prim.RealWorld
                                                                                                                                 (Data.Primitive.Array.Array
                                                                                                                                    (Multilinear.Generic.Tensor
                                                                                                                                       a))>_R)
                                                                                                                        (<GHC.ST.STRep
                                                                                                                            GHC.Prim.RealWorld
                                                                                                                            (Data.Primitive.Array.Array
                                                                                                                               (Multilinear.Generic.Tensor
                                                                                                                                  a))>_R
                                                                                                                         ->_R GHC.ST.N:ST[0]
                                                                                                                                  <GHC.Prim.RealWorld>_N
                                                                                                                                  <Data.Primitive.Array.Array
                                                                                                                                     (Multilinear.Generic.Tensor
                                                                                                                                        a)>_R))))),
                                                                                                    Data.Vector.Vector
                                                                                                      @ (Multilinear.Generic.Tensor
                                                                                                           a)
                                                                                                      dt7
                                                                                                      dt11
                                                                                                      ipv10 #) } } } } } }) of ds1 { (#,#) ipv4 ipv5 ->
                                                                                         ipv5 }))
                                                                                     ipv2
                                                                                       `cast`
                                                                                     (Nth:2
                                                                                          (Nth:2
                                                                                               (Trans
                                                                                                    (<GHC.ST.STRep
                                                                                                        GHC.Prim.RealWorld
                                                                                                        ()>_R
                                                                                                     ->_R Sym (GHC.ST.N:ST[0]
                                                                                                                   <GHC.Prim.RealWorld>_N
                                                                                                                   <()>_R))
                                                                                                    (((GHC.Prim.State#
                                                                                                         (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                                                   <GHC.Prim.RealWorld>_N)))_R
                                                                                                      ->_R ((#,#)
                                                                                                              <'GHC.Types.TupleRep
                                                                                                                 '[]>_R
                                                                                                              <'GHC.Types.LiftedRep>_R
                                                                                                              (GHC.Prim.State#
                                                                                                                 (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                                                           <GHC.Prim.RealWorld>_N)))_R
                                                                                                              <()>_R)_R)
                                                                                                     ->_R <GHC.ST.ST
                                                                                                             GHC.Prim.RealWorld
                                                                                                             ()>_R)))) of s'# { DEFAULT ->
                                                                              (foldlM_loop
                                                                                 GHC.Types.SPEC
                                                                                 (wild3
                                                                                    `cast`
                                                                                  (Sub (Sym (Data.Vector.D:R:MutableVector[0])) <Control.Monad.Primitive.PrimState
                                                                                                                                   (GHC.ST.ST
                                                                                                                                      GHC.Prim.RealWorld)>_N <Multilinear.Generic.Tensor
                                                                                                                                                                a>_N),
                                                                                  GHC.Types.I# y)
                                                                                 xs1)
                                                                                `cast`
                                                                              (GHC.ST.N:ST[0]
                                                                                   <GHC.Prim.RealWorld>_N
                                                                                   <(Data.Vector.Generic.Base.Mutable
                                                                                       Data.Vector.Vector
                                                                                       (Control.Monad.Primitive.PrimState
                                                                                          (GHC.ST.ST
                                                                                             GHC.Prim.RealWorld))
                                                                                       (Multilinear.Generic.Tensor
                                                                                          a),
                                                                                     GHC.Types.Int)>_R)
                                                                                s'#
                                                                                  `cast`
                                                                                (Nth:2
                                                                                     (Nth:3
                                                                                          (Nth:2
                                                                                               (Trans
                                                                                                    (((GHC.Prim.State#
                                                                                                         (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                                              <GHC.Prim.RealWorld>_N))_R
                                                                                                      ->_R ((#,#)
                                                                                                              <'GHC.Types.TupleRep
                                                                                                                 '[]>_R
                                                                                                              <'GHC.Types.LiftedRep>_R
                                                                                                              (GHC.Prim.State#
                                                                                                                 (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                                                      <GHC.Prim.RealWorld>_N))_R
                                                                                                              <()>_R)_R)
                                                                                                     ->_R <GHC.ST.ST
                                                                                                             GHC.Prim.RealWorld
                                                                                                             ()>_R)
                                                                                                    (<GHC.ST.STRep
                                                                                                        GHC.Prim.RealWorld
                                                                                                        ()>_R
                                                                                                     ->_R GHC.ST.N:ST[0]
                                                                                                              <GHC.Prim.RealWorld>_N
                                                                                                              <()>_R))))) } }
                                                                          } in
                                                                          case GHC.Prim.tagToEnum#
                                                                                 @ GHC.Types.Bool
                                                                                 (GHC.Prim.<#
                                                                                    dt1
                                                                                    y) of wild9 {
                                                                            GHC.Types.False
                                                                            -> $j2
                                                                                 s8
                                                                                 wild2
                                                                                   `cast`
                                                                                 (Sub (Sym (Data.Vector.D:R:MutableVector[0])) <Control.Monad.Primitive.PrimState
                                                                                                                                  (GHC.ST.ST
                                                                                                                                     GHC.Prim.RealWorld)>_N <Multilinear.Generic.Tensor
                                                                                                                                                               a>_N)
                                                                            GHC.Types.True
                                                                            -> case GHC.Prim.tagToEnum#
                                                                                      @ GHC.Types.Bool
                                                                                      (GHC.Prim.<=#
                                                                                         dt1
                                                                                         1#) of wild11 {
                                                                                 GHC.Types.False
                                                                                 -> let {
                                                                                      y2 :: GHC.Prim.Int#
                                                                                      = GHC.Prim.-#
                                                                                          y
                                                                                          dt1
                                                                                    } in
                                                                                    case GHC.Prim.tagToEnum#
                                                                                           @ GHC.Types.Bool
                                                                                           (GHC.Prim.<=#
                                                                                              dt1
                                                                                              y2) of wild13 {
                                                                                      GHC.Types.False
                                                                                      -> let {
                                                                                           n# :: GHC.Prim.Int#
                                                                                           = GHC.Prim.+#
                                                                                               dt1
                                                                                               dt1
                                                                                         } in
                                                                                         case GHC.Prim.newArray#
                                                                                                @ (Multilinear.Generic.Tensor
                                                                                                     a)
                                                                                                @ (Control.Monad.Primitive.PrimState
                                                                                                     (GHC.ST.ST
                                                                                                        GHC.Prim.RealWorld))
                                                                                                n#
                                                                                                (Data.Vector.Mutable.uninitialised
                                                                                                   @ (Multilinear.Generic.Tensor
                                                                                                        a))
                                                                                                s8
                                                                                                  `cast`
                                                                                                (Nth:2
                                                                                                     (Nth:2
                                                                                                          (Trans
                                                                                                               (<GHC.ST.STRep
                                                                                                                   GHC.Prim.RealWorld
                                                                                                                   (Data.Primitive.Array.MutableArray
                                                                                                                      (Control.Monad.Primitive.PrimState
                                                                                                                         (GHC.ST.ST
                                                                                                                            GHC.Prim.RealWorld))
                                                                                                                      (Multilinear.Generic.Tensor
                                                                                                                         a))>_R
                                                                                                                ->_R Sym (GHC.ST.N:ST[0]
                                                                                                                              <GHC.Prim.RealWorld>_N
                                                                                                                              <Data.Primitive.Array.MutableArray
                                                                                                                                 (Control.Monad.Primitive.PrimState
                                                                                                                                    (GHC.ST.ST
                                                                                                                                       GHC.Prim.RealWorld))
                                                                                                                                 (Multilinear.Generic.Tensor
                                                                                                                                    a)>_R))
                                                                                                               (((GHC.Prim.State#
                                                                                                                    (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                                                              <GHC.Prim.RealWorld>_N)))_R
                                                                                                                 ->_R ((#,#)
                                                                                                                         <'GHC.Types.TupleRep
                                                                                                                            '[]>_R
                                                                                                                         <'GHC.Types.LiftedRep>_R
                                                                                                                         (GHC.Prim.State#
                                                                                                                            (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                                                                      <GHC.Prim.RealWorld>_N)))_R
                                                                                                                         <Data.Primitive.Array.MutableArray
                                                                                                                            (Control.Monad.Primitive.PrimState
                                                                                                                               (GHC.ST.ST
                                                                                                                                  GHC.Prim.RealWorld))
                                                                                                                            (Multilinear.Generic.Tensor
                                                                                                                               a)>_R)_R)
                                                                                                                ->_R <GHC.ST.ST
                                                                                                                        GHC.Prim.RealWorld
                                                                                                                        (Data.Primitive.Array.MutableArray
                                                                                                                           (Control.Monad.Primitive.PrimState
                                                                                                                              (GHC.ST.ST
                                                                                                                                 GHC.Prim.RealWorld))
                                                                                                                           (Multilinear.Generic.Tensor
                                                                                                                              a))>_R)))) of ds1 { (#,#) ipv2 ipv3 ->
                                                                                         case GHC.Prim.copyMutableArray#
                                                                                                @ (Control.Monad.Primitive.PrimState
                                                                                                     (GHC.ST.ST
                                                                                                        GHC.Prim.RealWorld))
                                                                                                @ (Multilinear.Generic.Tensor
                                                                                                     a)
                                                                                                dt2
                                                                                                dt
                                                                                                ipv3
                                                                                                0#
                                                                                                dt1
                                                                                                ipv2 of s'# { DEFAULT ->
                                                                                         $j2
                                                                                           s'#
                                                                                             `cast`
                                                                                           (Nth:2
                                                                                                (Nth:3
                                                                                                     (Nth:2
                                                                                                          (Trans
                                                                                                               (((GHC.Prim.State#
                                                                                                                    (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                                                         <GHC.Prim.RealWorld>_N))_R
                                                                                                                 ->_R ((#,#)
                                                                                                                         <'GHC.Types.TupleRep
                                                                                                                            '[]>_R
                                                                                                                         <'GHC.Types.LiftedRep>_R
                                                                                                                         (GHC.Prim.State#
                                                                                                                            (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                                                                 <GHC.Prim.RealWorld>_N))_R
                                                                                                                         <()>_R)_R)
                                                                                                                ->_R <GHC.ST.ST
                                                                                                                        GHC.Prim.RealWorld
                                                                                                                        ()>_R)
                                                                                                               (<GHC.ST.STRep
                                                                                                                   GHC.Prim.RealWorld
                                                                                                                   ()>_R
                                                                                                                ->_R GHC.ST.N:ST[0]
                                                                                                                         <GHC.Prim.RealWorld>_N
                                                                                                                         <()>_R)))))
                                                                                           (Data.Vector.Mutable.MVector
                                                                                              @ (Control.Monad.Primitive.PrimState
                                                                                                   (GHC.ST.ST
                                                                                                      GHC.Prim.RealWorld))
                                                                                              @ (Multilinear.Generic.Tensor
                                                                                                   a)
                                                                                              0#
                                                                                              n#
                                                                                              ipv3)
                                                                                             `cast`
                                                                                           (Sub (Sym (Data.Vector.D:R:MutableVector[0])) <Control.Monad.Primitive.PrimState
                                                                                                                                            (GHC.ST.ST
                                                                                                                                               GHC.Prim.RealWorld)>_N <Multilinear.Generic.Tensor
                                                                                                                                                                         a>_N) } }
                                                                                      GHC.Types.True
                                                                                      -> let {
                                                                                           n# :: GHC.Prim.Int#
                                                                                           = GHC.Prim.+#
                                                                                               dt1
                                                                                               y2
                                                                                         } in
                                                                                         case GHC.Prim.newArray#
                                                                                                @ (Multilinear.Generic.Tensor
                                                                                                     a)
                                                                                                @ (Control.Monad.Primitive.PrimState
                                                                                                     (GHC.ST.ST
                                                                                                        GHC.Prim.RealWorld))
                                                                                                n#
                                                                                                (Data.Vector.Mutable.uninitialised
                                                                                                   @ (Multilinear.Generic.Tensor
                                                                                                        a))
                                                                                                s8
                                                                                                  `cast`
                                                                                                (Nth:2
                                                                                                     (Nth:2
                                                                                                          (Trans
                                                                                                               (<GHC.ST.STRep
                                                                                                                   GHC.Prim.RealWorld
                                                                                                                   (Data.Primitive.Array.MutableArray
                                                                                                                      (Control.Monad.Primitive.PrimState
                                                                                                                         (GHC.ST.ST
                                                                                                                            GHC.Prim.RealWorld))
                                                                                                                      (Multilinear.Generic.Tensor
                                                                                                                         a))>_R
                                                                                                                ->_R Sym (GHC.ST.N:ST[0]
                                                                                                                              <GHC.Prim.RealWorld>_N
                                                                                                                              <Data.Primitive.Array.MutableArray
                                                                                                                                 (Control.Monad.Primitive.PrimState
                                                                                                                                    (GHC.ST.ST
                                                                                                                                       GHC.Prim.RealWorld))
                                                                                                                                 (Multilinear.Generic.Tensor
                                                                                                                                    a)>_R))
                                                                                                               (((GHC.Prim.State#
                                                                                                                    (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                                                              <GHC.Prim.RealWorld>_N)))_R
                                                                                                                 ->_R ((#,#)
                                                                                                                         <'GHC.Types.TupleRep
                                                                                                                            '[]>_R
                                                                                                                         <'GHC.Types.LiftedRep>_R
                                                                                                                         (GHC.Prim.State#
                                                                                                                            (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                                                                      <GHC.Prim.RealWorld>_N)))_R
                                                                                                                         <Data.Primitive.Array.MutableArray
                                                                                                                            (Control.Monad.Primitive.PrimState
                                                                                                                               (GHC.ST.ST
                                                                                                                                  GHC.Prim.RealWorld))
                                                                                                                            (Multilinear.Generic.Tensor
                                                                                                                               a)>_R)_R)
                                                                                                                ->_R <GHC.ST.ST
                                                                                                                        GHC.Prim.RealWorld
                                                                                                                        (Data.Primitive.Array.MutableArray
                                                                                                                           (Control.Monad.Primitive.PrimState
                                                                                                                              (GHC.ST.ST
                                                                                                                                 GHC.Prim.RealWorld))
                                                                                                                           (Multilinear.Generic.Tensor
                                                                                                                              a))>_R)))) of ds1 { (#,#) ipv2 ipv3 ->
                                                                                         case GHC.Prim.copyMutableArray#
                                                                                                @ (Control.Monad.Primitive.PrimState
                                                                                                     (GHC.ST.ST
                                                                                                        GHC.Prim.RealWorld))
                                                                                                @ (Multilinear.Generic.Tensor
                                                                                                     a)
                                                                                                dt2
                                                                                                dt
                                                                                                ipv3
                                                                                                0#
                                                                                                dt1
                                                                                                ipv2 of s'# { DEFAULT ->
                                                                                         $j2
                                                                                           s'#
                                                                                             `cast`
                                                                                           (Nth:2
                                                                                                (Nth:3
                                                                                                     (Nth:2
                                                                                                          (Trans
                                                                                                               (((GHC.Prim.State#
                                                                                                                    (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                                                         <GHC.Prim.RealWorld>_N))_R
                                                                                                                 ->_R ((#,#)
                                                                                                                         <'GHC.Types.TupleRep
                                                                                                                            '[]>_R
                                                                                                                         <'GHC.Types.LiftedRep>_R
                                                                                                                         (GHC.Prim.State#
                                                                                                                            (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                                                                 <GHC.Prim.RealWorld>_N))_R
                                                                                                                         <()>_R)_R)
                                                                                                                ->_R <GHC.ST.ST
                                                                                                                        GHC.Prim.RealWorld
                                                                                                                        ()>_R)
                                                                                                               (<GHC.ST.STRep
                                                                                                                   GHC.Prim.RealWorld
                                                                                                                   ()>_R
                                                                                                                ->_R GHC.ST.N:ST[0]
                                                                                                                         <GHC.Prim.RealWorld>_N
                                                                                                                         <()>_R)))))
                                                                                           (Data.Vector.Mutable.MVector
                                                                                              @ (Control.Monad.Primitive.PrimState
                                                                                                   (GHC.ST.ST
                                                                                                      GHC.Prim.RealWorld))
                                                                                              @ (Multilinear.Generic.Tensor
                                                                                                   a)
                                                                                              0#
                                                                                              n#
                                                                                              ipv3)
                                                                                             `cast`
                                                                                           (Sub (Sym (Data.Vector.D:R:MutableVector[0])) <Control.Monad.Primitive.PrimState
                                                                                                                                            (GHC.ST.ST
                                                                                                                                               GHC.Prim.RealWorld)>_N <Multilinear.Generic.Tensor
                                                                                                                                                                         a>_N) } } }
                                                                                 GHC.Types.True
                                                                                 -> let {
                                                                                      y2 :: GHC.Prim.Int#
                                                                                      = GHC.Prim.-#
                                                                                          y
                                                                                          dt1
                                                                                    } in
                                                                                    case GHC.Prim.tagToEnum#
                                                                                           @ GHC.Types.Bool
                                                                                           (GHC.Prim.<=#
                                                                                              1#
                                                                                              y2) of wild13 {
                                                                                      GHC.Types.False
                                                                                      -> let {
                                                                                           n# :: GHC.Prim.Int#
                                                                                           = GHC.Prim.+#
                                                                                               dt1
                                                                                               1#
                                                                                         } in
                                                                                         case GHC.Prim.newArray#
                                                                                                @ (Multilinear.Generic.Tensor
                                                                                                     a)
                                                                                                @ (Control.Monad.Primitive.PrimState
                                                                                                     (GHC.ST.ST
                                                                                                        GHC.Prim.RealWorld))
                                                                                                n#
                                                                                                (Data.Vector.Mutable.uninitialised
                                                                                                   @ (Multilinear.Generic.Tensor
                                                                                                        a))
                                                                                                s8
                                                                                                  `cast`
                                                                                                (Nth:2
                                                                                                     (Nth:2
                                                                                                          (Trans
                                                                                                               (<GHC.ST.STRep
                                                                                                                   GHC.Prim.RealWorld
                                                                                                                   (Data.Primitive.Array.MutableArray
                                                                                                                      (Control.Monad.Primitive.PrimState
                                                                                                                         (GHC.ST.ST
                                                                                                                            GHC.Prim.RealWorld))
                                                                                                                      (Multilinear.Generic.Tensor
                                                                                                                         a))>_R
                                                                                                                ->_R Sym (GHC.ST.N:ST[0]
                                                                                                                              <GHC.Prim.RealWorld>_N
                                                                                                                              <Data.Primitive.Array.MutableArray
                                                                                                                                 (Control.Monad.Primitive.PrimState
                                                                                                                                    (GHC.ST.ST
                                                                                                                                       GHC.Prim.RealWorld))
                                                                                                                                 (Multilinear.Generic.Tensor
                                                                                                                                    a)>_R))
                                                                                                               (((GHC.Prim.State#
                                                                                                                    (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                                                              <GHC.Prim.RealWorld>_N)))_R
                                                                                                                 ->_R ((#,#)
                                                                                                                         <'GHC.Types.TupleRep
                                                                                                                            '[]>_R
                                                                                                                         <'GHC.Types.LiftedRep>_R
                                                                                                                         (GHC.Prim.State#
                                                                                                                            (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                                                                      <GHC.Prim.RealWorld>_N)))_R
                                                                                                                         <Data.Primitive.Array.MutableArray
                                                                                                                            (Control.Monad.Primitive.PrimState
                                                                                                                               (GHC.ST.ST
                                                                                                                                  GHC.Prim.RealWorld))
                                                                                                                            (Multilinear.Generic.Tensor
                                                                                                                               a)>_R)_R)
                                                                                                                ->_R <GHC.ST.ST
                                                                                                                        GHC.Prim.RealWorld
                                                                                                                        (Data.Primitive.Array.MutableArray
                                                                                                                           (Control.Monad.Primitive.PrimState
                                                                                                                              (GHC.ST.ST
                                                                                                                                 GHC.Prim.RealWorld))
                                                                                                                           (Multilinear.Generic.Tensor
                                                                                                                              a))>_R)))) of ds1 { (#,#) ipv2 ipv3 ->
                                                                                         case GHC.Prim.copyMutableArray#
                                                                                                @ (Control.Monad.Primitive.PrimState
                                                                                                     (GHC.ST.ST
                                                                                                        GHC.Prim.RealWorld))
                                                                                                @ (Multilinear.Generic.Tensor
                                                                                                     a)
                                                                                                dt2
                                                                                                dt
                                                                                                ipv3
                                                                                                0#
                                                                                                dt1
                                                                                                ipv2 of s'# { DEFAULT ->
                                                                                         $j2
                                                                                           s'#
                                                                                             `cast`
                                                                                           (Nth:2
                                                                                                (Nth:3
                                                                                                     (Nth:2
                                                                                                          (Trans
                                                                                                               (((GHC.Prim.State#
                                                                                                                    (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                                                         <GHC.Prim.RealWorld>_N))_R
                                                                                                                 ->_R ((#,#)
                                                                                                                         <'GHC.Types.TupleRep
                                                                                                                            '[]>_R
                                                                                                                         <'GHC.Types.LiftedRep>_R
                                                                                                                         (GHC.Prim.State#
                                                                                                                            (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                                                                 <GHC.Prim.RealWorld>_N))_R
                                                                                                                         <()>_R)_R)
                                                                                                                ->_R <GHC.ST.ST
                                                                                                                        GHC.Prim.RealWorld
                                                                                                                        ()>_R)
                                                                                                               (<GHC.ST.STRep
                                                                                                                   GHC.Prim.RealWorld
                                                                                                                   ()>_R
                                                                                                                ->_R GHC.ST.N:ST[0]
                                                                                                                         <GHC.Prim.RealWorld>_N
                                                                                                                         <()>_R)))))
                                                                                           (Data.Vector.Mutable.MVector
                                                                                              @ (Control.Monad.Primitive.PrimState
                                                                                                   (GHC.ST.ST
                                                                                                      GHC.Prim.RealWorld))
                                                                                              @ (Multilinear.Generic.Tensor
                                                                                                   a)
                                                                                              0#
                                                                                              n#
                                                                                              ipv3)
                                                                                             `cast`
                                                                                           (Sub (Sym (Data.Vector.D:R:MutableVector[0])) <Control.Monad.Primitive.PrimState
                                                                                                                                            (GHC.ST.ST
                                                                                                                                               GHC.Prim.RealWorld)>_N <Multilinear.Generic.Tensor
                                                                                                                                                                         a>_N) } }
                                                                                      GHC.Types.True
                                                                                      -> let {
                                                                                           n# :: GHC.Prim.Int#
                                                                                           = GHC.Prim.+#
                                                                                               dt1
                                                                                               y2
                                                                                         } in
                                                                                         case GHC.Prim.newArray#
                                                                                                @ (Multilinear.Generic.Tensor
                                                                                                     a)
                                                                                                @ (Control.Monad.Primitive.PrimState
                                                                                                     (GHC.ST.ST
                                                                                                        GHC.Prim.RealWorld))
                                                                                                n#
                                                                                                (Data.Vector.Mutable.uninitialised
                                                                                                   @ (Multilinear.Generic.Tensor
                                                                                                        a))
                                                                                                s8
                                                                                                  `cast`
                                                                                                (Nth:2
                                                                                                     (Nth:2
                                                                                                          (Trans
                                                                                                               (<GHC.ST.STRep
                                                                                                                   GHC.Prim.RealWorld
                                                                                                                   (Data.Primitive.Array.MutableArray
                                                                                                                      (Control.Monad.Primitive.PrimState
                                                                                                                         (GHC.ST.ST
                                                                                                                            GHC.Prim.RealWorld))
                                                                                                                      (Multilinear.Generic.Tensor
                                                                                                                         a))>_R
                                                                                                                ->_R Sym (GHC.ST.N:ST[0]
                                                                                                                              <GHC.Prim.RealWorld>_N
                                                                                                                              <Data.Primitive.Array.MutableArray
                                                                                                                                 (Control.Monad.Primitive.PrimState
                                                                                                                                    (GHC.ST.ST
                                                                                                                                       GHC.Prim.RealWorld))
                                                                                                                                 (Multilinear.Generic.Tensor
                                                                                                                                    a)>_R))
                                                                                                               (((GHC.Prim.State#
                                                                                                                    (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                                                              <GHC.Prim.RealWorld>_N)))_R
                                                                                                                 ->_R ((#,#)
                                                                                                                         <'GHC.Types.TupleRep
                                                                                                                            '[]>_R
                                                                                                                         <'GHC.Types.LiftedRep>_R
                                                                                                                         (GHC.Prim.State#
                                                                                                                            (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                                                                      <GHC.Prim.RealWorld>_N)))_R
                                                                                                                         <Data.Primitive.Array.MutableArray
                                                                                                                            (Control.Monad.Primitive.PrimState
                                                                                                                               (GHC.ST.ST
                                                                                                                                  GHC.Prim.RealWorld))
                                                                                                                            (Multilinear.Generic.Tensor
                                                                                                                               a)>_R)_R)
                                                                                                                ->_R <GHC.ST.ST
                                                                                                                        GHC.Prim.RealWorld
                                                                                                                        (Data.Primitive.Array.MutableArray
                                                                                                                           (Control.Monad.Primitive.PrimState
                                                                                                                              (GHC.ST.ST
                                                                                                                                 GHC.Prim.RealWorld))
                                                                                                                           (Multilinear.Generic.Tensor
                                                                                                                              a))>_R)))) of ds1 { (#,#) ipv2 ipv3 ->
                                                                                         case GHC.Prim.copyMutableArray#
                                                                                                @ (Control.Monad.Primitive.PrimState
                                                                                                     (GHC.ST.ST
                                                                                                        GHC.Prim.RealWorld))
                                                                                                @ (Multilinear.Generic.Tensor
                                                                                                     a)
                                                                                                dt2
                                                                                                dt
                                                                                                ipv3
                                                                                                0#
                                                                                                dt1
                                                                                                ipv2 of s'# { DEFAULT ->
                                                                                         $j2
                                                                                           s'#
                                                                                             `cast`
                                                                                           (Nth:2
                                                                                                (Nth:3
                                                                                                     (Nth:2
                                                                                                          (Trans
                                                                                                               (((GHC.Prim.State#
                                                                                                                    (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                                                         <GHC.Prim.RealWorld>_N))_R
                                                                                                                 ->_R ((#,#)
                                                                                                                         <'GHC.Types.TupleRep
                                                                                                                            '[]>_R
                                                                                                                         <'GHC.Types.LiftedRep>_R
                                                                                                                         (GHC.Prim.State#
                                                                                                                            (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                                                                 <GHC.Prim.RealWorld>_N))_R
                                                                                                                         <()>_R)_R)
                                                                                                                ->_R <GHC.ST.ST
                                                                                                                        GHC.Prim.RealWorld
                                                                                                                        ()>_R)
                                                                                                               (<GHC.ST.STRep
                                                                                                                   GHC.Prim.RealWorld
                                                                                                                   ()>_R
                                                                                                                ->_R GHC.ST.N:ST[0]
                                                                                                                         <GHC.Prim.RealWorld>_N
                                                                                                                         <()>_R)))))
                                                                                           (Data.Vector.Mutable.MVector
                                                                                              @ (Control.Monad.Primitive.PrimState
                                                                                                   (GHC.ST.ST
                                                                                                      GHC.Prim.RealWorld))
                                                                                              @ (Multilinear.Generic.Tensor
                                                                                                   a)
                                                                                              0#
                                                                                              n#
                                                                                              ipv3)
                                                                                             `cast`
                                                                                           (Sub (Sym (Data.Vector.D:R:MutableVector[0])) <Control.Monad.Primitive.PrimState
                                                                                                                                            (GHC.ST.ST
                                                                                                                                               GHC.Prim.RealWorld)>_N <Multilinear.Generic.Tensor
                                                                                                                                                                         a>_N) } } } } } } } } })
                                                                      `cast`
                                                                    (Sym (GHC.ST.N:ST[0]
                                                                              <GHC.Prim.RealWorld>_N
                                                                              <(Data.Vector.Generic.Base.Mutable
                                                                                  Data.Vector.Vector
                                                                                  (Control.Monad.Primitive.PrimState
                                                                                     (GHC.ST.ST
                                                                                        GHC.Prim.RealWorld))
                                                                                  (Multilinear.Generic.Tensor
                                                                                     a),
                                                                                GHC.Types.Int)>_R)) }
                                                                } in
                                                                case (foldlM_loop
                                                                        GHC.Types.SPEC
                                                                        ((Data.Vector.Mutable.MVector
                                                                            @ (Control.Monad.Primitive.PrimState
                                                                                 (GHC.ST.ST
                                                                                    GHC.Prim.RealWorld))
                                                                            @ (Multilinear.Generic.Tensor
                                                                                 a)
                                                                            0#
                                                                            0#
                                                                            ipv1)
                                                                           `cast`
                                                                         (Sub (Sym (Data.Vector.D:R:MutableVector[0])) <Control.Monad.Primitive.PrimState
                                                                                                                          (GHC.ST.ST
                                                                                                                             GHC.Prim.RealWorld)>_N <Multilinear.Generic.Tensor
                                                                                                                                                       a>_N),
                                                                         GHC.Types.I# 0#)
                                                                        (case ts1 of v2 { Data.Vector.Vector ipv2 ipv3 ipv4 ->
                                                                         case GHC.Prim.tagToEnum#
                                                                                @ GHC.Types.Bool
                                                                                (GHC.Prim.<#
                                                                                   0#
                                                                                   ipv3) of wild3 {
                                                                           GHC.Types.False
                                                                           -> case Data.Vector.Internal.Check.$wcheckError
                                                                                     @ (Multilinear.Generic.Tensor
                                                                                          a)
                                                                                     (GHC.CString.unpackCString#
                                                                                        ".\\Data\\Vector\\Generic.hs"#)
                                                                                     245#
                                                                                     Data.Vector.Internal.Check.Bounds
                                                                                     (GHC.CString.unpackCString#
                                                                                        "(!)"#)
                                                                                     (Data.Vector.Internal.Check.checkIndex_msg#
                                                                                        0#
                                                                                        ipv3)
                                                                              ret_ty [[Multilinear.Generic.Tensor
                                                                                         a]]
                                                                              of {}
                                                                           GHC.Types.True
                                                                           -> case GHC.Prim.indexArray#
                                                                                     @ (Multilinear.Generic.Tensor
                                                                                          a)
                                                                                     ipv4
                                                                                     ipv2 of ds3 { Unit# ipv5 ->
                                                                              let {
                                                                                $j2 :: GHC.Prim.Int#
                                                                                       -> GHC.Prim.Int#
                                                                                       -> GHC.Prim.Array#
                                                                                            (Data.Vector.Vector
                                                                                               (Multilinear.Generic.Tensor
                                                                                                  a))
                                                                                       -> [[Multilinear.Generic.Tensor
                                                                                              a]]
                                                                                  <join 3> {- Arity: 3 -}
                                                                                = \ (ipv6 :: GHC.Prim.Int#)[OneShot]
                                                                                    (ipv7 :: GHC.Prim.Int#)[OneShot]
                                                                                    (ipv8 :: GHC.Prim.Array#
                                                                                               (Data.Vector.Vector
                                                                                                  (Multilinear.Generic.Tensor
                                                                                                     a)))[OneShot] ->
                                                                                  letrec {
                                                                                    go10 :: GHC.Types.Int
                                                                                            -> [[Multilinear.Generic.Tensor
                                                                                                   a]]
                                                                                      {- Arity: 1 -}
                                                                                    = \ (s2 :: GHC.Types.Int) ->
                                                                                      case s2 of wild1 { GHC.Types.I# x ->
                                                                                      case GHC.Prim.tagToEnum#
                                                                                             @ GHC.Types.Bool
                                                                                             (GHC.Prim.>=#
                                                                                                x
                                                                                                ipv7) of wild2 {
                                                                                        GHC.Types.False
                                                                                        -> case GHC.Prim.indexArray#
                                                                                                  @ (Data.Vector.Vector
                                                                                                       (Multilinear.Generic.Tensor
                                                                                                          a))
                                                                                                  ipv8
                                                                                                  (GHC.Prim.+#
                                                                                                     ipv6
                                                                                                     x) of ds1 { Unit# ipv9 ->
                                                                                           GHC.Types.:
                                                                                             @ [Multilinear.Generic.Tensor
                                                                                                  a]
                                                                                             (case ipv9 of v1 { Data.Vector.Vector ipv10 ipv11 ipv12 ->
                                                                                              letrec {
                                                                                                go11 :: GHC.Types.Int
                                                                                                        -> [Multilinear.Generic.Tensor
                                                                                                              a]
                                                                                                  {- Arity: 1 -}
                                                                                                = \ (s3 :: GHC.Types.Int) ->
                                                                                                  case s3 of wild4 { GHC.Types.I# x1 ->
                                                                                                  case GHC.Prim.tagToEnum#
                                                                                                         @ GHC.Types.Bool
                                                                                                         (GHC.Prim.>=#
                                                                                                            x1
                                                                                                            ipv11) of wild5 {
                                                                                                    GHC.Types.False
                                                                                                    -> case GHC.Prim.indexArray#
                                                                                                              @ (Multilinear.Generic.Tensor
                                                                                                                   a)
                                                                                                              ipv12
                                                                                                              (GHC.Prim.+#
                                                                                                                 ipv10
                                                                                                                 x1) of ds5 { Unit# ipv13 ->
                                                                                                       GHC.Types.:
                                                                                                         @ (Multilinear.Generic.Tensor
                                                                                                              a)
                                                                                                         ipv13
                                                                                                         (go11
                                                                                                            (GHC.Types.I#
                                                                                                               (GHC.Prim.+#
                                                                                                                  x1
                                                                                                                  1#))) }
                                                                                                    GHC.Types.True
                                                                                                    -> GHC.Types.[]
                                                                                                         @ (Multilinear.Generic.Tensor
                                                                                                              a) } }
                                                                                              } in
                                                                                              go11
                                                                                                (GHC.Types.I#
                                                                                                   0#) })
                                                                                             (go10
                                                                                                (GHC.Types.I#
                                                                                                   (GHC.Prim.+#
                                                                                                      x
                                                                                                      1#))) }
                                                                                        GHC.Types.True
                                                                                        -> GHC.Types.[]
                                                                                             @ [Multilinear.Generic.Tensor
                                                                                                  a] } }
                                                                                  } in
                                                                                  Data.OldList.transpose
                                                                                    @ (Multilinear.Generic.Tensor
                                                                                         a)
                                                                                    (go10
                                                                                       (GHC.Types.I#
                                                                                          0#))
                                                                              } in
                                                                              case ipv5 of wild1 {
                                                                                DEFAULT
                                                                                -> case GHC.Magic.runRW#
                                                                                          @ ('GHC.Types.TupleRep
                                                                                               '['GHC.Types.TupleRep
                                                                                                   '[],
                                                                                                 'GHC.Types.LiftedRep])
                                                                                          @ (# GHC.Prim.State#
                                                                                                 GHC.Prim.RealWorld,
                                                                                               Data.Vector.Vector
                                                                                                 (Data.Vector.Vector
                                                                                                    (Multilinear.Generic.Tensor
                                                                                                       a)) #)
                                                                                          (\ (s2 :: GHC.Prim.State#
                                                                                                      GHC.Prim.RealWorld)[OneShot] ->
                                                                                           case GHC.Prim.newArray#
                                                                                                  @ (Data.Vector.Vector
                                                                                                       (Multilinear.Generic.Tensor
                                                                                                          a))
                                                                                                  @ (Control.Monad.Primitive.PrimState
                                                                                                       (GHC.ST.ST
                                                                                                          GHC.Prim.RealWorld))
                                                                                                  ipv3
                                                                                                  (Data.Vector.Mutable.uninitialised
                                                                                                     @ (Data.Vector.Vector
                                                                                                          (Multilinear.Generic.Tensor
                                                                                                             a)))
                                                                                                  s2
                                                                                                    `cast`
                                                                                                  (Nth:2
                                                                                                       (Nth:2
                                                                                                            (Trans
                                                                                                                 (<GHC.ST.STRep
                                                                                                                     GHC.Prim.RealWorld
                                                                                                                     (Data.Primitive.Array.MutableArray
                                                                                                                        (Control.Monad.Primitive.PrimState
                                                                                                                           (GHC.ST.ST
                                                                                                                              GHC.Prim.RealWorld))
                                                                                                                        (Data.Vector.Vector
                                                                                                                           (Multilinear.Generic.Tensor
                                                                                                                              a)))>_R
                                                                                                                  ->_R Sym (GHC.ST.N:ST[0]
                                                                                                                                <GHC.Prim.RealWorld>_N
                                                                                                                                <Data.Primitive.Array.MutableArray
                                                                                                                                   (Control.Monad.Primitive.PrimState
                                                                                                                                      (GHC.ST.ST
                                                                                                                                         GHC.Prim.RealWorld))
                                                                                                                                   (Data.Vector.Vector
                                                                                                                                      (Multilinear.Generic.Tensor
                                                                                                                                         a))>_R))
                                                                                                                 (((GHC.Prim.State#
                                                                                                                      (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                                                                <GHC.Prim.RealWorld>_N)))_R
                                                                                                                   ->_R ((#,#)
                                                                                                                           <'GHC.Types.TupleRep
                                                                                                                              '[]>_R
                                                                                                                           <'GHC.Types.LiftedRep>_R
                                                                                                                           (GHC.Prim.State#
                                                                                                                              (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                                                                        <GHC.Prim.RealWorld>_N)))_R
                                                                                                                           <Data.Primitive.Array.MutableArray
                                                                                                                              (Control.Monad.Primitive.PrimState
                                                                                                                                 (GHC.ST.ST
                                                                                                                                    GHC.Prim.RealWorld))
                                                                                                                              (Data.Vector.Vector
                                                                                                                                 (Multilinear.Generic.Tensor
                                                                                                                                    a))>_R)_R)
                                                                                                                  ->_R <GHC.ST.ST
                                                                                                                          GHC.Prim.RealWorld
                                                                                                                          (Data.Primitive.Array.MutableArray
                                                                                                                             (Control.Monad.Primitive.PrimState
                                                                                                                                (GHC.ST.ST
                                                                                                                                   GHC.Prim.RealWorld))
                                                                                                                             (Data.Vector.Vector
                                                                                                                                (Multilinear.Generic.Tensor
                                                                                                                                   a)))>_R)))) of ds1 { (#,#) ipv6 ipv7 ->
                                                                                           letrec {
                                                                                             foldlM'_loop :: GHC.Types.SPEC
                                                                                                             -> GHC.Types.Int
                                                                                                             -> GHC.Types.Int
                                                                                                             -> GHC.ST.ST
                                                                                                                  GHC.Prim.RealWorld
                                                                                                                  GHC.Types.Int
                                                                                               {- Arity: 3 -}
                                                                                             = \ (ds4 :: GHC.Types.SPEC)
                                                                                                 (z :: GHC.Types.Int)
                                                                                                 (s7 :: GHC.Types.Int) ->
                                                                                               case ds4 of ds5 { DEFAULT ->
                                                                                               case z of z1 { GHC.Types.I# ipv8 ->
                                                                                               (\ (s8 :: GHC.Prim.State#
                                                                                                           GHC.Prim.RealWorld) ->
                                                                                                case s7 of wild2 { GHC.Types.I# x ->
                                                                                                case GHC.Prim.tagToEnum#
                                                                                                       @ GHC.Types.Bool
                                                                                                       (GHC.Prim.>=#
                                                                                                          x
                                                                                                          ipv3) of wild4 {
                                                                                                  GHC.Types.False
                                                                                                  -> case GHC.Prim.indexArray#
                                                                                                            @ (Multilinear.Generic.Tensor
                                                                                                                 a)
                                                                                                            ipv4
                                                                                                            (GHC.Prim.+#
                                                                                                               ipv2
                                                                                                               x) of ds8 { Unit# ipv9 ->
                                                                                                     case GHC.Prim.writeArray#
                                                                                                            @ (Control.Monad.Primitive.PrimState
                                                                                                                 (GHC.ST.ST
                                                                                                                    GHC.Prim.RealWorld))
                                                                                                            @ (Data.Vector.Vector
                                                                                                                 (Multilinear.Generic.Tensor
                                                                                                                    a))
                                                                                                            ipv7
                                                                                                            ipv8
                                                                                                            (case ipv9 of wild5 {
                                                                                                               DEFAULT
                                                                                                               -> Multilinear.Generic.$fMultilinearTensora11
                                                                                                                    @ a
                                                                                                               Multilinear.Generic.FiniteTensor ds ds9
                                                                                                               -> ds9 })
                                                                                                            s8
                                                                                                              `cast`
                                                                                                            (Nth:2
                                                                                                                 (Nth:2
                                                                                                                      (Trans
                                                                                                                           (<GHC.ST.STRep
                                                                                                                               GHC.Prim.RealWorld
                                                                                                                               ()>_R
                                                                                                                            ->_R Sym (GHC.ST.N:ST[0]
                                                                                                                                          <GHC.Prim.RealWorld>_N
                                                                                                                                          <()>_R))
                                                                                                                           (((GHC.Prim.State#
                                                                                                                                (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                                                                          <GHC.Prim.RealWorld>_N)))_R
                                                                                                                             ->_R ((#,#)
                                                                                                                                     <'GHC.Types.TupleRep
                                                                                                                                        '[]>_R
                                                                                                                                     <'GHC.Types.LiftedRep>_R
                                                                                                                                     (GHC.Prim.State#
                                                                                                                                        (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                                                                                  <GHC.Prim.RealWorld>_N)))_R
                                                                                                                                     <()>_R)_R)
                                                                                                                            ->_R <GHC.ST.ST
                                                                                                                                    GHC.Prim.RealWorld
                                                                                                                                    ()>_R)))) of s'# { DEFAULT ->
                                                                                                     (foldlM'_loop
                                                                                                        GHC.Types.SPEC
                                                                                                        (GHC.Types.I#
                                                                                                           (GHC.Prim.+#
                                                                                                              ipv8
                                                                                                              1#))
                                                                                                        (GHC.Types.I#
                                                                                                           (GHC.Prim.+#
                                                                                                              x
                                                                                                              1#)))
                                                                                                       `cast`
                                                                                                     (GHC.ST.N:ST[0]
                                                                                                          <GHC.Prim.RealWorld>_N
                                                                                                          <GHC.Types.Int>_R)
                                                                                                       s'#
                                                                                                         `cast`
                                                                                                       (Nth:2
                                                                                                            (Nth:3
                                                                                                                 (Nth:2
                                                                                                                      (Trans
                                                                                                                           (((GHC.Prim.State#
                                                                                                                                (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                                                                     <GHC.Prim.RealWorld>_N))_R
                                                                                                                             ->_R ((#,#)
                                                                                                                                     <'GHC.Types.TupleRep
                                                                                                                                        '[]>_R
                                                                                                                                     <'GHC.Types.LiftedRep>_R
                                                                                                                                     (GHC.Prim.State#
                                                                                                                                        (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                                                                             <GHC.Prim.RealWorld>_N))_R
                                                                                                                                     <()>_R)_R)
                                                                                                                            ->_R <GHC.ST.ST
                                                                                                                                    GHC.Prim.RealWorld
                                                                                                                                    ()>_R)
                                                                                                                           (<GHC.ST.STRep
                                                                                                                               GHC.Prim.RealWorld
                                                                                                                               ()>_R
                                                                                                                            ->_R GHC.ST.N:ST[0]
                                                                                                                                     <GHC.Prim.RealWorld>_N
                                                                                                                                     <()>_R))))) } }
                                                                                                  GHC.Types.True
                                                                                                  -> (# s8,
                                                                                                        z1 #) } })
                                                                                                 `cast`
                                                                                               (Sym (GHC.ST.N:ST[0]
                                                                                                         <GHC.Prim.RealWorld>_N
                                                                                                         <GHC.Types.Int>_R)) } }
                                                                                           } in
                                                                                           case (foldlM'_loop
                                                                                                   GHC.Types.SPEC
                                                                                                   (GHC.Types.I#
                                                                                                      0#)
                                                                                                   (GHC.Types.I#
                                                                                                      0#))
                                                                                                  `cast`
                                                                                                (GHC.ST.N:ST[0]
                                                                                                     <GHC.Prim.RealWorld>_N
                                                                                                     <GHC.Types.Int>_R)
                                                                                                  ipv6
                                                                                                    `cast`
                                                                                                  (Nth:2
                                                                                                       (Nth:3
                                                                                                            (Nth:2
                                                                                                                 (Trans
                                                                                                                      (((GHC.Prim.State#
                                                                                                                           (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                                                                <GHC.Prim.RealWorld>_N))_R
                                                                                                                        ->_R ((#,#)
                                                                                                                                <'GHC.Types.TupleRep
                                                                                                                                   '[]>_R
                                                                                                                                <'GHC.Types.LiftedRep>_R
                                                                                                                                (GHC.Prim.State#
                                                                                                                                   (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                                                                        <GHC.Prim.RealWorld>_N))_R
                                                                                                                                <Data.Primitive.Array.MutableArray
                                                                                                                                   (Control.Monad.Primitive.PrimState
                                                                                                                                      (GHC.ST.ST
                                                                                                                                         GHC.Prim.RealWorld))
                                                                                                                                   (Data.Vector.Vector
                                                                                                                                      (Multilinear.Generic.Tensor
                                                                                                                                         a))>_R)_R)
                                                                                                                       ->_R <GHC.ST.ST
                                                                                                                               GHC.Prim.RealWorld
                                                                                                                               (Data.Primitive.Array.MutableArray
                                                                                                                                  (Control.Monad.Primitive.PrimState
                                                                                                                                     (GHC.ST.ST
                                                                                                                                        GHC.Prim.RealWorld))
                                                                                                                                  (Data.Vector.Vector
                                                                                                                                     (Multilinear.Generic.Tensor
                                                                                                                                        a)))>_R)
                                                                                                                      (<GHC.ST.STRep
                                                                                                                          GHC.Prim.RealWorld
                                                                                                                          (Data.Primitive.Array.MutableArray
                                                                                                                             (Control.Monad.Primitive.PrimState
                                                                                                                                (GHC.ST.ST
                                                                                                                                   GHC.Prim.RealWorld))
                                                                                                                             (Data.Vector.Vector
                                                                                                                                (Multilinear.Generic.Tensor
                                                                                                                                   a)))>_R
                                                                                                                       ->_R GHC.ST.N:ST[0]
                                                                                                                                <GHC.Prim.RealWorld>_N
                                                                                                                                <Data.Primitive.Array.MutableArray
                                                                                                                                   (Control.Monad.Primitive.PrimState
                                                                                                                                      (GHC.ST.ST
                                                                                                                                         GHC.Prim.RealWorld))
                                                                                                                                   (Data.Vector.Vector
                                                                                                                                      (Multilinear.Generic.Tensor
                                                                                                                                         a))>_R))))) of ds5 { (#,#) ipv8 ipv9 ->
                                                                                           case ipv9 of dt { GHC.Types.I# dt1 ->
                                                                                           case GHC.Prim.unsafeFreezeArray#
                                                                                                  @ (Control.Monad.Primitive.PrimState
                                                                                                       (GHC.ST.ST
                                                                                                          GHC.Prim.RealWorld))
                                                                                                  @ (Data.Vector.Vector
                                                                                                       (Multilinear.Generic.Tensor
                                                                                                          a))
                                                                                                  ipv7
                                                                                                  ipv8
                                                                                                    `cast`
                                                                                                  (Nth:2
                                                                                                       (Nth:2
                                                                                                            (Trans
                                                                                                                 (<GHC.ST.STRep
                                                                                                                     GHC.Prim.RealWorld
                                                                                                                     (Data.Primitive.Array.Array
                                                                                                                        (Data.Vector.Vector
                                                                                                                           (Multilinear.Generic.Tensor
                                                                                                                              a)))>_R
                                                                                                                  ->_R Sym (GHC.ST.N:ST[0]
                                                                                                                                <GHC.Prim.RealWorld>_N
                                                                                                                                <Data.Primitive.Array.Array
                                                                                                                                   (Data.Vector.Vector
                                                                                                                                      (Multilinear.Generic.Tensor
                                                                                                                                         a))>_R))
                                                                                                                 (((GHC.Prim.State#
                                                                                                                      (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                                                                <GHC.Prim.RealWorld>_N)))_R
                                                                                                                   ->_R ((#,#)
                                                                                                                           <'GHC.Types.TupleRep
                                                                                                                              '[]>_R
                                                                                                                           <'GHC.Types.LiftedRep>_R
                                                                                                                           (GHC.Prim.State#
                                                                                                                              (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                                                                        <GHC.Prim.RealWorld>_N)))_R
                                                                                                                           <Data.Primitive.Array.Array
                                                                                                                              (Data.Vector.Vector
                                                                                                                                 (Multilinear.Generic.Tensor
                                                                                                                                    a))>_R)_R)
                                                                                                                  ->_R <GHC.ST.ST
                                                                                                                          GHC.Prim.RealWorld
                                                                                                                          (Data.Primitive.Array.Array
                                                                                                                             (Data.Vector.Vector
                                                                                                                                (Multilinear.Generic.Tensor
                                                                                                                                   a)))>_R)))) of ds6 { (#,#) ipv10 ipv11 ->
                                                                                           (# ipv10
                                                                                                `cast`
                                                                                              (Nth:2
                                                                                                   (Nth:3
                                                                                                        (Nth:2
                                                                                                             (Trans
                                                                                                                  (((GHC.Prim.State#
                                                                                                                       (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                                                            <GHC.Prim.RealWorld>_N))_R
                                                                                                                    ->_R ((#,#)
                                                                                                                            <'GHC.Types.TupleRep
                                                                                                                               '[]>_R
                                                                                                                            <'GHC.Types.LiftedRep>_R
                                                                                                                            (GHC.Prim.State#
                                                                                                                               (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                                                                    <GHC.Prim.RealWorld>_N))_R
                                                                                                                            <Data.Primitive.Array.Array
                                                                                                                               (Data.Vector.Vector
                                                                                                                                  (Multilinear.Generic.Tensor
                                                                                                                                     a))>_R)_R)
                                                                                                                   ->_R <GHC.ST.ST
                                                                                                                           GHC.Prim.RealWorld
                                                                                                                           (Data.Primitive.Array.Array
                                                                                                                              (Data.Vector.Vector
                                                                                                                                 (Multilinear.Generic.Tensor
                                                                                                                                    a)))>_R)
                                                                                                                  (<GHC.ST.STRep
                                                                                                                      GHC.Prim.RealWorld
                                                                                                                      (Data.Primitive.Array.Array
                                                                                                                         (Data.Vector.Vector
                                                                                                                            (Multilinear.Generic.Tensor
                                                                                                                               a)))>_R
                                                                                                                   ->_R GHC.ST.N:ST[0]
                                                                                                                            <GHC.Prim.RealWorld>_N
                                                                                                                            <Data.Primitive.Array.Array
                                                                                                                               (Data.Vector.Vector
                                                                                                                                  (Multilinear.Generic.Tensor
                                                                                                                                     a))>_R))))),
                                                                                              Data.Vector.Vector
                                                                                                @ (Data.Vector.Vector
                                                                                                     (Multilinear.Generic.Tensor
                                                                                                        a))
                                                                                                0#
                                                                                                dt1
                                                                                                ipv11 #) } } } }) of ds1 { (#,#) ipv6 ipv7 ->
                                                                                   case ipv7 of v1 { Data.Vector.Vector ipv8 ipv9 ipv10 ->
                                                                                   $j2
                                                                                     ipv8
                                                                                     ipv9
                                                                                     ipv10 } }
                                                                                Multilinear.Generic.SimpleFinite ds ds1
                                                                                -> case GHC.Magic.runRW#
                                                                                          @ ('GHC.Types.TupleRep
                                                                                               '['GHC.Types.TupleRep
                                                                                                   '[],
                                                                                                 'GHC.Types.LiftedRep])
                                                                                          @ (# GHC.Prim.State#
                                                                                                 GHC.Prim.RealWorld,
                                                                                               Data.Vector.Vector
                                                                                                 (Data.Vector.Vector
                                                                                                    (Multilinear.Generic.Tensor
                                                                                                       a)) #)
                                                                                          (\ (s2 :: GHC.Prim.State#
                                                                                                      GHC.Prim.RealWorld)[OneShot] ->
                                                                                           case GHC.Prim.newArray#
                                                                                                  @ (Data.Vector.Vector
                                                                                                       (Multilinear.Generic.Tensor
                                                                                                          a))
                                                                                                  @ (Control.Monad.Primitive.PrimState
                                                                                                       (GHC.ST.ST
                                                                                                          GHC.Prim.RealWorld))
                                                                                                  ipv3
                                                                                                  (Data.Vector.Mutable.uninitialised
                                                                                                     @ (Data.Vector.Vector
                                                                                                          (Multilinear.Generic.Tensor
                                                                                                             a)))
                                                                                                  s2
                                                                                                    `cast`
                                                                                                  (Nth:2
                                                                                                       (Nth:2
                                                                                                            (Trans
                                                                                                                 (<GHC.ST.STRep
                                                                                                                     GHC.Prim.RealWorld
                                                                                                                     (Data.Primitive.Array.MutableArray
                                                                                                                        (Control.Monad.Primitive.PrimState
                                                                                                                           (GHC.ST.ST
                                                                                                                              GHC.Prim.RealWorld))
                                                                                                                        (Data.Vector.Vector
                                                                                                                           (Multilinear.Generic.Tensor
                                                                                                                              a)))>_R
                                                                                                                  ->_R Sym (GHC.ST.N:ST[0]
                                                                                                                                <GHC.Prim.RealWorld>_N
                                                                                                                                <Data.Primitive.Array.MutableArray
                                                                                                                                   (Control.Monad.Primitive.PrimState
                                                                                                                                      (GHC.ST.ST
                                                                                                                                         GHC.Prim.RealWorld))
                                                                                                                                   (Data.Vector.Vector
                                                                                                                                      (Multilinear.Generic.Tensor
                                                                                                                                         a))>_R))
                                                                                                                 (((GHC.Prim.State#
                                                                                                                      (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                                                                <GHC.Prim.RealWorld>_N)))_R
                                                                                                                   ->_R ((#,#)
                                                                                                                           <'GHC.Types.TupleRep
                                                                                                                              '[]>_R
                                                                                                                           <'GHC.Types.LiftedRep>_R
                                                                                                                           (GHC.Prim.State#
                                                                                                                              (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                                                                        <GHC.Prim.RealWorld>_N)))_R
                                                                                                                           <Data.Primitive.Array.MutableArray
                                                                                                                              (Control.Monad.Primitive.PrimState
                                                                                                                                 (GHC.ST.ST
                                                                                                                                    GHC.Prim.RealWorld))
                                                                                                                              (Data.Vector.Vector
                                                                                                                                 (Multilinear.Generic.Tensor
                                                                                                                                    a))>_R)_R)
                                                                                                                  ->_R <GHC.ST.ST
                                                                                                                          GHC.Prim.RealWorld
                                                                                                                          (Data.Primitive.Array.MutableArray
                                                                                                                             (Control.Monad.Primitive.PrimState
                                                                                                                                (GHC.ST.ST
                                                                                                                                   GHC.Prim.RealWorld))
                                                                                                                             (Data.Vector.Vector
                                                                                                                                (Multilinear.Generic.Tensor
                                                                                                                                   a)))>_R)))) of ds5 { (#,#) ipv6 ipv7 ->
                                                                                           letrec {
                                                                                             foldlM'_loop :: GHC.Types.SPEC
                                                                                                             -> GHC.Types.Int
                                                                                                             -> GHC.Types.Int
                                                                                                             -> GHC.ST.ST
                                                                                                                  GHC.Prim.RealWorld
                                                                                                                  GHC.Types.Int
                                                                                               {- Arity: 3 -}
                                                                                             = \ (ds4 :: GHC.Types.SPEC)
                                                                                                 (z :: GHC.Types.Int)
                                                                                                 (s7 :: GHC.Types.Int) ->
                                                                                               case ds4 of ds6 { DEFAULT ->
                                                                                               case z of z1 { GHC.Types.I# ipv8 ->
                                                                                               (\ (s8 :: GHC.Prim.State#
                                                                                                           GHC.Prim.RealWorld) ->
                                                                                                case s7 of wild2 { GHC.Types.I# x ->
                                                                                                case GHC.Prim.tagToEnum#
                                                                                                       @ GHC.Types.Bool
                                                                                                       (GHC.Prim.>=#
                                                                                                          x
                                                                                                          ipv3) of wild4 {
                                                                                                  GHC.Types.False
                                                                                                  -> case GHC.Prim.indexArray#
                                                                                                            @ (Multilinear.Generic.Tensor
                                                                                                                 a)
                                                                                                            ipv4
                                                                                                            (GHC.Prim.+#
                                                                                                               ipv2
                                                                                                               x) of ds7 { Unit# ipv9 ->
                                                                                                     case GHC.Prim.writeArray#
                                                                                                            @ (Control.Monad.Primitive.PrimState
                                                                                                                 (GHC.ST.ST
                                                                                                                    GHC.Prim.RealWorld))
                                                                                                            @ (Data.Vector.Vector
                                                                                                                 (Multilinear.Generic.Tensor
                                                                                                                    a))
                                                                                                            ipv7
                                                                                                            ipv8
                                                                                                            (case ipv9 of wild5 {
                                                                                                               DEFAULT
                                                                                                               -> case Multilinear.Generic.$fMultilinearTensora10
                                                                                                                  ret_ty (Data.Vector.Vector
                                                                                                                            (Multilinear.Generic.Tensor
                                                                                                                               a))
                                                                                                                  of {}
                                                                                                               Multilinear.Generic.SimpleFinite ds8 ds9
                                                                                                               -> case ds9 of v1 { Data.Vector.Vector ipv10 ipv11 ipv12 ->
                                                                                                                  case GHC.Magic.runRW#
                                                                                                                         @ ('GHC.Types.TupleRep
                                                                                                                              '['GHC.Types.TupleRep
                                                                                                                                  '[],
                                                                                                                                'GHC.Types.LiftedRep])
                                                                                                                         @ (# GHC.Prim.State#
                                                                                                                                GHC.Prim.RealWorld,
                                                                                                                              Data.Vector.Vector
                                                                                                                                (Multilinear.Generic.Tensor
                                                                                                                                   a) #)
                                                                                                                         (\ (s3 :: GHC.Prim.State#
                                                                                                                                     GHC.Prim.RealWorld)[OneShot] ->
                                                                                                                          case GHC.Prim.newArray#
                                                                                                                                 @ (Multilinear.Generic.Tensor
                                                                                                                                      a)
                                                                                                                                 @ (Control.Monad.Primitive.PrimState
                                                                                                                                      (GHC.ST.ST
                                                                                                                                         GHC.Prim.RealWorld))
                                                                                                                                 ipv11
                                                                                                                                 (Data.Vector.Mutable.uninitialised
                                                                                                                                    @ (Multilinear.Generic.Tensor
                                                                                                                                         a))
                                                                                                                                 s3
                                                                                                                                   `cast`
                                                                                                                                 (Nth:2
                                                                                                                                      (Nth:2
                                                                                                                                           (Trans
                                                                                                                                                (<GHC.ST.STRep
                                                                                                                                                    GHC.Prim.RealWorld
                                                                                                                                                    (Data.Primitive.Array.MutableArray
                                                                                                                                                       (Control.Monad.Primitive.PrimState
                                                                                                                                                          (GHC.ST.ST
                                                                                                                                                             GHC.Prim.RealWorld))
                                                                                                                                                       (Multilinear.Generic.Tensor
                                                                                                                                                          a))>_R
                                                                                                                                                 ->_R Sym (GHC.ST.N:ST[0]
                                                                                                                                                               <GHC.Prim.RealWorld>_N
                                                                                                                                                               <Data.Primitive.Array.MutableArray
                                                                                                                                                                  (Control.Monad.Primitive.PrimState
                                                                                                                                                                     (GHC.ST.ST
                                                                                                                                                                        GHC.Prim.RealWorld))
                                                                                                                                                                  (Multilinear.Generic.Tensor
                                                                                                                                                                     a)>_R))
                                                                                                                                                (((GHC.Prim.State#
                                                                                                                                                     (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                                                                                               <GHC.Prim.RealWorld>_N)))_R
                                                                                                                                                  ->_R ((#,#)
                                                                                                                                                          <'GHC.Types.TupleRep
                                                                                                                                                             '[]>_R
                                                                                                                                                          <'GHC.Types.LiftedRep>_R
                                                                                                                                                          (GHC.Prim.State#
                                                                                                                                                             (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                                                                                                       <GHC.Prim.RealWorld>_N)))_R
                                                                                                                                                          <Data.Primitive.Array.MutableArray
                                                                                                                                                             (Control.Monad.Primitive.PrimState
                                                                                                                                                                (GHC.ST.ST
                                                                                                                                                                   GHC.Prim.RealWorld))
                                                                                                                                                             (Multilinear.Generic.Tensor
                                                                                                                                                                a)>_R)_R)
                                                                                                                                                 ->_R <GHC.ST.ST
                                                                                                                                                         GHC.Prim.RealWorld
                                                                                                                                                         (Data.Primitive.Array.MutableArray
                                                                                                                                                            (Control.Monad.Primitive.PrimState
                                                                                                                                                               (GHC.ST.ST
                                                                                                                                                                  GHC.Prim.RealWorld))
                                                                                                                                                            (Multilinear.Generic.Tensor
                                                                                                                                                               a))>_R)))) of ds10 { (#,#) ipv13 ipv14 ->
                                                                                                                          letrec {
                                                                                                                            foldlM'_loop1 :: GHC.Types.SPEC
                                                                                                                                             -> GHC.Types.Int
                                                                                                                                             -> GHC.Types.Int
                                                                                                                                             -> GHC.ST.ST
                                                                                                                                                  GHC.Prim.RealWorld
                                                                                                                                                  GHC.Types.Int
                                                                                                                              {- Arity: 3 -}
                                                                                                                            = \ (ds11 :: GHC.Types.SPEC)
                                                                                                                                (z2 :: GHC.Types.Int)
                                                                                                                                (s4 :: GHC.Types.Int) ->
                                                                                                                              case ds11 of ds12 { DEFAULT ->
                                                                                                                              case z2 of z3 { GHC.Types.I# ipv15 ->
                                                                                                                              (\ (s5 :: GHC.Prim.State#
                                                                                                                                          GHC.Prim.RealWorld) ->
                                                                                                                               case s4 of wild6 { GHC.Types.I# x1 ->
                                                                                                                               case GHC.Prim.tagToEnum#
                                                                                                                                      @ GHC.Types.Bool
                                                                                                                                      (GHC.Prim.>=#
                                                                                                                                         x1
                                                                                                                                         ipv11) of wild7 {
                                                                                                                                 GHC.Types.False
                                                                                                                                 -> case GHC.Prim.indexArray#
                                                                                                                                           @ a
                                                                                                                                           ipv12
                                                                                                                                           (GHC.Prim.+#
                                                                                                                                              ipv10
                                                                                                                                              x1) of ds13 { Unit# ipv16 ->
                                                                                                                                    case GHC.Prim.writeArray#
                                                                                                                                           @ (Control.Monad.Primitive.PrimState
                                                                                                                                                (GHC.ST.ST
                                                                                                                                                   GHC.Prim.RealWorld))
                                                                                                                                           @ (Multilinear.Generic.Tensor
                                                                                                                                                a)
                                                                                                                                           ipv14
                                                                                                                                           ipv15
                                                                                                                                           (Multilinear.Generic.Scalar
                                                                                                                                              @ a
                                                                                                                                              ipv16)
                                                                                                                                           s5
                                                                                                                                             `cast`
                                                                                                                                           (Nth:2
                                                                                                                                                (Nth:2
                                                                                                                                                     (Trans
                                                                                                                                                          (<GHC.ST.STRep
                                                                                                                                                              GHC.Prim.RealWorld
                                                                                                                                                              ()>_R
                                                                                                                                                           ->_R Sym (GHC.ST.N:ST[0]
                                                                                                                                                                         <GHC.Prim.RealWorld>_N
                                                                                                                                                                         <()>_R))
                                                                                                                                                          (((GHC.Prim.State#
                                                                                                                                                               (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                                                                                                         <GHC.Prim.RealWorld>_N)))_R
                                                                                                                                                            ->_R ((#,#)
                                                                                                                                                                    <'GHC.Types.TupleRep
                                                                                                                                                                       '[]>_R
                                                                                                                                                                    <'GHC.Types.LiftedRep>_R
                                                                                                                                                                    (GHC.Prim.State#
                                                                                                                                                                       (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                                                                                                                 <GHC.Prim.RealWorld>_N)))_R
                                                                                                                                                                    <()>_R)_R)
                                                                                                                                                           ->_R <GHC.ST.ST
                                                                                                                                                                   GHC.Prim.RealWorld
                                                                                                                                                                   ()>_R)))) of s'# { DEFAULT ->
                                                                                                                                    (foldlM'_loop1
                                                                                                                                       GHC.Types.SPEC
                                                                                                                                       (GHC.Types.I#
                                                                                                                                          (GHC.Prim.+#
                                                                                                                                             ipv15
                                                                                                                                             1#))
                                                                                                                                       (GHC.Types.I#
                                                                                                                                          (GHC.Prim.+#
                                                                                                                                             x1
                                                                                                                                             1#)))
                                                                                                                                      `cast`
                                                                                                                                    (GHC.ST.N:ST[0]
                                                                                                                                         <GHC.Prim.RealWorld>_N
                                                                                                                                         <GHC.Types.Int>_R)
                                                                                                                                      s'#
                                                                                                                                        `cast`
                                                                                                                                      (Nth:2
                                                                                                                                           (Nth:3
                                                                                                                                                (Nth:2
                                                                                                                                                     (Trans
                                                                                                                                                          (((GHC.Prim.State#
                                                                                                                                                               (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                                                                                                    <GHC.Prim.RealWorld>_N))_R
                                                                                                                                                            ->_R ((#,#)
                                                                                                                                                                    <'GHC.Types.TupleRep
                                                                                                                                                                       '[]>_R
                                                                                                                                                                    <'GHC.Types.LiftedRep>_R
                                                                                                                                                                    (GHC.Prim.State#
                                                                                                                                                                       (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                                                                                                            <GHC.Prim.RealWorld>_N))_R
                                                                                                                                                                    <()>_R)_R)
                                                                                                                                                           ->_R <GHC.ST.ST
                                                                                                                                                                   GHC.Prim.RealWorld
                                                                                                                                                                   ()>_R)
                                                                                                                                                          (<GHC.ST.STRep
                                                                                                                                                              GHC.Prim.RealWorld
                                                                                                                                                              ()>_R
                                                                                                                                                           ->_R GHC.ST.N:ST[0]
                                                                                                                                                                    <GHC.Prim.RealWorld>_N
                                                                                                                                                                    <()>_R))))) } }
                                                                                                                                 GHC.Types.True
                                                                                                                                 -> (# s5,
                                                                                                                                       z3 #) } })
                                                                                                                                `cast`
                                                                                                                              (Sym (GHC.ST.N:ST[0]
                                                                                                                                        <GHC.Prim.RealWorld>_N
                                                                                                                                        <GHC.Types.Int>_R)) } }
                                                                                                                          } in
                                                                                                                          case (foldlM'_loop1
                                                                                                                                  GHC.Types.SPEC
                                                                                                                                  (GHC.Types.I#
                                                                                                                                     0#)
                                                                                                                                  (GHC.Types.I#
                                                                                                                                     0#))
                                                                                                                                 `cast`
                                                                                                                               (GHC.ST.N:ST[0]
                                                                                                                                    <GHC.Prim.RealWorld>_N
                                                                                                                                    <GHC.Types.Int>_R)
                                                                                                                                 ipv13
                                                                                                                                   `cast`
                                                                                                                                 (Nth:2
                                                                                                                                      (Nth:3
                                                                                                                                           (Nth:2
                                                                                                                                                (Trans
                                                                                                                                                     (((GHC.Prim.State#
                                                                                                                                                          (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                                                                                               <GHC.Prim.RealWorld>_N))_R
                                                                                                                                                       ->_R ((#,#)
                                                                                                                                                               <'GHC.Types.TupleRep
                                                                                                                                                                  '[]>_R
                                                                                                                                                               <'GHC.Types.LiftedRep>_R
                                                                                                                                                               (GHC.Prim.State#
                                                                                                                                                                  (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                                                                                                       <GHC.Prim.RealWorld>_N))_R
                                                                                                                                                               <Data.Primitive.Array.MutableArray
                                                                                                                                                                  (Control.Monad.Primitive.PrimState
                                                                                                                                                                     (GHC.ST.ST
                                                                                                                                                                        GHC.Prim.RealWorld))
                                                                                                                                                                  (Multilinear.Generic.Tensor
                                                                                                                                                                     a)>_R)_R)
                                                                                                                                                      ->_R <GHC.ST.ST
                                                                                                                                                              GHC.Prim.RealWorld
                                                                                                                                                              (Data.Primitive.Array.MutableArray
                                                                                                                                                                 (Control.Monad.Primitive.PrimState
                                                                                                                                                                    (GHC.ST.ST
                                                                                                                                                                       GHC.Prim.RealWorld))
                                                                                                                                                                 (Multilinear.Generic.Tensor
                                                                                                                                                                    a))>_R)
                                                                                                                                                     (<GHC.ST.STRep
                                                                                                                                                         GHC.Prim.RealWorld
                                                                                                                                                         (Data.Primitive.Array.MutableArray
                                                                                                                                                            (Control.Monad.Primitive.PrimState
                                                                                                                                                               (GHC.ST.ST
                                                                                                                                                                  GHC.Prim.RealWorld))
                                                                                                                                                            (Multilinear.Generic.Tensor
                                                                                                                                                               a))>_R
                                                                                                                                                      ->_R GHC.ST.N:ST[0]
                                                                                                                                                               <GHC.Prim.RealWorld>_N
                                                                                                                                                               <Data.Primitive.Array.MutableArray
                                                                                                                                                                  (Control.Monad.Primitive.PrimState
                                                                                                                                                                     (GHC.ST.ST
                                                                                                                                                                        GHC.Prim.RealWorld))
                                                                                                                                                                  (Multilinear.Generic.Tensor
                                                                                                                                                                     a)>_R))))) of ds11 { (#,#) ipv15 ipv16 ->
                                                                                                                          case ipv16 of dt { GHC.Types.I# dt1 ->
                                                                                                                          case GHC.Prim.unsafeFreezeArray#
                                                                                                                                 @ (Control.Monad.Primitive.PrimState
                                                                                                                                      (GHC.ST.ST
                                                                                                                                         GHC.Prim.RealWorld))
                                                                                                                                 @ (Multilinear.Generic.Tensor
                                                                                                                                      a)
                                                                                                                                 ipv14
                                                                                                                                 ipv15
                                                                                                                                   `cast`
                                                                                                                                 (Nth:2
                                                                                                                                      (Nth:2
                                                                                                                                           (Trans
                                                                                                                                                (<GHC.ST.STRep
                                                                                                                                                    GHC.Prim.RealWorld
                                                                                                                                                    (Data.Primitive.Array.Array
                                                                                                                                                       (Multilinear.Generic.Tensor
                                                                                                                                                          a))>_R
                                                                                                                                                 ->_R Sym (GHC.ST.N:ST[0]
                                                                                                                                                               <GHC.Prim.RealWorld>_N
                                                                                                                                                               <Data.Primitive.Array.Array
                                                                                                                                                                  (Multilinear.Generic.Tensor
                                                                                                                                                                     a)>_R))
                                                                                                                                                (((GHC.Prim.State#
                                                                                                                                                     (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                                                                                               <GHC.Prim.RealWorld>_N)))_R
                                                                                                                                                  ->_R ((#,#)
                                                                                                                                                          <'GHC.Types.TupleRep
                                                                                                                                                             '[]>_R
                                                                                                                                                          <'GHC.Types.LiftedRep>_R
                                                                                                                                                          (GHC.Prim.State#
                                                                                                                                                             (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                                                                                                       <GHC.Prim.RealWorld>_N)))_R
                                                                                                                                                          <Data.Primitive.Array.Array
                                                                                                                                                             (Multilinear.Generic.Tensor
                                                                                                                                                                a)>_R)_R)
                                                                                                                                                 ->_R <GHC.ST.ST
                                                                                                                                                         GHC.Prim.RealWorld
                                                                                                                                                         (Data.Primitive.Array.Array
                                                                                                                                                            (Multilinear.Generic.Tensor
                                                                                                                                                               a))>_R)))) of ds12 { (#,#) ipv17 ipv18 ->
                                                                                                                          (# ipv17
                                                                                                                               `cast`
                                                                                                                             (Nth:2
                                                                                                                                  (Nth:3
                                                                                                                                       (Nth:2
                                                                                                                                            (Trans
                                                                                                                                                 (((GHC.Prim.State#
                                                                                                                                                      (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                                                                                           <GHC.Prim.RealWorld>_N))_R
                                                                                                                                                   ->_R ((#,#)
                                                                                                                                                           <'GHC.Types.TupleRep
                                                                                                                                                              '[]>_R
                                                                                                                                                           <'GHC.Types.LiftedRep>_R
                                                                                                                                                           (GHC.Prim.State#
                                                                                                                                                              (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                                                                                                   <GHC.Prim.RealWorld>_N))_R
                                                                                                                                                           <Data.Primitive.Array.Array
                                                                                                                                                              (Multilinear.Generic.Tensor
                                                                                                                                                                 a)>_R)_R)
                                                                                                                                                  ->_R <GHC.ST.ST
                                                                                                                                                          GHC.Prim.RealWorld
                                                                                                                                                          (Data.Primitive.Array.Array
                                                                                                                                                             (Multilinear.Generic.Tensor
                                                                                                                                                                a))>_R)
                                                                                                                                                 (<GHC.ST.STRep
                                                                                                                                                     GHC.Prim.RealWorld
                                                                                                                                                     (Data.Primitive.Array.Array
                                                                                                                                                        (Multilinear.Generic.Tensor
                                                                                                                                                           a))>_R
                                                                                                                                                  ->_R GHC.ST.N:ST[0]
                                                                                                                                                           <GHC.Prim.RealWorld>_N
                                                                                                                                                           <Data.Primitive.Array.Array
                                                                                                                                                              (Multilinear.Generic.Tensor
                                                                                                                                                                 a)>_R))))),
                                                                                                                             Data.Vector.Vector
                                                                                                                               @ (Multilinear.Generic.Tensor
                                                                                                                                    a)
                                                                                                                               0#
                                                                                                                               dt1
                                                                                                                               ipv18 #) } } } }) of ds10 { (#,#) ipv13 ipv14 ->
                                                                                                                  ipv14 } } })
                                                                                                            s8
                                                                                                              `cast`
                                                                                                            (Nth:2
                                                                                                                 (Nth:2
                                                                                                                      (Trans
                                                                                                                           (<GHC.ST.STRep
                                                                                                                               GHC.Prim.RealWorld
                                                                                                                               ()>_R
                                                                                                                            ->_R Sym (GHC.ST.N:ST[0]
                                                                                                                                          <GHC.Prim.RealWorld>_N
                                                                                                                                          <()>_R))
                                                                                                                           (((GHC.Prim.State#
                                                                                                                                (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                                                                          <GHC.Prim.RealWorld>_N)))_R
                                                                                                                             ->_R ((#,#)
                                                                                                                                     <'GHC.Types.TupleRep
                                                                                                                                        '[]>_R
                                                                                                                                     <'GHC.Types.LiftedRep>_R
                                                                                                                                     (GHC.Prim.State#
                                                                                                                                        (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                                                                                  <GHC.Prim.RealWorld>_N)))_R
                                                                                                                                     <()>_R)_R)
                                                                                                                            ->_R <GHC.ST.ST
                                                                                                                                    GHC.Prim.RealWorld
                                                                                                                                    ()>_R)))) of s'# { DEFAULT ->
                                                                                                     (foldlM'_loop
                                                                                                        GHC.Types.SPEC
                                                                                                        (GHC.Types.I#
                                                                                                           (GHC.Prim.+#
                                                                                                              ipv8
                                                                                                              1#))
                                                                                                        (GHC.Types.I#
                                                                                                           (GHC.Prim.+#
                                                                                                              x
                                                                                                              1#)))
                                                                                                       `cast`
                                                                                                     (GHC.ST.N:ST[0]
                                                                                                          <GHC.Prim.RealWorld>_N
                                                                                                          <GHC.Types.Int>_R)
                                                                                                       s'#
                                                                                                         `cast`
                                                                                                       (Nth:2
                                                                                                            (Nth:3
                                                                                                                 (Nth:2
                                                                                                                      (Trans
                                                                                                                           (((GHC.Prim.State#
                                                                                                                                (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                                                                     <GHC.Prim.RealWorld>_N))_R
                                                                                                                             ->_R ((#,#)
                                                                                                                                     <'GHC.Types.TupleRep
                                                                                                                                        '[]>_R
                                                                                                                                     <'GHC.Types.LiftedRep>_R
                                                                                                                                     (GHC.Prim.State#
                                                                                                                                        (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                                                                             <GHC.Prim.RealWorld>_N))_R
                                                                                                                                     <()>_R)_R)
                                                                                                                            ->_R <GHC.ST.ST
                                                                                                                                    GHC.Prim.RealWorld
                                                                                                                                    ()>_R)
                                                                                                                           (<GHC.ST.STRep
                                                                                                                               GHC.Prim.RealWorld
                                                                                                                               ()>_R
                                                                                                                            ->_R GHC.ST.N:ST[0]
                                                                                                                                     <GHC.Prim.RealWorld>_N
                                                                                                                                     <()>_R))))) } }
                                                                                                  GHC.Types.True
                                                                                                  -> (# s8,
                                                                                                        z1 #) } })
                                                                                                 `cast`
                                                                                               (Sym (GHC.ST.N:ST[0]
                                                                                                         <GHC.Prim.RealWorld>_N
                                                                                                         <GHC.Types.Int>_R)) } }
                                                                                           } in
                                                                                           case (foldlM'_loop
                                                                                                   GHC.Types.SPEC
                                                                                                   (GHC.Types.I#
                                                                                                      0#)
                                                                                                   (GHC.Types.I#
                                                                                                      0#))
                                                                                                  `cast`
                                                                                                (GHC.ST.N:ST[0]
                                                                                                     <GHC.Prim.RealWorld>_N
                                                                                                     <GHC.Types.Int>_R)
                                                                                                  ipv6
                                                                                                    `cast`
                                                                                                  (Nth:2
                                                                                                       (Nth:3
                                                                                                            (Nth:2
                                                                                                                 (Trans
                                                                                                                      (((GHC.Prim.State#
                                                                                                                           (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                                                                <GHC.Prim.RealWorld>_N))_R
                                                                                                                        ->_R ((#,#)
                                                                                                                                <'GHC.Types.TupleRep
                                                                                                                                   '[]>_R
                                                                                                                                <'GHC.Types.LiftedRep>_R
                                                                                                                                (GHC.Prim.State#
                                                                                                                                   (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                                                                        <GHC.Prim.RealWorld>_N))_R
                                                                                                                                <Data.Primitive.Array.MutableArray
                                                                                                                                   (Control.Monad.Primitive.PrimState
                                                                                                                                      (GHC.ST.ST
                                                                                                                                         GHC.Prim.RealWorld))
                                                                                                                                   (Data.Vector.Vector
                                                                                                                                      (Multilinear.Generic.Tensor
                                                                                                                                         a))>_R)_R)
                                                                                                                       ->_R <GHC.ST.ST
                                                                                                                               GHC.Prim.RealWorld
                                                                                                                               (Data.Primitive.Array.MutableArray
                                                                                                                                  (Control.Monad.Primitive.PrimState
                                                                                                                                     (GHC.ST.ST
                                                                                                                                        GHC.Prim.RealWorld))
                                                                                                                                  (Data.Vector.Vector
                                                                                                                                     (Multilinear.Generic.Tensor
                                                                                                                                        a)))>_R)
                                                                                                                      (<GHC.ST.STRep
                                                                                                                          GHC.Prim.RealWorld
                                                                                                                          (Data.Primitive.Array.MutableArray
                                                                                                                             (Control.Monad.Primitive.PrimState
                                                                                                                                (GHC.ST.ST
                                                                                                                                   GHC.Prim.RealWorld))
                                                                                                                             (Data.Vector.Vector
                                                                                                                                (Multilinear.Generic.Tensor
                                                                                                                                   a)))>_R
                                                                                                                       ->_R GHC.ST.N:ST[0]
                                                                                                                                <GHC.Prim.RealWorld>_N
                                                                                                                                <Data.Primitive.Array.MutableArray
                                                                                                                                   (Control.Monad.Primitive.PrimState
                                                                                                                                      (GHC.ST.ST
                                                                                                                                         GHC.Prim.RealWorld))
                                                                                                                                   (Data.Vector.Vector
                                                                                                                                      (Multilinear.Generic.Tensor
                                                                                                                                         a))>_R))))) of ds6 { (#,#) ipv8 ipv9 ->
                                                                                           case ipv9 of dt { GHC.Types.I# dt1 ->
                                                                                           case GHC.Prim.unsafeFreezeArray#
                                                                                                  @ (Control.Monad.Primitive.PrimState
                                                                                                       (GHC.ST.ST
                                                                                                          GHC.Prim.RealWorld))
                                                                                                  @ (Data.Vector.Vector
                                                                                                       (Multilinear.Generic.Tensor
                                                                                                          a))
                                                                                                  ipv7
                                                                                                  ipv8
                                                                                                    `cast`
                                                                                                  (Nth:2
                                                                                                       (Nth:2
                                                                                                            (Trans
                                                                                                                 (<GHC.ST.STRep
                                                                                                                     GHC.Prim.RealWorld
                                                                                                                     (Data.Primitive.Array.Array
                                                                                                                        (Data.Vector.Vector
                                                                                                                           (Multilinear.Generic.Tensor
                                                                                                                              a)))>_R
                                                                                                                  ->_R Sym (GHC.ST.N:ST[0]
                                                                                                                                <GHC.Prim.RealWorld>_N
                                                                                                                                <Data.Primitive.Array.Array
                                                                                                                                   (Data.Vector.Vector
                                                                                                                                      (Multilinear.Generic.Tensor
                                                                                                                                         a))>_R))
                                                                                                                 (((GHC.Prim.State#
                                                                                                                      (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                                                                <GHC.Prim.RealWorld>_N)))_R
                                                                                                                   ->_R ((#,#)
                                                                                                                           <'GHC.Types.TupleRep
                                                                                                                              '[]>_R
                                                                                                                           <'GHC.Types.LiftedRep>_R
                                                                                                                           (GHC.Prim.State#
                                                                                                                              (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                                                                        <GHC.Prim.RealWorld>_N)))_R
                                                                                                                           <Data.Primitive.Array.Array
                                                                                                                              (Data.Vector.Vector
                                                                                                                                 (Multilinear.Generic.Tensor
                                                                                                                                    a))>_R)_R)
                                                                                                                  ->_R <GHC.ST.ST
                                                                                                                          GHC.Prim.RealWorld
                                                                                                                          (Data.Primitive.Array.Array
                                                                                                                             (Data.Vector.Vector
                                                                                                                                (Multilinear.Generic.Tensor
                                                                                                                                   a)))>_R)))) of ds7 { (#,#) ipv10 ipv11 ->
                                                                                           (# ipv10
                                                                                                `cast`
                                                                                              (Nth:2
                                                                                                   (Nth:3
                                                                                                        (Nth:2
                                                                                                             (Trans
                                                                                                                  (((GHC.Prim.State#
                                                                                                                       (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                                                            <GHC.Prim.RealWorld>_N))_R
                                                                                                                    ->_R ((#,#)
                                                                                                                            <'GHC.Types.TupleRep
                                                                                                                               '[]>_R
                                                                                                                            <'GHC.Types.LiftedRep>_R
                                                                                                                            (GHC.Prim.State#
                                                                                                                               (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                                                                    <GHC.Prim.RealWorld>_N))_R
                                                                                                                            <Data.Primitive.Array.Array
                                                                                                                               (Data.Vector.Vector
                                                                                                                                  (Multilinear.Generic.Tensor
                                                                                                                                     a))>_R)_R)
                                                                                                                   ->_R <GHC.ST.ST
                                                                                                                           GHC.Prim.RealWorld
                                                                                                                           (Data.Primitive.Array.Array
                                                                                                                              (Data.Vector.Vector
                                                                                                                                 (Multilinear.Generic.Tensor
                                                                                                                                    a)))>_R)
                                                                                                                  (<GHC.ST.STRep
                                                                                                                      GHC.Prim.RealWorld
                                                                                                                      (Data.Primitive.Array.Array
                                                                                                                         (Data.Vector.Vector
                                                                                                                            (Multilinear.Generic.Tensor
                                                                                                                               a)))>_R
                                                                                                                   ->_R GHC.ST.N:ST[0]
                                                                                                                            <GHC.Prim.RealWorld>_N
                                                                                                                            <Data.Primitive.Array.Array
                                                                                                                               (Data.Vector.Vector
                                                                                                                                  (Multilinear.Generic.Tensor
                                                                                                                                     a))>_R))))),
                                                                                              Data.Vector.Vector
                                                                                                @ (Data.Vector.Vector
                                                                                                     (Multilinear.Generic.Tensor
                                                                                                        a))
                                                                                                0#
                                                                                                dt1
                                                                                                ipv11 #) } } } }) of ds5 { (#,#) ipv6 ipv7 ->
                                                                                   case ipv7 of v1 { Data.Vector.Vector ipv8 ipv9 ipv10 ->
                                                                                   $j2
                                                                                     ipv8
                                                                                     ipv9
                                                                                     ipv10 } } } } } }))
                                                                       `cast`
                                                                     (GHC.ST.N:ST[0]
                                                                          <GHC.Prim.RealWorld>_N
                                                                          <(Data.Vector.Generic.Base.Mutable
                                                                              Data.Vector.Vector
                                                                              (Control.Monad.Primitive.PrimState
                                                                                 (GHC.ST.ST
                                                                                    GHC.Prim.RealWorld))
                                                                              (Multilinear.Generic.Tensor
                                                                                 a),
                                                                            GHC.Types.Int)>_R)
                                                                       ipv
                                                                         `cast`
                                                                       (Nth:2
                                                                            (Nth:3
                                                                                 (Nth:2
                                                                                      (Trans
                                                                                           (((GHC.Prim.State#
                                                                                                (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                                     <GHC.Prim.RealWorld>_N))_R
                                                                                             ->_R ((#,#)
                                                                                                     <'GHC.Types.TupleRep
                                                                                                        '[]>_R
                                                                                                     <'GHC.Types.LiftedRep>_R
                                                                                                     (GHC.Prim.State#
                                                                                                        (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                                             <GHC.Prim.RealWorld>_N))_R
                                                                                                     <Data.Primitive.Array.MutableArray
                                                                                                        (Control.Monad.Primitive.PrimState
                                                                                                           (GHC.ST.ST
                                                                                                              GHC.Prim.RealWorld))
                                                                                                        (Multilinear.Generic.Tensor
                                                                                                           a)>_R)_R)
                                                                                            ->_R <GHC.ST.ST
                                                                                                    GHC.Prim.RealWorld
                                                                                                    (Data.Primitive.Array.MutableArray
                                                                                                       (Control.Monad.Primitive.PrimState
                                                                                                          (GHC.ST.ST
                                                                                                             GHC.Prim.RealWorld))
                                                                                                       (Multilinear.Generic.Tensor
                                                                                                          a))>_R)
                                                                                           (<GHC.ST.STRep
                                                                                               GHC.Prim.RealWorld
                                                                                               (Data.Primitive.Array.MutableArray
                                                                                                  (Control.Monad.Primitive.PrimState
                                                                                                     (GHC.ST.ST
                                                                                                        GHC.Prim.RealWorld))
                                                                                                  (Multilinear.Generic.Tensor
                                                                                                     a))>_R
                                                                                            ->_R GHC.ST.N:ST[0]
                                                                                                     <GHC.Prim.RealWorld>_N
                                                                                                     <Data.Primitive.Array.MutableArray
                                                                                                        (Control.Monad.Primitive.PrimState
                                                                                                           (GHC.ST.ST
                                                                                                              GHC.Prim.RealWorld))
                                                                                                        (Multilinear.Generic.Tensor
                                                                                                           a)>_R))))) of ds1 { (#,#) ipv6 ipv7 ->
                                                                case ipv7 of wild5 { (,) v' n ->
                                                                case v'
                                                                       `cast`
                                                                     (Sub (Data.Vector.D:R:MutableVector[0]) <Control.Monad.Primitive.PrimState
                                                                                                                (GHC.ST.ST
                                                                                                                   GHC.Prim.RealWorld)>_N <Multilinear.Generic.Tensor
                                                                                                                                             a>_N) of wild1 { Data.Vector.Mutable.MVector dt dt1 dt2 ->
                                                                case n of dt4 { GHC.Types.I# dt5 ->
                                                                case GHC.Prim.unsafeFreezeArray#
                                                                       @ (Control.Monad.Primitive.PrimState
                                                                            (GHC.ST.ST
                                                                               GHC.Prim.RealWorld))
                                                                       @ (Multilinear.Generic.Tensor
                                                                            a)
                                                                       dt2
                                                                       ipv6
                                                                         `cast`
                                                                       (Nth:2
                                                                            (Nth:2
                                                                                 (Trans
                                                                                      (<GHC.ST.STRep
                                                                                          GHC.Prim.RealWorld
                                                                                          (Data.Primitive.Array.Array
                                                                                             (Multilinear.Generic.Tensor
                                                                                                a))>_R
                                                                                       ->_R Sym (GHC.ST.N:ST[0]
                                                                                                     <GHC.Prim.RealWorld>_N
                                                                                                     <Data.Primitive.Array.Array
                                                                                                        (Multilinear.Generic.Tensor
                                                                                                           a)>_R))
                                                                                      (((GHC.Prim.State#
                                                                                           (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                                     <GHC.Prim.RealWorld>_N)))_R
                                                                                        ->_R ((#,#)
                                                                                                <'GHC.Types.TupleRep
                                                                                                   '[]>_R
                                                                                                <'GHC.Types.LiftedRep>_R
                                                                                                (GHC.Prim.State#
                                                                                                   (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                                             <GHC.Prim.RealWorld>_N)))_R
                                                                                                <Data.Primitive.Array.Array
                                                                                                   (Multilinear.Generic.Tensor
                                                                                                      a)>_R)_R)
                                                                                       ->_R <GHC.ST.ST
                                                                                               GHC.Prim.RealWorld
                                                                                               (Data.Primitive.Array.Array
                                                                                                  (Multilinear.Generic.Tensor
                                                                                                     a))>_R)))) of ds3 { (#,#) ipv2 ipv3 ->
                                                                (# ipv2
                                                                     `cast`
                                                                   (Nth:2
                                                                        (Nth:3
                                                                             (Nth:2
                                                                                  (Trans
                                                                                       (((GHC.Prim.State#
                                                                                            (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                                 <GHC.Prim.RealWorld>_N))_R
                                                                                         ->_R ((#,#)
                                                                                                 <'GHC.Types.TupleRep
                                                                                                    '[]>_R
                                                                                                 <'GHC.Types.LiftedRep>_R
                                                                                                 (GHC.Prim.State#
                                                                                                    (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                                         <GHC.Prim.RealWorld>_N))_R
                                                                                                 <Data.Primitive.Array.Array
                                                                                                    (Multilinear.Generic.Tensor
                                                                                                       a)>_R)_R)
                                                                                        ->_R <GHC.ST.ST
                                                                                                GHC.Prim.RealWorld
                                                                                                (Data.Primitive.Array.Array
                                                                                                   (Multilinear.Generic.Tensor
                                                                                                      a))>_R)
                                                                                       (<GHC.ST.STRep
                                                                                           GHC.Prim.RealWorld
                                                                                           (Data.Primitive.Array.Array
                                                                                              (Multilinear.Generic.Tensor
                                                                                                 a))>_R
                                                                                        ->_R GHC.ST.N:ST[0]
                                                                                                 <GHC.Prim.RealWorld>_N
                                                                                                 <Data.Primitive.Array.Array
                                                                                                    (Multilinear.Generic.Tensor
                                                                                                       a)>_R))))),
                                                                   Data.Vector.Vector
                                                                     @ (Multilinear.Generic.Tensor
                                                                          a)
                                                                     dt
                                                                     dt5
                                                                     ipv3 #) } } } } } }) of ds1 { (#,#) ipv1 ipv2 ->
                                                        ipv2 })
                                                 } in
                                                 case go9
                                                        (Multilinear.Generic.$fMultilinearTensora_$s$w$cindices1
                                                           @ a
                                                           index1
                                                           ts1)
                                                        (GHC.Types.I#
                                                           0#) of wild1 { GHC.Types.I# x ->
                                                 case GHC.Prim.tagToEnum#
                                                        @ GHC.Types.Bool
                                                        (GHC.Prim.># x 1#) of wild2 {
                                                   GHC.Types.False -> wild
                                                   GHC.Types.True
                                                   -> case index1 of wild3 {
                                                        Multilinear.Index.Finite.Covariant ds1 ds2
                                                        -> case GHC.Base.eqString ds2 w1 of wild4 {
                                                             GHC.Types.False -> wild
                                                             GHC.Types.True -> $j1 }
                                                        Multilinear.Index.Finite.Contravariant ds1 ds2
                                                        -> case GHC.Base.eqString ds2 w1 of wild4 {
                                                             GHC.Types.False -> wild
                                                             GHC.Types.True -> $j1 }
                                                        Multilinear.Index.Finite.Indifferent ds1 ds2
                                                        -> case GHC.Base.eqString ds2 w1 of wild4 {
                                                             GHC.Types.False -> wild
                                                             GHC.Types.True -> $j1 } } } }
                                             } in
                                             let {
                                               $j1 :: Multilinear.Generic.Tensor a <join 0>
                                               = Multilinear.Generic.FiniteTensor
                                                   @ a
                                                   index1
                                                   (case ts1 of v2 { Data.Vector.Vector ipv ipv1 ipv2 ->
                                                    case GHC.Magic.runRW#
                                                           @ ('GHC.Types.TupleRep
                                                                '['GHC.Types.TupleRep '[],
                                                                  'GHC.Types.LiftedRep])
                                                           @ (# GHC.Prim.State# GHC.Prim.RealWorld,
                                                                Data.Vector.Vector
                                                                  (Multilinear.Generic.Tensor a) #)
                                                           (\ (s1 :: GHC.Prim.State#
                                                                       GHC.Prim.RealWorld)[OneShot] ->
                                                            case GHC.Prim.newArray#
                                                                   @ (Multilinear.Generic.Tensor a)
                                                                   @ (Control.Monad.Primitive.PrimState
                                                                        (GHC.ST.ST
                                                                           GHC.Prim.RealWorld))
                                                                   ipv1
                                                                   (Data.Vector.Mutable.uninitialised
                                                                      @ (Multilinear.Generic.Tensor
                                                                           a))
                                                                   s1
                                                                     `cast`
                                                                   (Nth:2
                                                                        (Nth:2
                                                                             (Trans
                                                                                  (<GHC.ST.STRep
                                                                                      GHC.Prim.RealWorld
                                                                                      (Data.Primitive.Array.MutableArray
                                                                                         (Control.Monad.Primitive.PrimState
                                                                                            (GHC.ST.ST
                                                                                               GHC.Prim.RealWorld))
                                                                                         (Multilinear.Generic.Tensor
                                                                                            a))>_R
                                                                                   ->_R Sym (GHC.ST.N:ST[0]
                                                                                                 <GHC.Prim.RealWorld>_N
                                                                                                 <Data.Primitive.Array.MutableArray
                                                                                                    (Control.Monad.Primitive.PrimState
                                                                                                       (GHC.ST.ST
                                                                                                          GHC.Prim.RealWorld))
                                                                                                    (Multilinear.Generic.Tensor
                                                                                                       a)>_R))
                                                                                  (((GHC.Prim.State#
                                                                                       (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                                 <GHC.Prim.RealWorld>_N)))_R
                                                                                    ->_R ((#,#)
                                                                                            <'GHC.Types.TupleRep
                                                                                               '[]>_R
                                                                                            <'GHC.Types.LiftedRep>_R
                                                                                            (GHC.Prim.State#
                                                                                               (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                                         <GHC.Prim.RealWorld>_N)))_R
                                                                                            <Data.Primitive.Array.MutableArray
                                                                                               (Control.Monad.Primitive.PrimState
                                                                                                  (GHC.ST.ST
                                                                                                     GHC.Prim.RealWorld))
                                                                                               (Multilinear.Generic.Tensor
                                                                                                  a)>_R)_R)
                                                                                   ->_R <GHC.ST.ST
                                                                                           GHC.Prim.RealWorld
                                                                                           (Data.Primitive.Array.MutableArray
                                                                                              (Control.Monad.Primitive.PrimState
                                                                                                 (GHC.ST.ST
                                                                                                    GHC.Prim.RealWorld))
                                                                                              (Multilinear.Generic.Tensor
                                                                                                 a))>_R)))) of ds2 { (#,#) ipv3 ipv4 ->
                                                            letrec {
                                                              foldlM'_loop :: GHC.Types.SPEC
                                                                              -> GHC.Types.Int
                                                                              -> GHC.Types.Int
                                                                              -> GHC.ST.ST
                                                                                   GHC.Prim.RealWorld
                                                                                   GHC.Types.Int
                                                                {- Arity: 3 -}
                                                              = \ (ds4 :: GHC.Types.SPEC)
                                                                  (z :: GHC.Types.Int)
                                                                  (s7 :: GHC.Types.Int) ->
                                                                case ds4 of ds5 { DEFAULT ->
                                                                case z of z1 { GHC.Types.I# ipv6 ->
                                                                (\ (s8 :: GHC.Prim.State#
                                                                            GHC.Prim.RealWorld) ->
                                                                 case s7 of wild1 { GHC.Types.I# x ->
                                                                 case GHC.Prim.tagToEnum#
                                                                        @ GHC.Types.Bool
                                                                        (GHC.Prim.>=#
                                                                           x
                                                                           ipv1) of wild2 {
                                                                   GHC.Types.False
                                                                   -> case GHC.Prim.indexArray#
                                                                             @ (Multilinear.Generic.Tensor
                                                                                  a)
                                                                             ipv2
                                                                             (GHC.Prim.+#
                                                                                ipv
                                                                                x) of ds3 { Unit# ipv5 ->
                                                                      case GHC.Prim.writeArray#
                                                                             @ (Control.Monad.Primitive.PrimState
                                                                                  (GHC.ST.ST
                                                                                     GHC.Prim.RealWorld))
                                                                             @ (Multilinear.Generic.Tensor
                                                                                  a)
                                                                             ipv4
                                                                             ipv6
                                                                             (Multilinear.Generic.$w$cshiftRight
                                                                                @ a
                                                                                ipv5
                                                                                w1)
                                                                             s8
                                                                               `cast`
                                                                             (Nth:2
                                                                                  (Nth:2
                                                                                       (Trans
                                                                                            (<GHC.ST.STRep
                                                                                                GHC.Prim.RealWorld
                                                                                                ()>_R
                                                                                             ->_R Sym (GHC.ST.N:ST[0]
                                                                                                           <GHC.Prim.RealWorld>_N
                                                                                                           <()>_R))
                                                                                            (((GHC.Prim.State#
                                                                                                 (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                                           <GHC.Prim.RealWorld>_N)))_R
                                                                                              ->_R ((#,#)
                                                                                                      <'GHC.Types.TupleRep
                                                                                                         '[]>_R
                                                                                                      <'GHC.Types.LiftedRep>_R
                                                                                                      (GHC.Prim.State#
                                                                                                         (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                                                   <GHC.Prim.RealWorld>_N)))_R
                                                                                                      <()>_R)_R)
                                                                                             ->_R <GHC.ST.ST
                                                                                                     GHC.Prim.RealWorld
                                                                                                     ()>_R)))) of s'# { DEFAULT ->
                                                                      (foldlM'_loop
                                                                         GHC.Types.SPEC
                                                                         (GHC.Types.I#
                                                                            (GHC.Prim.+# ipv6 1#))
                                                                         (GHC.Types.I#
                                                                            (GHC.Prim.+# x 1#)))
                                                                        `cast`
                                                                      (GHC.ST.N:ST[0]
                                                                           <GHC.Prim.RealWorld>_N
                                                                           <GHC.Types.Int>_R)
                                                                        s'#
                                                                          `cast`
                                                                        (Nth:2
                                                                             (Nth:3
                                                                                  (Nth:2
                                                                                       (Trans
                                                                                            (((GHC.Prim.State#
                                                                                                 (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                                      <GHC.Prim.RealWorld>_N))_R
                                                                                              ->_R ((#,#)
                                                                                                      <'GHC.Types.TupleRep
                                                                                                         '[]>_R
                                                                                                      <'GHC.Types.LiftedRep>_R
                                                                                                      (GHC.Prim.State#
                                                                                                         (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                                              <GHC.Prim.RealWorld>_N))_R
                                                                                                      <()>_R)_R)
                                                                                             ->_R <GHC.ST.ST
                                                                                                     GHC.Prim.RealWorld
                                                                                                     ()>_R)
                                                                                            (<GHC.ST.STRep
                                                                                                GHC.Prim.RealWorld
                                                                                                ()>_R
                                                                                             ->_R GHC.ST.N:ST[0]
                                                                                                      <GHC.Prim.RealWorld>_N
                                                                                                      <()>_R))))) } }
                                                                   GHC.Types.True
                                                                   -> (# s8, z1 #) } })
                                                                  `cast`
                                                                (Sym (GHC.ST.N:ST[0]
                                                                          <GHC.Prim.RealWorld>_N
                                                                          <GHC.Types.Int>_R)) } }
                                                            } in
                                                            case (foldlM'_loop
                                                                    GHC.Types.SPEC
                                                                    (GHC.Types.I# 0#)
                                                                    (GHC.Types.I# 0#))
                                                                   `cast`
                                                                 (GHC.ST.N:ST[0]
                                                                      <GHC.Prim.RealWorld>_N
                                                                      <GHC.Types.Int>_R)
                                                                   ipv3
                                                                     `cast`
                                                                   (Nth:2
                                                                        (Nth:3
                                                                             (Nth:2
                                                                                  (Trans
                                                                                       (((GHC.Prim.State#
                                                                                            (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                                 <GHC.Prim.RealWorld>_N))_R
                                                                                         ->_R ((#,#)
                                                                                                 <'GHC.Types.TupleRep
                                                                                                    '[]>_R
                                                                                                 <'GHC.Types.LiftedRep>_R
                                                                                                 (GHC.Prim.State#
                                                                                                    (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                                         <GHC.Prim.RealWorld>_N))_R
                                                                                                 <Data.Primitive.Array.MutableArray
                                                                                                    (Control.Monad.Primitive.PrimState
                                                                                                       (GHC.ST.ST
                                                                                                          GHC.Prim.RealWorld))
                                                                                                    (Multilinear.Generic.Tensor
                                                                                                       a)>_R)_R)
                                                                                        ->_R <GHC.ST.ST
                                                                                                GHC.Prim.RealWorld
                                                                                                (Data.Primitive.Array.MutableArray
                                                                                                   (Control.Monad.Primitive.PrimState
                                                                                                      (GHC.ST.ST
                                                                                                         GHC.Prim.RealWorld))
                                                                                                   (Multilinear.Generic.Tensor
                                                                                                      a))>_R)
                                                                                       (<GHC.ST.STRep
                                                                                           GHC.Prim.RealWorld
                                                                                           (Data.Primitive.Array.MutableArray
                                                                                              (Control.Monad.Primitive.PrimState
                                                                                                 (GHC.ST.ST
                                                                                                    GHC.Prim.RealWorld))
                                                                                              (Multilinear.Generic.Tensor
                                                                                                 a))>_R
                                                                                        ->_R GHC.ST.N:ST[0]
                                                                                                 <GHC.Prim.RealWorld>_N
                                                                                                 <Data.Primitive.Array.MutableArray
                                                                                                    (Control.Monad.Primitive.PrimState
                                                                                                       (GHC.ST.ST
                                                                                                          GHC.Prim.RealWorld))
                                                                                                    (Multilinear.Generic.Tensor
                                                                                                       a)>_R))))) of ds1 { (#,#) ipv6 ipv7 ->
                                                            case ipv7 of dt { GHC.Types.I# dt1 ->
                                                            case GHC.Prim.unsafeFreezeArray#
                                                                   @ (Control.Monad.Primitive.PrimState
                                                                        (GHC.ST.ST
                                                                           GHC.Prim.RealWorld))
                                                                   @ (Multilinear.Generic.Tensor a)
                                                                   ipv4
                                                                   ipv6
                                                                     `cast`
                                                                   (Nth:2
                                                                        (Nth:2
                                                                             (Trans
                                                                                  (<GHC.ST.STRep
                                                                                      GHC.Prim.RealWorld
                                                                                      (Data.Primitive.Array.Array
                                                                                         (Multilinear.Generic.Tensor
                                                                                            a))>_R
                                                                                   ->_R Sym (GHC.ST.N:ST[0]
                                                                                                 <GHC.Prim.RealWorld>_N
                                                                                                 <Data.Primitive.Array.Array
                                                                                                    (Multilinear.Generic.Tensor
                                                                                                       a)>_R))
                                                                                  (((GHC.Prim.State#
                                                                                       (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                                 <GHC.Prim.RealWorld>_N)))_R
                                                                                    ->_R ((#,#)
                                                                                            <'GHC.Types.TupleRep
                                                                                               '[]>_R
                                                                                            <'GHC.Types.LiftedRep>_R
                                                                                            (GHC.Prim.State#
                                                                                               (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                                         <GHC.Prim.RealWorld>_N)))_R
                                                                                            <Data.Primitive.Array.Array
                                                                                               (Multilinear.Generic.Tensor
                                                                                                  a)>_R)_R)
                                                                                   ->_R <GHC.ST.ST
                                                                                           GHC.Prim.RealWorld
                                                                                           (Data.Primitive.Array.Array
                                                                                              (Multilinear.Generic.Tensor
                                                                                                 a))>_R)))) of ds3 { (#,#) ipv5 ipv9 ->
                                                            (# ipv5
                                                                 `cast`
                                                               (Nth:2
                                                                    (Nth:3
                                                                         (Nth:2
                                                                              (Trans
                                                                                   (((GHC.Prim.State#
                                                                                        (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                             <GHC.Prim.RealWorld>_N))_R
                                                                                     ->_R ((#,#)
                                                                                             <'GHC.Types.TupleRep
                                                                                                '[]>_R
                                                                                             <'GHC.Types.LiftedRep>_R
                                                                                             (GHC.Prim.State#
                                                                                                (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                                     <GHC.Prim.RealWorld>_N))_R
                                                                                             <Data.Primitive.Array.Array
                                                                                                (Multilinear.Generic.Tensor
                                                                                                   a)>_R)_R)
                                                                                    ->_R <GHC.ST.ST
                                                                                            GHC.Prim.RealWorld
                                                                                            (Data.Primitive.Array.Array
                                                                                               (Multilinear.Generic.Tensor
                                                                                                  a))>_R)
                                                                                   (<GHC.ST.STRep
                                                                                       GHC.Prim.RealWorld
                                                                                       (Data.Primitive.Array.Array
                                                                                          (Multilinear.Generic.Tensor
                                                                                             a))>_R
                                                                                    ->_R GHC.ST.N:ST[0]
                                                                                             <GHC.Prim.RealWorld>_N
                                                                                             <Data.Primitive.Array.Array
                                                                                                (Multilinear.Generic.Tensor
                                                                                                   a)>_R))))),
                                                               Data.Vector.Vector
                                                                 @ (Multilinear.Generic.Tensor a)
                                                                 0#
                                                                 dt1
                                                                 ipv9 #) } } } }) of ds1 { (#,#) ipv3 ipv4 ->
                                                    ipv4 } })
                                             } in
                                             case go8
                                                    (Multilinear.Generic.$fMultilinearTensora_$s$w$cindices1
                                                       @ a
                                                       index1
                                                       ts1)
                                                    (GHC.Types.I# 0#) of wild1 { GHC.Types.I# x ->
                                             case GHC.Prim.tagToEnum#
                                                    @ GHC.Types.Bool
                                                    (GHC.Prim.># x 1#) of wild2 {
                                               GHC.Types.False -> $j
                                               GHC.Types.True
                                               -> case index1 of wild3 {
                                                    Multilinear.Index.Finite.Covariant ds1 ds2
                                                    -> case GHC.Classes.$fEqModule_$s$c==
                                                              ds2
                                                              w1 of wild4 {
                                                         GHC.Types.False -> $j1
                                                         GHC.Types.True -> $j }
                                                    Multilinear.Index.Finite.Contravariant ds1 ds2
                                                    -> case GHC.Classes.$fEqModule_$s$c==
                                                              ds2
                                                              w1 of wild4 {
                                                         GHC.Types.False -> $j1
                                                         GHC.Types.True -> $j }
                                                    Multilinear.Index.Finite.Indifferent ds1 ds2
                                                    -> case GHC.Classes.$fEqModule_$s$c==
                                                              ds2
                                                              w1 of wild4 {
                                                         GHC.Types.False -> $j1
                                                         GHC.Types.True -> $j } } } }
                                          Multilinear.Generic.InfiniteTensor index1 ts1
                                          -> letrec {
                                               go8 :: [Multilinear.Index.TIndex]
                                                      -> GHC.Types.Int -> GHC.Types.Int
                                                 {- Arity: 1 -}
                                               = \ (ds :: [Multilinear.Index.TIndex]) ->
                                                 case ds of wild1 {
                                                   [] -> GHC.Base.id @ GHC.Types.Int
                                                   : y ys
                                                   -> let {
                                                        ys1 :: GHC.Types.Int -> GHC.Types.Int
                                                        = go8 ys
                                                      } in
                                                      \ (a1 :: GHC.Types.Int) ->
                                                      case a1 of a2 { GHC.Types.I# ipv ->
                                                      ys1 (GHC.Types.I# (GHC.Prim.+# ipv 1#)) } }
                                             } in
                                             let {
                                               $j :: Multilinear.Generic.Tensor a <join 0>
                                               = letrec {
                                                   go9 :: [Multilinear.Index.TIndex]
                                                          -> GHC.Types.Int -> GHC.Types.Int
                                                     {- Arity: 1 -}
                                                   = \ (ds :: [Multilinear.Index.TIndex]) ->
                                                     case ds of wild1 {
                                                       [] -> GHC.Base.id @ GHC.Types.Int
                                                       : y ys
                                                       -> let {
                                                            ys1 :: GHC.Types.Int -> GHC.Types.Int
                                                            = go9 ys
                                                          } in
                                                          \ (a1 :: GHC.Types.Int) ->
                                                          case a1 of a2 { GHC.Types.I# ipv ->
                                                          ys1
                                                            (GHC.Types.I# (GHC.Prim.+# ipv 1#)) } }
                                                 } in
                                                 let {
                                                   $j1 :: Multilinear.Generic.Tensor a <join 0>
                                                   = Multilinear.Generic.mergeScalars
                                                       @ a
                                                       (Multilinear.Generic.InfiniteTensor
                                                          @ a
                                                          (case ts1 of wild1 {
                                                             []
                                                             -> case GHC.List.badHead
                                                                ret_ty Multilinear.Index.Infinite.Index
                                                                of {}
                                                             : x ds1
                                                             -> case x of wild2 {
                                                                  DEFAULT
                                                                  -> Multilinear.Generic.$fMultilinearTensora9
                                                                  Multilinear.Generic.InfiniteTensor ds ds2
                                                                  -> ds } })
                                                          (case ts1 of wild1 {
                                                             []
                                                             -> case GHC.List.badHead
                                                                ret_ty [Multilinear.Generic.Tensor
                                                                          a]
                                                                of {}
                                                             : x ds1
                                                             -> case x of wild2 {
                                                                  DEFAULT
                                                                  -> letrec {
                                                                       go10 :: [[Multilinear.Generic.Tensor
                                                                                   a]]
                                                                               -> [Multilinear.Generic.Tensor
                                                                                     a]
                                                                         {- Arity: 1 -}
                                                                       = \ (ds :: [[Multilinear.Generic.Tensor
                                                                                      a]]) ->
                                                                         case ds of wild3 {
                                                                           []
                                                                           -> GHC.Types.[]
                                                                                @ (Multilinear.Generic.Tensor
                                                                                     a)
                                                                           : y ys
                                                                           -> GHC.Types.:
                                                                                @ (Multilinear.Generic.Tensor
                                                                                     a)
                                                                                (Multilinear.Generic.InfiniteTensor
                                                                                   @ a
                                                                                   index1
                                                                                   y)
                                                                                (go10 ys) }
                                                                     } in
                                                                     go10
                                                                       (letrec {
                                                                          go11 :: [Multilinear.Generic.Tensor
                                                                                     a]
                                                                                  -> [[Multilinear.Generic.Tensor
                                                                                         a]]
                                                                            {- Arity: 1 -}
                                                                          = \ (ds :: [Multilinear.Generic.Tensor
                                                                                        a]) ->
                                                                            case ds of wild3 {
                                                                              []
                                                                              -> GHC.Types.[]
                                                                                   @ [Multilinear.Generic.Tensor
                                                                                        a]
                                                                              : y ys
                                                                              -> GHC.Types.:
                                                                                   @ [Multilinear.Generic.Tensor
                                                                                        a]
                                                                                   (Multilinear.Generic.tensorsInfinite
                                                                                      @ a
                                                                                      y)
                                                                                   (go11 ys) }
                                                                        } in
                                                                        Data.OldList.transpose
                                                                          @ (Multilinear.Generic.Tensor
                                                                               a)
                                                                          (go11 wild1))
                                                                  Multilinear.Generic.SimpleFinite ds ds2
                                                                  -> letrec {
                                                                       go10 :: [[Multilinear.Generic.Tensor
                                                                                   a]]
                                                                               -> [Multilinear.Generic.Tensor
                                                                                     a]
                                                                         {- Arity: 1 -}
                                                                       = \ (ds3 :: [[Multilinear.Generic.Tensor
                                                                                       a]]) ->
                                                                         case ds3 of wild3 {
                                                                           []
                                                                           -> GHC.Types.[]
                                                                                @ (Multilinear.Generic.Tensor
                                                                                     a)
                                                                           : y ys
                                                                           -> GHC.Types.:
                                                                                @ (Multilinear.Generic.Tensor
                                                                                     a)
                                                                                (Multilinear.Generic.InfiniteTensor
                                                                                   @ a
                                                                                   index1
                                                                                   y)
                                                                                (go10 ys) }
                                                                     } in
                                                                     go10
                                                                       (letrec {
                                                                          go11 :: [Multilinear.Generic.Tensor
                                                                                     a]
                                                                                  -> [[Multilinear.Generic.Tensor
                                                                                         a]]
                                                                            {- Arity: 1 -}
                                                                          = \ (ds3 :: [Multilinear.Generic.Tensor
                                                                                         a]) ->
                                                                            case ds3 of wild3 {
                                                                              []
                                                                              -> GHC.Types.[]
                                                                                   @ [Multilinear.Generic.Tensor
                                                                                        a]
                                                                              : y ys
                                                                              -> GHC.Types.:
                                                                                   @ [Multilinear.Generic.Tensor
                                                                                        a]
                                                                                   (case y of wild4 {
                                                                                      DEFAULT
                                                                                      -> case Multilinear.Generic.$fMultilinearTensora10
                                                                                         ret_ty [Multilinear.Generic.Tensor
                                                                                                   a]
                                                                                         of {}
                                                                                      Multilinear.Generic.SimpleFinite ds4 ds5
                                                                                      -> case ds5 of v2 { Data.Vector.Vector ipv ipv1 ipv2 ->
                                                                                         letrec {
                                                                                           go12 :: GHC.Types.Int
                                                                                                   -> [Multilinear.Generic.Tensor
                                                                                                         a]
                                                                                             {- Arity: 1 -}
                                                                                           = \ (s1 :: GHC.Types.Int) ->
                                                                                             case s1 of wild5 { GHC.Types.I# x1 ->
                                                                                             case GHC.Prim.tagToEnum#
                                                                                                    @ GHC.Types.Bool
                                                                                                    (GHC.Prim.>=#
                                                                                                       x1
                                                                                                       ipv1) of wild6 {
                                                                                               GHC.Types.False
                                                                                               -> case GHC.Prim.indexArray#
                                                                                                         @ a
                                                                                                         ipv2
                                                                                                         (GHC.Prim.+#
                                                                                                            ipv
                                                                                                            x1) of ds6 { Unit# ipv3 ->
                                                                                                  GHC.Types.:
                                                                                                    @ (Multilinear.Generic.Tensor
                                                                                                         a)
                                                                                                    (Multilinear.Generic.Scalar
                                                                                                       @ a
                                                                                                       ipv3)
                                                                                                    (go12
                                                                                                       (GHC.Types.I#
                                                                                                          (GHC.Prim.+#
                                                                                                             x1
                                                                                                             1#))) }
                                                                                               GHC.Types.True
                                                                                               -> GHC.Types.[]
                                                                                                    @ (Multilinear.Generic.Tensor
                                                                                                         a) } }
                                                                                         } in
                                                                                         go12
                                                                                           (GHC.Types.I#
                                                                                              0#) } })
                                                                                   (go11 ys) }
                                                                        } in
                                                                        Data.OldList.transpose
                                                                          @ (Multilinear.Generic.Tensor
                                                                               a)
                                                                          (go11 wild1)) } }))
                                                 } in
                                                 case go9
                                                        (Multilinear.Generic.$fMultilinearTensora_$s$w$cindices
                                                           @ a
                                                           index1
                                                           ts1)
                                                        (GHC.Types.I#
                                                           0#) of wild1 { GHC.Types.I# x ->
                                                 case GHC.Prim.tagToEnum#
                                                        @ GHC.Types.Bool
                                                        (GHC.Prim.># x 1#) of wild2 {
                                                   GHC.Types.False -> wild
                                                   GHC.Types.True
                                                   -> case index1 of wild3 {
                                                        Multilinear.Index.Infinite.Covariant ds1
                                                        -> case GHC.Base.eqString ds1 w1 of wild4 {
                                                             GHC.Types.False -> wild
                                                             GHC.Types.True -> $j1 }
                                                        Multilinear.Index.Infinite.Contravariant ds1
                                                        -> case GHC.Base.eqString ds1 w1 of wild4 {
                                                             GHC.Types.False -> wild
                                                             GHC.Types.True -> $j1 }
                                                        Multilinear.Index.Infinite.Indifferent ds1
                                                        -> case GHC.Base.eqString ds1 w1 of wild4 {
                                                             GHC.Types.False -> wild
                                                             GHC.Types.True -> $j1 } } } }
                                             } in
                                             let {
                                               $j1 :: Multilinear.Generic.Tensor a <join 0>
                                               = Multilinear.Generic.InfiniteTensor
                                                   @ a
                                                   index1
                                                   (letrec {
                                                      go9 :: [Multilinear.Generic.Tensor a]
                                                             -> [Multilinear.Generic.Tensor a]
                                                        {- Arity: 1 -}
                                                      = \ (ds :: [Multilinear.Generic.Tensor a]) ->
                                                        case ds of wild1 {
                                                          []
                                                          -> GHC.Types.[]
                                                               @ (Multilinear.Generic.Tensor a)
                                                          : y ys
                                                          -> GHC.Types.:
                                                               @ (Multilinear.Generic.Tensor a)
                                                               (Multilinear.Generic.$w$cshiftRight
                                                                  @ a
                                                                  y
                                                                  w1)
                                                               (go9 ys) }
                                                    } in
                                                    go9 ts1)
                                             } in
                                             case go8
                                                    (Multilinear.Generic.$fMultilinearTensora_$s$w$cindices
                                                       @ a
                                                       index1
                                                       ts1)
                                                    (GHC.Types.I# 0#) of wild1 { GHC.Types.I# x ->
                                             case GHC.Prim.tagToEnum#
                                                    @ GHC.Types.Bool
                                                    (GHC.Prim.># x 1#) of wild2 {
                                               GHC.Types.False -> $j
                                               GHC.Types.True
                                               -> case index1 of wild3 {
                                                    Multilinear.Index.Infinite.Covariant ds1
                                                    -> case GHC.Classes.$fEqModule_$s$c==
                                                              ds1
                                                              w1 of wild4 {
                                                         GHC.Types.False -> $j1
                                                         GHC.Types.True -> $j }
                                                    Multilinear.Index.Infinite.Contravariant ds1
                                                    -> case GHC.Classes.$fEqModule_$s$c==
                                                              ds1
                                                              w1 of wild4 {
                                                         GHC.Types.False -> $j1
                                                         GHC.Types.True -> $j }
                                                    Multilinear.Index.Infinite.Indifferent ds1
                                                    -> case GHC.Classes.$fEqModule_$s$c==
                                                              ds1
                                                              w1 of wild4 {
                                                         GHC.Types.False -> $j1
                                                         GHC.Types.True -> $j } } } }
                                          Multilinear.Generic.Err msg
                                          -> Multilinear.Generic.Err @ a msg }) -}
3435455de223a292a66afccee7caf4fd
  $w$cshiftRightmost ::
    Multilinear.Generic.Tensor a
    -> GHC.Base.String -> Multilinear.Generic.Tensor a
  {- Arity: 2, Strictness: <S,U><S,U>, Inline: [0],
     Unfolding: (\ @ a
                   (w :: Multilinear.Generic.Tensor a)
                   (w1 :: GHC.Base.String) ->
                 letrec {
                   go8 :: Multilinear.Generic.Tensor a -> Multilinear.Generic.Tensor a
                     <join 1> {- Arity: 1, Strictness: <S,U> -}
                   = \ (x :: Multilinear.Generic.Tensor a) ->
                     let {
                       lvl197 :: Multilinear.Generic.Tensor a
                       = Multilinear.Generic.$w$cshiftRight @ a x w1
                     } in
                     letrec {
                       go9 :: [Multilinear.Index.TIndex]
                              -> GHC.Base.String -> Multilinear.Generic.Tensor a
                         <join 2> {- Arity: 2, Strictness: <S,1*U><L,1*U> -}
                       = \ (ds :: [Multilinear.Index.TIndex]) (eta :: GHC.Base.String) ->
                         case ds of wild {
                           []
                           -> case GHC.Base.eqString w1 eta of wild1 {
                                GHC.Types.False -> go8 lvl197 GHC.Types.True -> x }
                           : y ys -> go9 ys (Multilinear.Index.tIndexName y) }
                     } in
                     go9
                       (Multilinear.Generic.$w$cindices @ a x)
                       (GHC.List.lastError @ GHC.Base.String)
                 } in
                 go8 w) -}
3435455de223a292a66afccee7caf4fd
  $w$cshow ::
    GHC.Show.Show a => Multilinear.Generic.Tensor a -> GHC.Base.String
  {- Arity: 2, Strictness: <L,U(A,C(U),A)><S,1*U>, Inline: [0] -}
3435455de223a292a66afccee7caf4fd
  $w$cshowList ::
    GHC.Show.Show a =>
    [Multilinear.Generic.Tensor a]
    -> GHC.Base.String -> GHC.Base.String
  {- Arity: 3, Strictness: <L,U(A,C(U),A)><S,1*U><L,U>, Inline: [0],
     Unfolding: (\ @ a
                   (w :: GHC.Show.Show a)
                   (w1 :: [Multilinear.Generic.Tensor a])
                   (w2 :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ (Multilinear.Generic.Tensor a)
                   (\ (x :: Multilinear.Generic.Tensor a)
                      (s :: GHC.Base.String)[OneShot] ->
                    GHC.Base.++
                      @ GHC.Types.Char
                      (Multilinear.Generic.$w$cshow @ a w x)
                      s)
                   w1
                   w2) -}
3435455de223a292a66afccee7caf4fd
  $w$csize ::
    Multilinear.Generic.Tensor a -> GHC.Base.String -> GHC.Types.Int
  {- Arity: 2, Strictness: <S,1*U><S,U>, Inline: [0],
     Unfolding(loop-breaker): <stable> (\ @ a
                                          (w :: Multilinear.Generic.Tensor a)
                                          (w1 :: GHC.Base.String) ->
                                        let {
                                          loc :: GHC.Prim.Addr#
                                          = "Multilinear-0.8.0.0-4dpV53DlxV5EwwV6FZreVP"#
                                        } in
                                        let {
                                          loc1 :: GHC.Prim.Addr# = "src\\Multilinear\\Generic.hs"#
                                        } in
                                        case w of wild {
                                          Multilinear.Generic.Scalar ds
                                          -> GHC.Err.error
                                               @ 'GHC.Types.LiftedRep
                                               @ GHC.Types.Int
                                               (GHC.Stack.Types.PushCallStack
                                                  (GHC.CString.unpackCString# "error"#)
                                                  (GHC.Stack.Types.SrcLoc
                                                     (GHC.CString.unpackCString#
                                                        "Multilinear-0.8.0.0-4dpV53DlxV5EwwV6FZreVP"#)
                                                     (GHC.CString.unpackCString#
                                                        "Multilinear.Generic"#)
                                                     (GHC.CString.unpackCString#
                                                        "src\\Multilinear\\Generic.hs"#)
                                                     (GHC.Types.I# 866#)
                                                     (GHC.Types.I# 33#)
                                                     (GHC.Types.I# 866#)
                                                     (GHC.Types.I# 52#))
                                                  GHC.Stack.Types.EmptyCallStack)
                                                 `cast`
                                               (Sym (GHC.Classes.N:IP[0]
                                                         <"callStack">_N
                                                         <GHC.Stack.Types.CallStack>_N))
                                               Multilinear.Generic.scalarIndices
                                          Multilinear.Generic.SimpleFinite index ds
                                          -> case index of wild1 {
                                               Multilinear.Index.Finite.Covariant ds1 ds2
                                               -> case GHC.Base.eqString ds2 w1 of wild2 {
                                                    GHC.Types.False
                                                    -> GHC.Err.error
                                                         @ 'GHC.Types.LiftedRep
                                                         @ GHC.Types.Int
                                                         (GHC.Stack.Types.PushCallStack
                                                            (GHC.CString.unpackCString# "error"#)
                                                            (GHC.Stack.Types.SrcLoc
                                                               (GHC.CString.unpackCString# loc)
                                                               (GHC.CString.unpackCString#
                                                                  "Multilinear.Generic"#)
                                                               (GHC.CString.unpackCString# loc1)
                                                               (GHC.Types.I# 870#)
                                                               (GHC.Types.I# 18#)
                                                               (GHC.Types.I# 870#)
                                                               (GHC.Types.I# 37#))
                                                            GHC.Stack.Types.EmptyCallStack)
                                                           `cast`
                                                         (Sym (GHC.Classes.N:IP[0]
                                                                   <"callStack">_N
                                                                   <GHC.Stack.Types.CallStack>_N))
                                                         Multilinear.Generic.indexNotFound
                                                    GHC.Types.True -> ds1 }
                                               Multilinear.Index.Finite.Contravariant ds1 ds2
                                               -> case GHC.Base.eqString ds2 w1 of wild2 {
                                                    GHC.Types.False
                                                    -> GHC.Err.error
                                                         @ 'GHC.Types.LiftedRep
                                                         @ GHC.Types.Int
                                                         (GHC.Stack.Types.PushCallStack
                                                            (GHC.CString.unpackCString# "error"#)
                                                            (GHC.Stack.Types.SrcLoc
                                                               (GHC.CString.unpackCString# loc)
                                                               (GHC.CString.unpackCString#
                                                                  "Multilinear.Generic"#)
                                                               (GHC.CString.unpackCString# loc1)
                                                               (GHC.Types.I# 870#)
                                                               (GHC.Types.I# 18#)
                                                               (GHC.Types.I# 870#)
                                                               (GHC.Types.I# 37#))
                                                            GHC.Stack.Types.EmptyCallStack)
                                                           `cast`
                                                         (Sym (GHC.Classes.N:IP[0]
                                                                   <"callStack">_N
                                                                   <GHC.Stack.Types.CallStack>_N))
                                                         Multilinear.Generic.indexNotFound
                                                    GHC.Types.True -> ds1 }
                                               Multilinear.Index.Finite.Indifferent ds1 ds2
                                               -> case GHC.Base.eqString ds2 w1 of wild2 {
                                                    GHC.Types.False
                                                    -> GHC.Err.error
                                                         @ 'GHC.Types.LiftedRep
                                                         @ GHC.Types.Int
                                                         (GHC.Stack.Types.PushCallStack
                                                            (GHC.CString.unpackCString# "error"#)
                                                            (GHC.Stack.Types.SrcLoc
                                                               (GHC.CString.unpackCString# loc)
                                                               (GHC.CString.unpackCString#
                                                                  "Multilinear.Generic"#)
                                                               (GHC.CString.unpackCString# loc1)
                                                               (GHC.Types.I# 870#)
                                                               (GHC.Types.I# 18#)
                                                               (GHC.Types.I# 870#)
                                                               (GHC.Types.I# 37#))
                                                            GHC.Stack.Types.EmptyCallStack)
                                                           `cast`
                                                         (Sym (GHC.Classes.N:IP[0]
                                                                   <"callStack">_N
                                                                   <GHC.Stack.Types.CallStack>_N))
                                                         Multilinear.Generic.indexNotFound
                                                    GHC.Types.True -> ds1 } }
                                          Multilinear.Generic.FiniteTensor index ds
                                          -> case index of wild1 {
                                               Multilinear.Index.Finite.Covariant ds1 ds2
                                               -> case GHC.Base.eqString ds2 w1 of wild2 {
                                                    GHC.Types.False
                                                    -> case ds of v2 { Data.Vector.Vector ipv ipv1 ipv2 ->
                                                       case GHC.Prim.tagToEnum#
                                                              @ GHC.Types.Bool
                                                              (GHC.Prim.<# 0# ipv1) of wild3 {
                                                         GHC.Types.False
                                                         -> case Data.Vector.Internal.Check.$wcheckError
                                                                   @ (Multilinear.Generic.Tensor a)
                                                                   (GHC.CString.unpackCString#
                                                                      ".\\Data\\Vector\\Generic.hs"#)
                                                                   245#
                                                                   Data.Vector.Internal.Check.Bounds
                                                                   (GHC.CString.unpackCString#
                                                                      "(!)"#)
                                                                   (Data.Vector.Internal.Check.checkIndex_msg#
                                                                      0#
                                                                      ipv1)
                                                            ret_ty GHC.Types.Int
                                                            of {}
                                                         GHC.Types.True
                                                         -> case GHC.Prim.indexArray#
                                                                   @ (Multilinear.Generic.Tensor a)
                                                                   ipv2
                                                                   ipv of ds3 { Unit# ipv3 ->
                                                            Multilinear.Generic.$w$csize
                                                              @ a
                                                              ipv3
                                                              w1 } } }
                                                    GHC.Types.True -> ds1 }
                                               Multilinear.Index.Finite.Contravariant ds1 ds2
                                               -> case GHC.Base.eqString ds2 w1 of wild2 {
                                                    GHC.Types.False
                                                    -> case ds of v2 { Data.Vector.Vector ipv ipv1 ipv2 ->
                                                       case GHC.Prim.tagToEnum#
                                                              @ GHC.Types.Bool
                                                              (GHC.Prim.<# 0# ipv1) of wild3 {
                                                         GHC.Types.False
                                                         -> case Data.Vector.Internal.Check.$wcheckError
                                                                   @ (Multilinear.Generic.Tensor a)
                                                                   (GHC.CString.unpackCString#
                                                                      ".\\Data\\Vector\\Generic.hs"#)
                                                                   245#
                                                                   Data.Vector.Internal.Check.Bounds
                                                                   (GHC.CString.unpackCString#
                                                                      "(!)"#)
                                                                   (Data.Vector.Internal.Check.checkIndex_msg#
                                                                      0#
                                                                      ipv1)
                                                            ret_ty GHC.Types.Int
                                                            of {}
                                                         GHC.Types.True
                                                         -> case GHC.Prim.indexArray#
                                                                   @ (Multilinear.Generic.Tensor a)
                                                                   ipv2
                                                                   ipv of ds3 { Unit# ipv3 ->
                                                            Multilinear.Generic.$w$csize
                                                              @ a
                                                              ipv3
                                                              w1 } } }
                                                    GHC.Types.True -> ds1 }
                                               Multilinear.Index.Finite.Indifferent ds1 ds2
                                               -> case GHC.Base.eqString ds2 w1 of wild2 {
                                                    GHC.Types.False
                                                    -> case ds of v2 { Data.Vector.Vector ipv ipv1 ipv2 ->
                                                       case GHC.Prim.tagToEnum#
                                                              @ GHC.Types.Bool
                                                              (GHC.Prim.<# 0# ipv1) of wild3 {
                                                         GHC.Types.False
                                                         -> case Data.Vector.Internal.Check.$wcheckError
                                                                   @ (Multilinear.Generic.Tensor a)
                                                                   (GHC.CString.unpackCString#
                                                                      ".\\Data\\Vector\\Generic.hs"#)
                                                                   245#
                                                                   Data.Vector.Internal.Check.Bounds
                                                                   (GHC.CString.unpackCString#
                                                                      "(!)"#)
                                                                   (Data.Vector.Internal.Check.checkIndex_msg#
                                                                      0#
                                                                      ipv1)
                                                            ret_ty GHC.Types.Int
                                                            of {}
                                                         GHC.Types.True
                                                         -> case GHC.Prim.indexArray#
                                                                   @ (Multilinear.Generic.Tensor a)
                                                                   ipv2
                                                                   ipv of ds3 { Unit# ipv3 ->
                                                            Multilinear.Generic.$w$csize
                                                              @ a
                                                              ipv3
                                                              w1 } } }
                                                    GHC.Types.True -> ds1 } }
                                          Multilinear.Generic.InfiniteTensor ds ds1
                                          -> GHC.Err.error
                                               @ 'GHC.Types.LiftedRep
                                               @ GHC.Types.Int
                                               (GHC.Stack.Types.PushCallStack
                                                  (GHC.CString.unpackCString# "error"#)
                                                  (GHC.Stack.Types.SrcLoc
                                                     (GHC.CString.unpackCString#
                                                        "Multilinear-0.8.0.0-4dpV53DlxV5EwwV6FZreVP"#)
                                                     (GHC.CString.unpackCString#
                                                        "Multilinear.Generic"#)
                                                     (GHC.CString.unpackCString#
                                                        "src\\Multilinear\\Generic.hs"#)
                                                     (GHC.Types.I# 875#)
                                                     (GHC.Types.I# 33#)
                                                     (GHC.Types.I# 875#)
                                                     (GHC.Types.I# 52#))
                                                  GHC.Stack.Types.EmptyCallStack)
                                                 `cast`
                                               (Sym (GHC.Classes.N:IP[0]
                                                         <"callStack">_N
                                                         <GHC.Stack.Types.CallStack>_N))
                                               Multilinear.Generic.infiniteIndex
                                          Multilinear.Generic.Err msg
                                          -> GHC.Err.error
                                               @ 'GHC.Types.LiftedRep
                                               @ GHC.Types.Int
                                               (GHC.Stack.Types.PushCallStack
                                                  (GHC.CString.unpackCString# "error"#)
                                                  (GHC.Stack.Types.SrcLoc
                                                     (GHC.CString.unpackCString#
                                                        "Multilinear-0.8.0.0-4dpV53DlxV5EwwV6FZreVP"#)
                                                     (GHC.CString.unpackCString#
                                                        "Multilinear.Generic"#)
                                                     (GHC.CString.unpackCString#
                                                        "src\\Multilinear\\Generic.hs"#)
                                                     (GHC.Types.I# 876#)
                                                     (GHC.Types.I# 33#)
                                                     (GHC.Types.I# 876#)
                                                     (GHC.Types.I# 42#))
                                                  GHC.Stack.Types.EmptyCallStack)
                                                 `cast`
                                               (Sym (GHC.Classes.N:IP[0]
                                                         <"callStack">_N
                                                         <GHC.Stack.Types.CallStack>_N))
                                               msg }) -}
3435455de223a292a66afccee7caf4fd
  $w$ctoBinaryFile ::
    Data.Serialize.Serialize a =>
    GHC.Base.String
    -> Multilinear.Generic.Tensor a
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 4,
     Strictness: <L,U(C(U(1*U,C(C(U)))),C(C1(C1(C1(C1(C1(U)))))))><L,U><L,U><S,U>,
     Inline: [0],
     Unfolding: (\ @ a
                   (w :: Data.Serialize.Serialize a)
                   (w1 :: GHC.Base.String)
                   (w2 :: Multilinear.Generic.Tensor a)
                   (w3 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 System.IO.withBinaryFile1
                   @ ()
                   w1
                   GHC.IO.IOMode.WriteMode
                   (\ (ds :: GHC.IO.Handle.Types.Handle)[OneShot]
                      (eta1 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                    Data.ByteString.Lazy.appendFile2
                      ds
                      (Codec.Compression.Zlib.Internal.foldCompressStreamWithInput
                         @ Data.ByteString.Lazy.Internal.ByteString
                         Data.ByteString.Lazy.Internal.$WChunk
                         Data.ByteString.Lazy.Internal.Empty
                         Codec.Compression.GZip.compress1
                         (Data.ByteString.Builder.toLazyByteString
                            (case (Multilinear.Generic.$fSerializeTensor_$cput @ a w w2)
                                    `cast`
                                  (Data.Serialize.Put.N:PutM[0] <()>_N) of wild { Data.Serialize.Put.PairS ds1 b ->
                             b })))
                      eta1)
                     `cast`
                   (<GHC.IO.Handle.Types.Handle>_R
                    ->_R Sym (GHC.Types.N:IO[0] <()>_R))
                   w3) -}
3435455de223a292a66afccee7caf4fd
  $w$ctoJSONFile ::
    Data.Aeson.Types.ToJSON.ToJSON a =>
    GHC.Base.String
    -> Multilinear.Generic.Tensor a
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 4, Strictness: <L,U(C(U),A,A,A)><L,U><L,1*U><S,U>,
     Inline: [0],
     Unfolding: (\ @ a
                   (w :: Data.Aeson.Types.ToJSON.ToJSON a)
                   (w1 :: GHC.Base.String)
                   (w2 :: Multilinear.Generic.Tensor a)
                   (w3 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 System.IO.withBinaryFile1
                   @ ()
                   w1
                   GHC.IO.IOMode.WriteMode
                   (\ (ds :: GHC.IO.Handle.Types.Handle)[OneShot]
                      (eta1 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                    Data.ByteString.Lazy.appendFile2
                      ds
                      (Data.ByteString.Builder.toLazyByteString
                         (Data.Aeson.Encoding.Builder.encodeToBuilder
                            (Multilinear.Generic.$fMultilinearTensora_$ctoJSON @ a w w2)))
                      eta1)
                     `cast`
                   (<GHC.IO.Handle.Types.Handle>_R
                    ->_R Sym (GHC.Types.N:IO[0] <()>_R))
                   w3) -}
3435455de223a292a66afccee7caf4fd
  $w$ctranspose ::
    Multilinear.Generic.Tensor a -> Multilinear.Generic.Tensor a
  {- Arity: 1, Strictness: <S,1*U>, Inline: [0],
     Unfolding(loop-breaker): <stable> (\ @ a
                                          (w :: Multilinear.Generic.Tensor a) ->
                                        case w of wild {
                                          Multilinear.Generic.Scalar x
                                          -> Multilinear.Generic.Scalar @ a x
                                          Multilinear.Generic.SimpleFinite ds ts
                                          -> case ds of wild1 {
                                               Multilinear.Index.Finite.Covariant count name
                                               -> Multilinear.Generic.SimpleFinite
                                                    @ a
                                                    (Multilinear.Index.Finite.Contravariant
                                                       count
                                                       name)
                                                    ts
                                               Multilinear.Index.Finite.Contravariant count name
                                               -> Multilinear.Generic.SimpleFinite
                                                    @ a
                                                    (Multilinear.Index.Finite.Covariant count name)
                                                    ts
                                               Multilinear.Index.Finite.Indifferent count name
                                               -> Multilinear.Generic.SimpleFinite
                                                    @ a
                                                    (Multilinear.Index.Finite.Indifferent
                                                       count
                                                       name)
                                                    ts }
                                          Multilinear.Generic.FiniteTensor ds ts
                                          -> case ds of wild1 {
                                               Multilinear.Index.Finite.Covariant count name
                                               -> Multilinear.Generic.FiniteTensor
                                                    @ a
                                                    (Multilinear.Index.Finite.Contravariant
                                                       count
                                                       name)
                                                    (case ts of v2 { Data.Vector.Vector ipv ipv1 ipv2 ->
                                                     case GHC.Magic.runRW#
                                                            @ ('GHC.Types.TupleRep
                                                                 '['GHC.Types.TupleRep '[],
                                                                   'GHC.Types.LiftedRep])
                                                            @ (# GHC.Prim.State# GHC.Prim.RealWorld,
                                                                 Data.Vector.Vector
                                                                   (Multilinear.Generic.Tensor a) #)
                                                            (\ (s1 :: GHC.Prim.State#
                                                                        GHC.Prim.RealWorld)[OneShot] ->
                                                             case GHC.Prim.newArray#
                                                                    @ (Multilinear.Generic.Tensor a)
                                                                    @ (Control.Monad.Primitive.PrimState
                                                                         (GHC.ST.ST
                                                                            GHC.Prim.RealWorld))
                                                                    ipv1
                                                                    (Data.Vector.Mutable.uninitialised
                                                                       @ (Multilinear.Generic.Tensor
                                                                            a))
                                                                    s1
                                                                      `cast`
                                                                    (Nth:2
                                                                         (Nth:2
                                                                              (Trans
                                                                                   (<GHC.ST.STRep
                                                                                       GHC.Prim.RealWorld
                                                                                       (Data.Primitive.Array.MutableArray
                                                                                          (Control.Monad.Primitive.PrimState
                                                                                             (GHC.ST.ST
                                                                                                GHC.Prim.RealWorld))
                                                                                          (Multilinear.Generic.Tensor
                                                                                             a))>_R
                                                                                    ->_R Sym (GHC.ST.N:ST[0]
                                                                                                  <GHC.Prim.RealWorld>_N
                                                                                                  <Data.Primitive.Array.MutableArray
                                                                                                     (Control.Monad.Primitive.PrimState
                                                                                                        (GHC.ST.ST
                                                                                                           GHC.Prim.RealWorld))
                                                                                                     (Multilinear.Generic.Tensor
                                                                                                        a)>_R))
                                                                                   (((GHC.Prim.State#
                                                                                        (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                                  <GHC.Prim.RealWorld>_N)))_R
                                                                                     ->_R ((#,#)
                                                                                             <'GHC.Types.TupleRep
                                                                                                '[]>_R
                                                                                             <'GHC.Types.LiftedRep>_R
                                                                                             (GHC.Prim.State#
                                                                                                (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                                          <GHC.Prim.RealWorld>_N)))_R
                                                                                             <Data.Primitive.Array.MutableArray
                                                                                                (Control.Monad.Primitive.PrimState
                                                                                                   (GHC.ST.ST
                                                                                                      GHC.Prim.RealWorld))
                                                                                                (Multilinear.Generic.Tensor
                                                                                                   a)>_R)_R)
                                                                                    ->_R <GHC.ST.ST
                                                                                            GHC.Prim.RealWorld
                                                                                            (Data.Primitive.Array.MutableArray
                                                                                               (Control.Monad.Primitive.PrimState
                                                                                                  (GHC.ST.ST
                                                                                                     GHC.Prim.RealWorld))
                                                                                               (Multilinear.Generic.Tensor
                                                                                                  a))>_R)))) of ds2 { (#,#) ipv3 ipv4 ->
                                                             letrec {
                                                               foldlM'_loop :: GHC.Types.SPEC
                                                                               -> GHC.Types.Int
                                                                               -> GHC.Types.Int
                                                                               -> GHC.ST.ST
                                                                                    GHC.Prim.RealWorld
                                                                                    GHC.Types.Int
                                                                 {- Arity: 3 -}
                                                               = \ (ds4 :: GHC.Types.SPEC)
                                                                   (z :: GHC.Types.Int)
                                                                   (s7 :: GHC.Types.Int) ->
                                                                 case ds4 of ds5 { DEFAULT ->
                                                                 case z of z1 { GHC.Types.I# ipv6 ->
                                                                 (\ (s8 :: GHC.Prim.State#
                                                                             GHC.Prim.RealWorld) ->
                                                                  case s7 of wild2 { GHC.Types.I# x ->
                                                                  case GHC.Prim.tagToEnum#
                                                                         @ GHC.Types.Bool
                                                                         (GHC.Prim.>=#
                                                                            x
                                                                            ipv1) of wild3 {
                                                                    GHC.Types.False
                                                                    -> case GHC.Prim.indexArray#
                                                                              @ (Multilinear.Generic.Tensor
                                                                                   a)
                                                                              ipv2
                                                                              (GHC.Prim.+#
                                                                                 ipv
                                                                                 x) of ds3 { Unit# ipv5 ->
                                                                       case GHC.Prim.writeArray#
                                                                              @ (Control.Monad.Primitive.PrimState
                                                                                   (GHC.ST.ST
                                                                                      GHC.Prim.RealWorld))
                                                                              @ (Multilinear.Generic.Tensor
                                                                                   a)
                                                                              ipv4
                                                                              ipv6
                                                                              (Multilinear.Generic.$w$ctranspose
                                                                                 @ a
                                                                                 ipv5)
                                                                              s8
                                                                                `cast`
                                                                              (Nth:2
                                                                                   (Nth:2
                                                                                        (Trans
                                                                                             (<GHC.ST.STRep
                                                                                                 GHC.Prim.RealWorld
                                                                                                 ()>_R
                                                                                              ->_R Sym (GHC.ST.N:ST[0]
                                                                                                            <GHC.Prim.RealWorld>_N
                                                                                                            <()>_R))
                                                                                             (((GHC.Prim.State#
                                                                                                  (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                                            <GHC.Prim.RealWorld>_N)))_R
                                                                                               ->_R ((#,#)
                                                                                                       <'GHC.Types.TupleRep
                                                                                                          '[]>_R
                                                                                                       <'GHC.Types.LiftedRep>_R
                                                                                                       (GHC.Prim.State#
                                                                                                          (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                                                    <GHC.Prim.RealWorld>_N)))_R
                                                                                                       <()>_R)_R)
                                                                                              ->_R <GHC.ST.ST
                                                                                                      GHC.Prim.RealWorld
                                                                                                      ()>_R)))) of s'# { DEFAULT ->
                                                                       (foldlM'_loop
                                                                          GHC.Types.SPEC
                                                                          (GHC.Types.I#
                                                                             (GHC.Prim.+# ipv6 1#))
                                                                          (GHC.Types.I#
                                                                             (GHC.Prim.+# x 1#)))
                                                                         `cast`
                                                                       (GHC.ST.N:ST[0]
                                                                            <GHC.Prim.RealWorld>_N
                                                                            <GHC.Types.Int>_R)
                                                                         s'#
                                                                           `cast`
                                                                         (Nth:2
                                                                              (Nth:3
                                                                                   (Nth:2
                                                                                        (Trans
                                                                                             (((GHC.Prim.State#
                                                                                                  (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                                       <GHC.Prim.RealWorld>_N))_R
                                                                                               ->_R ((#,#)
                                                                                                       <'GHC.Types.TupleRep
                                                                                                          '[]>_R
                                                                                                       <'GHC.Types.LiftedRep>_R
                                                                                                       (GHC.Prim.State#
                                                                                                          (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                                               <GHC.Prim.RealWorld>_N))_R
                                                                                                       <()>_R)_R)
                                                                                              ->_R <GHC.ST.ST
                                                                                                      GHC.Prim.RealWorld
                                                                                                      ()>_R)
                                                                                             (<GHC.ST.STRep
                                                                                                 GHC.Prim.RealWorld
                                                                                                 ()>_R
                                                                                              ->_R GHC.ST.N:ST[0]
                                                                                                       <GHC.Prim.RealWorld>_N
                                                                                                       <()>_R))))) } }
                                                                    GHC.Types.True
                                                                    -> (# s8, z1 #) } })
                                                                   `cast`
                                                                 (Sym (GHC.ST.N:ST[0]
                                                                           <GHC.Prim.RealWorld>_N
                                                                           <GHC.Types.Int>_R)) } }
                                                             } in
                                                             case (foldlM'_loop
                                                                     GHC.Types.SPEC
                                                                     (GHC.Types.I# 0#)
                                                                     (GHC.Types.I# 0#))
                                                                    `cast`
                                                                  (GHC.ST.N:ST[0]
                                                                       <GHC.Prim.RealWorld>_N
                                                                       <GHC.Types.Int>_R)
                                                                    ipv3
                                                                      `cast`
                                                                    (Nth:2
                                                                         (Nth:3
                                                                              (Nth:2
                                                                                   (Trans
                                                                                        (((GHC.Prim.State#
                                                                                             (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                                  <GHC.Prim.RealWorld>_N))_R
                                                                                          ->_R ((#,#)
                                                                                                  <'GHC.Types.TupleRep
                                                                                                     '[]>_R
                                                                                                  <'GHC.Types.LiftedRep>_R
                                                                                                  (GHC.Prim.State#
                                                                                                     (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                                          <GHC.Prim.RealWorld>_N))_R
                                                                                                  <Data.Primitive.Array.MutableArray
                                                                                                     (Control.Monad.Primitive.PrimState
                                                                                                        (GHC.ST.ST
                                                                                                           GHC.Prim.RealWorld))
                                                                                                     (Multilinear.Generic.Tensor
                                                                                                        a)>_R)_R)
                                                                                         ->_R <GHC.ST.ST
                                                                                                 GHC.Prim.RealWorld
                                                                                                 (Data.Primitive.Array.MutableArray
                                                                                                    (Control.Monad.Primitive.PrimState
                                                                                                       (GHC.ST.ST
                                                                                                          GHC.Prim.RealWorld))
                                                                                                    (Multilinear.Generic.Tensor
                                                                                                       a))>_R)
                                                                                        (<GHC.ST.STRep
                                                                                            GHC.Prim.RealWorld
                                                                                            (Data.Primitive.Array.MutableArray
                                                                                               (Control.Monad.Primitive.PrimState
                                                                                                  (GHC.ST.ST
                                                                                                     GHC.Prim.RealWorld))
                                                                                               (Multilinear.Generic.Tensor
                                                                                                  a))>_R
                                                                                         ->_R GHC.ST.N:ST[0]
                                                                                                  <GHC.Prim.RealWorld>_N
                                                                                                  <Data.Primitive.Array.MutableArray
                                                                                                     (Control.Monad.Primitive.PrimState
                                                                                                        (GHC.ST.ST
                                                                                                           GHC.Prim.RealWorld))
                                                                                                     (Multilinear.Generic.Tensor
                                                                                                        a)>_R))))) of ds1 { (#,#) ipv6 ipv7 ->
                                                             case ipv7 of dt { GHC.Types.I# dt1 ->
                                                             case GHC.Prim.unsafeFreezeArray#
                                                                    @ (Control.Monad.Primitive.PrimState
                                                                         (GHC.ST.ST
                                                                            GHC.Prim.RealWorld))
                                                                    @ (Multilinear.Generic.Tensor a)
                                                                    ipv4
                                                                    ipv6
                                                                      `cast`
                                                                    (Nth:2
                                                                         (Nth:2
                                                                              (Trans
                                                                                   (<GHC.ST.STRep
                                                                                       GHC.Prim.RealWorld
                                                                                       (Data.Primitive.Array.Array
                                                                                          (Multilinear.Generic.Tensor
                                                                                             a))>_R
                                                                                    ->_R Sym (GHC.ST.N:ST[0]
                                                                                                  <GHC.Prim.RealWorld>_N
                                                                                                  <Data.Primitive.Array.Array
                                                                                                     (Multilinear.Generic.Tensor
                                                                                                        a)>_R))
                                                                                   (((GHC.Prim.State#
                                                                                        (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                                  <GHC.Prim.RealWorld>_N)))_R
                                                                                     ->_R ((#,#)
                                                                                             <'GHC.Types.TupleRep
                                                                                                '[]>_R
                                                                                             <'GHC.Types.LiftedRep>_R
                                                                                             (GHC.Prim.State#
                                                                                                (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                                          <GHC.Prim.RealWorld>_N)))_R
                                                                                             <Data.Primitive.Array.Array
                                                                                                (Multilinear.Generic.Tensor
                                                                                                   a)>_R)_R)
                                                                                    ->_R <GHC.ST.ST
                                                                                            GHC.Prim.RealWorld
                                                                                            (Data.Primitive.Array.Array
                                                                                               (Multilinear.Generic.Tensor
                                                                                                  a))>_R)))) of ds3 { (#,#) ipv5 ipv9 ->
                                                             (# ipv5
                                                                  `cast`
                                                                (Nth:2
                                                                     (Nth:3
                                                                          (Nth:2
                                                                               (Trans
                                                                                    (((GHC.Prim.State#
                                                                                         (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                              <GHC.Prim.RealWorld>_N))_R
                                                                                      ->_R ((#,#)
                                                                                              <'GHC.Types.TupleRep
                                                                                                 '[]>_R
                                                                                              <'GHC.Types.LiftedRep>_R
                                                                                              (GHC.Prim.State#
                                                                                                 (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                                      <GHC.Prim.RealWorld>_N))_R
                                                                                              <Data.Primitive.Array.Array
                                                                                                 (Multilinear.Generic.Tensor
                                                                                                    a)>_R)_R)
                                                                                     ->_R <GHC.ST.ST
                                                                                             GHC.Prim.RealWorld
                                                                                             (Data.Primitive.Array.Array
                                                                                                (Multilinear.Generic.Tensor
                                                                                                   a))>_R)
                                                                                    (<GHC.ST.STRep
                                                                                        GHC.Prim.RealWorld
                                                                                        (Data.Primitive.Array.Array
                                                                                           (Multilinear.Generic.Tensor
                                                                                              a))>_R
                                                                                     ->_R GHC.ST.N:ST[0]
                                                                                              <GHC.Prim.RealWorld>_N
                                                                                              <Data.Primitive.Array.Array
                                                                                                 (Multilinear.Generic.Tensor
                                                                                                    a)>_R))))),
                                                                Data.Vector.Vector
                                                                  @ (Multilinear.Generic.Tensor a)
                                                                  0#
                                                                  dt1
                                                                  ipv9 #) } } } }) of ds1 { (#,#) ipv3 ipv4 ->
                                                     ipv4 } })
                                               Multilinear.Index.Finite.Contravariant count name
                                               -> Multilinear.Generic.FiniteTensor
                                                    @ a
                                                    (Multilinear.Index.Finite.Covariant count name)
                                                    (case ts of v2 { Data.Vector.Vector ipv ipv1 ipv2 ->
                                                     case GHC.Magic.runRW#
                                                            @ ('GHC.Types.TupleRep
                                                                 '['GHC.Types.TupleRep '[],
                                                                   'GHC.Types.LiftedRep])
                                                            @ (# GHC.Prim.State# GHC.Prim.RealWorld,
                                                                 Data.Vector.Vector
                                                                   (Multilinear.Generic.Tensor a) #)
                                                            (\ (s1 :: GHC.Prim.State#
                                                                        GHC.Prim.RealWorld)[OneShot] ->
                                                             case GHC.Prim.newArray#
                                                                    @ (Multilinear.Generic.Tensor a)
                                                                    @ (Control.Monad.Primitive.PrimState
                                                                         (GHC.ST.ST
                                                                            GHC.Prim.RealWorld))
                                                                    ipv1
                                                                    (Data.Vector.Mutable.uninitialised
                                                                       @ (Multilinear.Generic.Tensor
                                                                            a))
                                                                    s1
                                                                      `cast`
                                                                    (Nth:2
                                                                         (Nth:2
                                                                              (Trans
                                                                                   (<GHC.ST.STRep
                                                                                       GHC.Prim.RealWorld
                                                                                       (Data.Primitive.Array.MutableArray
                                                                                          (Control.Monad.Primitive.PrimState
                                                                                             (GHC.ST.ST
                                                                                                GHC.Prim.RealWorld))
                                                                                          (Multilinear.Generic.Tensor
                                                                                             a))>_R
                                                                                    ->_R Sym (GHC.ST.N:ST[0]
                                                                                                  <GHC.Prim.RealWorld>_N
                                                                                                  <Data.Primitive.Array.MutableArray
                                                                                                     (Control.Monad.Primitive.PrimState
                                                                                                        (GHC.ST.ST
                                                                                                           GHC.Prim.RealWorld))
                                                                                                     (Multilinear.Generic.Tensor
                                                                                                        a)>_R))
                                                                                   (((GHC.Prim.State#
                                                                                        (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                                  <GHC.Prim.RealWorld>_N)))_R
                                                                                     ->_R ((#,#)
                                                                                             <'GHC.Types.TupleRep
                                                                                                '[]>_R
                                                                                             <'GHC.Types.LiftedRep>_R
                                                                                             (GHC.Prim.State#
                                                                                                (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                                          <GHC.Prim.RealWorld>_N)))_R
                                                                                             <Data.Primitive.Array.MutableArray
                                                                                                (Control.Monad.Primitive.PrimState
                                                                                                   (GHC.ST.ST
                                                                                                      GHC.Prim.RealWorld))
                                                                                                (Multilinear.Generic.Tensor
                                                                                                   a)>_R)_R)
                                                                                    ->_R <GHC.ST.ST
                                                                                            GHC.Prim.RealWorld
                                                                                            (Data.Primitive.Array.MutableArray
                                                                                               (Control.Monad.Primitive.PrimState
                                                                                                  (GHC.ST.ST
                                                                                                     GHC.Prim.RealWorld))
                                                                                               (Multilinear.Generic.Tensor
                                                                                                  a))>_R)))) of ds2 { (#,#) ipv3 ipv4 ->
                                                             letrec {
                                                               foldlM'_loop :: GHC.Types.SPEC
                                                                               -> GHC.Types.Int
                                                                               -> GHC.Types.Int
                                                                               -> GHC.ST.ST
                                                                                    GHC.Prim.RealWorld
                                                                                    GHC.Types.Int
                                                                 {- Arity: 3 -}
                                                               = \ (ds4 :: GHC.Types.SPEC)
                                                                   (z :: GHC.Types.Int)
                                                                   (s7 :: GHC.Types.Int) ->
                                                                 case ds4 of ds5 { DEFAULT ->
                                                                 case z of z1 { GHC.Types.I# ipv6 ->
                                                                 (\ (s8 :: GHC.Prim.State#
                                                                             GHC.Prim.RealWorld) ->
                                                                  case s7 of wild2 { GHC.Types.I# x ->
                                                                  case GHC.Prim.tagToEnum#
                                                                         @ GHC.Types.Bool
                                                                         (GHC.Prim.>=#
                                                                            x
                                                                            ipv1) of wild3 {
                                                                    GHC.Types.False
                                                                    -> case GHC.Prim.indexArray#
                                                                              @ (Multilinear.Generic.Tensor
                                                                                   a)
                                                                              ipv2
                                                                              (GHC.Prim.+#
                                                                                 ipv
                                                                                 x) of ds3 { Unit# ipv5 ->
                                                                       case GHC.Prim.writeArray#
                                                                              @ (Control.Monad.Primitive.PrimState
                                                                                   (GHC.ST.ST
                                                                                      GHC.Prim.RealWorld))
                                                                              @ (Multilinear.Generic.Tensor
                                                                                   a)
                                                                              ipv4
                                                                              ipv6
                                                                              (Multilinear.Generic.$w$ctranspose
                                                                                 @ a
                                                                                 ipv5)
                                                                              s8
                                                                                `cast`
                                                                              (Nth:2
                                                                                   (Nth:2
                                                                                        (Trans
                                                                                             (<GHC.ST.STRep
                                                                                                 GHC.Prim.RealWorld
                                                                                                 ()>_R
                                                                                              ->_R Sym (GHC.ST.N:ST[0]
                                                                                                            <GHC.Prim.RealWorld>_N
                                                                                                            <()>_R))
                                                                                             (((GHC.Prim.State#
                                                                                                  (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                                            <GHC.Prim.RealWorld>_N)))_R
                                                                                               ->_R ((#,#)
                                                                                                       <'GHC.Types.TupleRep
                                                                                                          '[]>_R
                                                                                                       <'GHC.Types.LiftedRep>_R
                                                                                                       (GHC.Prim.State#
                                                                                                          (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                                                    <GHC.Prim.RealWorld>_N)))_R
                                                                                                       <()>_R)_R)
                                                                                              ->_R <GHC.ST.ST
                                                                                                      GHC.Prim.RealWorld
                                                                                                      ()>_R)))) of s'# { DEFAULT ->
                                                                       (foldlM'_loop
                                                                          GHC.Types.SPEC
                                                                          (GHC.Types.I#
                                                                             (GHC.Prim.+# ipv6 1#))
                                                                          (GHC.Types.I#
                                                                             (GHC.Prim.+# x 1#)))
                                                                         `cast`
                                                                       (GHC.ST.N:ST[0]
                                                                            <GHC.Prim.RealWorld>_N
                                                                            <GHC.Types.Int>_R)
                                                                         s'#
                                                                           `cast`
                                                                         (Nth:2
                                                                              (Nth:3
                                                                                   (Nth:2
                                                                                        (Trans
                                                                                             (((GHC.Prim.State#
                                                                                                  (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                                       <GHC.Prim.RealWorld>_N))_R
                                                                                               ->_R ((#,#)
                                                                                                       <'GHC.Types.TupleRep
                                                                                                          '[]>_R
                                                                                                       <'GHC.Types.LiftedRep>_R
                                                                                                       (GHC.Prim.State#
                                                                                                          (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                                               <GHC.Prim.RealWorld>_N))_R
                                                                                                       <()>_R)_R)
                                                                                              ->_R <GHC.ST.ST
                                                                                                      GHC.Prim.RealWorld
                                                                                                      ()>_R)
                                                                                             (<GHC.ST.STRep
                                                                                                 GHC.Prim.RealWorld
                                                                                                 ()>_R
                                                                                              ->_R GHC.ST.N:ST[0]
                                                                                                       <GHC.Prim.RealWorld>_N
                                                                                                       <()>_R))))) } }
                                                                    GHC.Types.True
                                                                    -> (# s8, z1 #) } })
                                                                   `cast`
                                                                 (Sym (GHC.ST.N:ST[0]
                                                                           <GHC.Prim.RealWorld>_N
                                                                           <GHC.Types.Int>_R)) } }
                                                             } in
                                                             case (foldlM'_loop
                                                                     GHC.Types.SPEC
                                                                     (GHC.Types.I# 0#)
                                                                     (GHC.Types.I# 0#))
                                                                    `cast`
                                                                  (GHC.ST.N:ST[0]
                                                                       <GHC.Prim.RealWorld>_N
                                                                       <GHC.Types.Int>_R)
                                                                    ipv3
                                                                      `cast`
                                                                    (Nth:2
                                                                         (Nth:3
                                                                              (Nth:2
                                                                                   (Trans
                                                                                        (((GHC.Prim.State#
                                                                                             (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                                  <GHC.Prim.RealWorld>_N))_R
                                                                                          ->_R ((#,#)
                                                                                                  <'GHC.Types.TupleRep
                                                                                                     '[]>_R
                                                                                                  <'GHC.Types.LiftedRep>_R
                                                                                                  (GHC.Prim.State#
                                                                                                     (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                                          <GHC.Prim.RealWorld>_N))_R
                                                                                                  <Data.Primitive.Array.MutableArray
                                                                                                     (Control.Monad.Primitive.PrimState
                                                                                                        (GHC.ST.ST
                                                                                                           GHC.Prim.RealWorld))
                                                                                                     (Multilinear.Generic.Tensor
                                                                                                        a)>_R)_R)
                                                                                         ->_R <GHC.ST.ST
                                                                                                 GHC.Prim.RealWorld
                                                                                                 (Data.Primitive.Array.MutableArray
                                                                                                    (Control.Monad.Primitive.PrimState
                                                                                                       (GHC.ST.ST
                                                                                                          GHC.Prim.RealWorld))
                                                                                                    (Multilinear.Generic.Tensor
                                                                                                       a))>_R)
                                                                                        (<GHC.ST.STRep
                                                                                            GHC.Prim.RealWorld
                                                                                            (Data.Primitive.Array.MutableArray
                                                                                               (Control.Monad.Primitive.PrimState
                                                                                                  (GHC.ST.ST
                                                                                                     GHC.Prim.RealWorld))
                                                                                               (Multilinear.Generic.Tensor
                                                                                                  a))>_R
                                                                                         ->_R GHC.ST.N:ST[0]
                                                                                                  <GHC.Prim.RealWorld>_N
                                                                                                  <Data.Primitive.Array.MutableArray
                                                                                                     (Control.Monad.Primitive.PrimState
                                                                                                        (GHC.ST.ST
                                                                                                           GHC.Prim.RealWorld))
                                                                                                     (Multilinear.Generic.Tensor
                                                                                                        a)>_R))))) of ds1 { (#,#) ipv6 ipv7 ->
                                                             case ipv7 of dt { GHC.Types.I# dt1 ->
                                                             case GHC.Prim.unsafeFreezeArray#
                                                                    @ (Control.Monad.Primitive.PrimState
                                                                         (GHC.ST.ST
                                                                            GHC.Prim.RealWorld))
                                                                    @ (Multilinear.Generic.Tensor a)
                                                                    ipv4
                                                                    ipv6
                                                                      `cast`
                                                                    (Nth:2
                                                                         (Nth:2
                                                                              (Trans
                                                                                   (<GHC.ST.STRep
                                                                                       GHC.Prim.RealWorld
                                                                                       (Data.Primitive.Array.Array
                                                                                          (Multilinear.Generic.Tensor
                                                                                             a))>_R
                                                                                    ->_R Sym (GHC.ST.N:ST[0]
                                                                                                  <GHC.Prim.RealWorld>_N
                                                                                                  <Data.Primitive.Array.Array
                                                                                                     (Multilinear.Generic.Tensor
                                                                                                        a)>_R))
                                                                                   (((GHC.Prim.State#
                                                                                        (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                                  <GHC.Prim.RealWorld>_N)))_R
                                                                                     ->_R ((#,#)
                                                                                             <'GHC.Types.TupleRep
                                                                                                '[]>_R
                                                                                             <'GHC.Types.LiftedRep>_R
                                                                                             (GHC.Prim.State#
                                                                                                (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                                          <GHC.Prim.RealWorld>_N)))_R
                                                                                             <Data.Primitive.Array.Array
                                                                                                (Multilinear.Generic.Tensor
                                                                                                   a)>_R)_R)
                                                                                    ->_R <GHC.ST.ST
                                                                                            GHC.Prim.RealWorld
                                                                                            (Data.Primitive.Array.Array
                                                                                               (Multilinear.Generic.Tensor
                                                                                                  a))>_R)))) of ds3 { (#,#) ipv5 ipv9 ->
                                                             (# ipv5
                                                                  `cast`
                                                                (Nth:2
                                                                     (Nth:3
                                                                          (Nth:2
                                                                               (Trans
                                                                                    (((GHC.Prim.State#
                                                                                         (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                              <GHC.Prim.RealWorld>_N))_R
                                                                                      ->_R ((#,#)
                                                                                              <'GHC.Types.TupleRep
                                                                                                 '[]>_R
                                                                                              <'GHC.Types.LiftedRep>_R
                                                                                              (GHC.Prim.State#
                                                                                                 (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                                      <GHC.Prim.RealWorld>_N))_R
                                                                                              <Data.Primitive.Array.Array
                                                                                                 (Multilinear.Generic.Tensor
                                                                                                    a)>_R)_R)
                                                                                     ->_R <GHC.ST.ST
                                                                                             GHC.Prim.RealWorld
                                                                                             (Data.Primitive.Array.Array
                                                                                                (Multilinear.Generic.Tensor
                                                                                                   a))>_R)
                                                                                    (<GHC.ST.STRep
                                                                                        GHC.Prim.RealWorld
                                                                                        (Data.Primitive.Array.Array
                                                                                           (Multilinear.Generic.Tensor
                                                                                              a))>_R
                                                                                     ->_R GHC.ST.N:ST[0]
                                                                                              <GHC.Prim.RealWorld>_N
                                                                                              <Data.Primitive.Array.Array
                                                                                                 (Multilinear.Generic.Tensor
                                                                                                    a)>_R))))),
                                                                Data.Vector.Vector
                                                                  @ (Multilinear.Generic.Tensor a)
                                                                  0#
                                                                  dt1
                                                                  ipv9 #) } } } }) of ds1 { (#,#) ipv3 ipv4 ->
                                                     ipv4 } })
                                               Multilinear.Index.Finite.Indifferent count name
                                               -> Multilinear.Generic.FiniteTensor
                                                    @ a
                                                    (Multilinear.Index.Finite.Indifferent
                                                       count
                                                       name)
                                                    (case ts of v2 { Data.Vector.Vector ipv ipv1 ipv2 ->
                                                     case GHC.Magic.runRW#
                                                            @ ('GHC.Types.TupleRep
                                                                 '['GHC.Types.TupleRep '[],
                                                                   'GHC.Types.LiftedRep])
                                                            @ (# GHC.Prim.State# GHC.Prim.RealWorld,
                                                                 Data.Vector.Vector
                                                                   (Multilinear.Generic.Tensor a) #)
                                                            (\ (s1 :: GHC.Prim.State#
                                                                        GHC.Prim.RealWorld)[OneShot] ->
                                                             case GHC.Prim.newArray#
                                                                    @ (Multilinear.Generic.Tensor a)
                                                                    @ (Control.Monad.Primitive.PrimState
                                                                         (GHC.ST.ST
                                                                            GHC.Prim.RealWorld))
                                                                    ipv1
                                                                    (Data.Vector.Mutable.uninitialised
                                                                       @ (Multilinear.Generic.Tensor
                                                                            a))
                                                                    s1
                                                                      `cast`
                                                                    (Nth:2
                                                                         (Nth:2
                                                                              (Trans
                                                                                   (<GHC.ST.STRep
                                                                                       GHC.Prim.RealWorld
                                                                                       (Data.Primitive.Array.MutableArray
                                                                                          (Control.Monad.Primitive.PrimState
                                                                                             (GHC.ST.ST
                                                                                                GHC.Prim.RealWorld))
                                                                                          (Multilinear.Generic.Tensor
                                                                                             a))>_R
                                                                                    ->_R Sym (GHC.ST.N:ST[0]
                                                                                                  <GHC.Prim.RealWorld>_N
                                                                                                  <Data.Primitive.Array.MutableArray
                                                                                                     (Control.Monad.Primitive.PrimState
                                                                                                        (GHC.ST.ST
                                                                                                           GHC.Prim.RealWorld))
                                                                                                     (Multilinear.Generic.Tensor
                                                                                                        a)>_R))
                                                                                   (((GHC.Prim.State#
                                                                                        (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                                  <GHC.Prim.RealWorld>_N)))_R
                                                                                     ->_R ((#,#)
                                                                                             <'GHC.Types.TupleRep
                                                                                                '[]>_R
                                                                                             <'GHC.Types.LiftedRep>_R
                                                                                             (GHC.Prim.State#
                                                                                                (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                                          <GHC.Prim.RealWorld>_N)))_R
                                                                                             <Data.Primitive.Array.MutableArray
                                                                                                (Control.Monad.Primitive.PrimState
                                                                                                   (GHC.ST.ST
                                                                                                      GHC.Prim.RealWorld))
                                                                                                (Multilinear.Generic.Tensor
                                                                                                   a)>_R)_R)
                                                                                    ->_R <GHC.ST.ST
                                                                                            GHC.Prim.RealWorld
                                                                                            (Data.Primitive.Array.MutableArray
                                                                                               (Control.Monad.Primitive.PrimState
                                                                                                  (GHC.ST.ST
                                                                                                     GHC.Prim.RealWorld))
                                                                                               (Multilinear.Generic.Tensor
                                                                                                  a))>_R)))) of ds2 { (#,#) ipv3 ipv4 ->
                                                             letrec {
                                                               foldlM'_loop :: GHC.Types.SPEC
                                                                               -> GHC.Types.Int
                                                                               -> GHC.Types.Int
                                                                               -> GHC.ST.ST
                                                                                    GHC.Prim.RealWorld
                                                                                    GHC.Types.Int
                                                                 {- Arity: 3 -}
                                                               = \ (ds4 :: GHC.Types.SPEC)
                                                                   (z :: GHC.Types.Int)
                                                                   (s7 :: GHC.Types.Int) ->
                                                                 case ds4 of ds5 { DEFAULT ->
                                                                 case z of z1 { GHC.Types.I# ipv6 ->
                                                                 (\ (s8 :: GHC.Prim.State#
                                                                             GHC.Prim.RealWorld) ->
                                                                  case s7 of wild2 { GHC.Types.I# x ->
                                                                  case GHC.Prim.tagToEnum#
                                                                         @ GHC.Types.Bool
                                                                         (GHC.Prim.>=#
                                                                            x
                                                                            ipv1) of wild3 {
                                                                    GHC.Types.False
                                                                    -> case GHC.Prim.indexArray#
                                                                              @ (Multilinear.Generic.Tensor
                                                                                   a)
                                                                              ipv2
                                                                              (GHC.Prim.+#
                                                                                 ipv
                                                                                 x) of ds3 { Unit# ipv5 ->
                                                                       case GHC.Prim.writeArray#
                                                                              @ (Control.Monad.Primitive.PrimState
                                                                                   (GHC.ST.ST
                                                                                      GHC.Prim.RealWorld))
                                                                              @ (Multilinear.Generic.Tensor
                                                                                   a)
                                                                              ipv4
                                                                              ipv6
                                                                              (Multilinear.Generic.$w$ctranspose
                                                                                 @ a
                                                                                 ipv5)
                                                                              s8
                                                                                `cast`
                                                                              (Nth:2
                                                                                   (Nth:2
                                                                                        (Trans
                                                                                             (<GHC.ST.STRep
                                                                                                 GHC.Prim.RealWorld
                                                                                                 ()>_R
                                                                                              ->_R Sym (GHC.ST.N:ST[0]
                                                                                                            <GHC.Prim.RealWorld>_N
                                                                                                            <()>_R))
                                                                                             (((GHC.Prim.State#
                                                                                                  (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                                            <GHC.Prim.RealWorld>_N)))_R
                                                                                               ->_R ((#,#)
                                                                                                       <'GHC.Types.TupleRep
                                                                                                          '[]>_R
                                                                                                       <'GHC.Types.LiftedRep>_R
                                                                                                       (GHC.Prim.State#
                                                                                                          (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                                                    <GHC.Prim.RealWorld>_N)))_R
                                                                                                       <()>_R)_R)
                                                                                              ->_R <GHC.ST.ST
                                                                                                      GHC.Prim.RealWorld
                                                                                                      ()>_R)))) of s'# { DEFAULT ->
                                                                       (foldlM'_loop
                                                                          GHC.Types.SPEC
                                                                          (GHC.Types.I#
                                                                             (GHC.Prim.+# ipv6 1#))
                                                                          (GHC.Types.I#
                                                                             (GHC.Prim.+# x 1#)))
                                                                         `cast`
                                                                       (GHC.ST.N:ST[0]
                                                                            <GHC.Prim.RealWorld>_N
                                                                            <GHC.Types.Int>_R)
                                                                         s'#
                                                                           `cast`
                                                                         (Nth:2
                                                                              (Nth:3
                                                                                   (Nth:2
                                                                                        (Trans
                                                                                             (((GHC.Prim.State#
                                                                                                  (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                                       <GHC.Prim.RealWorld>_N))_R
                                                                                               ->_R ((#,#)
                                                                                                       <'GHC.Types.TupleRep
                                                                                                          '[]>_R
                                                                                                       <'GHC.Types.LiftedRep>_R
                                                                                                       (GHC.Prim.State#
                                                                                                          (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                                               <GHC.Prim.RealWorld>_N))_R
                                                                                                       <()>_R)_R)
                                                                                              ->_R <GHC.ST.ST
                                                                                                      GHC.Prim.RealWorld
                                                                                                      ()>_R)
                                                                                             (<GHC.ST.STRep
                                                                                                 GHC.Prim.RealWorld
                                                                                                 ()>_R
                                                                                              ->_R GHC.ST.N:ST[0]
                                                                                                       <GHC.Prim.RealWorld>_N
                                                                                                       <()>_R))))) } }
                                                                    GHC.Types.True
                                                                    -> (# s8, z1 #) } })
                                                                   `cast`
                                                                 (Sym (GHC.ST.N:ST[0]
                                                                           <GHC.Prim.RealWorld>_N
                                                                           <GHC.Types.Int>_R)) } }
                                                             } in
                                                             case (foldlM'_loop
                                                                     GHC.Types.SPEC
                                                                     (GHC.Types.I# 0#)
                                                                     (GHC.Types.I# 0#))
                                                                    `cast`
                                                                  (GHC.ST.N:ST[0]
                                                                       <GHC.Prim.RealWorld>_N
                                                                       <GHC.Types.Int>_R)
                                                                    ipv3
                                                                      `cast`
                                                                    (Nth:2
                                                                         (Nth:3
                                                                              (Nth:2
                                                                                   (Trans
                                                                                        (((GHC.Prim.State#
                                                                                             (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                                  <GHC.Prim.RealWorld>_N))_R
                                                                                          ->_R ((#,#)
                                                                                                  <'GHC.Types.TupleRep
                                                                                                     '[]>_R
                                                                                                  <'GHC.Types.LiftedRep>_R
                                                                                                  (GHC.Prim.State#
                                                                                                     (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                                          <GHC.Prim.RealWorld>_N))_R
                                                                                                  <Data.Primitive.Array.MutableArray
                                                                                                     (Control.Monad.Primitive.PrimState
                                                                                                        (GHC.ST.ST
                                                                                                           GHC.Prim.RealWorld))
                                                                                                     (Multilinear.Generic.Tensor
                                                                                                        a)>_R)_R)
                                                                                         ->_R <GHC.ST.ST
                                                                                                 GHC.Prim.RealWorld
                                                                                                 (Data.Primitive.Array.MutableArray
                                                                                                    (Control.Monad.Primitive.PrimState
                                                                                                       (GHC.ST.ST
                                                                                                          GHC.Prim.RealWorld))
                                                                                                    (Multilinear.Generic.Tensor
                                                                                                       a))>_R)
                                                                                        (<GHC.ST.STRep
                                                                                            GHC.Prim.RealWorld
                                                                                            (Data.Primitive.Array.MutableArray
                                                                                               (Control.Monad.Primitive.PrimState
                                                                                                  (GHC.ST.ST
                                                                                                     GHC.Prim.RealWorld))
                                                                                               (Multilinear.Generic.Tensor
                                                                                                  a))>_R
                                                                                         ->_R GHC.ST.N:ST[0]
                                                                                                  <GHC.Prim.RealWorld>_N
                                                                                                  <Data.Primitive.Array.MutableArray
                                                                                                     (Control.Monad.Primitive.PrimState
                                                                                                        (GHC.ST.ST
                                                                                                           GHC.Prim.RealWorld))
                                                                                                     (Multilinear.Generic.Tensor
                                                                                                        a)>_R))))) of ds1 { (#,#) ipv6 ipv7 ->
                                                             case ipv7 of dt { GHC.Types.I# dt1 ->
                                                             case GHC.Prim.unsafeFreezeArray#
                                                                    @ (Control.Monad.Primitive.PrimState
                                                                         (GHC.ST.ST
                                                                            GHC.Prim.RealWorld))
                                                                    @ (Multilinear.Generic.Tensor a)
                                                                    ipv4
                                                                    ipv6
                                                                      `cast`
                                                                    (Nth:2
                                                                         (Nth:2
                                                                              (Trans
                                                                                   (<GHC.ST.STRep
                                                                                       GHC.Prim.RealWorld
                                                                                       (Data.Primitive.Array.Array
                                                                                          (Multilinear.Generic.Tensor
                                                                                             a))>_R
                                                                                    ->_R Sym (GHC.ST.N:ST[0]
                                                                                                  <GHC.Prim.RealWorld>_N
                                                                                                  <Data.Primitive.Array.Array
                                                                                                     (Multilinear.Generic.Tensor
                                                                                                        a)>_R))
                                                                                   (((GHC.Prim.State#
                                                                                        (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                                  <GHC.Prim.RealWorld>_N)))_R
                                                                                     ->_R ((#,#)
                                                                                             <'GHC.Types.TupleRep
                                                                                                '[]>_R
                                                                                             <'GHC.Types.LiftedRep>_R
                                                                                             (GHC.Prim.State#
                                                                                                (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                                          <GHC.Prim.RealWorld>_N)))_R
                                                                                             <Data.Primitive.Array.Array
                                                                                                (Multilinear.Generic.Tensor
                                                                                                   a)>_R)_R)
                                                                                    ->_R <GHC.ST.ST
                                                                                            GHC.Prim.RealWorld
                                                                                            (Data.Primitive.Array.Array
                                                                                               (Multilinear.Generic.Tensor
                                                                                                  a))>_R)))) of ds3 { (#,#) ipv5 ipv9 ->
                                                             (# ipv5
                                                                  `cast`
                                                                (Nth:2
                                                                     (Nth:3
                                                                          (Nth:2
                                                                               (Trans
                                                                                    (((GHC.Prim.State#
                                                                                         (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                              <GHC.Prim.RealWorld>_N))_R
                                                                                      ->_R ((#,#)
                                                                                              <'GHC.Types.TupleRep
                                                                                                 '[]>_R
                                                                                              <'GHC.Types.LiftedRep>_R
                                                                                              (GHC.Prim.State#
                                                                                                 (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                                      <GHC.Prim.RealWorld>_N))_R
                                                                                              <Data.Primitive.Array.Array
                                                                                                 (Multilinear.Generic.Tensor
                                                                                                    a)>_R)_R)
                                                                                     ->_R <GHC.ST.ST
                                                                                             GHC.Prim.RealWorld
                                                                                             (Data.Primitive.Array.Array
                                                                                                (Multilinear.Generic.Tensor
                                                                                                   a))>_R)
                                                                                    (<GHC.ST.STRep
                                                                                        GHC.Prim.RealWorld
                                                                                        (Data.Primitive.Array.Array
                                                                                           (Multilinear.Generic.Tensor
                                                                                              a))>_R
                                                                                     ->_R GHC.ST.N:ST[0]
                                                                                              <GHC.Prim.RealWorld>_N
                                                                                              <Data.Primitive.Array.Array
                                                                                                 (Multilinear.Generic.Tensor
                                                                                                    a)>_R))))),
                                                                Data.Vector.Vector
                                                                  @ (Multilinear.Generic.Tensor a)
                                                                  0#
                                                                  dt1
                                                                  ipv9 #) } } } }) of ds1 { (#,#) ipv3 ipv4 ->
                                                     ipv4 } }) }
                                          Multilinear.Generic.InfiniteTensor ds ts
                                          -> case ds of wild1 {
                                               Multilinear.Index.Infinite.Covariant name
                                               -> Multilinear.Generic.InfiniteTensor
                                                    @ a
                                                    (Multilinear.Index.Infinite.Contravariant name)
                                                    (letrec {
                                                       go8 :: [Multilinear.Generic.Tensor a]
                                                              -> [Multilinear.Generic.Tensor a]
                                                         {- Arity: 1 -}
                                                       = \ (ds1 :: [Multilinear.Generic.Tensor
                                                                      a]) ->
                                                         case ds1 of wild2 {
                                                           []
                                                           -> GHC.Types.[]
                                                                @ (Multilinear.Generic.Tensor a)
                                                           : y ys
                                                           -> GHC.Types.:
                                                                @ (Multilinear.Generic.Tensor a)
                                                                (Multilinear.Generic.$w$ctranspose
                                                                   @ a
                                                                   y)
                                                                (go8 ys) }
                                                     } in
                                                     go8 ts)
                                               Multilinear.Index.Infinite.Contravariant name
                                               -> Multilinear.Generic.InfiniteTensor
                                                    @ a
                                                    (Multilinear.Index.Infinite.Covariant name)
                                                    (letrec {
                                                       go8 :: [Multilinear.Generic.Tensor a]
                                                              -> [Multilinear.Generic.Tensor a]
                                                         {- Arity: 1 -}
                                                       = \ (ds1 :: [Multilinear.Generic.Tensor
                                                                      a]) ->
                                                         case ds1 of wild2 {
                                                           []
                                                           -> GHC.Types.[]
                                                                @ (Multilinear.Generic.Tensor a)
                                                           : y ys
                                                           -> GHC.Types.:
                                                                @ (Multilinear.Generic.Tensor a)
                                                                (Multilinear.Generic.$w$ctranspose
                                                                   @ a
                                                                   y)
                                                                (go8 ys) }
                                                     } in
                                                     go8 ts)
                                               Multilinear.Index.Infinite.Indifferent name
                                               -> Multilinear.Generic.InfiniteTensor
                                                    @ a
                                                    (Multilinear.Index.Infinite.Indifferent name)
                                                    (letrec {
                                                       go8 :: [Multilinear.Generic.Tensor a]
                                                              -> [Multilinear.Generic.Tensor a]
                                                         {- Arity: 1 -}
                                                       = \ (ds1 :: [Multilinear.Generic.Tensor
                                                                      a]) ->
                                                         case ds1 of wild2 {
                                                           []
                                                           -> GHC.Types.[]
                                                                @ (Multilinear.Generic.Tensor a)
                                                           : y ys
                                                           -> GHC.Types.:
                                                                @ (Multilinear.Generic.Tensor a)
                                                                (Multilinear.Generic.$w$ctranspose
                                                                   @ a
                                                                   y)
                                                                (go8 ys) }
                                                     } in
                                                     go8 ts) }
                                          Multilinear.Generic.Err msg
                                          -> Multilinear.Generic.Err @ a msg }) -}
3435455de223a292a66afccee7caf4fd
  $w$cxor ::
    Data.Bits.Bits a =>
    Multilinear.Generic.Tensor a
    -> Multilinear.Generic.Tensor a -> Multilinear.Generic.Tensor a
  {- Arity: 3,
     Strictness: <L,U(A,A,A,C(C(U)),A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A)><S,U><S,U>,
     Inline: [0],
     Unfolding(loop-breaker): <stable> (\ @ a
                                          (w :: Data.Bits.Bits a)
                                          (w1 :: Multilinear.Generic.Tensor a)
                                          (w2 :: Multilinear.Generic.Tensor a) ->
                                        let {
                                          commonIndices :: [GHC.Base.String]
                                          = let {
                                              ds :: [GHC.Base.String]
                                              = letrec {
                                                  go8 :: [Multilinear.Index.TIndex]
                                                         -> [[GHC.Types.Char]]
                                                    {- Arity: 1 -}
                                                  = \ (ds1 :: [Multilinear.Index.TIndex]) ->
                                                    case ds1 of wild {
                                                      [] -> GHC.Types.[] @ [GHC.Types.Char]
                                                      : y ys
                                                      -> GHC.Types.:
                                                           @ [GHC.Types.Char]
                                                           (Multilinear.Index.tIndexName y)
                                                           (go8 ys) }
                                                } in
                                                go8 (Multilinear.Generic.$w$cindices @ a w2)
                                            } in
                                            letrec {
                                              go8 :: [Multilinear.Index.TIndex]
                                                     -> [[GHC.Types.Char]]
                                                {- Arity: 1 -}
                                              = \ (ds1 :: [Multilinear.Index.TIndex]) ->
                                                case ds1 of wild {
                                                  [] -> GHC.Types.[] @ [GHC.Types.Char]
                                                  : y ys
                                                  -> let {
                                                       x :: [GHC.Types.Char]
                                                       = case y of wild1 {
                                                           Multilinear.Index.Covariant ds2 ds3
                                                           -> ds3
                                                           Multilinear.Index.Contravariant ds2 ds3
                                                           -> ds3
                                                           Multilinear.Index.Indifferent ds2 ds3
                                                           -> ds3 }
                                                     } in
                                                     case GHC.List.elem
                                                            @ GHC.Base.String
                                                            GHC.Classes.$fEq[]_$s$fEq[]1
                                                            x
                                                            ds of wild1 {
                                                       GHC.Types.False -> go8 ys
                                                       GHC.Types.True
                                                       -> GHC.Types.:
                                                            @ [GHC.Types.Char]
                                                            x
                                                            (go8 ys) } }
                                            } in
                                            go8 (Multilinear.Generic.$w$cindices @ a w1)
                                        } in
                                        letrec {
                                          go8 :: [GHC.Base.String]
                                                 -> Multilinear.Generic.Tensor a
                                                 -> Multilinear.Generic.Tensor a
                                            {- Arity: 1 -}
                                          = \ (ds :: [GHC.Base.String]) ->
                                            case ds of wild {
                                              [] -> GHC.Base.id @ (Multilinear.Generic.Tensor a)
                                              : y ys
                                              -> \ (v :: Multilinear.Generic.Tensor a)[OneShot] ->
                                                 case v of z { DEFAULT ->
                                                 go8
                                                   ys
                                                   (Multilinear.Generic.$w$cshiftRightmost
                                                      @ a
                                                      z
                                                      y) } }
                                        } in
                                        letrec {
                                          go9 :: [GHC.Base.String]
                                                 -> Multilinear.Generic.Tensor a
                                                 -> Multilinear.Generic.Tensor a
                                            {- Arity: 1 -}
                                          = \ (ds :: [GHC.Base.String]) ->
                                            case ds of wild {
                                              [] -> GHC.Base.id @ (Multilinear.Generic.Tensor a)
                                              : y ys
                                              -> \ (v :: Multilinear.Generic.Tensor a)[OneShot] ->
                                                 case v of z { DEFAULT ->
                                                 go9
                                                   ys
                                                   (Multilinear.Generic.$w$cshiftRightmost
                                                      @ a
                                                      z
                                                      y) } }
                                        } in
                                        Multilinear.Generic.mergeScalars
                                          @ a
                                          (Multilinear.Generic.$w_elemByElem'
                                             @ a
                                             (go8 commonIndices w1)
                                             (go9 commonIndices w2)
                                             (Data.Bits.xor @ a w)
                                             (Multilinear.Generic.zipT
                                                @ a
                                                (Control.Exception.Base.absentError
                                                   @ (GHC.Num.Num a)
                                                   "w Num a"#)
                                                (\ (w3 :: Multilinear.Generic.Tensor a)
                                                   (w4 :: Multilinear.Generic.Tensor a) ->
                                                 Multilinear.Generic.$w$cxor @ a w w3 w4)
                                                (\ (t :: Multilinear.Generic.Tensor a) (e :: a) ->
                                                 Multilinear.Generic.$fMultilinearTensora_$cfmap
                                                   @ a
                                                   @ a
                                                   (\ (ds :: a) -> Data.Bits.xor @ a w ds e)
                                                   t)
                                                (\ (e :: a) (t :: Multilinear.Generic.Tensor a) ->
                                                 Multilinear.Generic.$fMultilinearTensora_$cfmap
                                                   @ a
                                                   @ a
                                                   (Data.Bits.xor @ a w e)
                                                   t)
                                                (Data.Bits.xor @ a w)))) -}
364ad972f40cd686d3551bfae74f665d
  $w$dTaggedObject1 ::
    Data.Aeson.Types.Internal.Options
    -> GHC.Generics.M1
         GHC.Generics.S
         ('GHC.Generics.MetaSel
            ('GHC.Base.Just "errMessage")
            'GHC.Generics.NoSourceUnpackedness
            'GHC.Generics.NoSourceStrictness
            'GHC.Generics.DecidedLazy)
         (GHC.Generics.Rec0 GHC.Base.String)
         a1
    -> [Data.Aeson.Types.Internal.Pair]
    -> (# Data.Aeson.Types.Internal.Pair,
          [Data.Aeson.Types.Internal.Pair] #)
  {- Arity: 3, Strictness: <L,1*U(1*C1(U),A,A,A,A,A,A)><L,1*U><L,U>,
     Inline: [0],
     Unfolding: (\ @ a1
                   (w :: Data.Aeson.Types.Internal.Options)
                   (w1 :: GHC.Generics.M1
                            GHC.Generics.S
                            ('GHC.Generics.MetaSel
                               ('GHC.Base.Just "errMessage")
                               'GHC.Generics.NoSourceUnpackedness
                               'GHC.Generics.NoSourceStrictness
                               'GHC.Generics.DecidedLazy)
                            (GHC.Generics.Rec0 GHC.Base.String)
                            a1)
                   (w2 :: [Data.Aeson.Types.Internal.Pair]) ->
                 (# (case GHC.Magic.runRW#
                            @ ('GHC.Types.TupleRep
                                 '['GHC.Types.TupleRep '[], 'GHC.Types.LiftedRep])
                            @ (# GHC.Prim.State# GHC.Prim.RealWorld, Data.Text.Internal.Text #)
                            (\ (s1 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                             case GHC.Prim.newByteArray#
                                    @ GHC.Prim.RealWorld
                                    10#
                                    s1 of ds1 { (#,#) ipv1 ipv2 ->
                             case w of wild { Data.Aeson.Types.Internal.Options ds2 ds3 ds4 ds5 ds6 ds7 ds8 ->
                             Data.Aeson.Types.ToJSON.$wouter1
                               ipv2
                               4#
                               (ds2 Multilinear.Generic.$s$WSSym19)
                               0#
                               ipv1 } }) of ds1 { (#,#) ipv1 ipv2 ->
                     ipv2 },
                     case GHC.Magic.runRW#
                            @ ('GHC.Types.TupleRep
                                 '['GHC.Types.TupleRep '[], 'GHC.Types.LiftedRep])
                            @ (# GHC.Prim.State# GHC.Prim.RealWorld, Data.Text.Internal.Text #)
                            (\ (s1 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                             case GHC.Prim.newByteArray#
                                    @ GHC.Prim.RealWorld
                                    10#
                                    s1 of ds1 { (#,#) ipv ipv1 ->
                             Multilinear.Generic.$wouter
                               ipv1
                               4#
                               w1
                                 `cast`
                               (Trans
                                    (GHC.Generics.N:M1[0]
                                         <*>_N
                                         <GHC.Generics.S>_P
                                         <'GHC.Generics.MetaSel
                                            ('GHC.Base.Just "errMessage")
                                            'GHC.Generics.NoSourceUnpackedness
                                            'GHC.Generics.NoSourceStrictness
                                            'GHC.Generics.DecidedLazy>_P
                                         <GHC.Generics.K1 GHC.Generics.R GHC.Base.String>_R <a1>_N)
                                    (GHC.Generics.N:K1[0]
                                         <*>_N <GHC.Generics.R>_P <[GHC.Types.Char]>_R <a1>_P))
                               0#
                               ipv }) of ds1 { (#,#) ipv ipv1 ->
                     case ipv1 of dt { Data.Text.Internal.Text ipv2 ipv3 ipv4 ->
                     Data.Aeson.Types.Internal.String dt } }),
                    w2 #)) -}
3435455de223a292a66afccee7caf4fd
  $w_elemByElem' ::
    Multilinear.Generic.Tensor a
    -> Multilinear.Generic.Tensor a
    -> (a -> a -> a)
    -> (Multilinear.Generic.Tensor a
        -> Multilinear.Generic.Tensor a -> Multilinear.Generic.Tensor a)
    -> Multilinear.Generic.Tensor a
  {- Arity: 4, Strictness: <S,1*U><S,1*U><L,C(C(U))><L,C(C1(U))>,
     Inline: [0],
     Unfolding(loop-breaker): <stable> (\ @ a
                                          (w :: Multilinear.Generic.Tensor a)
                                          (w1 :: Multilinear.Generic.Tensor a)
                                          (w2 :: a -> a -> a)
                                          (w3 :: Multilinear.Generic.Tensor a
                                                 -> Multilinear.Generic.Tensor a
                                                 -> Multilinear.Generic.Tensor a) ->
                                        case w of wild {
                                          DEFAULT
                                          -> case w1 of wild1 {
                                               DEFAULT
                                               -> let {
                                                    fail :: GHC.Prim.Void#
                                                            -> Multilinear.Generic.Tensor a
                                                      <join 1> {- Arity: 1 -}
                                                    = \ (ds :: GHC.Prim.Void#)[OneShot] ->
                                                      case wild1 of wild2 {
                                                        DEFAULT
                                                        -> Control.Exception.Base.patError
                                                             @ 'GHC.Types.LiftedRep
                                                             @ (Multilinear.Generic.Tensor a)
                                                             "src\\Multilinear\\Generic.hs:(344,1)-(405,38)|function _elemByElem'"#
                                                        Multilinear.Generic.Err msg
                                                        -> Multilinear.Generic.Err @ a msg }
                                                  } in
                                                  case wild of wild2 {
                                                    Multilinear.Generic.SimpleFinite index1 v1
                                                    -> case wild1 of wild3 {
                                                         Multilinear.Generic.SimpleFinite index2 ds
                                                         -> let {
                                                              $j :: Multilinear.Generic.Tensor a
                                                                <join 0>
                                                              = Multilinear.Generic.FiniteTensor
                                                                  @ a
                                                                  index1
                                                                  (case v1 of v2 { Data.Vector.Vector ipv ipv1 ipv2 ->
                                                                   case GHC.Magic.runRW#
                                                                          @ ('GHC.Types.TupleRep
                                                                               '['GHC.Types.TupleRep
                                                                                   '[],
                                                                                 'GHC.Types.LiftedRep])
                                                                          @ (# GHC.Prim.State#
                                                                                 GHC.Prim.RealWorld,
                                                                               Data.Vector.Vector
                                                                                 (Multilinear.Generic.Tensor
                                                                                    a) #)
                                                                          (\ (s1 :: GHC.Prim.State#
                                                                                      GHC.Prim.RealWorld)[OneShot] ->
                                                                           case GHC.Prim.newArray#
                                                                                  @ (Multilinear.Generic.Tensor
                                                                                       a)
                                                                                  @ (Control.Monad.Primitive.PrimState
                                                                                       (GHC.ST.ST
                                                                                          GHC.Prim.RealWorld))
                                                                                  ipv1
                                                                                  (Data.Vector.Mutable.uninitialised
                                                                                     @ (Multilinear.Generic.Tensor
                                                                                          a))
                                                                                  s1
                                                                                    `cast`
                                                                                  (Nth:2
                                                                                       (Nth:2
                                                                                            (Trans
                                                                                                 (<GHC.ST.STRep
                                                                                                     GHC.Prim.RealWorld
                                                                                                     (Data.Primitive.Array.MutableArray
                                                                                                        (Control.Monad.Primitive.PrimState
                                                                                                           (GHC.ST.ST
                                                                                                              GHC.Prim.RealWorld))
                                                                                                        (Multilinear.Generic.Tensor
                                                                                                           a))>_R
                                                                                                  ->_R Sym (GHC.ST.N:ST[0]
                                                                                                                <GHC.Prim.RealWorld>_N
                                                                                                                <Data.Primitive.Array.MutableArray
                                                                                                                   (Control.Monad.Primitive.PrimState
                                                                                                                      (GHC.ST.ST
                                                                                                                         GHC.Prim.RealWorld))
                                                                                                                   (Multilinear.Generic.Tensor
                                                                                                                      a)>_R))
                                                                                                 (((GHC.Prim.State#
                                                                                                      (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                                                <GHC.Prim.RealWorld>_N)))_R
                                                                                                   ->_R ((#,#)
                                                                                                           <'GHC.Types.TupleRep
                                                                                                              '[]>_R
                                                                                                           <'GHC.Types.LiftedRep>_R
                                                                                                           (GHC.Prim.State#
                                                                                                              (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                                                        <GHC.Prim.RealWorld>_N)))_R
                                                                                                           <Data.Primitive.Array.MutableArray
                                                                                                              (Control.Monad.Primitive.PrimState
                                                                                                                 (GHC.ST.ST
                                                                                                                    GHC.Prim.RealWorld))
                                                                                                              (Multilinear.Generic.Tensor
                                                                                                                 a)>_R)_R)
                                                                                                  ->_R <GHC.ST.ST
                                                                                                          GHC.Prim.RealWorld
                                                                                                          (Data.Primitive.Array.MutableArray
                                                                                                             (Control.Monad.Primitive.PrimState
                                                                                                                (GHC.ST.ST
                                                                                                                   GHC.Prim.RealWorld))
                                                                                                             (Multilinear.Generic.Tensor
                                                                                                                a))>_R)))) of ds2 { (#,#) ipv3 ipv4 ->
                                                                           letrec {
                                                                             foldlM'_loop :: GHC.Types.SPEC
                                                                                             -> GHC.Types.Int
                                                                                             -> GHC.Types.Int
                                                                                             -> GHC.ST.ST
                                                                                                  GHC.Prim.RealWorld
                                                                                                  GHC.Types.Int
                                                                               {- Arity: 3 -}
                                                                             = \ (ds4 :: GHC.Types.SPEC)
                                                                                 (z :: GHC.Types.Int)
                                                                                 (s7 :: GHC.Types.Int) ->
                                                                               case ds4 of ds5 { DEFAULT ->
                                                                               case z of z1 { GHC.Types.I# ipv6 ->
                                                                               (\ (s8 :: GHC.Prim.State#
                                                                                           GHC.Prim.RealWorld) ->
                                                                                case s7 of wild4 { GHC.Types.I# x ->
                                                                                case GHC.Prim.tagToEnum#
                                                                                       @ GHC.Types.Bool
                                                                                       (GHC.Prim.>=#
                                                                                          x
                                                                                          ipv1) of wild5 {
                                                                                  GHC.Types.False
                                                                                  -> case GHC.Prim.indexArray#
                                                                                            @ a
                                                                                            ipv2
                                                                                            (GHC.Prim.+#
                                                                                               ipv
                                                                                               x) of ds3 { Unit# ipv5 ->
                                                                                     case GHC.Prim.writeArray#
                                                                                            @ (Control.Monad.Primitive.PrimState
                                                                                                 (GHC.ST.ST
                                                                                                    GHC.Prim.RealWorld))
                                                                                            @ (Multilinear.Generic.Tensor
                                                                                                 a)
                                                                                            ipv4
                                                                                            ipv6
                                                                                            (Multilinear.Generic.$fMultilinearTensora_$s$cfmap
                                                                                               @ a
                                                                                               index2
                                                                                               ds
                                                                                               (w2
                                                                                                  ipv5))
                                                                                            s8
                                                                                              `cast`
                                                                                            (Nth:2
                                                                                                 (Nth:2
                                                                                                      (Trans
                                                                                                           (<GHC.ST.STRep
                                                                                                               GHC.Prim.RealWorld
                                                                                                               ()>_R
                                                                                                            ->_R Sym (GHC.ST.N:ST[0]
                                                                                                                          <GHC.Prim.RealWorld>_N
                                                                                                                          <()>_R))
                                                                                                           (((GHC.Prim.State#
                                                                                                                (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                                                          <GHC.Prim.RealWorld>_N)))_R
                                                                                                             ->_R ((#,#)
                                                                                                                     <'GHC.Types.TupleRep
                                                                                                                        '[]>_R
                                                                                                                     <'GHC.Types.LiftedRep>_R
                                                                                                                     (GHC.Prim.State#
                                                                                                                        (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                                                                  <GHC.Prim.RealWorld>_N)))_R
                                                                                                                     <()>_R)_R)
                                                                                                            ->_R <GHC.ST.ST
                                                                                                                    GHC.Prim.RealWorld
                                                                                                                    ()>_R)))) of s'# { DEFAULT ->
                                                                                     (foldlM'_loop
                                                                                        GHC.Types.SPEC
                                                                                        (GHC.Types.I#
                                                                                           (GHC.Prim.+#
                                                                                              ipv6
                                                                                              1#))
                                                                                        (GHC.Types.I#
                                                                                           (GHC.Prim.+#
                                                                                              x
                                                                                              1#)))
                                                                                       `cast`
                                                                                     (GHC.ST.N:ST[0]
                                                                                          <GHC.Prim.RealWorld>_N
                                                                                          <GHC.Types.Int>_R)
                                                                                       s'#
                                                                                         `cast`
                                                                                       (Nth:2
                                                                                            (Nth:3
                                                                                                 (Nth:2
                                                                                                      (Trans
                                                                                                           (((GHC.Prim.State#
                                                                                                                (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                                                     <GHC.Prim.RealWorld>_N))_R
                                                                                                             ->_R ((#,#)
                                                                                                                     <'GHC.Types.TupleRep
                                                                                                                        '[]>_R
                                                                                                                     <'GHC.Types.LiftedRep>_R
                                                                                                                     (GHC.Prim.State#
                                                                                                                        (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                                                             <GHC.Prim.RealWorld>_N))_R
                                                                                                                     <()>_R)_R)
                                                                                                            ->_R <GHC.ST.ST
                                                                                                                    GHC.Prim.RealWorld
                                                                                                                    ()>_R)
                                                                                                           (<GHC.ST.STRep
                                                                                                               GHC.Prim.RealWorld
                                                                                                               ()>_R
                                                                                                            ->_R GHC.ST.N:ST[0]
                                                                                                                     <GHC.Prim.RealWorld>_N
                                                                                                                     <()>_R))))) } }
                                                                                  GHC.Types.True
                                                                                  -> (# s8,
                                                                                        z1 #) } })
                                                                                 `cast`
                                                                               (Sym (GHC.ST.N:ST[0]
                                                                                         <GHC.Prim.RealWorld>_N
                                                                                         <GHC.Types.Int>_R)) } }
                                                                           } in
                                                                           case (foldlM'_loop
                                                                                   GHC.Types.SPEC
                                                                                   (GHC.Types.I# 0#)
                                                                                   (GHC.Types.I#
                                                                                      0#))
                                                                                  `cast`
                                                                                (GHC.ST.N:ST[0]
                                                                                     <GHC.Prim.RealWorld>_N
                                                                                     <GHC.Types.Int>_R)
                                                                                  ipv3
                                                                                    `cast`
                                                                                  (Nth:2
                                                                                       (Nth:3
                                                                                            (Nth:2
                                                                                                 (Trans
                                                                                                      (((GHC.Prim.State#
                                                                                                           (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                                                <GHC.Prim.RealWorld>_N))_R
                                                                                                        ->_R ((#,#)
                                                                                                                <'GHC.Types.TupleRep
                                                                                                                   '[]>_R
                                                                                                                <'GHC.Types.LiftedRep>_R
                                                                                                                (GHC.Prim.State#
                                                                                                                   (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                                                        <GHC.Prim.RealWorld>_N))_R
                                                                                                                <Data.Primitive.Array.MutableArray
                                                                                                                   (Control.Monad.Primitive.PrimState
                                                                                                                      (GHC.ST.ST
                                                                                                                         GHC.Prim.RealWorld))
                                                                                                                   (Multilinear.Generic.Tensor
                                                                                                                      a)>_R)_R)
                                                                                                       ->_R <GHC.ST.ST
                                                                                                               GHC.Prim.RealWorld
                                                                                                               (Data.Primitive.Array.MutableArray
                                                                                                                  (Control.Monad.Primitive.PrimState
                                                                                                                     (GHC.ST.ST
                                                                                                                        GHC.Prim.RealWorld))
                                                                                                                  (Multilinear.Generic.Tensor
                                                                                                                     a))>_R)
                                                                                                      (<GHC.ST.STRep
                                                                                                          GHC.Prim.RealWorld
                                                                                                          (Data.Primitive.Array.MutableArray
                                                                                                             (Control.Monad.Primitive.PrimState
                                                                                                                (GHC.ST.ST
                                                                                                                   GHC.Prim.RealWorld))
                                                                                                             (Multilinear.Generic.Tensor
                                                                                                                a))>_R
                                                                                                       ->_R GHC.ST.N:ST[0]
                                                                                                                <GHC.Prim.RealWorld>_N
                                                                                                                <Data.Primitive.Array.MutableArray
                                                                                                                   (Control.Monad.Primitive.PrimState
                                                                                                                      (GHC.ST.ST
                                                                                                                         GHC.Prim.RealWorld))
                                                                                                                   (Multilinear.Generic.Tensor
                                                                                                                      a)>_R))))) of ds1 { (#,#) ipv6 ipv7 ->
                                                                           case ipv7 of dt { GHC.Types.I# dt1 ->
                                                                           case GHC.Prim.unsafeFreezeArray#
                                                                                  @ (Control.Monad.Primitive.PrimState
                                                                                       (GHC.ST.ST
                                                                                          GHC.Prim.RealWorld))
                                                                                  @ (Multilinear.Generic.Tensor
                                                                                       a)
                                                                                  ipv4
                                                                                  ipv6
                                                                                    `cast`
                                                                                  (Nth:2
                                                                                       (Nth:2
                                                                                            (Trans
                                                                                                 (<GHC.ST.STRep
                                                                                                     GHC.Prim.RealWorld
                                                                                                     (Data.Primitive.Array.Array
                                                                                                        (Multilinear.Generic.Tensor
                                                                                                           a))>_R
                                                                                                  ->_R Sym (GHC.ST.N:ST[0]
                                                                                                                <GHC.Prim.RealWorld>_N
                                                                                                                <Data.Primitive.Array.Array
                                                                                                                   (Multilinear.Generic.Tensor
                                                                                                                      a)>_R))
                                                                                                 (((GHC.Prim.State#
                                                                                                      (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                                                <GHC.Prim.RealWorld>_N)))_R
                                                                                                   ->_R ((#,#)
                                                                                                           <'GHC.Types.TupleRep
                                                                                                              '[]>_R
                                                                                                           <'GHC.Types.LiftedRep>_R
                                                                                                           (GHC.Prim.State#
                                                                                                              (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                                                        <GHC.Prim.RealWorld>_N)))_R
                                                                                                           <Data.Primitive.Array.Array
                                                                                                              (Multilinear.Generic.Tensor
                                                                                                                 a)>_R)_R)
                                                                                                  ->_R <GHC.ST.ST
                                                                                                          GHC.Prim.RealWorld
                                                                                                          (Data.Primitive.Array.Array
                                                                                                             (Multilinear.Generic.Tensor
                                                                                                                a))>_R)))) of ds3 { (#,#) ipv5 ipv9 ->
                                                                           (# ipv5
                                                                                `cast`
                                                                              (Nth:2
                                                                                   (Nth:3
                                                                                        (Nth:2
                                                                                             (Trans
                                                                                                  (((GHC.Prim.State#
                                                                                                       (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                                            <GHC.Prim.RealWorld>_N))_R
                                                                                                    ->_R ((#,#)
                                                                                                            <'GHC.Types.TupleRep
                                                                                                               '[]>_R
                                                                                                            <'GHC.Types.LiftedRep>_R
                                                                                                            (GHC.Prim.State#
                                                                                                               (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                                                    <GHC.Prim.RealWorld>_N))_R
                                                                                                            <Data.Primitive.Array.Array
                                                                                                               (Multilinear.Generic.Tensor
                                                                                                                  a)>_R)_R)
                                                                                                   ->_R <GHC.ST.ST
                                                                                                           GHC.Prim.RealWorld
                                                                                                           (Data.Primitive.Array.Array
                                                                                                              (Multilinear.Generic.Tensor
                                                                                                                 a))>_R)
                                                                                                  (<GHC.ST.STRep
                                                                                                      GHC.Prim.RealWorld
                                                                                                      (Data.Primitive.Array.Array
                                                                                                         (Multilinear.Generic.Tensor
                                                                                                            a))>_R
                                                                                                   ->_R GHC.ST.N:ST[0]
                                                                                                            <GHC.Prim.RealWorld>_N
                                                                                                            <Data.Primitive.Array.Array
                                                                                                               (Multilinear.Generic.Tensor
                                                                                                                  a)>_R))))),
                                                                              Data.Vector.Vector
                                                                                @ (Multilinear.Generic.Tensor
                                                                                     a)
                                                                                0#
                                                                                dt1
                                                                                ipv9 #) } } } }) of ds1 { (#,#) ipv3 ipv4 ->
                                                                   ipv4 } })
                                                            } in
                                                            case index1 of wild4 {
                                                              Multilinear.Index.Finite.Covariant ds1 ds2
                                                              -> case index2 of wild5 {
                                                                   Multilinear.Index.Finite.Covariant ds4 ds5
                                                                   -> case GHC.Base.eqString
                                                                             ds2
                                                                             ds5 of wild6 {
                                                                        GHC.Types.False -> $j
                                                                        GHC.Types.True
                                                                        -> w3 wild2 wild3 }
                                                                   Multilinear.Index.Finite.Contravariant ds4 ds5
                                                                   -> case GHC.Base.eqString
                                                                             ds2
                                                                             ds5 of wild6 {
                                                                        GHC.Types.False -> $j
                                                                        GHC.Types.True
                                                                        -> w3 wild2 wild3 }
                                                                   Multilinear.Index.Finite.Indifferent ds4 ds5
                                                                   -> case GHC.Base.eqString
                                                                             ds2
                                                                             ds5 of wild6 {
                                                                        GHC.Types.False -> $j
                                                                        GHC.Types.True
                                                                        -> w3 wild2 wild3 } }
                                                              Multilinear.Index.Finite.Contravariant ds1 ds2
                                                              -> case index2 of wild5 {
                                                                   Multilinear.Index.Finite.Covariant ds4 ds5
                                                                   -> case GHC.Base.eqString
                                                                             ds2
                                                                             ds5 of wild6 {
                                                                        GHC.Types.False -> $j
                                                                        GHC.Types.True
                                                                        -> w3 wild2 wild3 }
                                                                   Multilinear.Index.Finite.Contravariant ds4 ds5
                                                                   -> case GHC.Base.eqString
                                                                             ds2
                                                                             ds5 of wild6 {
                                                                        GHC.Types.False -> $j
                                                                        GHC.Types.True
                                                                        -> w3 wild2 wild3 }
                                                                   Multilinear.Index.Finite.Indifferent ds4 ds5
                                                                   -> case GHC.Base.eqString
                                                                             ds2
                                                                             ds5 of wild6 {
                                                                        GHC.Types.False -> $j
                                                                        GHC.Types.True
                                                                        -> w3 wild2 wild3 } }
                                                              Multilinear.Index.Finite.Indifferent ds1 ds2
                                                              -> case index2 of wild5 {
                                                                   Multilinear.Index.Finite.Covariant ds4 ds5
                                                                   -> case GHC.Base.eqString
                                                                             ds2
                                                                             ds5 of wild6 {
                                                                        GHC.Types.False -> $j
                                                                        GHC.Types.True
                                                                        -> w3 wild2 wild3 }
                                                                   Multilinear.Index.Finite.Contravariant ds4 ds5
                                                                   -> case GHC.Base.eqString
                                                                             ds2
                                                                             ds5 of wild6 {
                                                                        GHC.Types.False -> $j
                                                                        GHC.Types.True
                                                                        -> w3 wild2 wild3 }
                                                                   Multilinear.Index.Finite.Indifferent ds4 ds5
                                                                   -> case GHC.Base.eqString
                                                                             ds2
                                                                             ds5 of wild6 {
                                                                        GHC.Types.False -> $j
                                                                        GHC.Types.True
                                                                        -> w3 wild2 wild3 } } }
                                                         Multilinear.Generic.FiniteTensor index2 v2
                                                         -> let {
                                                              $j :: Multilinear.Generic.Tensor a
                                                                <join 0>
                                                              = Multilinear.Generic.FiniteTensor
                                                                  @ a
                                                                  index2
                                                                  (case v2 of v4 { Data.Vector.Vector ipv ipv1 ipv2 ->
                                                                   case GHC.Magic.runRW#
                                                                          @ ('GHC.Types.TupleRep
                                                                               '['GHC.Types.TupleRep
                                                                                   '[],
                                                                                 'GHC.Types.LiftedRep])
                                                                          @ (# GHC.Prim.State#
                                                                                 GHC.Prim.RealWorld,
                                                                               Data.Vector.Vector
                                                                                 (Multilinear.Generic.Tensor
                                                                                    a) #)
                                                                          (\ (s1 :: GHC.Prim.State#
                                                                                      GHC.Prim.RealWorld)[OneShot] ->
                                                                           case GHC.Prim.newArray#
                                                                                  @ (Multilinear.Generic.Tensor
                                                                                       a)
                                                                                  @ (Control.Monad.Primitive.PrimState
                                                                                       (GHC.ST.ST
                                                                                          GHC.Prim.RealWorld))
                                                                                  ipv1
                                                                                  (Data.Vector.Mutable.uninitialised
                                                                                     @ (Multilinear.Generic.Tensor
                                                                                          a))
                                                                                  s1
                                                                                    `cast`
                                                                                  (Nth:2
                                                                                       (Nth:2
                                                                                            (Trans
                                                                                                 (<GHC.ST.STRep
                                                                                                     GHC.Prim.RealWorld
                                                                                                     (Data.Primitive.Array.MutableArray
                                                                                                        (Control.Monad.Primitive.PrimState
                                                                                                           (GHC.ST.ST
                                                                                                              GHC.Prim.RealWorld))
                                                                                                        (Multilinear.Generic.Tensor
                                                                                                           a))>_R
                                                                                                  ->_R Sym (GHC.ST.N:ST[0]
                                                                                                                <GHC.Prim.RealWorld>_N
                                                                                                                <Data.Primitive.Array.MutableArray
                                                                                                                   (Control.Monad.Primitive.PrimState
                                                                                                                      (GHC.ST.ST
                                                                                                                         GHC.Prim.RealWorld))
                                                                                                                   (Multilinear.Generic.Tensor
                                                                                                                      a)>_R))
                                                                                                 (((GHC.Prim.State#
                                                                                                      (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                                                <GHC.Prim.RealWorld>_N)))_R
                                                                                                   ->_R ((#,#)
                                                                                                           <'GHC.Types.TupleRep
                                                                                                              '[]>_R
                                                                                                           <'GHC.Types.LiftedRep>_R
                                                                                                           (GHC.Prim.State#
                                                                                                              (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                                                        <GHC.Prim.RealWorld>_N)))_R
                                                                                                           <Data.Primitive.Array.MutableArray
                                                                                                              (Control.Monad.Primitive.PrimState
                                                                                                                 (GHC.ST.ST
                                                                                                                    GHC.Prim.RealWorld))
                                                                                                              (Multilinear.Generic.Tensor
                                                                                                                 a)>_R)_R)
                                                                                                  ->_R <GHC.ST.ST
                                                                                                          GHC.Prim.RealWorld
                                                                                                          (Data.Primitive.Array.MutableArray
                                                                                                             (Control.Monad.Primitive.PrimState
                                                                                                                (GHC.ST.ST
                                                                                                                   GHC.Prim.RealWorld))
                                                                                                             (Multilinear.Generic.Tensor
                                                                                                                a))>_R)))) of ds2 { (#,#) ipv3 ipv4 ->
                                                                           letrec {
                                                                             foldlM'_loop :: GHC.Types.SPEC
                                                                                             -> GHC.Types.Int
                                                                                             -> GHC.Types.Int
                                                                                             -> GHC.ST.ST
                                                                                                  GHC.Prim.RealWorld
                                                                                                  GHC.Types.Int
                                                                               {- Arity: 3 -}
                                                                             = \ (ds4 :: GHC.Types.SPEC)
                                                                                 (z :: GHC.Types.Int)
                                                                                 (s7 :: GHC.Types.Int) ->
                                                                               case ds4 of ds5 { DEFAULT ->
                                                                               case z of z1 { GHC.Types.I# ipv6 ->
                                                                               (\ (s8 :: GHC.Prim.State#
                                                                                           GHC.Prim.RealWorld) ->
                                                                                case s7 of wild4 { GHC.Types.I# x ->
                                                                                case GHC.Prim.tagToEnum#
                                                                                       @ GHC.Types.Bool
                                                                                       (GHC.Prim.>=#
                                                                                          x
                                                                                          ipv1) of wild5 {
                                                                                  GHC.Types.False
                                                                                  -> case GHC.Prim.indexArray#
                                                                                            @ (Multilinear.Generic.Tensor
                                                                                                 a)
                                                                                            ipv2
                                                                                            (GHC.Prim.+#
                                                                                               ipv
                                                                                               x) of ds3 { Unit# ipv5 ->
                                                                                     case GHC.Prim.writeArray#
                                                                                            @ (Control.Monad.Primitive.PrimState
                                                                                                 (GHC.ST.ST
                                                                                                    GHC.Prim.RealWorld))
                                                                                            @ (Multilinear.Generic.Tensor
                                                                                                 a)
                                                                                            ipv4
                                                                                            ipv6
                                                                                            (Multilinear.Generic.$w_elemByElem'
                                                                                               @ a
                                                                                               wild2
                                                                                               ipv5
                                                                                               w2
                                                                                               w3)
                                                                                            s8
                                                                                              `cast`
                                                                                            (Nth:2
                                                                                                 (Nth:2
                                                                                                      (Trans
                                                                                                           (<GHC.ST.STRep
                                                                                                               GHC.Prim.RealWorld
                                                                                                               ()>_R
                                                                                                            ->_R Sym (GHC.ST.N:ST[0]
                                                                                                                          <GHC.Prim.RealWorld>_N
                                                                                                                          <()>_R))
                                                                                                           (((GHC.Prim.State#
                                                                                                                (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                                                          <GHC.Prim.RealWorld>_N)))_R
                                                                                                             ->_R ((#,#)
                                                                                                                     <'GHC.Types.TupleRep
                                                                                                                        '[]>_R
                                                                                                                     <'GHC.Types.LiftedRep>_R
                                                                                                                     (GHC.Prim.State#
                                                                                                                        (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                                                                  <GHC.Prim.RealWorld>_N)))_R
                                                                                                                     <()>_R)_R)
                                                                                                            ->_R <GHC.ST.ST
                                                                                                                    GHC.Prim.RealWorld
                                                                                                                    ()>_R)))) of s'# { DEFAULT ->
                                                                                     (foldlM'_loop
                                                                                        GHC.Types.SPEC
                                                                                        (GHC.Types.I#
                                                                                           (GHC.Prim.+#
                                                                                              ipv6
                                                                                              1#))
                                                                                        (GHC.Types.I#
                                                                                           (GHC.Prim.+#
                                                                                              x
                                                                                              1#)))
                                                                                       `cast`
                                                                                     (GHC.ST.N:ST[0]
                                                                                          <GHC.Prim.RealWorld>_N
                                                                                          <GHC.Types.Int>_R)
                                                                                       s'#
                                                                                         `cast`
                                                                                       (Nth:2
                                                                                            (Nth:3
                                                                                                 (Nth:2
                                                                                                      (Trans
                                                                                                           (((GHC.Prim.State#
                                                                                                                (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                                                     <GHC.Prim.RealWorld>_N))_R
                                                                                                             ->_R ((#,#)
                                                                                                                     <'GHC.Types.TupleRep
                                                                                                                        '[]>_R
                                                                                                                     <'GHC.Types.LiftedRep>_R
                                                                                                                     (GHC.Prim.State#
                                                                                                                        (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                                                             <GHC.Prim.RealWorld>_N))_R
                                                                                                                     <()>_R)_R)
                                                                                                            ->_R <GHC.ST.ST
                                                                                                                    GHC.Prim.RealWorld
                                                                                                                    ()>_R)
                                                                                                           (<GHC.ST.STRep
                                                                                                               GHC.Prim.RealWorld
                                                                                                               ()>_R
                                                                                                            ->_R GHC.ST.N:ST[0]
                                                                                                                     <GHC.Prim.RealWorld>_N
                                                                                                                     <()>_R))))) } }
                                                                                  GHC.Types.True
                                                                                  -> (# s8,
                                                                                        z1 #) } })
                                                                                 `cast`
                                                                               (Sym (GHC.ST.N:ST[0]
                                                                                         <GHC.Prim.RealWorld>_N
                                                                                         <GHC.Types.Int>_R)) } }
                                                                           } in
                                                                           case (foldlM'_loop
                                                                                   GHC.Types.SPEC
                                                                                   (GHC.Types.I# 0#)
                                                                                   (GHC.Types.I#
                                                                                      0#))
                                                                                  `cast`
                                                                                (GHC.ST.N:ST[0]
                                                                                     <GHC.Prim.RealWorld>_N
                                                                                     <GHC.Types.Int>_R)
                                                                                  ipv3
                                                                                    `cast`
                                                                                  (Nth:2
                                                                                       (Nth:3
                                                                                            (Nth:2
                                                                                                 (Trans
                                                                                                      (((GHC.Prim.State#
                                                                                                           (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                                                <GHC.Prim.RealWorld>_N))_R
                                                                                                        ->_R ((#,#)
                                                                                                                <'GHC.Types.TupleRep
                                                                                                                   '[]>_R
                                                                                                                <'GHC.Types.LiftedRep>_R
                                                                                                                (GHC.Prim.State#
                                                                                                                   (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                                                        <GHC.Prim.RealWorld>_N))_R
                                                                                                                <Data.Primitive.Array.MutableArray
                                                                                                                   (Control.Monad.Primitive.PrimState
                                                                                                                      (GHC.ST.ST
                                                                                                                         GHC.Prim.RealWorld))
                                                                                                                   (Multilinear.Generic.Tensor
                                                                                                                      a)>_R)_R)
                                                                                                       ->_R <GHC.ST.ST
                                                                                                               GHC.Prim.RealWorld
                                                                                                               (Data.Primitive.Array.MutableArray
                                                                                                                  (Control.Monad.Primitive.PrimState
                                                                                                                     (GHC.ST.ST
                                                                                                                        GHC.Prim.RealWorld))
                                                                                                                  (Multilinear.Generic.Tensor
                                                                                                                     a))>_R)
                                                                                                      (<GHC.ST.STRep
                                                                                                          GHC.Prim.RealWorld
                                                                                                          (Data.Primitive.Array.MutableArray
                                                                                                             (Control.Monad.Primitive.PrimState
                                                                                                                (GHC.ST.ST
                                                                                                                   GHC.Prim.RealWorld))
                                                                                                             (Multilinear.Generic.Tensor
                                                                                                                a))>_R
                                                                                                       ->_R GHC.ST.N:ST[0]
                                                                                                                <GHC.Prim.RealWorld>_N
                                                                                                                <Data.Primitive.Array.MutableArray
                                                                                                                   (Control.Monad.Primitive.PrimState
                                                                                                                      (GHC.ST.ST
                                                                                                                         GHC.Prim.RealWorld))
                                                                                                                   (Multilinear.Generic.Tensor
                                                                                                                      a)>_R))))) of ds1 { (#,#) ipv6 ipv7 ->
                                                                           case ipv7 of dt { GHC.Types.I# dt1 ->
                                                                           case GHC.Prim.unsafeFreezeArray#
                                                                                  @ (Control.Monad.Primitive.PrimState
                                                                                       (GHC.ST.ST
                                                                                          GHC.Prim.RealWorld))
                                                                                  @ (Multilinear.Generic.Tensor
                                                                                       a)
                                                                                  ipv4
                                                                                  ipv6
                                                                                    `cast`
                                                                                  (Nth:2
                                                                                       (Nth:2
                                                                                            (Trans
                                                                                                 (<GHC.ST.STRep
                                                                                                     GHC.Prim.RealWorld
                                                                                                     (Data.Primitive.Array.Array
                                                                                                        (Multilinear.Generic.Tensor
                                                                                                           a))>_R
                                                                                                  ->_R Sym (GHC.ST.N:ST[0]
                                                                                                                <GHC.Prim.RealWorld>_N
                                                                                                                <Data.Primitive.Array.Array
                                                                                                                   (Multilinear.Generic.Tensor
                                                                                                                      a)>_R))
                                                                                                 (((GHC.Prim.State#
                                                                                                      (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                                                <GHC.Prim.RealWorld>_N)))_R
                                                                                                   ->_R ((#,#)
                                                                                                           <'GHC.Types.TupleRep
                                                                                                              '[]>_R
                                                                                                           <'GHC.Types.LiftedRep>_R
                                                                                                           (GHC.Prim.State#
                                                                                                              (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                                                        <GHC.Prim.RealWorld>_N)))_R
                                                                                                           <Data.Primitive.Array.Array
                                                                                                              (Multilinear.Generic.Tensor
                                                                                                                 a)>_R)_R)
                                                                                                  ->_R <GHC.ST.ST
                                                                                                          GHC.Prim.RealWorld
                                                                                                          (Data.Primitive.Array.Array
                                                                                                             (Multilinear.Generic.Tensor
                                                                                                                a))>_R)))) of ds3 { (#,#) ipv5 ipv9 ->
                                                                           (# ipv5
                                                                                `cast`
                                                                              (Nth:2
                                                                                   (Nth:3
                                                                                        (Nth:2
                                                                                             (Trans
                                                                                                  (((GHC.Prim.State#
                                                                                                       (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                                            <GHC.Prim.RealWorld>_N))_R
                                                                                                    ->_R ((#,#)
                                                                                                            <'GHC.Types.TupleRep
                                                                                                               '[]>_R
                                                                                                            <'GHC.Types.LiftedRep>_R
                                                                                                            (GHC.Prim.State#
                                                                                                               (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                                                    <GHC.Prim.RealWorld>_N))_R
                                                                                                            <Data.Primitive.Array.Array
                                                                                                               (Multilinear.Generic.Tensor
                                                                                                                  a)>_R)_R)
                                                                                                   ->_R <GHC.ST.ST
                                                                                                           GHC.Prim.RealWorld
                                                                                                           (Data.Primitive.Array.Array
                                                                                                              (Multilinear.Generic.Tensor
                                                                                                                 a))>_R)
                                                                                                  (<GHC.ST.STRep
                                                                                                      GHC.Prim.RealWorld
                                                                                                      (Data.Primitive.Array.Array
                                                                                                         (Multilinear.Generic.Tensor
                                                                                                            a))>_R
                                                                                                   ->_R GHC.ST.N:ST[0]
                                                                                                            <GHC.Prim.RealWorld>_N
                                                                                                            <Data.Primitive.Array.Array
                                                                                                               (Multilinear.Generic.Tensor
                                                                                                                  a)>_R))))),
                                                                              Data.Vector.Vector
                                                                                @ (Multilinear.Generic.Tensor
                                                                                     a)
                                                                                0#
                                                                                dt1
                                                                                ipv9 #) } } } }) of ds1 { (#,#) ipv3 ipv4 ->
                                                                   ipv4 } })
                                                            } in
                                                            case index1 of wild4 {
                                                              Multilinear.Index.Finite.Covariant ds1 ds2
                                                              -> case index2 of wild5 {
                                                                   Multilinear.Index.Finite.Covariant ds4 ds5
                                                                   -> case GHC.Base.eqString
                                                                             ds2
                                                                             ds5 of wild6 {
                                                                        GHC.Types.False -> $j
                                                                        GHC.Types.True
                                                                        -> w3 wild2 wild3 }
                                                                   Multilinear.Index.Finite.Contravariant ds4 ds5
                                                                   -> case GHC.Base.eqString
                                                                             ds2
                                                                             ds5 of wild6 {
                                                                        GHC.Types.False -> $j
                                                                        GHC.Types.True
                                                                        -> w3 wild2 wild3 }
                                                                   Multilinear.Index.Finite.Indifferent ds4 ds5
                                                                   -> case GHC.Base.eqString
                                                                             ds2
                                                                             ds5 of wild6 {
                                                                        GHC.Types.False -> $j
                                                                        GHC.Types.True
                                                                        -> w3 wild2 wild3 } }
                                                              Multilinear.Index.Finite.Contravariant ds1 ds2
                                                              -> case index2 of wild5 {
                                                                   Multilinear.Index.Finite.Covariant ds4 ds5
                                                                   -> case GHC.Base.eqString
                                                                             ds2
                                                                             ds5 of wild6 {
                                                                        GHC.Types.False -> $j
                                                                        GHC.Types.True
                                                                        -> w3 wild2 wild3 }
                                                                   Multilinear.Index.Finite.Contravariant ds4 ds5
                                                                   -> case GHC.Base.eqString
                                                                             ds2
                                                                             ds5 of wild6 {
                                                                        GHC.Types.False -> $j
                                                                        GHC.Types.True
                                                                        -> w3 wild2 wild3 }
                                                                   Multilinear.Index.Finite.Indifferent ds4 ds5
                                                                   -> case GHC.Base.eqString
                                                                             ds2
                                                                             ds5 of wild6 {
                                                                        GHC.Types.False -> $j
                                                                        GHC.Types.True
                                                                        -> w3 wild2 wild3 } }
                                                              Multilinear.Index.Finite.Indifferent ds1 ds2
                                                              -> case index2 of wild5 {
                                                                   Multilinear.Index.Finite.Covariant ds4 ds5
                                                                   -> case GHC.Base.eqString
                                                                             ds2
                                                                             ds5 of wild6 {
                                                                        GHC.Types.False -> $j
                                                                        GHC.Types.True
                                                                        -> w3 wild2 wild3 }
                                                                   Multilinear.Index.Finite.Contravariant ds4 ds5
                                                                   -> case GHC.Base.eqString
                                                                             ds2
                                                                             ds5 of wild6 {
                                                                        GHC.Types.False -> $j
                                                                        GHC.Types.True
                                                                        -> w3 wild2 wild3 }
                                                                   Multilinear.Index.Finite.Indifferent ds4 ds5
                                                                   -> case GHC.Base.eqString
                                                                             ds2
                                                                             ds5 of wild6 {
                                                                        GHC.Types.False -> $j
                                                                        GHC.Types.True
                                                                        -> w3 wild2 wild3 } } }
                                                         Multilinear.Generic.InfiniteTensor index2 v2
                                                         -> let {
                                                              $j :: Multilinear.Generic.Tensor a
                                                                <join 0>
                                                              = Multilinear.Generic.InfiniteTensor
                                                                  @ a
                                                                  index2
                                                                  (letrec {
                                                                     go8 :: [Multilinear.Generic.Tensor
                                                                               a]
                                                                            -> [Multilinear.Generic.Tensor
                                                                                  a]
                                                                       {- Arity: 1 -}
                                                                     = \ (ds :: [Multilinear.Generic.Tensor
                                                                                   a]) ->
                                                                       case ds of wild4 {
                                                                         []
                                                                         -> GHC.Types.[]
                                                                              @ (Multilinear.Generic.Tensor
                                                                                   a)
                                                                         : y ys
                                                                         -> GHC.Types.:
                                                                              @ (Multilinear.Generic.Tensor
                                                                                   a)
                                                                              (Multilinear.Generic.$w_elemByElem'
                                                                                 @ a
                                                                                 wild2
                                                                                 y
                                                                                 w2
                                                                                 w3)
                                                                              (go8 ys) }
                                                                   } in
                                                                   go8 v2)
                                                            } in
                                                            case index1 of wild4 {
                                                              Multilinear.Index.Finite.Covariant ds1 ds2
                                                              -> case index2 of wild5 {
                                                                   Multilinear.Index.Infinite.Covariant ds4
                                                                   -> case GHC.Base.eqString
                                                                             ds2
                                                                             ds4 of wild6 {
                                                                        GHC.Types.False -> $j
                                                                        GHC.Types.True
                                                                        -> w3 wild2 wild3 }
                                                                   Multilinear.Index.Infinite.Contravariant ds4
                                                                   -> case GHC.Base.eqString
                                                                             ds2
                                                                             ds4 of wild6 {
                                                                        GHC.Types.False -> $j
                                                                        GHC.Types.True
                                                                        -> w3 wild2 wild3 }
                                                                   Multilinear.Index.Infinite.Indifferent ds4
                                                                   -> case GHC.Base.eqString
                                                                             ds2
                                                                             ds4 of wild6 {
                                                                        GHC.Types.False -> $j
                                                                        GHC.Types.True
                                                                        -> w3 wild2 wild3 } }
                                                              Multilinear.Index.Finite.Contravariant ds1 ds2
                                                              -> case index2 of wild5 {
                                                                   Multilinear.Index.Infinite.Covariant ds4
                                                                   -> case GHC.Base.eqString
                                                                             ds2
                                                                             ds4 of wild6 {
                                                                        GHC.Types.False -> $j
                                                                        GHC.Types.True
                                                                        -> w3 wild2 wild3 }
                                                                   Multilinear.Index.Infinite.Contravariant ds4
                                                                   -> case GHC.Base.eqString
                                                                             ds2
                                                                             ds4 of wild6 {
                                                                        GHC.Types.False -> $j
                                                                        GHC.Types.True
                                                                        -> w3 wild2 wild3 }
                                                                   Multilinear.Index.Infinite.Indifferent ds4
                                                                   -> case GHC.Base.eqString
                                                                             ds2
                                                                             ds4 of wild6 {
                                                                        GHC.Types.False -> $j
                                                                        GHC.Types.True
                                                                        -> w3 wild2 wild3 } }
                                                              Multilinear.Index.Finite.Indifferent ds1 ds2
                                                              -> case index2 of wild5 {
                                                                   Multilinear.Index.Infinite.Covariant ds4
                                                                   -> case GHC.Base.eqString
                                                                             ds2
                                                                             ds4 of wild6 {
                                                                        GHC.Types.False -> $j
                                                                        GHC.Types.True
                                                                        -> w3 wild2 wild3 }
                                                                   Multilinear.Index.Infinite.Contravariant ds4
                                                                   -> case GHC.Base.eqString
                                                                             ds2
                                                                             ds4 of wild6 {
                                                                        GHC.Types.False -> $j
                                                                        GHC.Types.True
                                                                        -> w3 wild2 wild3 }
                                                                   Multilinear.Index.Infinite.Indifferent ds4
                                                                   -> case GHC.Base.eqString
                                                                             ds2
                                                                             ds4 of wild6 {
                                                                        GHC.Types.False -> $j
                                                                        GHC.Types.True
                                                                        -> w3 wild2 wild3 } } }
                                                         Multilinear.Generic.Err ipv
                                                         -> fail GHC.Prim.void# }
                                                    Multilinear.Generic.FiniteTensor index1 v1
                                                    -> case wild1 of wild3 {
                                                         Multilinear.Generic.SimpleFinite index2 ds
                                                         -> let {
                                                              $j :: Multilinear.Generic.Tensor a
                                                                <join 0>
                                                              = Multilinear.Generic.FiniteTensor
                                                                  @ a
                                                                  index1
                                                                  (case v1 of v2 { Data.Vector.Vector ipv ipv1 ipv2 ->
                                                                   case GHC.Magic.runRW#
                                                                          @ ('GHC.Types.TupleRep
                                                                               '['GHC.Types.TupleRep
                                                                                   '[],
                                                                                 'GHC.Types.LiftedRep])
                                                                          @ (# GHC.Prim.State#
                                                                                 GHC.Prim.RealWorld,
                                                                               Data.Vector.Vector
                                                                                 (Multilinear.Generic.Tensor
                                                                                    a) #)
                                                                          (\ (s1 :: GHC.Prim.State#
                                                                                      GHC.Prim.RealWorld)[OneShot] ->
                                                                           case GHC.Prim.newArray#
                                                                                  @ (Multilinear.Generic.Tensor
                                                                                       a)
                                                                                  @ (Control.Monad.Primitive.PrimState
                                                                                       (GHC.ST.ST
                                                                                          GHC.Prim.RealWorld))
                                                                                  ipv1
                                                                                  (Data.Vector.Mutable.uninitialised
                                                                                     @ (Multilinear.Generic.Tensor
                                                                                          a))
                                                                                  s1
                                                                                    `cast`
                                                                                  (Nth:2
                                                                                       (Nth:2
                                                                                            (Trans
                                                                                                 (<GHC.ST.STRep
                                                                                                     GHC.Prim.RealWorld
                                                                                                     (Data.Primitive.Array.MutableArray
                                                                                                        (Control.Monad.Primitive.PrimState
                                                                                                           (GHC.ST.ST
                                                                                                              GHC.Prim.RealWorld))
                                                                                                        (Multilinear.Generic.Tensor
                                                                                                           a))>_R
                                                                                                  ->_R Sym (GHC.ST.N:ST[0]
                                                                                                                <GHC.Prim.RealWorld>_N
                                                                                                                <Data.Primitive.Array.MutableArray
                                                                                                                   (Control.Monad.Primitive.PrimState
                                                                                                                      (GHC.ST.ST
                                                                                                                         GHC.Prim.RealWorld))
                                                                                                                   (Multilinear.Generic.Tensor
                                                                                                                      a)>_R))
                                                                                                 (((GHC.Prim.State#
                                                                                                      (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                                                <GHC.Prim.RealWorld>_N)))_R
                                                                                                   ->_R ((#,#)
                                                                                                           <'GHC.Types.TupleRep
                                                                                                              '[]>_R
                                                                                                           <'GHC.Types.LiftedRep>_R
                                                                                                           (GHC.Prim.State#
                                                                                                              (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                                                        <GHC.Prim.RealWorld>_N)))_R
                                                                                                           <Data.Primitive.Array.MutableArray
                                                                                                              (Control.Monad.Primitive.PrimState
                                                                                                                 (GHC.ST.ST
                                                                                                                    GHC.Prim.RealWorld))
                                                                                                              (Multilinear.Generic.Tensor
                                                                                                                 a)>_R)_R)
                                                                                                  ->_R <GHC.ST.ST
                                                                                                          GHC.Prim.RealWorld
                                                                                                          (Data.Primitive.Array.MutableArray
                                                                                                             (Control.Monad.Primitive.PrimState
                                                                                                                (GHC.ST.ST
                                                                                                                   GHC.Prim.RealWorld))
                                                                                                             (Multilinear.Generic.Tensor
                                                                                                                a))>_R)))) of ds2 { (#,#) ipv3 ipv4 ->
                                                                           letrec {
                                                                             foldlM'_loop :: GHC.Types.SPEC
                                                                                             -> GHC.Types.Int
                                                                                             -> GHC.Types.Int
                                                                                             -> GHC.ST.ST
                                                                                                  GHC.Prim.RealWorld
                                                                                                  GHC.Types.Int
                                                                               {- Arity: 3 -}
                                                                             = \ (ds4 :: GHC.Types.SPEC)
                                                                                 (z :: GHC.Types.Int)
                                                                                 (s7 :: GHC.Types.Int) ->
                                                                               case ds4 of ds5 { DEFAULT ->
                                                                               case z of z1 { GHC.Types.I# ipv6 ->
                                                                               (\ (s8 :: GHC.Prim.State#
                                                                                           GHC.Prim.RealWorld) ->
                                                                                case s7 of wild4 { GHC.Types.I# x ->
                                                                                case GHC.Prim.tagToEnum#
                                                                                       @ GHC.Types.Bool
                                                                                       (GHC.Prim.>=#
                                                                                          x
                                                                                          ipv1) of wild5 {
                                                                                  GHC.Types.False
                                                                                  -> case GHC.Prim.indexArray#
                                                                                            @ (Multilinear.Generic.Tensor
                                                                                                 a)
                                                                                            ipv2
                                                                                            (GHC.Prim.+#
                                                                                               ipv
                                                                                               x) of ds3 { Unit# ipv5 ->
                                                                                     case GHC.Prim.writeArray#
                                                                                            @ (Control.Monad.Primitive.PrimState
                                                                                                 (GHC.ST.ST
                                                                                                    GHC.Prim.RealWorld))
                                                                                            @ (Multilinear.Generic.Tensor
                                                                                                 a)
                                                                                            ipv4
                                                                                            ipv6
                                                                                            (Multilinear.Generic.$w_elemByElem'
                                                                                               @ a
                                                                                               ipv5
                                                                                               wild3
                                                                                               w2
                                                                                               w3)
                                                                                            s8
                                                                                              `cast`
                                                                                            (Nth:2
                                                                                                 (Nth:2
                                                                                                      (Trans
                                                                                                           (<GHC.ST.STRep
                                                                                                               GHC.Prim.RealWorld
                                                                                                               ()>_R
                                                                                                            ->_R Sym (GHC.ST.N:ST[0]
                                                                                                                          <GHC.Prim.RealWorld>_N
                                                                                                                          <()>_R))
                                                                                                           (((GHC.Prim.State#
                                                                                                                (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                                                          <GHC.Prim.RealWorld>_N)))_R
                                                                                                             ->_R ((#,#)
                                                                                                                     <'GHC.Types.TupleRep
                                                                                                                        '[]>_R
                                                                                                                     <'GHC.Types.LiftedRep>_R
                                                                                                                     (GHC.Prim.State#
                                                                                                                        (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                                                                  <GHC.Prim.RealWorld>_N)))_R
                                                                                                                     <()>_R)_R)
                                                                                                            ->_R <GHC.ST.ST
                                                                                                                    GHC.Prim.RealWorld
                                                                                                                    ()>_R)))) of s'# { DEFAULT ->
                                                                                     (foldlM'_loop
                                                                                        GHC.Types.SPEC
                                                                                        (GHC.Types.I#
                                                                                           (GHC.Prim.+#
                                                                                              ipv6
                                                                                              1#))
                                                                                        (GHC.Types.I#
                                                                                           (GHC.Prim.+#
                                                                                              x
                                                                                              1#)))
                                                                                       `cast`
                                                                                     (GHC.ST.N:ST[0]
                                                                                          <GHC.Prim.RealWorld>_N
                                                                                          <GHC.Types.Int>_R)
                                                                                       s'#
                                                                                         `cast`
                                                                                       (Nth:2
                                                                                            (Nth:3
                                                                                                 (Nth:2
                                                                                                      (Trans
                                                                                                           (((GHC.Prim.State#
                                                                                                                (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                                                     <GHC.Prim.RealWorld>_N))_R
                                                                                                             ->_R ((#,#)
                                                                                                                     <'GHC.Types.TupleRep
                                                                                                                        '[]>_R
                                                                                                                     <'GHC.Types.LiftedRep>_R
                                                                                                                     (GHC.Prim.State#
                                                                                                                        (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                                                             <GHC.Prim.RealWorld>_N))_R
                                                                                                                     <()>_R)_R)
                                                                                                            ->_R <GHC.ST.ST
                                                                                                                    GHC.Prim.RealWorld
                                                                                                                    ()>_R)
                                                                                                           (<GHC.ST.STRep
                                                                                                               GHC.Prim.RealWorld
                                                                                                               ()>_R
                                                                                                            ->_R GHC.ST.N:ST[0]
                                                                                                                     <GHC.Prim.RealWorld>_N
                                                                                                                     <()>_R))))) } }
                                                                                  GHC.Types.True
                                                                                  -> (# s8,
                                                                                        z1 #) } })
                                                                                 `cast`
                                                                               (Sym (GHC.ST.N:ST[0]
                                                                                         <GHC.Prim.RealWorld>_N
                                                                                         <GHC.Types.Int>_R)) } }
                                                                           } in
                                                                           case (foldlM'_loop
                                                                                   GHC.Types.SPEC
                                                                                   (GHC.Types.I# 0#)
                                                                                   (GHC.Types.I#
                                                                                      0#))
                                                                                  `cast`
                                                                                (GHC.ST.N:ST[0]
                                                                                     <GHC.Prim.RealWorld>_N
                                                                                     <GHC.Types.Int>_R)
                                                                                  ipv3
                                                                                    `cast`
                                                                                  (Nth:2
                                                                                       (Nth:3
                                                                                            (Nth:2
                                                                                                 (Trans
                                                                                                      (((GHC.Prim.State#
                                                                                                           (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                                                <GHC.Prim.RealWorld>_N))_R
                                                                                                        ->_R ((#,#)
                                                                                                                <'GHC.Types.TupleRep
                                                                                                                   '[]>_R
                                                                                                                <'GHC.Types.LiftedRep>_R
                                                                                                                (GHC.Prim.State#
                                                                                                                   (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                                                        <GHC.Prim.RealWorld>_N))_R
                                                                                                                <Data.Primitive.Array.MutableArray
                                                                                                                   (Control.Monad.Primitive.PrimState
                                                                                                                      (GHC.ST.ST
                                                                                                                         GHC.Prim.RealWorld))
                                                                                                                   (Multilinear.Generic.Tensor
                                                                                                                      a)>_R)_R)
                                                                                                       ->_R <GHC.ST.ST
                                                                                                               GHC.Prim.RealWorld
                                                                                                               (Data.Primitive.Array.MutableArray
                                                                                                                  (Control.Monad.Primitive.PrimState
                                                                                                                     (GHC.ST.ST
                                                                                                                        GHC.Prim.RealWorld))
                                                                                                                  (Multilinear.Generic.Tensor
                                                                                                                     a))>_R)
                                                                                                      (<GHC.ST.STRep
                                                                                                          GHC.Prim.RealWorld
                                                                                                          (Data.Primitive.Array.MutableArray
                                                                                                             (Control.Monad.Primitive.PrimState
                                                                                                                (GHC.ST.ST
                                                                                                                   GHC.Prim.RealWorld))
                                                                                                             (Multilinear.Generic.Tensor
                                                                                                                a))>_R
                                                                                                       ->_R GHC.ST.N:ST[0]
                                                                                                                <GHC.Prim.RealWorld>_N
                                                                                                                <Data.Primitive.Array.MutableArray
                                                                                                                   (Control.Monad.Primitive.PrimState
                                                                                                                      (GHC.ST.ST
                                                                                                                         GHC.Prim.RealWorld))
                                                                                                                   (Multilinear.Generic.Tensor
                                                                                                                      a)>_R))))) of ds1 { (#,#) ipv6 ipv7 ->
                                                                           case ipv7 of dt { GHC.Types.I# dt1 ->
                                                                           case GHC.Prim.unsafeFreezeArray#
                                                                                  @ (Control.Monad.Primitive.PrimState
                                                                                       (GHC.ST.ST
                                                                                          GHC.Prim.RealWorld))
                                                                                  @ (Multilinear.Generic.Tensor
                                                                                       a)
                                                                                  ipv4
                                                                                  ipv6
                                                                                    `cast`
                                                                                  (Nth:2
                                                                                       (Nth:2
                                                                                            (Trans
                                                                                                 (<GHC.ST.STRep
                                                                                                     GHC.Prim.RealWorld
                                                                                                     (Data.Primitive.Array.Array
                                                                                                        (Multilinear.Generic.Tensor
                                                                                                           a))>_R
                                                                                                  ->_R Sym (GHC.ST.N:ST[0]
                                                                                                                <GHC.Prim.RealWorld>_N
                                                                                                                <Data.Primitive.Array.Array
                                                                                                                   (Multilinear.Generic.Tensor
                                                                                                                      a)>_R))
                                                                                                 (((GHC.Prim.State#
                                                                                                      (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                                                <GHC.Prim.RealWorld>_N)))_R
                                                                                                   ->_R ((#,#)
                                                                                                           <'GHC.Types.TupleRep
                                                                                                              '[]>_R
                                                                                                           <'GHC.Types.LiftedRep>_R
                                                                                                           (GHC.Prim.State#
                                                                                                              (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                                                        <GHC.Prim.RealWorld>_N)))_R
                                                                                                           <Data.Primitive.Array.Array
                                                                                                              (Multilinear.Generic.Tensor
                                                                                                                 a)>_R)_R)
                                                                                                  ->_R <GHC.ST.ST
                                                                                                          GHC.Prim.RealWorld
                                                                                                          (Data.Primitive.Array.Array
                                                                                                             (Multilinear.Generic.Tensor
                                                                                                                a))>_R)))) of ds3 { (#,#) ipv5 ipv9 ->
                                                                           (# ipv5
                                                                                `cast`
                                                                              (Nth:2
                                                                                   (Nth:3
                                                                                        (Nth:2
                                                                                             (Trans
                                                                                                  (((GHC.Prim.State#
                                                                                                       (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                                            <GHC.Prim.RealWorld>_N))_R
                                                                                                    ->_R ((#,#)
                                                                                                            <'GHC.Types.TupleRep
                                                                                                               '[]>_R
                                                                                                            <'GHC.Types.LiftedRep>_R
                                                                                                            (GHC.Prim.State#
                                                                                                               (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                                                    <GHC.Prim.RealWorld>_N))_R
                                                                                                            <Data.Primitive.Array.Array
                                                                                                               (Multilinear.Generic.Tensor
                                                                                                                  a)>_R)_R)
                                                                                                   ->_R <GHC.ST.ST
                                                                                                           GHC.Prim.RealWorld
                                                                                                           (Data.Primitive.Array.Array
                                                                                                              (Multilinear.Generic.Tensor
                                                                                                                 a))>_R)
                                                                                                  (<GHC.ST.STRep
                                                                                                      GHC.Prim.RealWorld
                                                                                                      (Data.Primitive.Array.Array
                                                                                                         (Multilinear.Generic.Tensor
                                                                                                            a))>_R
                                                                                                   ->_R GHC.ST.N:ST[0]
                                                                                                            <GHC.Prim.RealWorld>_N
                                                                                                            <Data.Primitive.Array.Array
                                                                                                               (Multilinear.Generic.Tensor
                                                                                                                  a)>_R))))),
                                                                              Data.Vector.Vector
                                                                                @ (Multilinear.Generic.Tensor
                                                                                     a)
                                                                                0#
                                                                                dt1
                                                                                ipv9 #) } } } }) of ds1 { (#,#) ipv3 ipv4 ->
                                                                   ipv4 } })
                                                            } in
                                                            case index1 of wild4 {
                                                              Multilinear.Index.Finite.Covariant ds1 ds2
                                                              -> case index2 of wild5 {
                                                                   Multilinear.Index.Finite.Covariant ds4 ds5
                                                                   -> case GHC.Base.eqString
                                                                             ds2
                                                                             ds5 of wild6 {
                                                                        GHC.Types.False -> $j
                                                                        GHC.Types.True
                                                                        -> w3 wild2 wild3 }
                                                                   Multilinear.Index.Finite.Contravariant ds4 ds5
                                                                   -> case GHC.Base.eqString
                                                                             ds2
                                                                             ds5 of wild6 {
                                                                        GHC.Types.False -> $j
                                                                        GHC.Types.True
                                                                        -> w3 wild2 wild3 }
                                                                   Multilinear.Index.Finite.Indifferent ds4 ds5
                                                                   -> case GHC.Base.eqString
                                                                             ds2
                                                                             ds5 of wild6 {
                                                                        GHC.Types.False -> $j
                                                                        GHC.Types.True
                                                                        -> w3 wild2 wild3 } }
                                                              Multilinear.Index.Finite.Contravariant ds1 ds2
                                                              -> case index2 of wild5 {
                                                                   Multilinear.Index.Finite.Covariant ds4 ds5
                                                                   -> case GHC.Base.eqString
                                                                             ds2
                                                                             ds5 of wild6 {
                                                                        GHC.Types.False -> $j
                                                                        GHC.Types.True
                                                                        -> w3 wild2 wild3 }
                                                                   Multilinear.Index.Finite.Contravariant ds4 ds5
                                                                   -> case GHC.Base.eqString
                                                                             ds2
                                                                             ds5 of wild6 {
                                                                        GHC.Types.False -> $j
                                                                        GHC.Types.True
                                                                        -> w3 wild2 wild3 }
                                                                   Multilinear.Index.Finite.Indifferent ds4 ds5
                                                                   -> case GHC.Base.eqString
                                                                             ds2
                                                                             ds5 of wild6 {
                                                                        GHC.Types.False -> $j
                                                                        GHC.Types.True
                                                                        -> w3 wild2 wild3 } }
                                                              Multilinear.Index.Finite.Indifferent ds1 ds2
                                                              -> case index2 of wild5 {
                                                                   Multilinear.Index.Finite.Covariant ds4 ds5
                                                                   -> case GHC.Base.eqString
                                                                             ds2
                                                                             ds5 of wild6 {
                                                                        GHC.Types.False -> $j
                                                                        GHC.Types.True
                                                                        -> w3 wild2 wild3 }
                                                                   Multilinear.Index.Finite.Contravariant ds4 ds5
                                                                   -> case GHC.Base.eqString
                                                                             ds2
                                                                             ds5 of wild6 {
                                                                        GHC.Types.False -> $j
                                                                        GHC.Types.True
                                                                        -> w3 wild2 wild3 }
                                                                   Multilinear.Index.Finite.Indifferent ds4 ds5
                                                                   -> case GHC.Base.eqString
                                                                             ds2
                                                                             ds5 of wild6 {
                                                                        GHC.Types.False -> $j
                                                                        GHC.Types.True
                                                                        -> w3 wild2 wild3 } } }
                                                         Multilinear.Generic.FiniteTensor index2 v2
                                                         -> let {
                                                              $j :: Multilinear.Generic.Tensor a
                                                                <join 0>
                                                              = letrec {
                                                                  go8 :: [Multilinear.Index.TIndex]
                                                                         -> [[GHC.Types.Char]]
                                                                    {- Arity: 1 -}
                                                                  = \ (ds :: [Multilinear.Index.TIndex]) ->
                                                                    case ds of wild4 {
                                                                      []
                                                                      -> GHC.Types.[]
                                                                           @ [GHC.Types.Char]
                                                                      : y ys
                                                                      -> GHC.Types.:
                                                                           @ [GHC.Types.Char]
                                                                           (Multilinear.Index.tIndexName
                                                                              y)
                                                                           (go8 ys) }
                                                                } in
                                                                case GHC.List.elem
                                                                       @ GHC.Base.String
                                                                       GHC.Classes.$fEq[]_$s$fEq[]1
                                                                       (case index1 of wild4 {
                                                                          Multilinear.Index.Finite.Covariant ds1 ds2
                                                                          -> ds2
                                                                          Multilinear.Index.Finite.Contravariant ds1 ds2
                                                                          -> ds2
                                                                          Multilinear.Index.Finite.Indifferent ds1 ds2
                                                                          -> ds2 })
                                                                       (go8
                                                                          (Multilinear.Generic.$fMultilinearTensora_$s$w$cindices1
                                                                             @ a
                                                                             index2
                                                                             v2)) of wild4 {
                                                                  GHC.Types.False
                                                                  -> Multilinear.Generic.FiniteTensor
                                                                       @ a
                                                                       index1
                                                                       (case v1 of v4 { Data.Vector.Vector ipv ipv1 ipv2 ->
                                                                        case GHC.Magic.runRW#
                                                                               @ ('GHC.Types.TupleRep
                                                                                    '['GHC.Types.TupleRep
                                                                                        '[],
                                                                                      'GHC.Types.LiftedRep])
                                                                               @ (# GHC.Prim.State#
                                                                                      GHC.Prim.RealWorld,
                                                                                    Data.Vector.Vector
                                                                                      (Multilinear.Generic.Tensor
                                                                                         a) #)
                                                                               (\ (s1 :: GHC.Prim.State#
                                                                                           GHC.Prim.RealWorld)[OneShot] ->
                                                                                case GHC.Prim.newArray#
                                                                                       @ (Multilinear.Generic.Tensor
                                                                                            a)
                                                                                       @ (Control.Monad.Primitive.PrimState
                                                                                            (GHC.ST.ST
                                                                                               GHC.Prim.RealWorld))
                                                                                       ipv1
                                                                                       (Data.Vector.Mutable.uninitialised
                                                                                          @ (Multilinear.Generic.Tensor
                                                                                               a))
                                                                                       s1
                                                                                         `cast`
                                                                                       (Nth:2
                                                                                            (Nth:2
                                                                                                 (Trans
                                                                                                      (<GHC.ST.STRep
                                                                                                          GHC.Prim.RealWorld
                                                                                                          (Data.Primitive.Array.MutableArray
                                                                                                             (Control.Monad.Primitive.PrimState
                                                                                                                (GHC.ST.ST
                                                                                                                   GHC.Prim.RealWorld))
                                                                                                             (Multilinear.Generic.Tensor
                                                                                                                a))>_R
                                                                                                       ->_R Sym (GHC.ST.N:ST[0]
                                                                                                                     <GHC.Prim.RealWorld>_N
                                                                                                                     <Data.Primitive.Array.MutableArray
                                                                                                                        (Control.Monad.Primitive.PrimState
                                                                                                                           (GHC.ST.ST
                                                                                                                              GHC.Prim.RealWorld))
                                                                                                                        (Multilinear.Generic.Tensor
                                                                                                                           a)>_R))
                                                                                                      (((GHC.Prim.State#
                                                                                                           (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                                                     <GHC.Prim.RealWorld>_N)))_R
                                                                                                        ->_R ((#,#)
                                                                                                                <'GHC.Types.TupleRep
                                                                                                                   '[]>_R
                                                                                                                <'GHC.Types.LiftedRep>_R
                                                                                                                (GHC.Prim.State#
                                                                                                                   (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                                                             <GHC.Prim.RealWorld>_N)))_R
                                                                                                                <Data.Primitive.Array.MutableArray
                                                                                                                   (Control.Monad.Primitive.PrimState
                                                                                                                      (GHC.ST.ST
                                                                                                                         GHC.Prim.RealWorld))
                                                                                                                   (Multilinear.Generic.Tensor
                                                                                                                      a)>_R)_R)
                                                                                                       ->_R <GHC.ST.ST
                                                                                                               GHC.Prim.RealWorld
                                                                                                               (Data.Primitive.Array.MutableArray
                                                                                                                  (Control.Monad.Primitive.PrimState
                                                                                                                     (GHC.ST.ST
                                                                                                                        GHC.Prim.RealWorld))
                                                                                                                  (Multilinear.Generic.Tensor
                                                                                                                     a))>_R)))) of ds2 { (#,#) ipv3 ipv4 ->
                                                                                letrec {
                                                                                  foldlM'_loop :: GHC.Types.SPEC
                                                                                                  -> GHC.Types.Int
                                                                                                  -> GHC.Types.Int
                                                                                                  -> GHC.ST.ST
                                                                                                       GHC.Prim.RealWorld
                                                                                                       GHC.Types.Int
                                                                                    {- Arity: 3 -}
                                                                                  = \ (ds4 :: GHC.Types.SPEC)
                                                                                      (z :: GHC.Types.Int)
                                                                                      (s7 :: GHC.Types.Int) ->
                                                                                    case ds4 of ds5 { DEFAULT ->
                                                                                    case z of z1 { GHC.Types.I# ipv6 ->
                                                                                    (\ (s8 :: GHC.Prim.State#
                                                                                                GHC.Prim.RealWorld) ->
                                                                                     case s7 of wild5 { GHC.Types.I# x ->
                                                                                     case GHC.Prim.tagToEnum#
                                                                                            @ GHC.Types.Bool
                                                                                            (GHC.Prim.>=#
                                                                                               x
                                                                                               ipv1) of wild6 {
                                                                                       GHC.Types.False
                                                                                       -> case GHC.Prim.indexArray#
                                                                                                 @ (Multilinear.Generic.Tensor
                                                                                                      a)
                                                                                                 ipv2
                                                                                                 (GHC.Prim.+#
                                                                                                    ipv
                                                                                                    x) of ds3 { Unit# ipv5 ->
                                                                                          case GHC.Prim.writeArray#
                                                                                                 @ (Control.Monad.Primitive.PrimState
                                                                                                      (GHC.ST.ST
                                                                                                         GHC.Prim.RealWorld))
                                                                                                 @ (Multilinear.Generic.Tensor
                                                                                                      a)
                                                                                                 ipv4
                                                                                                 ipv6
                                                                                                 (Multilinear.Generic.$w_elemByElem'
                                                                                                    @ a
                                                                                                    ipv5
                                                                                                    wild3
                                                                                                    w2
                                                                                                    w3)
                                                                                                 s8
                                                                                                   `cast`
                                                                                                 (Nth:2
                                                                                                      (Nth:2
                                                                                                           (Trans
                                                                                                                (<GHC.ST.STRep
                                                                                                                    GHC.Prim.RealWorld
                                                                                                                    ()>_R
                                                                                                                 ->_R Sym (GHC.ST.N:ST[0]
                                                                                                                               <GHC.Prim.RealWorld>_N
                                                                                                                               <()>_R))
                                                                                                                (((GHC.Prim.State#
                                                                                                                     (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                                                               <GHC.Prim.RealWorld>_N)))_R
                                                                                                                  ->_R ((#,#)
                                                                                                                          <'GHC.Types.TupleRep
                                                                                                                             '[]>_R
                                                                                                                          <'GHC.Types.LiftedRep>_R
                                                                                                                          (GHC.Prim.State#
                                                                                                                             (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                                                                       <GHC.Prim.RealWorld>_N)))_R
                                                                                                                          <()>_R)_R)
                                                                                                                 ->_R <GHC.ST.ST
                                                                                                                         GHC.Prim.RealWorld
                                                                                                                         ()>_R)))) of s'# { DEFAULT ->
                                                                                          (foldlM'_loop
                                                                                             GHC.Types.SPEC
                                                                                             (GHC.Types.I#
                                                                                                (GHC.Prim.+#
                                                                                                   ipv6
                                                                                                   1#))
                                                                                             (GHC.Types.I#
                                                                                                (GHC.Prim.+#
                                                                                                   x
                                                                                                   1#)))
                                                                                            `cast`
                                                                                          (GHC.ST.N:ST[0]
                                                                                               <GHC.Prim.RealWorld>_N
                                                                                               <GHC.Types.Int>_R)
                                                                                            s'#
                                                                                              `cast`
                                                                                            (Nth:2
                                                                                                 (Nth:3
                                                                                                      (Nth:2
                                                                                                           (Trans
                                                                                                                (((GHC.Prim.State#
                                                                                                                     (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                                                          <GHC.Prim.RealWorld>_N))_R
                                                                                                                  ->_R ((#,#)
                                                                                                                          <'GHC.Types.TupleRep
                                                                                                                             '[]>_R
                                                                                                                          <'GHC.Types.LiftedRep>_R
                                                                                                                          (GHC.Prim.State#
                                                                                                                             (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                                                                  <GHC.Prim.RealWorld>_N))_R
                                                                                                                          <()>_R)_R)
                                                                                                                 ->_R <GHC.ST.ST
                                                                                                                         GHC.Prim.RealWorld
                                                                                                                         ()>_R)
                                                                                                                (<GHC.ST.STRep
                                                                                                                    GHC.Prim.RealWorld
                                                                                                                    ()>_R
                                                                                                                 ->_R GHC.ST.N:ST[0]
                                                                                                                          <GHC.Prim.RealWorld>_N
                                                                                                                          <()>_R))))) } }
                                                                                       GHC.Types.True
                                                                                       -> (# s8,
                                                                                             z1 #) } })
                                                                                      `cast`
                                                                                    (Sym (GHC.ST.N:ST[0]
                                                                                              <GHC.Prim.RealWorld>_N
                                                                                              <GHC.Types.Int>_R)) } }
                                                                                } in
                                                                                case (foldlM'_loop
                                                                                        GHC.Types.SPEC
                                                                                        (GHC.Types.I#
                                                                                           0#)
                                                                                        (GHC.Types.I#
                                                                                           0#))
                                                                                       `cast`
                                                                                     (GHC.ST.N:ST[0]
                                                                                          <GHC.Prim.RealWorld>_N
                                                                                          <GHC.Types.Int>_R)
                                                                                       ipv3
                                                                                         `cast`
                                                                                       (Nth:2
                                                                                            (Nth:3
                                                                                                 (Nth:2
                                                                                                      (Trans
                                                                                                           (((GHC.Prim.State#
                                                                                                                (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                                                     <GHC.Prim.RealWorld>_N))_R
                                                                                                             ->_R ((#,#)
                                                                                                                     <'GHC.Types.TupleRep
                                                                                                                        '[]>_R
                                                                                                                     <'GHC.Types.LiftedRep>_R
                                                                                                                     (GHC.Prim.State#
                                                                                                                        (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                                                             <GHC.Prim.RealWorld>_N))_R
                                                                                                                     <Data.Primitive.Array.MutableArray
                                                                                                                        (Control.Monad.Primitive.PrimState
                                                                                                                           (GHC.ST.ST
                                                                                                                              GHC.Prim.RealWorld))
                                                                                                                        (Multilinear.Generic.Tensor
                                                                                                                           a)>_R)_R)
                                                                                                            ->_R <GHC.ST.ST
                                                                                                                    GHC.Prim.RealWorld
                                                                                                                    (Data.Primitive.Array.MutableArray
                                                                                                                       (Control.Monad.Primitive.PrimState
                                                                                                                          (GHC.ST.ST
                                                                                                                             GHC.Prim.RealWorld))
                                                                                                                       (Multilinear.Generic.Tensor
                                                                                                                          a))>_R)
                                                                                                           (<GHC.ST.STRep
                                                                                                               GHC.Prim.RealWorld
                                                                                                               (Data.Primitive.Array.MutableArray
                                                                                                                  (Control.Monad.Primitive.PrimState
                                                                                                                     (GHC.ST.ST
                                                                                                                        GHC.Prim.RealWorld))
                                                                                                                  (Multilinear.Generic.Tensor
                                                                                                                     a))>_R
                                                                                                            ->_R GHC.ST.N:ST[0]
                                                                                                                     <GHC.Prim.RealWorld>_N
                                                                                                                     <Data.Primitive.Array.MutableArray
                                                                                                                        (Control.Monad.Primitive.PrimState
                                                                                                                           (GHC.ST.ST
                                                                                                                              GHC.Prim.RealWorld))
                                                                                                                        (Multilinear.Generic.Tensor
                                                                                                                           a)>_R))))) of ds1 { (#,#) ipv6 ipv7 ->
                                                                                case ipv7 of dt { GHC.Types.I# dt1 ->
                                                                                case GHC.Prim.unsafeFreezeArray#
                                                                                       @ (Control.Monad.Primitive.PrimState
                                                                                            (GHC.ST.ST
                                                                                               GHC.Prim.RealWorld))
                                                                                       @ (Multilinear.Generic.Tensor
                                                                                            a)
                                                                                       ipv4
                                                                                       ipv6
                                                                                         `cast`
                                                                                       (Nth:2
                                                                                            (Nth:2
                                                                                                 (Trans
                                                                                                      (<GHC.ST.STRep
                                                                                                          GHC.Prim.RealWorld
                                                                                                          (Data.Primitive.Array.Array
                                                                                                             (Multilinear.Generic.Tensor
                                                                                                                a))>_R
                                                                                                       ->_R Sym (GHC.ST.N:ST[0]
                                                                                                                     <GHC.Prim.RealWorld>_N
                                                                                                                     <Data.Primitive.Array.Array
                                                                                                                        (Multilinear.Generic.Tensor
                                                                                                                           a)>_R))
                                                                                                      (((GHC.Prim.State#
                                                                                                           (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                                                     <GHC.Prim.RealWorld>_N)))_R
                                                                                                        ->_R ((#,#)
                                                                                                                <'GHC.Types.TupleRep
                                                                                                                   '[]>_R
                                                                                                                <'GHC.Types.LiftedRep>_R
                                                                                                                (GHC.Prim.State#
                                                                                                                   (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                                                             <GHC.Prim.RealWorld>_N)))_R
                                                                                                                <Data.Primitive.Array.Array
                                                                                                                   (Multilinear.Generic.Tensor
                                                                                                                      a)>_R)_R)
                                                                                                       ->_R <GHC.ST.ST
                                                                                                               GHC.Prim.RealWorld
                                                                                                               (Data.Primitive.Array.Array
                                                                                                                  (Multilinear.Generic.Tensor
                                                                                                                     a))>_R)))) of ds3 { (#,#) ipv5 ipv9 ->
                                                                                (# ipv5
                                                                                     `cast`
                                                                                   (Nth:2
                                                                                        (Nth:3
                                                                                             (Nth:2
                                                                                                  (Trans
                                                                                                       (((GHC.Prim.State#
                                                                                                            (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                                                 <GHC.Prim.RealWorld>_N))_R
                                                                                                         ->_R ((#,#)
                                                                                                                 <'GHC.Types.TupleRep
                                                                                                                    '[]>_R
                                                                                                                 <'GHC.Types.LiftedRep>_R
                                                                                                                 (GHC.Prim.State#
                                                                                                                    (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                                                         <GHC.Prim.RealWorld>_N))_R
                                                                                                                 <Data.Primitive.Array.Array
                                                                                                                    (Multilinear.Generic.Tensor
                                                                                                                       a)>_R)_R)
                                                                                                        ->_R <GHC.ST.ST
                                                                                                                GHC.Prim.RealWorld
                                                                                                                (Data.Primitive.Array.Array
                                                                                                                   (Multilinear.Generic.Tensor
                                                                                                                      a))>_R)
                                                                                                       (<GHC.ST.STRep
                                                                                                           GHC.Prim.RealWorld
                                                                                                           (Data.Primitive.Array.Array
                                                                                                              (Multilinear.Generic.Tensor
                                                                                                                 a))>_R
                                                                                                        ->_R GHC.ST.N:ST[0]
                                                                                                                 <GHC.Prim.RealWorld>_N
                                                                                                                 <Data.Primitive.Array.Array
                                                                                                                    (Multilinear.Generic.Tensor
                                                                                                                       a)>_R))))),
                                                                                   Data.Vector.Vector
                                                                                     @ (Multilinear.Generic.Tensor
                                                                                          a)
                                                                                     0#
                                                                                     dt1
                                                                                     ipv9 #) } } } }) of ds1 { (#,#) ipv3 ipv4 ->
                                                                        ipv4 } })
                                                                  GHC.Types.True
                                                                  -> Multilinear.Generic.FiniteTensor
                                                                       @ a
                                                                       index2
                                                                       (case v2 of v4 { Data.Vector.Vector ipv ipv1 ipv2 ->
                                                                        case GHC.Magic.runRW#
                                                                               @ ('GHC.Types.TupleRep
                                                                                    '['GHC.Types.TupleRep
                                                                                        '[],
                                                                                      'GHC.Types.LiftedRep])
                                                                               @ (# GHC.Prim.State#
                                                                                      GHC.Prim.RealWorld,
                                                                                    Data.Vector.Vector
                                                                                      (Multilinear.Generic.Tensor
                                                                                         a) #)
                                                                               (\ (s1 :: GHC.Prim.State#
                                                                                           GHC.Prim.RealWorld)[OneShot] ->
                                                                                case GHC.Prim.newArray#
                                                                                       @ (Multilinear.Generic.Tensor
                                                                                            a)
                                                                                       @ (Control.Monad.Primitive.PrimState
                                                                                            (GHC.ST.ST
                                                                                               GHC.Prim.RealWorld))
                                                                                       ipv1
                                                                                       (Data.Vector.Mutable.uninitialised
                                                                                          @ (Multilinear.Generic.Tensor
                                                                                               a))
                                                                                       s1
                                                                                         `cast`
                                                                                       (Nth:2
                                                                                            (Nth:2
                                                                                                 (Trans
                                                                                                      (<GHC.ST.STRep
                                                                                                          GHC.Prim.RealWorld
                                                                                                          (Data.Primitive.Array.MutableArray
                                                                                                             (Control.Monad.Primitive.PrimState
                                                                                                                (GHC.ST.ST
                                                                                                                   GHC.Prim.RealWorld))
                                                                                                             (Multilinear.Generic.Tensor
                                                                                                                a))>_R
                                                                                                       ->_R Sym (GHC.ST.N:ST[0]
                                                                                                                     <GHC.Prim.RealWorld>_N
                                                                                                                     <Data.Primitive.Array.MutableArray
                                                                                                                        (Control.Monad.Primitive.PrimState
                                                                                                                           (GHC.ST.ST
                                                                                                                              GHC.Prim.RealWorld))
                                                                                                                        (Multilinear.Generic.Tensor
                                                                                                                           a)>_R))
                                                                                                      (((GHC.Prim.State#
                                                                                                           (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                                                     <GHC.Prim.RealWorld>_N)))_R
                                                                                                        ->_R ((#,#)
                                                                                                                <'GHC.Types.TupleRep
                                                                                                                   '[]>_R
                                                                                                                <'GHC.Types.LiftedRep>_R
                                                                                                                (GHC.Prim.State#
                                                                                                                   (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                                                             <GHC.Prim.RealWorld>_N)))_R
                                                                                                                <Data.Primitive.Array.MutableArray
                                                                                                                   (Control.Monad.Primitive.PrimState
                                                                                                                      (GHC.ST.ST
                                                                                                                         GHC.Prim.RealWorld))
                                                                                                                   (Multilinear.Generic.Tensor
                                                                                                                      a)>_R)_R)
                                                                                                       ->_R <GHC.ST.ST
                                                                                                               GHC.Prim.RealWorld
                                                                                                               (Data.Primitive.Array.MutableArray
                                                                                                                  (Control.Monad.Primitive.PrimState
                                                                                                                     (GHC.ST.ST
                                                                                                                        GHC.Prim.RealWorld))
                                                                                                                  (Multilinear.Generic.Tensor
                                                                                                                     a))>_R)))) of ds2 { (#,#) ipv3 ipv4 ->
                                                                                letrec {
                                                                                  foldlM'_loop :: GHC.Types.SPEC
                                                                                                  -> GHC.Types.Int
                                                                                                  -> GHC.Types.Int
                                                                                                  -> GHC.ST.ST
                                                                                                       GHC.Prim.RealWorld
                                                                                                       GHC.Types.Int
                                                                                    {- Arity: 3 -}
                                                                                  = \ (ds4 :: GHC.Types.SPEC)
                                                                                      (z :: GHC.Types.Int)
                                                                                      (s7 :: GHC.Types.Int) ->
                                                                                    case ds4 of ds5 { DEFAULT ->
                                                                                    case z of z1 { GHC.Types.I# ipv6 ->
                                                                                    (\ (s8 :: GHC.Prim.State#
                                                                                                GHC.Prim.RealWorld) ->
                                                                                     case s7 of wild5 { GHC.Types.I# x ->
                                                                                     case GHC.Prim.tagToEnum#
                                                                                            @ GHC.Types.Bool
                                                                                            (GHC.Prim.>=#
                                                                                               x
                                                                                               ipv1) of wild6 {
                                                                                       GHC.Types.False
                                                                                       -> case GHC.Prim.indexArray#
                                                                                                 @ (Multilinear.Generic.Tensor
                                                                                                      a)
                                                                                                 ipv2
                                                                                                 (GHC.Prim.+#
                                                                                                    ipv
                                                                                                    x) of ds3 { Unit# ipv5 ->
                                                                                          case GHC.Prim.writeArray#
                                                                                                 @ (Control.Monad.Primitive.PrimState
                                                                                                      (GHC.ST.ST
                                                                                                         GHC.Prim.RealWorld))
                                                                                                 @ (Multilinear.Generic.Tensor
                                                                                                      a)
                                                                                                 ipv4
                                                                                                 ipv6
                                                                                                 (Multilinear.Generic.$w_elemByElem'
                                                                                                    @ a
                                                                                                    wild2
                                                                                                    ipv5
                                                                                                    w2
                                                                                                    w3)
                                                                                                 s8
                                                                                                   `cast`
                                                                                                 (Nth:2
                                                                                                      (Nth:2
                                                                                                           (Trans
                                                                                                                (<GHC.ST.STRep
                                                                                                                    GHC.Prim.RealWorld
                                                                                                                    ()>_R
                                                                                                                 ->_R Sym (GHC.ST.N:ST[0]
                                                                                                                               <GHC.Prim.RealWorld>_N
                                                                                                                               <()>_R))
                                                                                                                (((GHC.Prim.State#
                                                                                                                     (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                                                               <GHC.Prim.RealWorld>_N)))_R
                                                                                                                  ->_R ((#,#)
                                                                                                                          <'GHC.Types.TupleRep
                                                                                                                             '[]>_R
                                                                                                                          <'GHC.Types.LiftedRep>_R
                                                                                                                          (GHC.Prim.State#
                                                                                                                             (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                                                                       <GHC.Prim.RealWorld>_N)))_R
                                                                                                                          <()>_R)_R)
                                                                                                                 ->_R <GHC.ST.ST
                                                                                                                         GHC.Prim.RealWorld
                                                                                                                         ()>_R)))) of s'# { DEFAULT ->
                                                                                          (foldlM'_loop
                                                                                             GHC.Types.SPEC
                                                                                             (GHC.Types.I#
                                                                                                (GHC.Prim.+#
                                                                                                   ipv6
                                                                                                   1#))
                                                                                             (GHC.Types.I#
                                                                                                (GHC.Prim.+#
                                                                                                   x
                                                                                                   1#)))
                                                                                            `cast`
                                                                                          (GHC.ST.N:ST[0]
                                                                                               <GHC.Prim.RealWorld>_N
                                                                                               <GHC.Types.Int>_R)
                                                                                            s'#
                                                                                              `cast`
                                                                                            (Nth:2
                                                                                                 (Nth:3
                                                                                                      (Nth:2
                                                                                                           (Trans
                                                                                                                (((GHC.Prim.State#
                                                                                                                     (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                                                          <GHC.Prim.RealWorld>_N))_R
                                                                                                                  ->_R ((#,#)
                                                                                                                          <'GHC.Types.TupleRep
                                                                                                                             '[]>_R
                                                                                                                          <'GHC.Types.LiftedRep>_R
                                                                                                                          (GHC.Prim.State#
                                                                                                                             (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                                                                  <GHC.Prim.RealWorld>_N))_R
                                                                                                                          <()>_R)_R)
                                                                                                                 ->_R <GHC.ST.ST
                                                                                                                         GHC.Prim.RealWorld
                                                                                                                         ()>_R)
                                                                                                                (<GHC.ST.STRep
                                                                                                                    GHC.Prim.RealWorld
                                                                                                                    ()>_R
                                                                                                                 ->_R GHC.ST.N:ST[0]
                                                                                                                          <GHC.Prim.RealWorld>_N
                                                                                                                          <()>_R))))) } }
                                                                                       GHC.Types.True
                                                                                       -> (# s8,
                                                                                             z1 #) } })
                                                                                      `cast`
                                                                                    (Sym (GHC.ST.N:ST[0]
                                                                                              <GHC.Prim.RealWorld>_N
                                                                                              <GHC.Types.Int>_R)) } }
                                                                                } in
                                                                                case (foldlM'_loop
                                                                                        GHC.Types.SPEC
                                                                                        (GHC.Types.I#
                                                                                           0#)
                                                                                        (GHC.Types.I#
                                                                                           0#))
                                                                                       `cast`
                                                                                     (GHC.ST.N:ST[0]
                                                                                          <GHC.Prim.RealWorld>_N
                                                                                          <GHC.Types.Int>_R)
                                                                                       ipv3
                                                                                         `cast`
                                                                                       (Nth:2
                                                                                            (Nth:3
                                                                                                 (Nth:2
                                                                                                      (Trans
                                                                                                           (((GHC.Prim.State#
                                                                                                                (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                                                     <GHC.Prim.RealWorld>_N))_R
                                                                                                             ->_R ((#,#)
                                                                                                                     <'GHC.Types.TupleRep
                                                                                                                        '[]>_R
                                                                                                                     <'GHC.Types.LiftedRep>_R
                                                                                                                     (GHC.Prim.State#
                                                                                                                        (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                                                             <GHC.Prim.RealWorld>_N))_R
                                                                                                                     <Data.Primitive.Array.MutableArray
                                                                                                                        (Control.Monad.Primitive.PrimState
                                                                                                                           (GHC.ST.ST
                                                                                                                              GHC.Prim.RealWorld))
                                                                                                                        (Multilinear.Generic.Tensor
                                                                                                                           a)>_R)_R)
                                                                                                            ->_R <GHC.ST.ST
                                                                                                                    GHC.Prim.RealWorld
                                                                                                                    (Data.Primitive.Array.MutableArray
                                                                                                                       (Control.Monad.Primitive.PrimState
                                                                                                                          (GHC.ST.ST
                                                                                                                             GHC.Prim.RealWorld))
                                                                                                                       (Multilinear.Generic.Tensor
                                                                                                                          a))>_R)
                                                                                                           (<GHC.ST.STRep
                                                                                                               GHC.Prim.RealWorld
                                                                                                               (Data.Primitive.Array.MutableArray
                                                                                                                  (Control.Monad.Primitive.PrimState
                                                                                                                     (GHC.ST.ST
                                                                                                                        GHC.Prim.RealWorld))
                                                                                                                  (Multilinear.Generic.Tensor
                                                                                                                     a))>_R
                                                                                                            ->_R GHC.ST.N:ST[0]
                                                                                                                     <GHC.Prim.RealWorld>_N
                                                                                                                     <Data.Primitive.Array.MutableArray
                                                                                                                        (Control.Monad.Primitive.PrimState
                                                                                                                           (GHC.ST.ST
                                                                                                                              GHC.Prim.RealWorld))
                                                                                                                        (Multilinear.Generic.Tensor
                                                                                                                           a)>_R))))) of ds1 { (#,#) ipv6 ipv7 ->
                                                                                case ipv7 of dt { GHC.Types.I# dt1 ->
                                                                                case GHC.Prim.unsafeFreezeArray#
                                                                                       @ (Control.Monad.Primitive.PrimState
                                                                                            (GHC.ST.ST
                                                                                               GHC.Prim.RealWorld))
                                                                                       @ (Multilinear.Generic.Tensor
                                                                                            a)
                                                                                       ipv4
                                                                                       ipv6
                                                                                         `cast`
                                                                                       (Nth:2
                                                                                            (Nth:2
                                                                                                 (Trans
                                                                                                      (<GHC.ST.STRep
                                                                                                          GHC.Prim.RealWorld
                                                                                                          (Data.Primitive.Array.Array
                                                                                                             (Multilinear.Generic.Tensor
                                                                                                                a))>_R
                                                                                                       ->_R Sym (GHC.ST.N:ST[0]
                                                                                                                     <GHC.Prim.RealWorld>_N
                                                                                                                     <Data.Primitive.Array.Array
                                                                                                                        (Multilinear.Generic.Tensor
                                                                                                                           a)>_R))
                                                                                                      (((GHC.Prim.State#
                                                                                                           (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                                                     <GHC.Prim.RealWorld>_N)))_R
                                                                                                        ->_R ((#,#)
                                                                                                                <'GHC.Types.TupleRep
                                                                                                                   '[]>_R
                                                                                                                <'GHC.Types.LiftedRep>_R
                                                                                                                (GHC.Prim.State#
                                                                                                                   (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                                                             <GHC.Prim.RealWorld>_N)))_R
                                                                                                                <Data.Primitive.Array.Array
                                                                                                                   (Multilinear.Generic.Tensor
                                                                                                                      a)>_R)_R)
                                                                                                       ->_R <GHC.ST.ST
                                                                                                               GHC.Prim.RealWorld
                                                                                                               (Data.Primitive.Array.Array
                                                                                                                  (Multilinear.Generic.Tensor
                                                                                                                     a))>_R)))) of ds3 { (#,#) ipv5 ipv9 ->
                                                                                (# ipv5
                                                                                     `cast`
                                                                                   (Nth:2
                                                                                        (Nth:3
                                                                                             (Nth:2
                                                                                                  (Trans
                                                                                                       (((GHC.Prim.State#
                                                                                                            (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                                                 <GHC.Prim.RealWorld>_N))_R
                                                                                                         ->_R ((#,#)
                                                                                                                 <'GHC.Types.TupleRep
                                                                                                                    '[]>_R
                                                                                                                 <'GHC.Types.LiftedRep>_R
                                                                                                                 (GHC.Prim.State#
                                                                                                                    (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                                                         <GHC.Prim.RealWorld>_N))_R
                                                                                                                 <Data.Primitive.Array.Array
                                                                                                                    (Multilinear.Generic.Tensor
                                                                                                                       a)>_R)_R)
                                                                                                        ->_R <GHC.ST.ST
                                                                                                                GHC.Prim.RealWorld
                                                                                                                (Data.Primitive.Array.Array
                                                                                                                   (Multilinear.Generic.Tensor
                                                                                                                      a))>_R)
                                                                                                       (<GHC.ST.STRep
                                                                                                           GHC.Prim.RealWorld
                                                                                                           (Data.Primitive.Array.Array
                                                                                                              (Multilinear.Generic.Tensor
                                                                                                                 a))>_R
                                                                                                        ->_R GHC.ST.N:ST[0]
                                                                                                                 <GHC.Prim.RealWorld>_N
                                                                                                                 <Data.Primitive.Array.Array
                                                                                                                    (Multilinear.Generic.Tensor
                                                                                                                       a)>_R))))),
                                                                                   Data.Vector.Vector
                                                                                     @ (Multilinear.Generic.Tensor
                                                                                          a)
                                                                                     0#
                                                                                     dt1
                                                                                     ipv9 #) } } } }) of ds1 { (#,#) ipv3 ipv4 ->
                                                                        ipv4 } }) }
                                                            } in
                                                            case index1 of wild4 {
                                                              Multilinear.Index.Finite.Covariant ds1 ds2
                                                              -> case index2 of wild5 {
                                                                   Multilinear.Index.Finite.Covariant ds4 ds5
                                                                   -> case GHC.Base.eqString
                                                                             ds2
                                                                             ds5 of wild6 {
                                                                        GHC.Types.False -> $j
                                                                        GHC.Types.True
                                                                        -> w3 wild2 wild3 }
                                                                   Multilinear.Index.Finite.Contravariant ds4 ds5
                                                                   -> case GHC.Base.eqString
                                                                             ds2
                                                                             ds5 of wild6 {
                                                                        GHC.Types.False -> $j
                                                                        GHC.Types.True
                                                                        -> w3 wild2 wild3 }
                                                                   Multilinear.Index.Finite.Indifferent ds4 ds5
                                                                   -> case GHC.Base.eqString
                                                                             ds2
                                                                             ds5 of wild6 {
                                                                        GHC.Types.False -> $j
                                                                        GHC.Types.True
                                                                        -> w3 wild2 wild3 } }
                                                              Multilinear.Index.Finite.Contravariant ds1 ds2
                                                              -> case index2 of wild5 {
                                                                   Multilinear.Index.Finite.Covariant ds4 ds5
                                                                   -> case GHC.Base.eqString
                                                                             ds2
                                                                             ds5 of wild6 {
                                                                        GHC.Types.False -> $j
                                                                        GHC.Types.True
                                                                        -> w3 wild2 wild3 }
                                                                   Multilinear.Index.Finite.Contravariant ds4 ds5
                                                                   -> case GHC.Base.eqString
                                                                             ds2
                                                                             ds5 of wild6 {
                                                                        GHC.Types.False -> $j
                                                                        GHC.Types.True
                                                                        -> w3 wild2 wild3 }
                                                                   Multilinear.Index.Finite.Indifferent ds4 ds5
                                                                   -> case GHC.Base.eqString
                                                                             ds2
                                                                             ds5 of wild6 {
                                                                        GHC.Types.False -> $j
                                                                        GHC.Types.True
                                                                        -> w3 wild2 wild3 } }
                                                              Multilinear.Index.Finite.Indifferent ds1 ds2
                                                              -> case index2 of wild5 {
                                                                   Multilinear.Index.Finite.Covariant ds4 ds5
                                                                   -> case GHC.Base.eqString
                                                                             ds2
                                                                             ds5 of wild6 {
                                                                        GHC.Types.False -> $j
                                                                        GHC.Types.True
                                                                        -> w3 wild2 wild3 }
                                                                   Multilinear.Index.Finite.Contravariant ds4 ds5
                                                                   -> case GHC.Base.eqString
                                                                             ds2
                                                                             ds5 of wild6 {
                                                                        GHC.Types.False -> $j
                                                                        GHC.Types.True
                                                                        -> w3 wild2 wild3 }
                                                                   Multilinear.Index.Finite.Indifferent ds4 ds5
                                                                   -> case GHC.Base.eqString
                                                                             ds2
                                                                             ds5 of wild6 {
                                                                        GHC.Types.False -> $j
                                                                        GHC.Types.True
                                                                        -> w3 wild2 wild3 } } }
                                                         Multilinear.Generic.InfiniteTensor index2 v2
                                                         -> let {
                                                              $j :: Multilinear.Generic.Tensor a
                                                                <join 0>
                                                              = letrec {
                                                                  go8 :: [Multilinear.Index.TIndex]
                                                                         -> [[GHC.Types.Char]]
                                                                    {- Arity: 1 -}
                                                                  = \ (ds :: [Multilinear.Index.TIndex]) ->
                                                                    case ds of wild4 {
                                                                      []
                                                                      -> GHC.Types.[]
                                                                           @ [GHC.Types.Char]
                                                                      : y ys
                                                                      -> GHC.Types.:
                                                                           @ [GHC.Types.Char]
                                                                           (Multilinear.Index.tIndexName
                                                                              y)
                                                                           (go8 ys) }
                                                                } in
                                                                case GHC.List.elem
                                                                       @ GHC.Base.String
                                                                       GHC.Classes.$fEq[]_$s$fEq[]1
                                                                       (case index1 of wild4 {
                                                                          Multilinear.Index.Finite.Covariant ds1 ds2
                                                                          -> ds2
                                                                          Multilinear.Index.Finite.Contravariant ds1 ds2
                                                                          -> ds2
                                                                          Multilinear.Index.Finite.Indifferent ds1 ds2
                                                                          -> ds2 })
                                                                       (go8
                                                                          (Multilinear.Generic.$fMultilinearTensora_$s$w$cindices
                                                                             @ a
                                                                             index2
                                                                             v2)) of wild4 {
                                                                  GHC.Types.False
                                                                  -> Multilinear.Generic.FiniteTensor
                                                                       @ a
                                                                       index1
                                                                       (case v1 of v4 { Data.Vector.Vector ipv ipv1 ipv2 ->
                                                                        case GHC.Magic.runRW#
                                                                               @ ('GHC.Types.TupleRep
                                                                                    '['GHC.Types.TupleRep
                                                                                        '[],
                                                                                      'GHC.Types.LiftedRep])
                                                                               @ (# GHC.Prim.State#
                                                                                      GHC.Prim.RealWorld,
                                                                                    Data.Vector.Vector
                                                                                      (Multilinear.Generic.Tensor
                                                                                         a) #)
                                                                               (\ (s1 :: GHC.Prim.State#
                                                                                           GHC.Prim.RealWorld)[OneShot] ->
                                                                                case GHC.Prim.newArray#
                                                                                       @ (Multilinear.Generic.Tensor
                                                                                            a)
                                                                                       @ (Control.Monad.Primitive.PrimState
                                                                                            (GHC.ST.ST
                                                                                               GHC.Prim.RealWorld))
                                                                                       ipv1
                                                                                       (Data.Vector.Mutable.uninitialised
                                                                                          @ (Multilinear.Generic.Tensor
                                                                                               a))
                                                                                       s1
                                                                                         `cast`
                                                                                       (Nth:2
                                                                                            (Nth:2
                                                                                                 (Trans
                                                                                                      (<GHC.ST.STRep
                                                                                                          GHC.Prim.RealWorld
                                                                                                          (Data.Primitive.Array.MutableArray
                                                                                                             (Control.Monad.Primitive.PrimState
                                                                                                                (GHC.ST.ST
                                                                                                                   GHC.Prim.RealWorld))
                                                                                                             (Multilinear.Generic.Tensor
                                                                                                                a))>_R
                                                                                                       ->_R Sym (GHC.ST.N:ST[0]
                                                                                                                     <GHC.Prim.RealWorld>_N
                                                                                                                     <Data.Primitive.Array.MutableArray
                                                                                                                        (Control.Monad.Primitive.PrimState
                                                                                                                           (GHC.ST.ST
                                                                                                                              GHC.Prim.RealWorld))
                                                                                                                        (Multilinear.Generic.Tensor
                                                                                                                           a)>_R))
                                                                                                      (((GHC.Prim.State#
                                                                                                           (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                                                     <GHC.Prim.RealWorld>_N)))_R
                                                                                                        ->_R ((#,#)
                                                                                                                <'GHC.Types.TupleRep
                                                                                                                   '[]>_R
                                                                                                                <'GHC.Types.LiftedRep>_R
                                                                                                                (GHC.Prim.State#
                                                                                                                   (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                                                             <GHC.Prim.RealWorld>_N)))_R
                                                                                                                <Data.Primitive.Array.MutableArray
                                                                                                                   (Control.Monad.Primitive.PrimState
                                                                                                                      (GHC.ST.ST
                                                                                                                         GHC.Prim.RealWorld))
                                                                                                                   (Multilinear.Generic.Tensor
                                                                                                                      a)>_R)_R)
                                                                                                       ->_R <GHC.ST.ST
                                                                                                               GHC.Prim.RealWorld
                                                                                                               (Data.Primitive.Array.MutableArray
                                                                                                                  (Control.Monad.Primitive.PrimState
                                                                                                                     (GHC.ST.ST
                                                                                                                        GHC.Prim.RealWorld))
                                                                                                                  (Multilinear.Generic.Tensor
                                                                                                                     a))>_R)))) of ds2 { (#,#) ipv3 ipv4 ->
                                                                                letrec {
                                                                                  foldlM'_loop :: GHC.Types.SPEC
                                                                                                  -> GHC.Types.Int
                                                                                                  -> GHC.Types.Int
                                                                                                  -> GHC.ST.ST
                                                                                                       GHC.Prim.RealWorld
                                                                                                       GHC.Types.Int
                                                                                    {- Arity: 3 -}
                                                                                  = \ (ds4 :: GHC.Types.SPEC)
                                                                                      (z :: GHC.Types.Int)
                                                                                      (s7 :: GHC.Types.Int) ->
                                                                                    case ds4 of ds5 { DEFAULT ->
                                                                                    case z of z1 { GHC.Types.I# ipv6 ->
                                                                                    (\ (s8 :: GHC.Prim.State#
                                                                                                GHC.Prim.RealWorld) ->
                                                                                     case s7 of wild5 { GHC.Types.I# x ->
                                                                                     case GHC.Prim.tagToEnum#
                                                                                            @ GHC.Types.Bool
                                                                                            (GHC.Prim.>=#
                                                                                               x
                                                                                               ipv1) of wild6 {
                                                                                       GHC.Types.False
                                                                                       -> case GHC.Prim.indexArray#
                                                                                                 @ (Multilinear.Generic.Tensor
                                                                                                      a)
                                                                                                 ipv2
                                                                                                 (GHC.Prim.+#
                                                                                                    ipv
                                                                                                    x) of ds3 { Unit# ipv5 ->
                                                                                          case GHC.Prim.writeArray#
                                                                                                 @ (Control.Monad.Primitive.PrimState
                                                                                                      (GHC.ST.ST
                                                                                                         GHC.Prim.RealWorld))
                                                                                                 @ (Multilinear.Generic.Tensor
                                                                                                      a)
                                                                                                 ipv4
                                                                                                 ipv6
                                                                                                 (Multilinear.Generic.$w_elemByElem'
                                                                                                    @ a
                                                                                                    ipv5
                                                                                                    wild3
                                                                                                    w2
                                                                                                    w3)
                                                                                                 s8
                                                                                                   `cast`
                                                                                                 (Nth:2
                                                                                                      (Nth:2
                                                                                                           (Trans
                                                                                                                (<GHC.ST.STRep
                                                                                                                    GHC.Prim.RealWorld
                                                                                                                    ()>_R
                                                                                                                 ->_R Sym (GHC.ST.N:ST[0]
                                                                                                                               <GHC.Prim.RealWorld>_N
                                                                                                                               <()>_R))
                                                                                                                (((GHC.Prim.State#
                                                                                                                     (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                                                               <GHC.Prim.RealWorld>_N)))_R
                                                                                                                  ->_R ((#,#)
                                                                                                                          <'GHC.Types.TupleRep
                                                                                                                             '[]>_R
                                                                                                                          <'GHC.Types.LiftedRep>_R
                                                                                                                          (GHC.Prim.State#
                                                                                                                             (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                                                                       <GHC.Prim.RealWorld>_N)))_R
                                                                                                                          <()>_R)_R)
                                                                                                                 ->_R <GHC.ST.ST
                                                                                                                         GHC.Prim.RealWorld
                                                                                                                         ()>_R)))) of s'# { DEFAULT ->
                                                                                          (foldlM'_loop
                                                                                             GHC.Types.SPEC
                                                                                             (GHC.Types.I#
                                                                                                (GHC.Prim.+#
                                                                                                   ipv6
                                                                                                   1#))
                                                                                             (GHC.Types.I#
                                                                                                (GHC.Prim.+#
                                                                                                   x
                                                                                                   1#)))
                                                                                            `cast`
                                                                                          (GHC.ST.N:ST[0]
                                                                                               <GHC.Prim.RealWorld>_N
                                                                                               <GHC.Types.Int>_R)
                                                                                            s'#
                                                                                              `cast`
                                                                                            (Nth:2
                                                                                                 (Nth:3
                                                                                                      (Nth:2
                                                                                                           (Trans
                                                                                                                (((GHC.Prim.State#
                                                                                                                     (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                                                          <GHC.Prim.RealWorld>_N))_R
                                                                                                                  ->_R ((#,#)
                                                                                                                          <'GHC.Types.TupleRep
                                                                                                                             '[]>_R
                                                                                                                          <'GHC.Types.LiftedRep>_R
                                                                                                                          (GHC.Prim.State#
                                                                                                                             (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                                                                  <GHC.Prim.RealWorld>_N))_R
                                                                                                                          <()>_R)_R)
                                                                                                                 ->_R <GHC.ST.ST
                                                                                                                         GHC.Prim.RealWorld
                                                                                                                         ()>_R)
                                                                                                                (<GHC.ST.STRep
                                                                                                                    GHC.Prim.RealWorld
                                                                                                                    ()>_R
                                                                                                                 ->_R GHC.ST.N:ST[0]
                                                                                                                          <GHC.Prim.RealWorld>_N
                                                                                                                          <()>_R))))) } }
                                                                                       GHC.Types.True
                                                                                       -> (# s8,
                                                                                             z1 #) } })
                                                                                      `cast`
                                                                                    (Sym (GHC.ST.N:ST[0]
                                                                                              <GHC.Prim.RealWorld>_N
                                                                                              <GHC.Types.Int>_R)) } }
                                                                                } in
                                                                                case (foldlM'_loop
                                                                                        GHC.Types.SPEC
                                                                                        (GHC.Types.I#
                                                                                           0#)
                                                                                        (GHC.Types.I#
                                                                                           0#))
                                                                                       `cast`
                                                                                     (GHC.ST.N:ST[0]
                                                                                          <GHC.Prim.RealWorld>_N
                                                                                          <GHC.Types.Int>_R)
                                                                                       ipv3
                                                                                         `cast`
                                                                                       (Nth:2
                                                                                            (Nth:3
                                                                                                 (Nth:2
                                                                                                      (Trans
                                                                                                           (((GHC.Prim.State#
                                                                                                                (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                                                     <GHC.Prim.RealWorld>_N))_R
                                                                                                             ->_R ((#,#)
                                                                                                                     <'GHC.Types.TupleRep
                                                                                                                        '[]>_R
                                                                                                                     <'GHC.Types.LiftedRep>_R
                                                                                                                     (GHC.Prim.State#
                                                                                                                        (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                                                             <GHC.Prim.RealWorld>_N))_R
                                                                                                                     <Data.Primitive.Array.MutableArray
                                                                                                                        (Control.Monad.Primitive.PrimState
                                                                                                                           (GHC.ST.ST
                                                                                                                              GHC.Prim.RealWorld))
                                                                                                                        (Multilinear.Generic.Tensor
                                                                                                                           a)>_R)_R)
                                                                                                            ->_R <GHC.ST.ST
                                                                                                                    GHC.Prim.RealWorld
                                                                                                                    (Data.Primitive.Array.MutableArray
                                                                                                                       (Control.Monad.Primitive.PrimState
                                                                                                                          (GHC.ST.ST
                                                                                                                             GHC.Prim.RealWorld))
                                                                                                                       (Multilinear.Generic.Tensor
                                                                                                                          a))>_R)
                                                                                                           (<GHC.ST.STRep
                                                                                                               GHC.Prim.RealWorld
                                                                                                               (Data.Primitive.Array.MutableArray
                                                                                                                  (Control.Monad.Primitive.PrimState
                                                                                                                     (GHC.ST.ST
                                                                                                                        GHC.Prim.RealWorld))
                                                                                                                  (Multilinear.Generic.Tensor
                                                                                                                     a))>_R
                                                                                                            ->_R GHC.ST.N:ST[0]
                                                                                                                     <GHC.Prim.RealWorld>_N
                                                                                                                     <Data.Primitive.Array.MutableArray
                                                                                                                        (Control.Monad.Primitive.PrimState
                                                                                                                           (GHC.ST.ST
                                                                                                                              GHC.Prim.RealWorld))
                                                                                                                        (Multilinear.Generic.Tensor
                                                                                                                           a)>_R))))) of ds1 { (#,#) ipv6 ipv7 ->
                                                                                case ipv7 of dt { GHC.Types.I# dt1 ->
                                                                                case GHC.Prim.unsafeFreezeArray#
                                                                                       @ (Control.Monad.Primitive.PrimState
                                                                                            (GHC.ST.ST
                                                                                               GHC.Prim.RealWorld))
                                                                                       @ (Multilinear.Generic.Tensor
                                                                                            a)
                                                                                       ipv4
                                                                                       ipv6
                                                                                         `cast`
                                                                                       (Nth:2
                                                                                            (Nth:2
                                                                                                 (Trans
                                                                                                      (<GHC.ST.STRep
                                                                                                          GHC.Prim.RealWorld
                                                                                                          (Data.Primitive.Array.Array
                                                                                                             (Multilinear.Generic.Tensor
                                                                                                                a))>_R
                                                                                                       ->_R Sym (GHC.ST.N:ST[0]
                                                                                                                     <GHC.Prim.RealWorld>_N
                                                                                                                     <Data.Primitive.Array.Array
                                                                                                                        (Multilinear.Generic.Tensor
                                                                                                                           a)>_R))
                                                                                                      (((GHC.Prim.State#
                                                                                                           (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                                                     <GHC.Prim.RealWorld>_N)))_R
                                                                                                        ->_R ((#,#)
                                                                                                                <'GHC.Types.TupleRep
                                                                                                                   '[]>_R
                                                                                                                <'GHC.Types.LiftedRep>_R
                                                                                                                (GHC.Prim.State#
                                                                                                                   (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                                                             <GHC.Prim.RealWorld>_N)))_R
                                                                                                                <Data.Primitive.Array.Array
                                                                                                                   (Multilinear.Generic.Tensor
                                                                                                                      a)>_R)_R)
                                                                                                       ->_R <GHC.ST.ST
                                                                                                               GHC.Prim.RealWorld
                                                                                                               (Data.Primitive.Array.Array
                                                                                                                  (Multilinear.Generic.Tensor
                                                                                                                     a))>_R)))) of ds3 { (#,#) ipv5 ipv9 ->
                                                                                (# ipv5
                                                                                     `cast`
                                                                                   (Nth:2
                                                                                        (Nth:3
                                                                                             (Nth:2
                                                                                                  (Trans
                                                                                                       (((GHC.Prim.State#
                                                                                                            (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                                                 <GHC.Prim.RealWorld>_N))_R
                                                                                                         ->_R ((#,#)
                                                                                                                 <'GHC.Types.TupleRep
                                                                                                                    '[]>_R
                                                                                                                 <'GHC.Types.LiftedRep>_R
                                                                                                                 (GHC.Prim.State#
                                                                                                                    (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                                                         <GHC.Prim.RealWorld>_N))_R
                                                                                                                 <Data.Primitive.Array.Array
                                                                                                                    (Multilinear.Generic.Tensor
                                                                                                                       a)>_R)_R)
                                                                                                        ->_R <GHC.ST.ST
                                                                                                                GHC.Prim.RealWorld
                                                                                                                (Data.Primitive.Array.Array
                                                                                                                   (Multilinear.Generic.Tensor
                                                                                                                      a))>_R)
                                                                                                       (<GHC.ST.STRep
                                                                                                           GHC.Prim.RealWorld
                                                                                                           (Data.Primitive.Array.Array
                                                                                                              (Multilinear.Generic.Tensor
                                                                                                                 a))>_R
                                                                                                        ->_R GHC.ST.N:ST[0]
                                                                                                                 <GHC.Prim.RealWorld>_N
                                                                                                                 <Data.Primitive.Array.Array
                                                                                                                    (Multilinear.Generic.Tensor
                                                                                                                       a)>_R))))),
                                                                                   Data.Vector.Vector
                                                                                     @ (Multilinear.Generic.Tensor
                                                                                          a)
                                                                                     0#
                                                                                     dt1
                                                                                     ipv9 #) } } } }) of ds1 { (#,#) ipv3 ipv4 ->
                                                                        ipv4 } })
                                                                  GHC.Types.True
                                                                  -> Multilinear.Generic.InfiniteTensor
                                                                       @ a
                                                                       index2
                                                                       (letrec {
                                                                          go9 :: [Multilinear.Generic.Tensor
                                                                                    a]
                                                                                 -> [Multilinear.Generic.Tensor
                                                                                       a]
                                                                            {- Arity: 1 -}
                                                                          = \ (ds :: [Multilinear.Generic.Tensor
                                                                                        a]) ->
                                                                            case ds of wild5 {
                                                                              []
                                                                              -> GHC.Types.[]
                                                                                   @ (Multilinear.Generic.Tensor
                                                                                        a)
                                                                              : y ys
                                                                              -> GHC.Types.:
                                                                                   @ (Multilinear.Generic.Tensor
                                                                                        a)
                                                                                   (Multilinear.Generic.$w_elemByElem'
                                                                                      @ a
                                                                                      wild2
                                                                                      y
                                                                                      w2
                                                                                      w3)
                                                                                   (go9 ys) }
                                                                        } in
                                                                        go9 v2) }
                                                            } in
                                                            case index1 of wild4 {
                                                              Multilinear.Index.Finite.Covariant ds1 ds2
                                                              -> case index2 of wild5 {
                                                                   Multilinear.Index.Infinite.Covariant ds4
                                                                   -> case GHC.Base.eqString
                                                                             ds2
                                                                             ds4 of wild6 {
                                                                        GHC.Types.False -> $j
                                                                        GHC.Types.True
                                                                        -> w3 wild2 wild3 }
                                                                   Multilinear.Index.Infinite.Contravariant ds4
                                                                   -> case GHC.Base.eqString
                                                                             ds2
                                                                             ds4 of wild6 {
                                                                        GHC.Types.False -> $j
                                                                        GHC.Types.True
                                                                        -> w3 wild2 wild3 }
                                                                   Multilinear.Index.Infinite.Indifferent ds4
                                                                   -> case GHC.Base.eqString
                                                                             ds2
                                                                             ds4 of wild6 {
                                                                        GHC.Types.False -> $j
                                                                        GHC.Types.True
                                                                        -> w3 wild2 wild3 } }
                                                              Multilinear.Index.Finite.Contravariant ds1 ds2
                                                              -> case index2 of wild5 {
                                                                   Multilinear.Index.Infinite.Covariant ds4
                                                                   -> case GHC.Base.eqString
                                                                             ds2
                                                                             ds4 of wild6 {
                                                                        GHC.Types.False -> $j
                                                                        GHC.Types.True
                                                                        -> w3 wild2 wild3 }
                                                                   Multilinear.Index.Infinite.Contravariant ds4
                                                                   -> case GHC.Base.eqString
                                                                             ds2
                                                                             ds4 of wild6 {
                                                                        GHC.Types.False -> $j
                                                                        GHC.Types.True
                                                                        -> w3 wild2 wild3 }
                                                                   Multilinear.Index.Infinite.Indifferent ds4
                                                                   -> case GHC.Base.eqString
                                                                             ds2
                                                                             ds4 of wild6 {
                                                                        GHC.Types.False -> $j
                                                                        GHC.Types.True
                                                                        -> w3 wild2 wild3 } }
                                                              Multilinear.Index.Finite.Indifferent ds1 ds2
                                                              -> case index2 of wild5 {
                                                                   Multilinear.Index.Infinite.Covariant ds4
                                                                   -> case GHC.Base.eqString
                                                                             ds2
                                                                             ds4 of wild6 {
                                                                        GHC.Types.False -> $j
                                                                        GHC.Types.True
                                                                        -> w3 wild2 wild3 }
                                                                   Multilinear.Index.Infinite.Contravariant ds4
                                                                   -> case GHC.Base.eqString
                                                                             ds2
                                                                             ds4 of wild6 {
                                                                        GHC.Types.False -> $j
                                                                        GHC.Types.True
                                                                        -> w3 wild2 wild3 }
                                                                   Multilinear.Index.Infinite.Indifferent ds4
                                                                   -> case GHC.Base.eqString
                                                                             ds2
                                                                             ds4 of wild6 {
                                                                        GHC.Types.False -> $j
                                                                        GHC.Types.True
                                                                        -> w3 wild2 wild3 } } }
                                                         Multilinear.Generic.Err ipv
                                                         -> fail GHC.Prim.void# }
                                                    Multilinear.Generic.InfiniteTensor index1 v1
                                                    -> case wild1 of wild3 {
                                                         Multilinear.Generic.SimpleFinite index2 ds
                                                         -> let {
                                                              $j :: Multilinear.Generic.Tensor a
                                                                <join 0>
                                                              = Multilinear.Generic.InfiniteTensor
                                                                  @ a
                                                                  index1
                                                                  (letrec {
                                                                     go8 :: [Multilinear.Generic.Tensor
                                                                               a]
                                                                            -> [Multilinear.Generic.Tensor
                                                                                  a]
                                                                       {- Arity: 1 -}
                                                                     = \ (ds1 :: [Multilinear.Generic.Tensor
                                                                                    a]) ->
                                                                       case ds1 of wild4 {
                                                                         []
                                                                         -> GHC.Types.[]
                                                                              @ (Multilinear.Generic.Tensor
                                                                                   a)
                                                                         : y ys
                                                                         -> GHC.Types.:
                                                                              @ (Multilinear.Generic.Tensor
                                                                                   a)
                                                                              (Multilinear.Generic.$w_elemByElem'
                                                                                 @ a
                                                                                 y
                                                                                 wild3
                                                                                 w2
                                                                                 w3)
                                                                              (go8 ys) }
                                                                   } in
                                                                   go8 v1)
                                                            } in
                                                            case index1 of wild4 {
                                                              Multilinear.Index.Infinite.Covariant ds1
                                                              -> case index2 of wild5 {
                                                                   Multilinear.Index.Finite.Covariant ds2 ds3
                                                                   -> case GHC.Base.eqString
                                                                             ds1
                                                                             ds3 of wild6 {
                                                                        GHC.Types.False -> $j
                                                                        GHC.Types.True
                                                                        -> w3 wild2 wild3 }
                                                                   Multilinear.Index.Finite.Contravariant ds2 ds3
                                                                   -> case GHC.Base.eqString
                                                                             ds1
                                                                             ds3 of wild6 {
                                                                        GHC.Types.False -> $j
                                                                        GHC.Types.True
                                                                        -> w3 wild2 wild3 }
                                                                   Multilinear.Index.Finite.Indifferent ds2 ds3
                                                                   -> case GHC.Base.eqString
                                                                             ds1
                                                                             ds3 of wild6 {
                                                                        GHC.Types.False -> $j
                                                                        GHC.Types.True
                                                                        -> w3 wild2 wild3 } }
                                                              Multilinear.Index.Infinite.Contravariant ds1
                                                              -> case index2 of wild5 {
                                                                   Multilinear.Index.Finite.Covariant ds2 ds3
                                                                   -> case GHC.Base.eqString
                                                                             ds1
                                                                             ds3 of wild6 {
                                                                        GHC.Types.False -> $j
                                                                        GHC.Types.True
                                                                        -> w3 wild2 wild3 }
                                                                   Multilinear.Index.Finite.Contravariant ds2 ds3
                                                                   -> case GHC.Base.eqString
                                                                             ds1
                                                                             ds3 of wild6 {
                                                                        GHC.Types.False -> $j
                                                                        GHC.Types.True
                                                                        -> w3 wild2 wild3 }
                                                                   Multilinear.Index.Finite.Indifferent ds2 ds3
                                                                   -> case GHC.Base.eqString
                                                                             ds1
                                                                             ds3 of wild6 {
                                                                        GHC.Types.False -> $j
                                                                        GHC.Types.True
                                                                        -> w3 wild2 wild3 } }
                                                              Multilinear.Index.Infinite.Indifferent ds1
                                                              -> case index2 of wild5 {
                                                                   Multilinear.Index.Finite.Covariant ds2 ds3
                                                                   -> case GHC.Base.eqString
                                                                             ds1
                                                                             ds3 of wild6 {
                                                                        GHC.Types.False -> $j
                                                                        GHC.Types.True
                                                                        -> w3 wild2 wild3 }
                                                                   Multilinear.Index.Finite.Contravariant ds2 ds3
                                                                   -> case GHC.Base.eqString
                                                                             ds1
                                                                             ds3 of wild6 {
                                                                        GHC.Types.False -> $j
                                                                        GHC.Types.True
                                                                        -> w3 wild2 wild3 }
                                                                   Multilinear.Index.Finite.Indifferent ds2 ds3
                                                                   -> case GHC.Base.eqString
                                                                             ds1
                                                                             ds3 of wild6 {
                                                                        GHC.Types.False -> $j
                                                                        GHC.Types.True
                                                                        -> w3 wild2 wild3 } } }
                                                         Multilinear.Generic.FiniteTensor index2 v2
                                                         -> let {
                                                              $j :: Multilinear.Generic.Tensor a
                                                                <join 0>
                                                              = letrec {
                                                                  go8 :: [Multilinear.Index.TIndex]
                                                                         -> [[GHC.Types.Char]]
                                                                    {- Arity: 1 -}
                                                                  = \ (ds :: [Multilinear.Index.TIndex]) ->
                                                                    case ds of wild4 {
                                                                      []
                                                                      -> GHC.Types.[]
                                                                           @ [GHC.Types.Char]
                                                                      : y ys
                                                                      -> GHC.Types.:
                                                                           @ [GHC.Types.Char]
                                                                           (Multilinear.Index.tIndexName
                                                                              y)
                                                                           (go8 ys) }
                                                                } in
                                                                case GHC.List.elem
                                                                       @ GHC.Base.String
                                                                       GHC.Classes.$fEq[]_$s$fEq[]1
                                                                       (case index1 of wild4 {
                                                                          Multilinear.Index.Infinite.Covariant ds1
                                                                          -> ds1
                                                                          Multilinear.Index.Infinite.Contravariant ds1
                                                                          -> ds1
                                                                          Multilinear.Index.Infinite.Indifferent ds1
                                                                          -> ds1 })
                                                                       (go8
                                                                          (Multilinear.Generic.$fMultilinearTensora_$s$w$cindices1
                                                                             @ a
                                                                             index2
                                                                             v2)) of wild4 {
                                                                  GHC.Types.False
                                                                  -> Multilinear.Generic.InfiniteTensor
                                                                       @ a
                                                                       index1
                                                                       (letrec {
                                                                          go9 :: [Multilinear.Generic.Tensor
                                                                                    a]
                                                                                 -> [Multilinear.Generic.Tensor
                                                                                       a]
                                                                            {- Arity: 1 -}
                                                                          = \ (ds :: [Multilinear.Generic.Tensor
                                                                                        a]) ->
                                                                            case ds of wild5 {
                                                                              []
                                                                              -> GHC.Types.[]
                                                                                   @ (Multilinear.Generic.Tensor
                                                                                        a)
                                                                              : y ys
                                                                              -> GHC.Types.:
                                                                                   @ (Multilinear.Generic.Tensor
                                                                                        a)
                                                                                   (Multilinear.Generic.$w_elemByElem'
                                                                                      @ a
                                                                                      y
                                                                                      wild3
                                                                                      w2
                                                                                      w3)
                                                                                   (go9 ys) }
                                                                        } in
                                                                        go9 v1)
                                                                  GHC.Types.True
                                                                  -> Multilinear.Generic.FiniteTensor
                                                                       @ a
                                                                       index2
                                                                       (case v2 of v4 { Data.Vector.Vector ipv ipv1 ipv2 ->
                                                                        case GHC.Magic.runRW#
                                                                               @ ('GHC.Types.TupleRep
                                                                                    '['GHC.Types.TupleRep
                                                                                        '[],
                                                                                      'GHC.Types.LiftedRep])
                                                                               @ (# GHC.Prim.State#
                                                                                      GHC.Prim.RealWorld,
                                                                                    Data.Vector.Vector
                                                                                      (Multilinear.Generic.Tensor
                                                                                         a) #)
                                                                               (\ (s1 :: GHC.Prim.State#
                                                                                           GHC.Prim.RealWorld)[OneShot] ->
                                                                                case GHC.Prim.newArray#
                                                                                       @ (Multilinear.Generic.Tensor
                                                                                            a)
                                                                                       @ (Control.Monad.Primitive.PrimState
                                                                                            (GHC.ST.ST
                                                                                               GHC.Prim.RealWorld))
                                                                                       ipv1
                                                                                       (Data.Vector.Mutable.uninitialised
                                                                                          @ (Multilinear.Generic.Tensor
                                                                                               a))
                                                                                       s1
                                                                                         `cast`
                                                                                       (Nth:2
                                                                                            (Nth:2
                                                                                                 (Trans
                                                                                                      (<GHC.ST.STRep
                                                                                                          GHC.Prim.RealWorld
                                                                                                          (Data.Primitive.Array.MutableArray
                                                                                                             (Control.Monad.Primitive.PrimState
                                                                                                                (GHC.ST.ST
                                                                                                                   GHC.Prim.RealWorld))
                                                                                                             (Multilinear.Generic.Tensor
                                                                                                                a))>_R
                                                                                                       ->_R Sym (GHC.ST.N:ST[0]
                                                                                                                     <GHC.Prim.RealWorld>_N
                                                                                                                     <Data.Primitive.Array.MutableArray
                                                                                                                        (Control.Monad.Primitive.PrimState
                                                                                                                           (GHC.ST.ST
                                                                                                                              GHC.Prim.RealWorld))
                                                                                                                        (Multilinear.Generic.Tensor
                                                                                                                           a)>_R))
                                                                                                      (((GHC.Prim.State#
                                                                                                           (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                                                     <GHC.Prim.RealWorld>_N)))_R
                                                                                                        ->_R ((#,#)
                                                                                                                <'GHC.Types.TupleRep
                                                                                                                   '[]>_R
                                                                                                                <'GHC.Types.LiftedRep>_R
                                                                                                                (GHC.Prim.State#
                                                                                                                   (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                                                             <GHC.Prim.RealWorld>_N)))_R
                                                                                                                <Data.Primitive.Array.MutableArray
                                                                                                                   (Control.Monad.Primitive.PrimState
                                                                                                                      (GHC.ST.ST
                                                                                                                         GHC.Prim.RealWorld))
                                                                                                                   (Multilinear.Generic.Tensor
                                                                                                                      a)>_R)_R)
                                                                                                       ->_R <GHC.ST.ST
                                                                                                               GHC.Prim.RealWorld
                                                                                                               (Data.Primitive.Array.MutableArray
                                                                                                                  (Control.Monad.Primitive.PrimState
                                                                                                                     (GHC.ST.ST
                                                                                                                        GHC.Prim.RealWorld))
                                                                                                                  (Multilinear.Generic.Tensor
                                                                                                                     a))>_R)))) of ds2 { (#,#) ipv3 ipv4 ->
                                                                                letrec {
                                                                                  foldlM'_loop :: GHC.Types.SPEC
                                                                                                  -> GHC.Types.Int
                                                                                                  -> GHC.Types.Int
                                                                                                  -> GHC.ST.ST
                                                                                                       GHC.Prim.RealWorld
                                                                                                       GHC.Types.Int
                                                                                    {- Arity: 3 -}
                                                                                  = \ (ds4 :: GHC.Types.SPEC)
                                                                                      (z :: GHC.Types.Int)
                                                                                      (s7 :: GHC.Types.Int) ->
                                                                                    case ds4 of ds5 { DEFAULT ->
                                                                                    case z of z1 { GHC.Types.I# ipv6 ->
                                                                                    (\ (s8 :: GHC.Prim.State#
                                                                                                GHC.Prim.RealWorld) ->
                                                                                     case s7 of wild5 { GHC.Types.I# x ->
                                                                                     case GHC.Prim.tagToEnum#
                                                                                            @ GHC.Types.Bool
                                                                                            (GHC.Prim.>=#
                                                                                               x
                                                                                               ipv1) of wild6 {
                                                                                       GHC.Types.False
                                                                                       -> case GHC.Prim.indexArray#
                                                                                                 @ (Multilinear.Generic.Tensor
                                                                                                      a)
                                                                                                 ipv2
                                                                                                 (GHC.Prim.+#
                                                                                                    ipv
                                                                                                    x) of ds3 { Unit# ipv5 ->
                                                                                          case GHC.Prim.writeArray#
                                                                                                 @ (Control.Monad.Primitive.PrimState
                                                                                                      (GHC.ST.ST
                                                                                                         GHC.Prim.RealWorld))
                                                                                                 @ (Multilinear.Generic.Tensor
                                                                                                      a)
                                                                                                 ipv4
                                                                                                 ipv6
                                                                                                 (Multilinear.Generic.$w_elemByElem'
                                                                                                    @ a
                                                                                                    wild2
                                                                                                    ipv5
                                                                                                    w2
                                                                                                    w3)
                                                                                                 s8
                                                                                                   `cast`
                                                                                                 (Nth:2
                                                                                                      (Nth:2
                                                                                                           (Trans
                                                                                                                (<GHC.ST.STRep
                                                                                                                    GHC.Prim.RealWorld
                                                                                                                    ()>_R
                                                                                                                 ->_R Sym (GHC.ST.N:ST[0]
                                                                                                                               <GHC.Prim.RealWorld>_N
                                                                                                                               <()>_R))
                                                                                                                (((GHC.Prim.State#
                                                                                                                     (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                                                               <GHC.Prim.RealWorld>_N)))_R
                                                                                                                  ->_R ((#,#)
                                                                                                                          <'GHC.Types.TupleRep
                                                                                                                             '[]>_R
                                                                                                                          <'GHC.Types.LiftedRep>_R
                                                                                                                          (GHC.Prim.State#
                                                                                                                             (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                                                                       <GHC.Prim.RealWorld>_N)))_R
                                                                                                                          <()>_R)_R)
                                                                                                                 ->_R <GHC.ST.ST
                                                                                                                         GHC.Prim.RealWorld
                                                                                                                         ()>_R)))) of s'# { DEFAULT ->
                                                                                          (foldlM'_loop
                                                                                             GHC.Types.SPEC
                                                                                             (GHC.Types.I#
                                                                                                (GHC.Prim.+#
                                                                                                   ipv6
                                                                                                   1#))
                                                                                             (GHC.Types.I#
                                                                                                (GHC.Prim.+#
                                                                                                   x
                                                                                                   1#)))
                                                                                            `cast`
                                                                                          (GHC.ST.N:ST[0]
                                                                                               <GHC.Prim.RealWorld>_N
                                                                                               <GHC.Types.Int>_R)
                                                                                            s'#
                                                                                              `cast`
                                                                                            (Nth:2
                                                                                                 (Nth:3
                                                                                                      (Nth:2
                                                                                                           (Trans
                                                                                                                (((GHC.Prim.State#
                                                                                                                     (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                                                          <GHC.Prim.RealWorld>_N))_R
                                                                                                                  ->_R ((#,#)
                                                                                                                          <'GHC.Types.TupleRep
                                                                                                                             '[]>_R
                                                                                                                          <'GHC.Types.LiftedRep>_R
                                                                                                                          (GHC.Prim.State#
                                                                                                                             (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                                                                  <GHC.Prim.RealWorld>_N))_R
                                                                                                                          <()>_R)_R)
                                                                                                                 ->_R <GHC.ST.ST
                                                                                                                         GHC.Prim.RealWorld
                                                                                                                         ()>_R)
                                                                                                                (<GHC.ST.STRep
                                                                                                                    GHC.Prim.RealWorld
                                                                                                                    ()>_R
                                                                                                                 ->_R GHC.ST.N:ST[0]
                                                                                                                          <GHC.Prim.RealWorld>_N
                                                                                                                          <()>_R))))) } }
                                                                                       GHC.Types.True
                                                                                       -> (# s8,
                                                                                             z1 #) } })
                                                                                      `cast`
                                                                                    (Sym (GHC.ST.N:ST[0]
                                                                                              <GHC.Prim.RealWorld>_N
                                                                                              <GHC.Types.Int>_R)) } }
                                                                                } in
                                                                                case (foldlM'_loop
                                                                                        GHC.Types.SPEC
                                                                                        (GHC.Types.I#
                                                                                           0#)
                                                                                        (GHC.Types.I#
                                                                                           0#))
                                                                                       `cast`
                                                                                     (GHC.ST.N:ST[0]
                                                                                          <GHC.Prim.RealWorld>_N
                                                                                          <GHC.Types.Int>_R)
                                                                                       ipv3
                                                                                         `cast`
                                                                                       (Nth:2
                                                                                            (Nth:3
                                                                                                 (Nth:2
                                                                                                      (Trans
                                                                                                           (((GHC.Prim.State#
                                                                                                                (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                                                     <GHC.Prim.RealWorld>_N))_R
                                                                                                             ->_R ((#,#)
                                                                                                                     <'GHC.Types.TupleRep
                                                                                                                        '[]>_R
                                                                                                                     <'GHC.Types.LiftedRep>_R
                                                                                                                     (GHC.Prim.State#
                                                                                                                        (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                                                             <GHC.Prim.RealWorld>_N))_R
                                                                                                                     <Data.Primitive.Array.MutableArray
                                                                                                                        (Control.Monad.Primitive.PrimState
                                                                                                                           (GHC.ST.ST
                                                                                                                              GHC.Prim.RealWorld))
                                                                                                                        (Multilinear.Generic.Tensor
                                                                                                                           a)>_R)_R)
                                                                                                            ->_R <GHC.ST.ST
                                                                                                                    GHC.Prim.RealWorld
                                                                                                                    (Data.Primitive.Array.MutableArray
                                                                                                                       (Control.Monad.Primitive.PrimState
                                                                                                                          (GHC.ST.ST
                                                                                                                             GHC.Prim.RealWorld))
                                                                                                                       (Multilinear.Generic.Tensor
                                                                                                                          a))>_R)
                                                                                                           (<GHC.ST.STRep
                                                                                                               GHC.Prim.RealWorld
                                                                                                               (Data.Primitive.Array.MutableArray
                                                                                                                  (Control.Monad.Primitive.PrimState
                                                                                                                     (GHC.ST.ST
                                                                                                                        GHC.Prim.RealWorld))
                                                                                                                  (Multilinear.Generic.Tensor
                                                                                                                     a))>_R
                                                                                                            ->_R GHC.ST.N:ST[0]
                                                                                                                     <GHC.Prim.RealWorld>_N
                                                                                                                     <Data.Primitive.Array.MutableArray
                                                                                                                        (Control.Monad.Primitive.PrimState
                                                                                                                           (GHC.ST.ST
                                                                                                                              GHC.Prim.RealWorld))
                                                                                                                        (Multilinear.Generic.Tensor
                                                                                                                           a)>_R))))) of ds1 { (#,#) ipv6 ipv7 ->
                                                                                case ipv7 of dt { GHC.Types.I# dt1 ->
                                                                                case GHC.Prim.unsafeFreezeArray#
                                                                                       @ (Control.Monad.Primitive.PrimState
                                                                                            (GHC.ST.ST
                                                                                               GHC.Prim.RealWorld))
                                                                                       @ (Multilinear.Generic.Tensor
                                                                                            a)
                                                                                       ipv4
                                                                                       ipv6
                                                                                         `cast`
                                                                                       (Nth:2
                                                                                            (Nth:2
                                                                                                 (Trans
                                                                                                      (<GHC.ST.STRep
                                                                                                          GHC.Prim.RealWorld
                                                                                                          (Data.Primitive.Array.Array
                                                                                                             (Multilinear.Generic.Tensor
                                                                                                                a))>_R
                                                                                                       ->_R Sym (GHC.ST.N:ST[0]
                                                                                                                     <GHC.Prim.RealWorld>_N
                                                                                                                     <Data.Primitive.Array.Array
                                                                                                                        (Multilinear.Generic.Tensor
                                                                                                                           a)>_R))
                                                                                                      (((GHC.Prim.State#
                                                                                                           (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                                                     <GHC.Prim.RealWorld>_N)))_R
                                                                                                        ->_R ((#,#)
                                                                                                                <'GHC.Types.TupleRep
                                                                                                                   '[]>_R
                                                                                                                <'GHC.Types.LiftedRep>_R
                                                                                                                (GHC.Prim.State#
                                                                                                                   (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                                                             <GHC.Prim.RealWorld>_N)))_R
                                                                                                                <Data.Primitive.Array.Array
                                                                                                                   (Multilinear.Generic.Tensor
                                                                                                                      a)>_R)_R)
                                                                                                       ->_R <GHC.ST.ST
                                                                                                               GHC.Prim.RealWorld
                                                                                                               (Data.Primitive.Array.Array
                                                                                                                  (Multilinear.Generic.Tensor
                                                                                                                     a))>_R)))) of ds3 { (#,#) ipv5 ipv9 ->
                                                                                (# ipv5
                                                                                     `cast`
                                                                                   (Nth:2
                                                                                        (Nth:3
                                                                                             (Nth:2
                                                                                                  (Trans
                                                                                                       (((GHC.Prim.State#
                                                                                                            (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                                                 <GHC.Prim.RealWorld>_N))_R
                                                                                                         ->_R ((#,#)
                                                                                                                 <'GHC.Types.TupleRep
                                                                                                                    '[]>_R
                                                                                                                 <'GHC.Types.LiftedRep>_R
                                                                                                                 (GHC.Prim.State#
                                                                                                                    (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                                                         <GHC.Prim.RealWorld>_N))_R
                                                                                                                 <Data.Primitive.Array.Array
                                                                                                                    (Multilinear.Generic.Tensor
                                                                                                                       a)>_R)_R)
                                                                                                        ->_R <GHC.ST.ST
                                                                                                                GHC.Prim.RealWorld
                                                                                                                (Data.Primitive.Array.Array
                                                                                                                   (Multilinear.Generic.Tensor
                                                                                                                      a))>_R)
                                                                                                       (<GHC.ST.STRep
                                                                                                           GHC.Prim.RealWorld
                                                                                                           (Data.Primitive.Array.Array
                                                                                                              (Multilinear.Generic.Tensor
                                                                                                                 a))>_R
                                                                                                        ->_R GHC.ST.N:ST[0]
                                                                                                                 <GHC.Prim.RealWorld>_N
                                                                                                                 <Data.Primitive.Array.Array
                                                                                                                    (Multilinear.Generic.Tensor
                                                                                                                       a)>_R))))),
                                                                                   Data.Vector.Vector
                                                                                     @ (Multilinear.Generic.Tensor
                                                                                          a)
                                                                                     0#
                                                                                     dt1
                                                                                     ipv9 #) } } } }) of ds1 { (#,#) ipv3 ipv4 ->
                                                                        ipv4 } }) }
                                                            } in
                                                            case index1 of wild4 {
                                                              Multilinear.Index.Infinite.Covariant ds1
                                                              -> case index2 of wild5 {
                                                                   Multilinear.Index.Finite.Covariant ds2 ds3
                                                                   -> case GHC.Base.eqString
                                                                             ds1
                                                                             ds3 of wild6 {
                                                                        GHC.Types.False -> $j
                                                                        GHC.Types.True
                                                                        -> w3 wild2 wild3 }
                                                                   Multilinear.Index.Finite.Contravariant ds2 ds3
                                                                   -> case GHC.Base.eqString
                                                                             ds1
                                                                             ds3 of wild6 {
                                                                        GHC.Types.False -> $j
                                                                        GHC.Types.True
                                                                        -> w3 wild2 wild3 }
                                                                   Multilinear.Index.Finite.Indifferent ds2 ds3
                                                                   -> case GHC.Base.eqString
                                                                             ds1
                                                                             ds3 of wild6 {
                                                                        GHC.Types.False -> $j
                                                                        GHC.Types.True
                                                                        -> w3 wild2 wild3 } }
                                                              Multilinear.Index.Infinite.Contravariant ds1
                                                              -> case index2 of wild5 {
                                                                   Multilinear.Index.Finite.Covariant ds2 ds3
                                                                   -> case GHC.Base.eqString
                                                                             ds1
                                                                             ds3 of wild6 {
                                                                        GHC.Types.False -> $j
                                                                        GHC.Types.True
                                                                        -> w3 wild2 wild3 }
                                                                   Multilinear.Index.Finite.Contravariant ds2 ds3
                                                                   -> case GHC.Base.eqString
                                                                             ds1
                                                                             ds3 of wild6 {
                                                                        GHC.Types.False -> $j
                                                                        GHC.Types.True
                                                                        -> w3 wild2 wild3 }
                                                                   Multilinear.Index.Finite.Indifferent ds2 ds3
                                                                   -> case GHC.Base.eqString
                                                                             ds1
                                                                             ds3 of wild6 {
                                                                        GHC.Types.False -> $j
                                                                        GHC.Types.True
                                                                        -> w3 wild2 wild3 } }
                                                              Multilinear.Index.Infinite.Indifferent ds1
                                                              -> case index2 of wild5 {
                                                                   Multilinear.Index.Finite.Covariant ds2 ds3
                                                                   -> case GHC.Base.eqString
                                                                             ds1
                                                                             ds3 of wild6 {
                                                                        GHC.Types.False -> $j
                                                                        GHC.Types.True
                                                                        -> w3 wild2 wild3 }
                                                                   Multilinear.Index.Finite.Contravariant ds2 ds3
                                                                   -> case GHC.Base.eqString
                                                                             ds1
                                                                             ds3 of wild6 {
                                                                        GHC.Types.False -> $j
                                                                        GHC.Types.True
                                                                        -> w3 wild2 wild3 }
                                                                   Multilinear.Index.Finite.Indifferent ds2 ds3
                                                                   -> case GHC.Base.eqString
                                                                             ds1
                                                                             ds3 of wild6 {
                                                                        GHC.Types.False -> $j
                                                                        GHC.Types.True
                                                                        -> w3 wild2 wild3 } } }
                                                         Multilinear.Generic.InfiniteTensor index2 v2
                                                         -> let {
                                                              $j :: Multilinear.Generic.Tensor a
                                                                <join 0>
                                                              = letrec {
                                                                  go8 :: [Multilinear.Index.TIndex]
                                                                         -> [[GHC.Types.Char]]
                                                                    {- Arity: 1 -}
                                                                  = \ (ds :: [Multilinear.Index.TIndex]) ->
                                                                    case ds of wild4 {
                                                                      []
                                                                      -> GHC.Types.[]
                                                                           @ [GHC.Types.Char]
                                                                      : y ys
                                                                      -> GHC.Types.:
                                                                           @ [GHC.Types.Char]
                                                                           (Multilinear.Index.tIndexName
                                                                              y)
                                                                           (go8 ys) }
                                                                } in
                                                                case GHC.List.elem
                                                                       @ GHC.Base.String
                                                                       GHC.Classes.$fEq[]_$s$fEq[]1
                                                                       (case index1 of wild4 {
                                                                          Multilinear.Index.Infinite.Covariant ds1
                                                                          -> ds1
                                                                          Multilinear.Index.Infinite.Contravariant ds1
                                                                          -> ds1
                                                                          Multilinear.Index.Infinite.Indifferent ds1
                                                                          -> ds1 })
                                                                       (go8
                                                                          (Multilinear.Generic.$fMultilinearTensora_$s$w$cindices
                                                                             @ a
                                                                             index2
                                                                             v2)) of wild4 {
                                                                  GHC.Types.False
                                                                  -> Multilinear.Generic.InfiniteTensor
                                                                       @ a
                                                                       index1
                                                                       (letrec {
                                                                          go9 :: [Multilinear.Generic.Tensor
                                                                                    a]
                                                                                 -> [Multilinear.Generic.Tensor
                                                                                       a]
                                                                            {- Arity: 1 -}
                                                                          = \ (ds :: [Multilinear.Generic.Tensor
                                                                                        a]) ->
                                                                            case ds of wild5 {
                                                                              []
                                                                              -> GHC.Types.[]
                                                                                   @ (Multilinear.Generic.Tensor
                                                                                        a)
                                                                              : y ys
                                                                              -> GHC.Types.:
                                                                                   @ (Multilinear.Generic.Tensor
                                                                                        a)
                                                                                   (Multilinear.Generic.$w_elemByElem'
                                                                                      @ a
                                                                                      y
                                                                                      wild3
                                                                                      w2
                                                                                      w3)
                                                                                   (go9 ys) }
                                                                        } in
                                                                        go9 v1)
                                                                  GHC.Types.True
                                                                  -> Multilinear.Generic.InfiniteTensor
                                                                       @ a
                                                                       index2
                                                                       (letrec {
                                                                          go9 :: [Multilinear.Generic.Tensor
                                                                                    a]
                                                                                 -> [Multilinear.Generic.Tensor
                                                                                       a]
                                                                            {- Arity: 1 -}
                                                                          = \ (ds :: [Multilinear.Generic.Tensor
                                                                                        a]) ->
                                                                            case ds of wild5 {
                                                                              []
                                                                              -> GHC.Types.[]
                                                                                   @ (Multilinear.Generic.Tensor
                                                                                        a)
                                                                              : y ys
                                                                              -> GHC.Types.:
                                                                                   @ (Multilinear.Generic.Tensor
                                                                                        a)
                                                                                   (Multilinear.Generic.$w_elemByElem'
                                                                                      @ a
                                                                                      wild2
                                                                                      y
                                                                                      w2
                                                                                      w3)
                                                                                   (go9 ys) }
                                                                        } in
                                                                        go9 v2) }
                                                            } in
                                                            case index1 of wild4 {
                                                              Multilinear.Index.Infinite.Covariant ds1
                                                              -> case index2 of wild5 {
                                                                   Multilinear.Index.Infinite.Covariant ds2
                                                                   -> case GHC.Base.eqString
                                                                             ds1
                                                                             ds2 of wild6 {
                                                                        GHC.Types.False -> $j
                                                                        GHC.Types.True
                                                                        -> w3 wild2 wild3 }
                                                                   Multilinear.Index.Infinite.Contravariant ds2
                                                                   -> case GHC.Base.eqString
                                                                             ds1
                                                                             ds2 of wild6 {
                                                                        GHC.Types.False -> $j
                                                                        GHC.Types.True
                                                                        -> w3 wild2 wild3 }
                                                                   Multilinear.Index.Infinite.Indifferent ds2
                                                                   -> case GHC.Base.eqString
                                                                             ds1
                                                                             ds2 of wild6 {
                                                                        GHC.Types.False -> $j
                                                                        GHC.Types.True
                                                                        -> w3 wild2 wild3 } }
                                                              Multilinear.Index.Infinite.Contravariant ds1
                                                              -> case index2 of wild5 {
                                                                   Multilinear.Index.Infinite.Covariant ds2
                                                                   -> case GHC.Base.eqString
                                                                             ds1
                                                                             ds2 of wild6 {
                                                                        GHC.Types.False -> $j
                                                                        GHC.Types.True
                                                                        -> w3 wild2 wild3 }
                                                                   Multilinear.Index.Infinite.Contravariant ds2
                                                                   -> case GHC.Base.eqString
                                                                             ds1
                                                                             ds2 of wild6 {
                                                                        GHC.Types.False -> $j
                                                                        GHC.Types.True
                                                                        -> w3 wild2 wild3 }
                                                                   Multilinear.Index.Infinite.Indifferent ds2
                                                                   -> case GHC.Base.eqString
                                                                             ds1
                                                                             ds2 of wild6 {
                                                                        GHC.Types.False -> $j
                                                                        GHC.Types.True
                                                                        -> w3 wild2 wild3 } }
                                                              Multilinear.Index.Infinite.Indifferent ds1
                                                              -> case index2 of wild5 {
                                                                   Multilinear.Index.Infinite.Covariant ds2
                                                                   -> case GHC.Base.eqString
                                                                             ds1
                                                                             ds2 of wild6 {
                                                                        GHC.Types.False -> $j
                                                                        GHC.Types.True
                                                                        -> w3 wild2 wild3 }
                                                                   Multilinear.Index.Infinite.Contravariant ds2
                                                                   -> case GHC.Base.eqString
                                                                             ds1
                                                                             ds2 of wild6 {
                                                                        GHC.Types.False -> $j
                                                                        GHC.Types.True
                                                                        -> w3 wild2 wild3 }
                                                                   Multilinear.Index.Infinite.Indifferent ds2
                                                                   -> case GHC.Base.eqString
                                                                             ds1
                                                                             ds2 of wild6 {
                                                                        GHC.Types.False -> $j
                                                                        GHC.Types.True
                                                                        -> w3 wild2 wild3 } } }
                                                         Multilinear.Generic.Err ipv
                                                         -> fail GHC.Prim.void# }
                                                    Multilinear.Generic.Err msg
                                                    -> Multilinear.Generic.Err @ a msg }
                                               Multilinear.Generic.Scalar x
                                               -> Multilinear.Generic.$fMultilinearTensora_$cfmap
                                                    @ a
                                                    @ a
                                                    (\ (ds :: a) -> w2 ds x)
                                                    wild }
                                          Multilinear.Generic.Scalar x1
                                          -> case w1 of wild1 {
                                               DEFAULT
                                               -> Multilinear.Generic.$fMultilinearTensora_$cfmap
                                                    @ a
                                                    @ a
                                                    (w2 x1)
                                                    wild1
                                               Multilinear.Generic.Scalar x2
                                               -> Multilinear.Generic.Scalar @ a (w2 x1 x2) } }) -}
37a6e7972822cec9377025d720123dd4
  $w_standardize ::
    Multilinear.Generic.Tensor a -> Multilinear.Generic.Tensor a
  {- Arity: 1, Strictness: <S,U>, Inline: [0],
     Unfolding: (\ @ a (w :: Multilinear.Generic.Tensor a) ->
                 Multilinear.Generic._standardize1
                   @ a
                   (Multilinear.Generic.$w$cindices @ a w)
                   (GHC.Base.id @ (Multilinear.Generic.Tensor a))
                   w) -}
08d71fc5c9f8d0a14f453dd835d1be34
  $wouter ::
    GHC.Prim.MutableByteArray# GHC.Prim.RealWorld
    -> GHC.Prim.Int#
    -> [GHC.Types.Char]
    -> GHC.Prim.Int#
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Text.Internal.Text #)
  {- Arity: 5, Strictness: <L,U><S,U><S,1*U><S,U><S,U>,
     Inline: [0] -}
3435455de223a292a66afccee7caf4fd
  axiom Multilinear.Generic.Rep_Tensor::
    [a]
      GHC.Generics.Rep (Multilinear.Generic.Tensor a)
        = GHC.Generics.D1
            ('GHC.Generics.MetaData
               "Tensor"
               "Multilinear.Generic"
               "Multilinear-0.8.0.0-4dpV53DlxV5EwwV6FZreVP"
               'GHC.Types.False)
            ((GHC.Generics.C1
                ('GHC.Generics.MetaCons
                   "Scalar" 'GHC.Generics.PrefixI 'GHC.Types.True)
                (GHC.Generics.S1
                   ('GHC.Generics.MetaSel
                      ('GHC.Base.Just "scalarVal")
                      'GHC.Generics.NoSourceUnpackedness
                      'GHC.Generics.NoSourceStrictness
                      'GHC.Generics.DecidedLazy)
                   (GHC.Generics.Rec0 a))
              GHC.Generics.:+: GHC.Generics.C1
                                 ('GHC.Generics.MetaCons
                                    "SimpleFinite" 'GHC.Generics.PrefixI 'GHC.Types.True)
                                 (GHC.Generics.S1
                                    ('GHC.Generics.MetaSel
                                       ('GHC.Base.Just "tensorFiniteIndex")
                                       'GHC.Generics.NoSourceUnpackedness
                                       'GHC.Generics.NoSourceStrictness
                                       'GHC.Generics.DecidedLazy)
                                    (GHC.Generics.Rec0 Multilinear.Index.Finite.Index)
                                  GHC.Generics.:*: GHC.Generics.S1
                                                     ('GHC.Generics.MetaSel
                                                        ('GHC.Base.Just "tensorScalars")
                                                        'GHC.Generics.NoSourceUnpackedness
                                                        'GHC.Generics.NoSourceStrictness
                                                        'GHC.Generics.DecidedLazy)
                                                     (GHC.Generics.Rec0 (Data.Vector.Vector a))))
             GHC.Generics.:+: (GHC.Generics.C1
                                 ('GHC.Generics.MetaCons
                                    "FiniteTensor" 'GHC.Generics.PrefixI 'GHC.Types.True)
                                 (GHC.Generics.S1
                                    ('GHC.Generics.MetaSel
                                       ('GHC.Base.Just "tensorFiniteIndex")
                                       'GHC.Generics.NoSourceUnpackedness
                                       'GHC.Generics.NoSourceStrictness
                                       'GHC.Generics.DecidedLazy)
                                    (GHC.Generics.Rec0 Multilinear.Index.Finite.Index)
                                  GHC.Generics.:*: GHC.Generics.S1
                                                     ('GHC.Generics.MetaSel
                                                        ('GHC.Base.Just "tensorsFinite")
                                                        'GHC.Generics.NoSourceUnpackedness
                                                        'GHC.Generics.NoSourceStrictness
                                                        'GHC.Generics.DecidedLazy)
                                                     (GHC.Generics.Rec0
                                                        (Data.Vector.Vector
                                                           (Multilinear.Generic.Tensor a))))
                               GHC.Generics.:+: (GHC.Generics.C1
                                                   ('GHC.Generics.MetaCons
                                                      "InfiniteTensor"
                                                      'GHC.Generics.PrefixI
                                                      'GHC.Types.True)
                                                   (GHC.Generics.S1
                                                      ('GHC.Generics.MetaSel
                                                         ('GHC.Base.Just "tensorInfiniteIndex")
                                                         'GHC.Generics.NoSourceUnpackedness
                                                         'GHC.Generics.NoSourceStrictness
                                                         'GHC.Generics.DecidedLazy)
                                                      (GHC.Generics.Rec0
                                                         Multilinear.Index.Infinite.Index)
                                                    GHC.Generics.:*: GHC.Generics.S1
                                                                       ('GHC.Generics.MetaSel
                                                                          ('GHC.Base.Just
                                                                             "tensorsInfinite")
                                                                          'GHC.Generics.NoSourceUnpackedness
                                                                          'GHC.Generics.NoSourceStrictness
                                                                          'GHC.Generics.DecidedLazy)
                                                                       (GHC.Generics.Rec0
                                                                          [Multilinear.Generic.Tensor
                                                                             a]))
                                                 GHC.Generics.:+: GHC.Generics.C1
                                                                    ('GHC.Generics.MetaCons
                                                                       "Err"
                                                                       'GHC.Generics.PrefixI
                                                                       'GHC.Types.True)
                                                                    (GHC.Generics.S1
                                                                       ('GHC.Generics.MetaSel
                                                                          ('GHC.Base.Just
                                                                             "errMessage")
                                                                          'GHC.Generics.NoSourceUnpackedness
                                                                          'GHC.Generics.NoSourceStrictness
                                                                          'GHC.Generics.DecidedLazy)
                                                                       (GHC.Generics.Rec0
                                                                          GHC.Base.String)))))
3435455de223a292a66afccee7caf4fd
  data Tensor a
    = Scalar {scalarVal :: a}
    | SimpleFinite {tensorFiniteIndex :: Multilinear.Index.Finite.Index,
                    tensorScalars :: Data.Vector.Vector a}
    | FiniteTensor {tensorFiniteIndex :: Multilinear.Index.Finite.Index,
                    tensorsFinite :: Data.Vector.Vector (Multilinear.Generic.Tensor a)}
    | InfiniteTensor {tensorInfiniteIndex :: Multilinear.Index.Infinite.Index,
                      tensorsInfinite :: [Multilinear.Generic.Tensor a]}
    | Err {errMessage :: GHC.Base.String}
32924ca84eae46f80c32b6a2715d3a0f
  _elemByElem ::
    GHC.Num.Num a =>
    Multilinear.Generic.Tensor a
    -> Multilinear.Generic.Tensor a
    -> (a -> a -> a)
    -> (Multilinear.Generic.Tensor a
        -> Multilinear.Generic.Tensor a -> Multilinear.Generic.Tensor a)
    -> Multilinear.Generic.Tensor a
  {- Arity: 5, Strictness: <L,A><S,U><S,U><L,C(C(U))><L,C(C1(U))>,
     Inline: (sat-args=4),
     Unfolding: InlineRule (5, False, False)
                (\ @ a
                   ($dNum :: GHC.Num.Num a)
                   (t1 :: Multilinear.Generic.Tensor a)
                   (t2 :: Multilinear.Generic.Tensor a)
                   (f :: a -> a -> a)
                   (op :: Multilinear.Generic.Tensor a
                          -> Multilinear.Generic.Tensor a -> Multilinear.Generic.Tensor a) ->
                 let {
                   commonIndices :: [GHC.Base.String]
                   = GHC.Base.build
                       @ [GHC.Types.Char]
                       (\ @ b
                          (c :: [GHC.Types.Char] -> b -> b)[OneShot]
                          (n :: b)[OneShot] ->
                        GHC.Base.foldr
                          @ Multilinear.Index.TIndex
                          @ b
                          (GHC.Base.mapFB
                             @ [GHC.Types.Char]
                             @ b
                             @ Multilinear.Index.TIndex
                             (GHC.List.filterFB
                                @ [GHC.Types.Char]
                                @ b
                                c
                                (let {
                                   ds :: [GHC.Base.String]
                                   = GHC.Base.build
                                       @ [GHC.Types.Char]
                                       (\ @ b1
                                          (c1 :: [GHC.Types.Char] -> b1 -> b1)[OneShot]
                                          (n1 :: b1)[OneShot] ->
                                        GHC.Base.foldr
                                          @ Multilinear.Index.TIndex
                                          @ b1
                                          (GHC.Base.mapFB
                                             @ [GHC.Types.Char]
                                             @ b1
                                             @ Multilinear.Index.TIndex
                                             c1
                                             Multilinear.Index.tIndexName)
                                          n1
                                          (Multilinear.Generic.$fMultilinearTensora_$cindices
                                             @ a
                                             $dNum
                                             t2))
                                 } in
                                 \ (ds1 :: GHC.Base.String) ->
                                 GHC.List.elem
                                   @ GHC.Base.String
                                   GHC.Classes.$fEq[]_$s$fEq[]1
                                   ds1
                                   ds))
                             Multilinear.Index.tIndexName)
                          n
                          (Multilinear.Generic.$fMultilinearTensora_$cindices @ a $dNum t1))
                 } in
                 Multilinear.Generic.mergeScalars
                   @ a
                   (Multilinear.Generic._elemByElem'
                      @ a
                      $dNum
                      (GHC.Base.foldr
                         @ GHC.Base.String
                         @ (Multilinear.Generic.Tensor a -> Multilinear.Generic.Tensor a)
                         (\ (ds :: GHC.Base.String)
                            (ds1 :: Multilinear.Generic.Tensor a
                                    -> Multilinear.Generic.Tensor a)[OneShot]
                            (v :: Multilinear.Generic.Tensor a)[OneShot] ->
                          case v of z { DEFAULT ->
                          ds1
                            (Multilinear.Generic.$fMultilinearTensora_$cshiftRightmost
                               @ a
                               $dNum
                               z
                               ds) })
                         (GHC.Base.id @ (Multilinear.Generic.Tensor a))
                         commonIndices
                         t1)
                      (GHC.Base.foldr
                         @ GHC.Base.String
                         @ (Multilinear.Generic.Tensor a -> Multilinear.Generic.Tensor a)
                         (\ (ds :: GHC.Base.String)
                            (ds1 :: Multilinear.Generic.Tensor a
                                    -> Multilinear.Generic.Tensor a)[OneShot]
                            (v :: Multilinear.Generic.Tensor a)[OneShot] ->
                          case v of z { DEFAULT ->
                          ds1
                            (Multilinear.Generic.$fMultilinearTensora_$cshiftRightmost
                               @ a
                               $dNum
                               z
                               ds) })
                         (GHC.Base.id @ (Multilinear.Generic.Tensor a))
                         commonIndices
                         t2)
                      f
                      op)) -}
3435455de223a292a66afccee7caf4fd
  _elemByElem' ::
    GHC.Num.Num a =>
    Multilinear.Generic.Tensor a
    -> Multilinear.Generic.Tensor a
    -> (a -> a -> a)
    -> (Multilinear.Generic.Tensor a
        -> Multilinear.Generic.Tensor a -> Multilinear.Generic.Tensor a)
    -> Multilinear.Generic.Tensor a
  {- Arity: 5,
     Strictness: <L,A><S,1*U><S,1*U><L,C(C(U))><L,C(C1(U))>,
     Inline: [0],
     Unfolding: InlineRule (5, True, True)
                (\ @ a
                   (w :: GHC.Num.Num a)
                   (w1 :: Multilinear.Generic.Tensor a)
                   (w2 :: Multilinear.Generic.Tensor a)
                   (w3 :: a -> a -> a)
                   (w4 :: Multilinear.Generic.Tensor a
                          -> Multilinear.Generic.Tensor a -> Multilinear.Generic.Tensor a) ->
                 Multilinear.Generic.$w_elemByElem' @ a w1 w2 w3 w4) -}
1289665b7078452bbea28c36f93a5184
  _standardize ::
    GHC.Num.Num a =>
    Multilinear.Generic.Tensor a -> Multilinear.Generic.Tensor a
  {- Arity: 2, Strictness: <L,A><S,U>, Inline: [0],
     Unfolding: InlineRule (2, True, True)
                (\ @ a (w :: GHC.Num.Num a) (w1 :: Multilinear.Generic.Tensor a) ->
                 Multilinear.Generic.$w_standardize @ a w1) -}
6d81bf5040b98a959f3c529360fa92a1
  _standardize1 ::
    [Multilinear.Index.TIndex]
    -> (Multilinear.Generic.Tensor a -> Multilinear.Generic.Tensor a)
    -> Multilinear.Generic.Tensor a
    -> Multilinear.Generic.Tensor a
  {- Arity: 3, Strictness: <S,1*U><C(S),1*C1(U)><L,U> -}
3435455de223a292a66afccee7caf4fd
  bitDot ::
    (GHC.Num.Num a, Data.Bits.Bits a) =>
    Multilinear.Generic.Tensor a
    -> Multilinear.Generic.Tensor a -> Multilinear.Generic.Tensor a
  {- Arity: 4,
     Strictness: <L,U(C(C(U)),A,C(C(U)),A,A,A,C(U))><L,U(A,C(C(U)),C(C(U)),A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A)><S,U><L,U>,
     Inline: (sat-args=2),
     Unfolding(loop-breaker): InlineRule (4, False, False)
                              (\ @ a
                                 ($dNum :: GHC.Num.Num a)
                                 ($dBits :: Data.Bits.Bits a)
                                 (ds :: Multilinear.Generic.Tensor a)
                                 (ds1 :: Multilinear.Generic.Tensor a) ->
                               let {
                                 fail :: GHC.Prim.Void# -> Multilinear.Generic.Tensor a
                                   <join 1> {- Arity: 1 -}
                                 = \ (ds2 :: GHC.Prim.Void#)[OneShot] ->
                                   Multilinear.Generic.Err
                                     @ a
                                     (GHC.Base.augment
                                        @ GHC.Types.Char
                                        (\ @ b
                                           (c :: GHC.Types.Char -> b -> b)[OneShot]
                                           (n :: b)[OneShot] ->
                                         GHC.CString.unpackFoldrCString#
                                           @ b
                                           "Tensor product: "#
                                           c
                                           n)
                                        (GHC.Base.augment
                                           @ GHC.Types.Char
                                           (\ @ b
                                              (c :: GHC.Types.Char -> b -> b)[OneShot]
                                              (n :: b)[OneShot] ->
                                            GHC.Base.foldr
                                              @ GHC.Types.Char
                                              @ b
                                              c
                                              n
                                              Multilinear.Generic.incompatibleTypes)
                                           (GHC.Base.augment
                                              @ GHC.Types.Char
                                              (\ @ b
                                                 (c :: GHC.Types.Char -> b -> b)[OneShot]
                                                 (n :: b)[OneShot] ->
                                               GHC.CString.unpackFoldrCString#
                                                 @ b
                                                 " - index1 is "#
                                                 c
                                                 n)
                                              (GHC.Base.augment
                                                 @ GHC.Types.Char
                                                 (\ @ b
                                                    (c :: GHC.Types.Char -> b -> b)[OneShot]
                                                    (n :: b)[OneShot] ->
                                                  case ds of wild {
                                                    Multilinear.Generic.Scalar ds3
                                                    -> case GHC.Err.error
                                                              @ 'GHC.Types.LiftedRep
                                                              @ Multilinear.Index.TIndex
                                                              (GHC.Stack.Types.PushCallStack
                                                                 (GHC.Base.build
                                                                    @ GHC.Types.Char
                                                                    (\ @ b1 ->
                                                                     GHC.CString.unpackFoldrCString#
                                                                       @ b1
                                                                       "error"#))
                                                                 (GHC.Stack.Types.SrcLoc
                                                                    (GHC.Base.build
                                                                       @ GHC.Types.Char
                                                                       (\ @ b1 ->
                                                                        GHC.CString.unpackFoldrCString#
                                                                          @ b1
                                                                          "Multilinear-0.8.0.0-4dpV53DlxV5EwwV6FZreVP"#))
                                                                    (GHC.Base.build
                                                                       @ GHC.Types.Char
                                                                       (\ @ b1 ->
                                                                        GHC.CString.unpackFoldrCString#
                                                                          @ b1
                                                                          "Multilinear.Generic"#))
                                                                    (GHC.Base.build
                                                                       @ GHC.Types.Char
                                                                       (\ @ b1 ->
                                                                        GHC.CString.unpackFoldrCString#
                                                                          @ b1
                                                                          "src\\Multilinear\\Generic.hs"#))
                                                                    (GHC.Types.I# 140#)
                                                                    (GHC.Types.I# 27#)
                                                                    (GHC.Types.I# 140#)
                                                                    (GHC.Types.I# 46#))
                                                                 GHC.Stack.Types.EmptyCallStack)
                                                                `cast`
                                                              (Sym (GHC.Classes.N:IP[0]
                                                                        <"callStack">_N
                                                                        <GHC.Stack.Types.CallStack>_N))
                                                              Multilinear.Generic.scalarIndices
                                                       ret_ty b
                                                       of {}
                                                    Multilinear.Generic.SimpleFinite i ds3
                                                    -> case i of wild1 {
                                                         Multilinear.Index.Finite.Covariant size name
                                                         -> GHC.Base.foldr
                                                              @ GHC.Types.Char
                                                              @ b
                                                              c
                                                              n
                                                              (GHC.CString.unpackAppendCString#
                                                                 Multilinear.Index.$fShowTIndex14
                                                                 (GHC.Base.augment
                                                                    @ GHC.Types.Char
                                                                    (\ @ b1
                                                                       (c1 :: GHC.Types.Char
                                                                              -> b1 -> b1)[OneShot]
                                                                       (n1 :: b1)[OneShot] ->
                                                                     GHC.Base.foldr
                                                                       @ GHC.Types.Char
                                                                       @ b1
                                                                       c1
                                                                       n1
                                                                       name)
                                                                    (GHC.CString.unpackAppendCString#
                                                                       Multilinear.Index.$fShowTIndex13
                                                                       (GHC.Base.augment
                                                                          @ GHC.Types.Char
                                                                          (\ @ b1
                                                                             (c1 :: GHC.Types.Char
                                                                                    -> b1
                                                                                    -> b1)[OneShot]
                                                                             (n1 :: b1)[OneShot] ->
                                                                           GHC.Base.foldr
                                                                             @ GHC.Types.Char
                                                                             @ b1
                                                                             c1
                                                                             n1
                                                                             GHC.Show.$fShowMaybe1)
                                                                          (case size of ww2 { GHC.Types.I# ww3 ->
                                                                           case GHC.Show.$wshowSignedInt
                                                                                  11#
                                                                                  ww3
                                                                                  (GHC.Types.[]
                                                                                     @ GHC.Types.Char) of ww4 { (#,#) ww5 ww6 ->
                                                                           GHC.Base.augment
                                                                             @ GHC.Types.Char
                                                                             (\ @ b1
                                                                                (c1 :: GHC.Types.Char
                                                                                       -> b1
                                                                                       -> b1)[OneShot]
                                                                                (n1 :: b1)[OneShot] ->
                                                                              GHC.Base.foldr
                                                                                @ GHC.Types.Char
                                                                                @ b1
                                                                                c1
                                                                                n1
                                                                                (GHC.Types.:
                                                                                   @ GHC.Types.Char
                                                                                   ww5
                                                                                   ww6))
                                                                             Multilinear.Index.$fShowTIndex10 } })))))
                                                         Multilinear.Index.Finite.Contravariant size name
                                                         -> GHC.Base.foldr
                                                              @ GHC.Types.Char
                                                              @ b
                                                              c
                                                              n
                                                              (GHC.CString.unpackAppendCString#
                                                                 Multilinear.Index.$fShowTIndex9
                                                                 (GHC.Base.augment
                                                                    @ GHC.Types.Char
                                                                    (\ @ b1
                                                                       (c1 :: GHC.Types.Char
                                                                              -> b1 -> b1)[OneShot]
                                                                       (n1 :: b1)[OneShot] ->
                                                                     GHC.Base.foldr
                                                                       @ GHC.Types.Char
                                                                       @ b1
                                                                       c1
                                                                       n1
                                                                       name)
                                                                    (GHC.CString.unpackAppendCString#
                                                                       Multilinear.Index.$fShowTIndex13
                                                                       (GHC.Base.augment
                                                                          @ GHC.Types.Char
                                                                          (\ @ b1
                                                                             (c1 :: GHC.Types.Char
                                                                                    -> b1
                                                                                    -> b1)[OneShot]
                                                                             (n1 :: b1)[OneShot] ->
                                                                           GHC.Base.foldr
                                                                             @ GHC.Types.Char
                                                                             @ b1
                                                                             c1
                                                                             n1
                                                                             GHC.Show.$fShowMaybe1)
                                                                          (case size of ww2 { GHC.Types.I# ww3 ->
                                                                           case GHC.Show.$wshowSignedInt
                                                                                  11#
                                                                                  ww3
                                                                                  (GHC.Types.[]
                                                                                     @ GHC.Types.Char) of ww4 { (#,#) ww5 ww6 ->
                                                                           GHC.Base.augment
                                                                             @ GHC.Types.Char
                                                                             (\ @ b1
                                                                                (c1 :: GHC.Types.Char
                                                                                       -> b1
                                                                                       -> b1)[OneShot]
                                                                                (n1 :: b1)[OneShot] ->
                                                                              GHC.Base.foldr
                                                                                @ GHC.Types.Char
                                                                                @ b1
                                                                                c1
                                                                                n1
                                                                                (GHC.Types.:
                                                                                   @ GHC.Types.Char
                                                                                   ww5
                                                                                   ww6))
                                                                             Multilinear.Index.$fShowTIndex6 } })))))
                                                         Multilinear.Index.Finite.Indifferent size name
                                                         -> GHC.Base.foldr
                                                              @ GHC.Types.Char
                                                              @ b
                                                              c
                                                              n
                                                              (GHC.CString.unpackAppendCString#
                                                                 Multilinear.Index.$fShowTIndex5
                                                                 (GHC.Base.augment
                                                                    @ GHC.Types.Char
                                                                    (\ @ b1
                                                                       (c1 :: GHC.Types.Char
                                                                              -> b1 -> b1)[OneShot]
                                                                       (n1 :: b1)[OneShot] ->
                                                                     GHC.Base.foldr
                                                                       @ GHC.Types.Char
                                                                       @ b1
                                                                       c1
                                                                       n1
                                                                       name)
                                                                    (GHC.CString.unpackAppendCString#
                                                                       Multilinear.Index.$fShowTIndex13
                                                                       (GHC.Base.augment
                                                                          @ GHC.Types.Char
                                                                          (\ @ b1
                                                                             (c1 :: GHC.Types.Char
                                                                                    -> b1
                                                                                    -> b1)[OneShot]
                                                                             (n1 :: b1)[OneShot] ->
                                                                           GHC.Base.foldr
                                                                             @ GHC.Types.Char
                                                                             @ b1
                                                                             c1
                                                                             n1
                                                                             GHC.Show.$fShowMaybe1)
                                                                          (case size of ww2 { GHC.Types.I# ww3 ->
                                                                           case GHC.Show.$wshowSignedInt
                                                                                  11#
                                                                                  ww3
                                                                                  (GHC.Types.[]
                                                                                     @ GHC.Types.Char) of ww4 { (#,#) ww5 ww6 ->
                                                                           GHC.Base.augment
                                                                             @ GHC.Types.Char
                                                                             (\ @ b1
                                                                                (c1 :: GHC.Types.Char
                                                                                       -> b1
                                                                                       -> b1)[OneShot]
                                                                                (n1 :: b1)[OneShot] ->
                                                                              GHC.Base.foldr
                                                                                @ GHC.Types.Char
                                                                                @ b1
                                                                                c1
                                                                                n1
                                                                                (GHC.Types.:
                                                                                   @ GHC.Types.Char
                                                                                   ww5
                                                                                   ww6))
                                                                             Multilinear.Index.$fShowTIndex2 } }))))) }
                                                    Multilinear.Generic.FiniteTensor i ds3
                                                    -> case i of wild1 {
                                                         Multilinear.Index.Finite.Covariant size name
                                                         -> GHC.Base.foldr
                                                              @ GHC.Types.Char
                                                              @ b
                                                              c
                                                              n
                                                              (GHC.CString.unpackAppendCString#
                                                                 Multilinear.Index.$fShowTIndex14
                                                                 (GHC.Base.augment
                                                                    @ GHC.Types.Char
                                                                    (\ @ b1
                                                                       (c1 :: GHC.Types.Char
                                                                              -> b1 -> b1)[OneShot]
                                                                       (n1 :: b1)[OneShot] ->
                                                                     GHC.Base.foldr
                                                                       @ GHC.Types.Char
                                                                       @ b1
                                                                       c1
                                                                       n1
                                                                       name)
                                                                    (GHC.CString.unpackAppendCString#
                                                                       Multilinear.Index.$fShowTIndex13
                                                                       (GHC.Base.augment
                                                                          @ GHC.Types.Char
                                                                          (\ @ b1
                                                                             (c1 :: GHC.Types.Char
                                                                                    -> b1
                                                                                    -> b1)[OneShot]
                                                                             (n1 :: b1)[OneShot] ->
                                                                           GHC.Base.foldr
                                                                             @ GHC.Types.Char
                                                                             @ b1
                                                                             c1
                                                                             n1
                                                                             GHC.Show.$fShowMaybe1)
                                                                          (case size of ww2 { GHC.Types.I# ww3 ->
                                                                           case GHC.Show.$wshowSignedInt
                                                                                  11#
                                                                                  ww3
                                                                                  (GHC.Types.[]
                                                                                     @ GHC.Types.Char) of ww4 { (#,#) ww5 ww6 ->
                                                                           GHC.Base.augment
                                                                             @ GHC.Types.Char
                                                                             (\ @ b1
                                                                                (c1 :: GHC.Types.Char
                                                                                       -> b1
                                                                                       -> b1)[OneShot]
                                                                                (n1 :: b1)[OneShot] ->
                                                                              GHC.Base.foldr
                                                                                @ GHC.Types.Char
                                                                                @ b1
                                                                                c1
                                                                                n1
                                                                                (GHC.Types.:
                                                                                   @ GHC.Types.Char
                                                                                   ww5
                                                                                   ww6))
                                                                             Multilinear.Index.$fShowTIndex10 } })))))
                                                         Multilinear.Index.Finite.Contravariant size name
                                                         -> GHC.Base.foldr
                                                              @ GHC.Types.Char
                                                              @ b
                                                              c
                                                              n
                                                              (GHC.CString.unpackAppendCString#
                                                                 Multilinear.Index.$fShowTIndex9
                                                                 (GHC.Base.augment
                                                                    @ GHC.Types.Char
                                                                    (\ @ b1
                                                                       (c1 :: GHC.Types.Char
                                                                              -> b1 -> b1)[OneShot]
                                                                       (n1 :: b1)[OneShot] ->
                                                                     GHC.Base.foldr
                                                                       @ GHC.Types.Char
                                                                       @ b1
                                                                       c1
                                                                       n1
                                                                       name)
                                                                    (GHC.CString.unpackAppendCString#
                                                                       Multilinear.Index.$fShowTIndex13
                                                                       (GHC.Base.augment
                                                                          @ GHC.Types.Char
                                                                          (\ @ b1
                                                                             (c1 :: GHC.Types.Char
                                                                                    -> b1
                                                                                    -> b1)[OneShot]
                                                                             (n1 :: b1)[OneShot] ->
                                                                           GHC.Base.foldr
                                                                             @ GHC.Types.Char
                                                                             @ b1
                                                                             c1
                                                                             n1
                                                                             GHC.Show.$fShowMaybe1)
                                                                          (case size of ww2 { GHC.Types.I# ww3 ->
                                                                           case GHC.Show.$wshowSignedInt
                                                                                  11#
                                                                                  ww3
                                                                                  (GHC.Types.[]
                                                                                     @ GHC.Types.Char) of ww4 { (#,#) ww5 ww6 ->
                                                                           GHC.Base.augment
                                                                             @ GHC.Types.Char
                                                                             (\ @ b1
                                                                                (c1 :: GHC.Types.Char
                                                                                       -> b1
                                                                                       -> b1)[OneShot]
                                                                                (n1 :: b1)[OneShot] ->
                                                                              GHC.Base.foldr
                                                                                @ GHC.Types.Char
                                                                                @ b1
                                                                                c1
                                                                                n1
                                                                                (GHC.Types.:
                                                                                   @ GHC.Types.Char
                                                                                   ww5
                                                                                   ww6))
                                                                             Multilinear.Index.$fShowTIndex6 } })))))
                                                         Multilinear.Index.Finite.Indifferent size name
                                                         -> GHC.Base.foldr
                                                              @ GHC.Types.Char
                                                              @ b
                                                              c
                                                              n
                                                              (GHC.CString.unpackAppendCString#
                                                                 Multilinear.Index.$fShowTIndex5
                                                                 (GHC.Base.augment
                                                                    @ GHC.Types.Char
                                                                    (\ @ b1
                                                                       (c1 :: GHC.Types.Char
                                                                              -> b1 -> b1)[OneShot]
                                                                       (n1 :: b1)[OneShot] ->
                                                                     GHC.Base.foldr
                                                                       @ GHC.Types.Char
                                                                       @ b1
                                                                       c1
                                                                       n1
                                                                       name)
                                                                    (GHC.CString.unpackAppendCString#
                                                                       Multilinear.Index.$fShowTIndex13
                                                                       (GHC.Base.augment
                                                                          @ GHC.Types.Char
                                                                          (\ @ b1
                                                                             (c1 :: GHC.Types.Char
                                                                                    -> b1
                                                                                    -> b1)[OneShot]
                                                                             (n1 :: b1)[OneShot] ->
                                                                           GHC.Base.foldr
                                                                             @ GHC.Types.Char
                                                                             @ b1
                                                                             c1
                                                                             n1
                                                                             GHC.Show.$fShowMaybe1)
                                                                          (case size of ww2 { GHC.Types.I# ww3 ->
                                                                           case GHC.Show.$wshowSignedInt
                                                                                  11#
                                                                                  ww3
                                                                                  (GHC.Types.[]
                                                                                     @ GHC.Types.Char) of ww4 { (#,#) ww5 ww6 ->
                                                                           GHC.Base.augment
                                                                             @ GHC.Types.Char
                                                                             (\ @ b1
                                                                                (c1 :: GHC.Types.Char
                                                                                       -> b1
                                                                                       -> b1)[OneShot]
                                                                                (n1 :: b1)[OneShot] ->
                                                                              GHC.Base.foldr
                                                                                @ GHC.Types.Char
                                                                                @ b1
                                                                                c1
                                                                                n1
                                                                                (GHC.Types.:
                                                                                   @ GHC.Types.Char
                                                                                   ww5
                                                                                   ww6))
                                                                             Multilinear.Index.$fShowTIndex2 } }))))) }
                                                    Multilinear.Generic.InfiniteTensor i ds3
                                                    -> case i of wild1 {
                                                         Multilinear.Index.Infinite.Covariant name
                                                         -> GHC.Base.foldr
                                                              @ GHC.Types.Char
                                                              @ b
                                                              c
                                                              n
                                                              (GHC.CString.unpackAppendCString#
                                                                 Multilinear.Index.$fShowTIndex14
                                                                 (GHC.Base.augment
                                                                    @ GHC.Types.Char
                                                                    (\ @ b1
                                                                       (c1 :: GHC.Types.Char
                                                                              -> b1 -> b1)[OneShot]
                                                                       (n1 :: b1)[OneShot] ->
                                                                     GHC.Base.foldr
                                                                       @ GHC.Types.Char
                                                                       @ b1
                                                                       c1
                                                                       n1
                                                                       name)
                                                                    (GHC.CString.unpackAppendCString#
                                                                       Multilinear.Index.$fShowTIndex13
                                                                       Multilinear.Index.$fShowTIndex12)))
                                                         Multilinear.Index.Infinite.Contravariant name
                                                         -> GHC.Base.foldr
                                                              @ GHC.Types.Char
                                                              @ b
                                                              c
                                                              n
                                                              (GHC.CString.unpackAppendCString#
                                                                 Multilinear.Index.$fShowTIndex9
                                                                 (GHC.Base.augment
                                                                    @ GHC.Types.Char
                                                                    (\ @ b1
                                                                       (c1 :: GHC.Types.Char
                                                                              -> b1 -> b1)[OneShot]
                                                                       (n1 :: b1)[OneShot] ->
                                                                     GHC.Base.foldr
                                                                       @ GHC.Types.Char
                                                                       @ b1
                                                                       c1
                                                                       n1
                                                                       name)
                                                                    (GHC.CString.unpackAppendCString#
                                                                       Multilinear.Index.$fShowTIndex13
                                                                       Multilinear.Index.$fShowTIndex8)))
                                                         Multilinear.Index.Infinite.Indifferent name
                                                         -> GHC.Base.foldr
                                                              @ GHC.Types.Char
                                                              @ b
                                                              c
                                                              n
                                                              (GHC.CString.unpackAppendCString#
                                                                 Multilinear.Index.$fShowTIndex5
                                                                 (GHC.Base.augment
                                                                    @ GHC.Types.Char
                                                                    (\ @ b1
                                                                       (c1 :: GHC.Types.Char
                                                                              -> b1 -> b1)[OneShot]
                                                                       (n1 :: b1)[OneShot] ->
                                                                     GHC.Base.foldr
                                                                       @ GHC.Types.Char
                                                                       @ b1
                                                                       c1
                                                                       n1
                                                                       name)
                                                                    (GHC.CString.unpackAppendCString#
                                                                       Multilinear.Index.$fShowTIndex13
                                                                       Multilinear.Index.$fShowTIndex4))) }
                                                    Multilinear.Generic.Err msg
                                                    -> case GHC.Err.error
                                                              @ 'GHC.Types.LiftedRep
                                                              @ Multilinear.Index.TIndex
                                                              (GHC.Stack.Types.PushCallStack
                                                                 (GHC.Base.build
                                                                    @ GHC.Types.Char
                                                                    (\ @ b1 ->
                                                                     GHC.CString.unpackFoldrCString#
                                                                       @ b1
                                                                       "error"#))
                                                                 (GHC.Stack.Types.SrcLoc
                                                                    (GHC.Base.build
                                                                       @ GHC.Types.Char
                                                                       (\ @ b1 ->
                                                                        GHC.CString.unpackFoldrCString#
                                                                          @ b1
                                                                          "Multilinear-0.8.0.0-4dpV53DlxV5EwwV6FZreVP"#))
                                                                    (GHC.Base.build
                                                                       @ GHC.Types.Char
                                                                       (\ @ b1 ->
                                                                        GHC.CString.unpackFoldrCString#
                                                                          @ b1
                                                                          "Multilinear.Generic"#))
                                                                    (GHC.Base.build
                                                                       @ GHC.Types.Char
                                                                       (\ @ b1 ->
                                                                        GHC.CString.unpackFoldrCString#
                                                                          @ b1
                                                                          "src\\Multilinear\\Generic.hs"#))
                                                                    (GHC.Types.I# 144#)
                                                                    (GHC.Types.I# 27#)
                                                                    (GHC.Types.I# 144#)
                                                                    (GHC.Types.I# 36#))
                                                                 GHC.Stack.Types.EmptyCallStack)
                                                                `cast`
                                                              (Sym (GHC.Classes.N:IP[0]
                                                                        <"callStack">_N
                                                                        <GHC.Stack.Types.CallStack>_N))
                                                              msg
                                                       ret_ty b
                                                       of {} })
                                                 (GHC.Base.augment
                                                    @ GHC.Types.Char
                                                    (\ @ b
                                                       (c :: GHC.Types.Char -> b -> b)[OneShot]
                                                       (n :: b)[OneShot] ->
                                                     GHC.CString.unpackFoldrCString#
                                                       @ b
                                                       " and index2 is "#
                                                       c
                                                       n)
                                                    (case ds1 of wild {
                                                       Multilinear.Generic.Scalar ds3
                                                       -> case GHC.Err.error
                                                                 @ 'GHC.Types.LiftedRep
                                                                 @ Multilinear.Index.TIndex
                                                                 (GHC.Stack.Types.PushCallStack
                                                                    (GHC.Base.build
                                                                       @ GHC.Types.Char
                                                                       (\ @ b ->
                                                                        GHC.CString.unpackFoldrCString#
                                                                          @ b
                                                                          "error"#))
                                                                    (GHC.Stack.Types.SrcLoc
                                                                       (GHC.Base.build
                                                                          @ GHC.Types.Char
                                                                          (\ @ b ->
                                                                           GHC.CString.unpackFoldrCString#
                                                                             @ b
                                                                             "Multilinear-0.8.0.0-4dpV53DlxV5EwwV6FZreVP"#))
                                                                       (GHC.Base.build
                                                                          @ GHC.Types.Char
                                                                          (\ @ b ->
                                                                           GHC.CString.unpackFoldrCString#
                                                                             @ b
                                                                             "Multilinear.Generic"#))
                                                                       (GHC.Base.build
                                                                          @ GHC.Types.Char
                                                                          (\ @ b ->
                                                                           GHC.CString.unpackFoldrCString#
                                                                             @ b
                                                                             "src\\Multilinear\\Generic.hs"#))
                                                                       (GHC.Types.I# 140#)
                                                                       (GHC.Types.I# 27#)
                                                                       (GHC.Types.I# 140#)
                                                                       (GHC.Types.I# 46#))
                                                                    GHC.Stack.Types.EmptyCallStack)
                                                                   `cast`
                                                                 (Sym (GHC.Classes.N:IP[0]
                                                                           <"callStack">_N
                                                                           <GHC.Stack.Types.CallStack>_N))
                                                                 Multilinear.Generic.scalarIndices
                                                          ret_ty [GHC.Types.Char]
                                                          of {}
                                                       Multilinear.Generic.SimpleFinite i ds3
                                                       -> case i of wild1 {
                                                            Multilinear.Index.Finite.Covariant size name
                                                            -> GHC.CString.unpackAppendCString#
                                                                 Multilinear.Index.$fShowTIndex14
                                                                 (GHC.Base.augment
                                                                    @ GHC.Types.Char
                                                                    (\ @ b
                                                                       (c :: GHC.Types.Char
                                                                             -> b -> b)[OneShot]
                                                                       (n :: b)[OneShot] ->
                                                                     GHC.Base.foldr
                                                                       @ GHC.Types.Char
                                                                       @ b
                                                                       c
                                                                       n
                                                                       name)
                                                                    (GHC.CString.unpackAppendCString#
                                                                       Multilinear.Index.$fShowTIndex13
                                                                       (GHC.Base.augment
                                                                          @ GHC.Types.Char
                                                                          (\ @ b
                                                                             (c :: GHC.Types.Char
                                                                                   -> b
                                                                                   -> b)[OneShot]
                                                                             (n :: b)[OneShot] ->
                                                                           GHC.Base.foldr
                                                                             @ GHC.Types.Char
                                                                             @ b
                                                                             c
                                                                             n
                                                                             GHC.Show.$fShowMaybe1)
                                                                          (case size of ww2 { GHC.Types.I# ww3 ->
                                                                           case GHC.Show.$wshowSignedInt
                                                                                  11#
                                                                                  ww3
                                                                                  (GHC.Types.[]
                                                                                     @ GHC.Types.Char) of ww4 { (#,#) ww5 ww6 ->
                                                                           GHC.Base.augment
                                                                             @ GHC.Types.Char
                                                                             (\ @ b
                                                                                (c :: GHC.Types.Char
                                                                                      -> b
                                                                                      -> b)[OneShot]
                                                                                (n :: b)[OneShot] ->
                                                                              GHC.Base.foldr
                                                                                @ GHC.Types.Char
                                                                                @ b
                                                                                c
                                                                                n
                                                                                (GHC.Types.:
                                                                                   @ GHC.Types.Char
                                                                                   ww5
                                                                                   ww6))
                                                                             Multilinear.Index.$fShowTIndex10 } }))))
                                                            Multilinear.Index.Finite.Contravariant size name
                                                            -> GHC.CString.unpackAppendCString#
                                                                 Multilinear.Index.$fShowTIndex9
                                                                 (GHC.Base.augment
                                                                    @ GHC.Types.Char
                                                                    (\ @ b
                                                                       (c :: GHC.Types.Char
                                                                             -> b -> b)[OneShot]
                                                                       (n :: b)[OneShot] ->
                                                                     GHC.Base.foldr
                                                                       @ GHC.Types.Char
                                                                       @ b
                                                                       c
                                                                       n
                                                                       name)
                                                                    (GHC.CString.unpackAppendCString#
                                                                       Multilinear.Index.$fShowTIndex13
                                                                       (GHC.Base.augment
                                                                          @ GHC.Types.Char
                                                                          (\ @ b
                                                                             (c :: GHC.Types.Char
                                                                                   -> b
                                                                                   -> b)[OneShot]
                                                                             (n :: b)[OneShot] ->
                                                                           GHC.Base.foldr
                                                                             @ GHC.Types.Char
                                                                             @ b
                                                                             c
                                                                             n
                                                                             GHC.Show.$fShowMaybe1)
                                                                          (case size of ww2 { GHC.Types.I# ww3 ->
                                                                           case GHC.Show.$wshowSignedInt
                                                                                  11#
                                                                                  ww3
                                                                                  (GHC.Types.[]
                                                                                     @ GHC.Types.Char) of ww4 { (#,#) ww5 ww6 ->
                                                                           GHC.Base.augment
                                                                             @ GHC.Types.Char
                                                                             (\ @ b
                                                                                (c :: GHC.Types.Char
                                                                                      -> b
                                                                                      -> b)[OneShot]
                                                                                (n :: b)[OneShot] ->
                                                                              GHC.Base.foldr
                                                                                @ GHC.Types.Char
                                                                                @ b
                                                                                c
                                                                                n
                                                                                (GHC.Types.:
                                                                                   @ GHC.Types.Char
                                                                                   ww5
                                                                                   ww6))
                                                                             Multilinear.Index.$fShowTIndex6 } }))))
                                                            Multilinear.Index.Finite.Indifferent size name
                                                            -> GHC.CString.unpackAppendCString#
                                                                 Multilinear.Index.$fShowTIndex5
                                                                 (GHC.Base.augment
                                                                    @ GHC.Types.Char
                                                                    (\ @ b
                                                                       (c :: GHC.Types.Char
                                                                             -> b -> b)[OneShot]
                                                                       (n :: b)[OneShot] ->
                                                                     GHC.Base.foldr
                                                                       @ GHC.Types.Char
                                                                       @ b
                                                                       c
                                                                       n
                                                                       name)
                                                                    (GHC.CString.unpackAppendCString#
                                                                       Multilinear.Index.$fShowTIndex13
                                                                       (GHC.Base.augment
                                                                          @ GHC.Types.Char
                                                                          (\ @ b
                                                                             (c :: GHC.Types.Char
                                                                                   -> b
                                                                                   -> b)[OneShot]
                                                                             (n :: b)[OneShot] ->
                                                                           GHC.Base.foldr
                                                                             @ GHC.Types.Char
                                                                             @ b
                                                                             c
                                                                             n
                                                                             GHC.Show.$fShowMaybe1)
                                                                          (case size of ww2 { GHC.Types.I# ww3 ->
                                                                           case GHC.Show.$wshowSignedInt
                                                                                  11#
                                                                                  ww3
                                                                                  (GHC.Types.[]
                                                                                     @ GHC.Types.Char) of ww4 { (#,#) ww5 ww6 ->
                                                                           GHC.Base.augment
                                                                             @ GHC.Types.Char
                                                                             (\ @ b
                                                                                (c :: GHC.Types.Char
                                                                                      -> b
                                                                                      -> b)[OneShot]
                                                                                (n :: b)[OneShot] ->
                                                                              GHC.Base.foldr
                                                                                @ GHC.Types.Char
                                                                                @ b
                                                                                c
                                                                                n
                                                                                (GHC.Types.:
                                                                                   @ GHC.Types.Char
                                                                                   ww5
                                                                                   ww6))
                                                                             Multilinear.Index.$fShowTIndex2 } })))) }
                                                       Multilinear.Generic.FiniteTensor i ds3
                                                       -> case i of wild1 {
                                                            Multilinear.Index.Finite.Covariant size name
                                                            -> GHC.CString.unpackAppendCString#
                                                                 Multilinear.Index.$fShowTIndex14
                                                                 (GHC.Base.augment
                                                                    @ GHC.Types.Char
                                                                    (\ @ b
                                                                       (c :: GHC.Types.Char
                                                                             -> b -> b)[OneShot]
                                                                       (n :: b)[OneShot] ->
                                                                     GHC.Base.foldr
                                                                       @ GHC.Types.Char
                                                                       @ b
                                                                       c
                                                                       n
                                                                       name)
                                                                    (GHC.CString.unpackAppendCString#
                                                                       Multilinear.Index.$fShowTIndex13
                                                                       (GHC.Base.augment
                                                                          @ GHC.Types.Char
                                                                          (\ @ b
                                                                             (c :: GHC.Types.Char
                                                                                   -> b
                                                                                   -> b)[OneShot]
                                                                             (n :: b)[OneShot] ->
                                                                           GHC.Base.foldr
                                                                             @ GHC.Types.Char
                                                                             @ b
                                                                             c
                                                                             n
                                                                             GHC.Show.$fShowMaybe1)
                                                                          (case size of ww2 { GHC.Types.I# ww3 ->
                                                                           case GHC.Show.$wshowSignedInt
                                                                                  11#
                                                                                  ww3
                                                                                  (GHC.Types.[]
                                                                                     @ GHC.Types.Char) of ww4 { (#,#) ww5 ww6 ->
                                                                           GHC.Base.augment
                                                                             @ GHC.Types.Char
                                                                             (\ @ b
                                                                                (c :: GHC.Types.Char
                                                                                      -> b
                                                                                      -> b)[OneShot]
                                                                                (n :: b)[OneShot] ->
                                                                              GHC.Base.foldr
                                                                                @ GHC.Types.Char
                                                                                @ b
                                                                                c
                                                                                n
                                                                                (GHC.Types.:
                                                                                   @ GHC.Types.Char
                                                                                   ww5
                                                                                   ww6))
                                                                             Multilinear.Index.$fShowTIndex10 } }))))
                                                            Multilinear.Index.Finite.Contravariant size name
                                                            -> GHC.CString.unpackAppendCString#
                                                                 Multilinear.Index.$fShowTIndex9
                                                                 (GHC.Base.augment
                                                                    @ GHC.Types.Char
                                                                    (\ @ b
                                                                       (c :: GHC.Types.Char
                                                                             -> b -> b)[OneShot]
                                                                       (n :: b)[OneShot] ->
                                                                     GHC.Base.foldr
                                                                       @ GHC.Types.Char
                                                                       @ b
                                                                       c
                                                                       n
                                                                       name)
                                                                    (GHC.CString.unpackAppendCString#
                                                                       Multilinear.Index.$fShowTIndex13
                                                                       (GHC.Base.augment
                                                                          @ GHC.Types.Char
                                                                          (\ @ b
                                                                             (c :: GHC.Types.Char
                                                                                   -> b
                                                                                   -> b)[OneShot]
                                                                             (n :: b)[OneShot] ->
                                                                           GHC.Base.foldr
                                                                             @ GHC.Types.Char
                                                                             @ b
                                                                             c
                                                                             n
                                                                             GHC.Show.$fShowMaybe1)
                                                                          (case size of ww2 { GHC.Types.I# ww3 ->
                                                                           case GHC.Show.$wshowSignedInt
                                                                                  11#
                                                                                  ww3
                                                                                  (GHC.Types.[]
                                                                                     @ GHC.Types.Char) of ww4 { (#,#) ww5 ww6 ->
                                                                           GHC.Base.augment
                                                                             @ GHC.Types.Char
                                                                             (\ @ b
                                                                                (c :: GHC.Types.Char
                                                                                      -> b
                                                                                      -> b)[OneShot]
                                                                                (n :: b)[OneShot] ->
                                                                              GHC.Base.foldr
                                                                                @ GHC.Types.Char
                                                                                @ b
                                                                                c
                                                                                n
                                                                                (GHC.Types.:
                                                                                   @ GHC.Types.Char
                                                                                   ww5
                                                                                   ww6))
                                                                             Multilinear.Index.$fShowTIndex6 } }))))
                                                            Multilinear.Index.Finite.Indifferent size name
                                                            -> GHC.CString.unpackAppendCString#
                                                                 Multilinear.Index.$fShowTIndex5
                                                                 (GHC.Base.augment
                                                                    @ GHC.Types.Char
                                                                    (\ @ b
                                                                       (c :: GHC.Types.Char
                                                                             -> b -> b)[OneShot]
                                                                       (n :: b)[OneShot] ->
                                                                     GHC.Base.foldr
                                                                       @ GHC.Types.Char
                                                                       @ b
                                                                       c
                                                                       n
                                                                       name)
                                                                    (GHC.CString.unpackAppendCString#
                                                                       Multilinear.Index.$fShowTIndex13
                                                                       (GHC.Base.augment
                                                                          @ GHC.Types.Char
                                                                          (\ @ b
                                                                             (c :: GHC.Types.Char
                                                                                   -> b
                                                                                   -> b)[OneShot]
                                                                             (n :: b)[OneShot] ->
                                                                           GHC.Base.foldr
                                                                             @ GHC.Types.Char
                                                                             @ b
                                                                             c
                                                                             n
                                                                             GHC.Show.$fShowMaybe1)
                                                                          (case size of ww2 { GHC.Types.I# ww3 ->
                                                                           case GHC.Show.$wshowSignedInt
                                                                                  11#
                                                                                  ww3
                                                                                  (GHC.Types.[]
                                                                                     @ GHC.Types.Char) of ww4 { (#,#) ww5 ww6 ->
                                                                           GHC.Base.augment
                                                                             @ GHC.Types.Char
                                                                             (\ @ b
                                                                                (c :: GHC.Types.Char
                                                                                      -> b
                                                                                      -> b)[OneShot]
                                                                                (n :: b)[OneShot] ->
                                                                              GHC.Base.foldr
                                                                                @ GHC.Types.Char
                                                                                @ b
                                                                                c
                                                                                n
                                                                                (GHC.Types.:
                                                                                   @ GHC.Types.Char
                                                                                   ww5
                                                                                   ww6))
                                                                             Multilinear.Index.$fShowTIndex2 } })))) }
                                                       Multilinear.Generic.InfiniteTensor i ds3
                                                       -> case i of wild1 {
                                                            Multilinear.Index.Infinite.Covariant name
                                                            -> GHC.CString.unpackAppendCString#
                                                                 Multilinear.Index.$fShowTIndex14
                                                                 (GHC.Base.augment
                                                                    @ GHC.Types.Char
                                                                    (\ @ b
                                                                       (c :: GHC.Types.Char
                                                                             -> b -> b)[OneShot]
                                                                       (n :: b)[OneShot] ->
                                                                     GHC.Base.foldr
                                                                       @ GHC.Types.Char
                                                                       @ b
                                                                       c
                                                                       n
                                                                       name)
                                                                    (GHC.CString.unpackAppendCString#
                                                                       Multilinear.Index.$fShowTIndex13
                                                                       Multilinear.Index.$fShowTIndex12))
                                                            Multilinear.Index.Infinite.Contravariant name
                                                            -> GHC.CString.unpackAppendCString#
                                                                 Multilinear.Index.$fShowTIndex9
                                                                 (GHC.Base.augment
                                                                    @ GHC.Types.Char
                                                                    (\ @ b
                                                                       (c :: GHC.Types.Char
                                                                             -> b -> b)[OneShot]
                                                                       (n :: b)[OneShot] ->
                                                                     GHC.Base.foldr
                                                                       @ GHC.Types.Char
                                                                       @ b
                                                                       c
                                                                       n
                                                                       name)
                                                                    (GHC.CString.unpackAppendCString#
                                                                       Multilinear.Index.$fShowTIndex13
                                                                       Multilinear.Index.$fShowTIndex8))
                                                            Multilinear.Index.Infinite.Indifferent name
                                                            -> GHC.CString.unpackAppendCString#
                                                                 Multilinear.Index.$fShowTIndex5
                                                                 (GHC.Base.augment
                                                                    @ GHC.Types.Char
                                                                    (\ @ b
                                                                       (c :: GHC.Types.Char
                                                                             -> b -> b)[OneShot]
                                                                       (n :: b)[OneShot] ->
                                                                     GHC.Base.foldr
                                                                       @ GHC.Types.Char
                                                                       @ b
                                                                       c
                                                                       n
                                                                       name)
                                                                    (GHC.CString.unpackAppendCString#
                                                                       Multilinear.Index.$fShowTIndex13
                                                                       Multilinear.Index.$fShowTIndex4)) }
                                                       Multilinear.Generic.Err msg
                                                       -> case GHC.Err.error
                                                                 @ 'GHC.Types.LiftedRep
                                                                 @ Multilinear.Index.TIndex
                                                                 (GHC.Stack.Types.PushCallStack
                                                                    (GHC.Base.build
                                                                       @ GHC.Types.Char
                                                                       (\ @ b ->
                                                                        GHC.CString.unpackFoldrCString#
                                                                          @ b
                                                                          "error"#))
                                                                    (GHC.Stack.Types.SrcLoc
                                                                       (GHC.Base.build
                                                                          @ GHC.Types.Char
                                                                          (\ @ b ->
                                                                           GHC.CString.unpackFoldrCString#
                                                                             @ b
                                                                             "Multilinear-0.8.0.0-4dpV53DlxV5EwwV6FZreVP"#))
                                                                       (GHC.Base.build
                                                                          @ GHC.Types.Char
                                                                          (\ @ b ->
                                                                           GHC.CString.unpackFoldrCString#
                                                                             @ b
                                                                             "Multilinear.Generic"#))
                                                                       (GHC.Base.build
                                                                          @ GHC.Types.Char
                                                                          (\ @ b ->
                                                                           GHC.CString.unpackFoldrCString#
                                                                             @ b
                                                                             "src\\Multilinear\\Generic.hs"#))
                                                                       (GHC.Types.I# 144#)
                                                                       (GHC.Types.I# 27#)
                                                                       (GHC.Types.I# 144#)
                                                                       (GHC.Types.I# 36#))
                                                                    GHC.Stack.Types.EmptyCallStack)
                                                                   `cast`
                                                                 (Sym (GHC.Classes.N:IP[0]
                                                                           <"callStack">_N
                                                                           <GHC.Stack.Types.CallStack>_N))
                                                                 msg
                                                          ret_ty [GHC.Types.Char]
                                                          of {} }))))))
                               } in
                               case ds of wild {
                                 DEFAULT -> fail GHC.Prim.void#
                                 Multilinear.Generic.SimpleFinite i1 ts1'
                                 -> case i1 of wild1 {
                                      DEFAULT -> fail GHC.Prim.void#
                                      Multilinear.Index.Finite.Covariant count1 ds2
                                      -> case ds1 of wild2 {
                                           DEFAULT -> fail GHC.Prim.void#
                                           Multilinear.Generic.SimpleFinite i2 ts2'
                                           -> case i2 of wild3 {
                                                DEFAULT -> fail GHC.Prim.void#
                                                Multilinear.Index.Finite.Contravariant count2 ds3
                                                -> case GHC.Classes.eqInt count1 count2 of wild4 {
                                                     GHC.Types.False
                                                     -> Multilinear.Generic.Err
                                                          @ a
                                                          (GHC.Base.augment
                                                             @ GHC.Types.Char
                                                             (\ @ b
                                                                (c :: GHC.Types.Char
                                                                      -> b -> b)[OneShot]
                                                                (n :: b)[OneShot] ->
                                                              GHC.CString.unpackFoldrCString#
                                                                @ b
                                                                "Tensor product: "#
                                                                c
                                                                n)
                                                             (GHC.Base.augment
                                                                @ GHC.Types.Char
                                                                (\ @ b
                                                                   (c :: GHC.Types.Char
                                                                         -> b -> b)[OneShot]
                                                                   (n :: b)[OneShot] ->
                                                                 GHC.Base.foldr
                                                                   @ GHC.Types.Char
                                                                   @ b
                                                                   c
                                                                   n
                                                                   Multilinear.Generic.incompatibleTypes)
                                                                (GHC.Base.augment
                                                                   @ GHC.Types.Char
                                                                   (\ @ b
                                                                      (c :: GHC.Types.Char
                                                                            -> b -> b)[OneShot]
                                                                      (n :: b)[OneShot] ->
                                                                    GHC.CString.unpackFoldrCString#
                                                                      @ b
                                                                      " - index1 is "#
                                                                      c
                                                                      n)
                                                                   (GHC.Base.augment
                                                                      @ GHC.Types.Char
                                                                      (\ @ b
                                                                         (c :: GHC.Types.Char
                                                                               -> b -> b)[OneShot]
                                                                         (n :: b)[OneShot] ->
                                                                       GHC.Base.foldr
                                                                         @ GHC.Types.Char
                                                                         @ b
                                                                         c
                                                                         n
                                                                         (GHC.CString.unpackAppendCString#
                                                                            Multilinear.Index.$fShowTIndex14
                                                                            (GHC.Base.augment
                                                                               @ GHC.Types.Char
                                                                               (\ @ b1
                                                                                  (c1 :: GHC.Types.Char
                                                                                         -> b1
                                                                                         -> b1)[OneShot]
                                                                                  (n1 :: b1)[OneShot] ->
                                                                                GHC.Base.foldr
                                                                                  @ GHC.Types.Char
                                                                                  @ b1
                                                                                  c1
                                                                                  n1
                                                                                  ds2)
                                                                               (GHC.CString.unpackAppendCString#
                                                                                  Multilinear.Index.$fShowTIndex13
                                                                                  (GHC.Base.augment
                                                                                     @ GHC.Types.Char
                                                                                     (\ @ b1
                                                                                        (c1 :: GHC.Types.Char
                                                                                               -> b1
                                                                                               -> b1)[OneShot]
                                                                                        (n1 :: b1)[OneShot] ->
                                                                                      GHC.Base.foldr
                                                                                        @ GHC.Types.Char
                                                                                        @ b1
                                                                                        c1
                                                                                        n1
                                                                                        GHC.Show.$fShowMaybe1)
                                                                                     (case count1 of ww2 { GHC.Types.I# ww3 ->
                                                                                      case GHC.Show.$wshowSignedInt
                                                                                             11#
                                                                                             ww3
                                                                                             (GHC.Types.[]
                                                                                                @ GHC.Types.Char) of ww4 { (#,#) ww5 ww6 ->
                                                                                      GHC.Base.augment
                                                                                        @ GHC.Types.Char
                                                                                        (\ @ b1
                                                                                           (c1 :: GHC.Types.Char
                                                                                                  -> b1
                                                                                                  -> b1)[OneShot]
                                                                                           (n1 :: b1)[OneShot] ->
                                                                                         GHC.Base.foldr
                                                                                           @ GHC.Types.Char
                                                                                           @ b1
                                                                                           c1
                                                                                           n1
                                                                                           (GHC.Types.:
                                                                                              @ GHC.Types.Char
                                                                                              ww5
                                                                                              ww6))
                                                                                        Multilinear.Index.$fShowTIndex10 } }))))))
                                                                      (GHC.Base.augment
                                                                         @ GHC.Types.Char
                                                                         (\ @ b
                                                                            (c :: GHC.Types.Char
                                                                                  -> b
                                                                                  -> b)[OneShot]
                                                                            (n :: b)[OneShot] ->
                                                                          GHC.CString.unpackFoldrCString#
                                                                            @ b
                                                                            " and index2 is "#
                                                                            c
                                                                            n)
                                                                         (GHC.CString.unpackAppendCString#
                                                                            Multilinear.Index.$fShowTIndex9
                                                                            (GHC.Base.augment
                                                                               @ GHC.Types.Char
                                                                               (\ @ b
                                                                                  (c :: GHC.Types.Char
                                                                                        -> b
                                                                                        -> b)[OneShot]
                                                                                  (n :: b)[OneShot] ->
                                                                                GHC.Base.foldr
                                                                                  @ GHC.Types.Char
                                                                                  @ b
                                                                                  c
                                                                                  n
                                                                                  ds3)
                                                                               (GHC.CString.unpackAppendCString#
                                                                                  Multilinear.Index.$fShowTIndex13
                                                                                  (GHC.Base.augment
                                                                                     @ GHC.Types.Char
                                                                                     (\ @ b
                                                                                        (c :: GHC.Types.Char
                                                                                              -> b
                                                                                              -> b)[OneShot]
                                                                                        (n :: b)[OneShot] ->
                                                                                      GHC.Base.foldr
                                                                                        @ GHC.Types.Char
                                                                                        @ b
                                                                                        c
                                                                                        n
                                                                                        GHC.Show.$fShowMaybe1)
                                                                                     (case count2 of ww2 { GHC.Types.I# ww3 ->
                                                                                      case GHC.Show.$wshowSignedInt
                                                                                             11#
                                                                                             ww3
                                                                                             (GHC.Types.[]
                                                                                                @ GHC.Types.Char) of ww4 { (#,#) ww5 ww6 ->
                                                                                      GHC.Base.augment
                                                                                        @ GHC.Types.Char
                                                                                        (\ @ b
                                                                                           (c :: GHC.Types.Char
                                                                                                 -> b
                                                                                                 -> b)[OneShot]
                                                                                           (n :: b)[OneShot] ->
                                                                                         GHC.Base.foldr
                                                                                           @ GHC.Types.Char
                                                                                           @ b
                                                                                           c
                                                                                           n
                                                                                           (GHC.Types.:
                                                                                              @ GHC.Types.Char
                                                                                              ww5
                                                                                              ww6))
                                                                                        Multilinear.Index.$fShowTIndex6 } }))))))))))
                                                     GHC.Types.True
                                                     -> Multilinear.Generic.Scalar
                                                          @ a
                                                          (let {
                                                             f :: a -> a -> a
                                                             = Data.Bits..|. @ a $dBits
                                                           } in
                                                           let {
                                                             f1 :: a -> a -> a
                                                             = Data.Bits..&. @ a $dBits
                                                           } in
                                                           (Data.Vector.Fusion.Bundle.Monadic.foldlM'
                                                              @ Data.Vector.Fusion.Util.Id
                                                              @ a
                                                              @ a
                                                              @ Data.Vector.Vector
                                                              Data.Vector.Fusion.Util.$fMonadId
                                                              (\ (a1 :: a) (b1 :: a)[OneShot] ->
                                                               f a1 b1)
                                                                `cast`
                                                              (<a>_R
                                                               ->_R <a>_R
                                                               ->_R Sym (Data.Vector.Fusion.Util.N:Id[0]
                                                                             <a>_R))
                                                              (GHC.Num.fromInteger @ a $dNum 0)
                                                              (Data.Vector.Fusion.Bundle.Monadic.zipWithM
                                                                 @ Data.Vector.Fusion.Util.Id
                                                                 @ a
                                                                 @ a
                                                                 @ a
                                                                 @ Data.Vector.Vector
                                                                 Data.Vector.Fusion.Util.$fMonadId
                                                                 (\ (a1 :: a) (b1 :: a)[OneShot] ->
                                                                  f1 a1 b1)
                                                                   `cast`
                                                                 (<a>_R
                                                                  ->_R <a>_R
                                                                  ->_R Sym (Data.Vector.Fusion.Util.N:Id[0]
                                                                                <a>_R))
                                                                 (Data.Vector.Generic.stream
                                                                    @ Data.Vector.Vector
                                                                    @ a
                                                                    (Data.Vector.$fVectorVectora
                                                                       @ a)
                                                                    ts1')
                                                                 (Data.Vector.Generic.stream
                                                                    @ Data.Vector.Vector
                                                                    @ a
                                                                    (Data.Vector.$fVectorVectora
                                                                       @ a)
                                                                    ts2')))
                                                             `cast`
                                                           (Data.Vector.Fusion.Util.N:Id[0]
                                                                <a>_R)) } }
                                           Multilinear.Generic.FiniteTensor i2 ts2'
                                           -> case i2 of wild3 {
                                                DEFAULT -> fail GHC.Prim.void#
                                                Multilinear.Index.Finite.Contravariant count2 ds3
                                                -> case GHC.Classes.eqInt count1 count2 of wild4 {
                                                     GHC.Types.False
                                                     -> Multilinear.Generic.Err
                                                          @ a
                                                          (GHC.Base.augment
                                                             @ GHC.Types.Char
                                                             (\ @ b
                                                                (c :: GHC.Types.Char
                                                                      -> b -> b)[OneShot]
                                                                (n :: b)[OneShot] ->
                                                              GHC.CString.unpackFoldrCString#
                                                                @ b
                                                                "Tensor product: "#
                                                                c
                                                                n)
                                                             (GHC.Base.augment
                                                                @ GHC.Types.Char
                                                                (\ @ b
                                                                   (c :: GHC.Types.Char
                                                                         -> b -> b)[OneShot]
                                                                   (n :: b)[OneShot] ->
                                                                 GHC.Base.foldr
                                                                   @ GHC.Types.Char
                                                                   @ b
                                                                   c
                                                                   n
                                                                   Multilinear.Generic.incompatibleTypes)
                                                                (GHC.Base.augment
                                                                   @ GHC.Types.Char
                                                                   (\ @ b
                                                                      (c :: GHC.Types.Char
                                                                            -> b -> b)[OneShot]
                                                                      (n :: b)[OneShot] ->
                                                                    GHC.CString.unpackFoldrCString#
                                                                      @ b
                                                                      " - index1 is "#
                                                                      c
                                                                      n)
                                                                   (GHC.Base.augment
                                                                      @ GHC.Types.Char
                                                                      (\ @ b
                                                                         (c :: GHC.Types.Char
                                                                               -> b -> b)[OneShot]
                                                                         (n :: b)[OneShot] ->
                                                                       GHC.Base.foldr
                                                                         @ GHC.Types.Char
                                                                         @ b
                                                                         c
                                                                         n
                                                                         (GHC.CString.unpackAppendCString#
                                                                            Multilinear.Index.$fShowTIndex14
                                                                            (GHC.Base.augment
                                                                               @ GHC.Types.Char
                                                                               (\ @ b1
                                                                                  (c1 :: GHC.Types.Char
                                                                                         -> b1
                                                                                         -> b1)[OneShot]
                                                                                  (n1 :: b1)[OneShot] ->
                                                                                GHC.Base.foldr
                                                                                  @ GHC.Types.Char
                                                                                  @ b1
                                                                                  c1
                                                                                  n1
                                                                                  ds2)
                                                                               (GHC.CString.unpackAppendCString#
                                                                                  Multilinear.Index.$fShowTIndex13
                                                                                  (GHC.Base.augment
                                                                                     @ GHC.Types.Char
                                                                                     (\ @ b1
                                                                                        (c1 :: GHC.Types.Char
                                                                                               -> b1
                                                                                               -> b1)[OneShot]
                                                                                        (n1 :: b1)[OneShot] ->
                                                                                      GHC.Base.foldr
                                                                                        @ GHC.Types.Char
                                                                                        @ b1
                                                                                        c1
                                                                                        n1
                                                                                        GHC.Show.$fShowMaybe1)
                                                                                     (case count1 of ww2 { GHC.Types.I# ww3 ->
                                                                                      case GHC.Show.$wshowSignedInt
                                                                                             11#
                                                                                             ww3
                                                                                             (GHC.Types.[]
                                                                                                @ GHC.Types.Char) of ww4 { (#,#) ww5 ww6 ->
                                                                                      GHC.Base.augment
                                                                                        @ GHC.Types.Char
                                                                                        (\ @ b1
                                                                                           (c1 :: GHC.Types.Char
                                                                                                  -> b1
                                                                                                  -> b1)[OneShot]
                                                                                           (n1 :: b1)[OneShot] ->
                                                                                         GHC.Base.foldr
                                                                                           @ GHC.Types.Char
                                                                                           @ b1
                                                                                           c1
                                                                                           n1
                                                                                           (GHC.Types.:
                                                                                              @ GHC.Types.Char
                                                                                              ww5
                                                                                              ww6))
                                                                                        Multilinear.Index.$fShowTIndex10 } }))))))
                                                                      (GHC.Base.augment
                                                                         @ GHC.Types.Char
                                                                         (\ @ b
                                                                            (c :: GHC.Types.Char
                                                                                  -> b
                                                                                  -> b)[OneShot]
                                                                            (n :: b)[OneShot] ->
                                                                          GHC.CString.unpackFoldrCString#
                                                                            @ b
                                                                            " and index2 is "#
                                                                            c
                                                                            n)
                                                                         (GHC.CString.unpackAppendCString#
                                                                            Multilinear.Index.$fShowTIndex9
                                                                            (GHC.Base.augment
                                                                               @ GHC.Types.Char
                                                                               (\ @ b
                                                                                  (c :: GHC.Types.Char
                                                                                        -> b
                                                                                        -> b)[OneShot]
                                                                                  (n :: b)[OneShot] ->
                                                                                GHC.Base.foldr
                                                                                  @ GHC.Types.Char
                                                                                  @ b
                                                                                  c
                                                                                  n
                                                                                  ds3)
                                                                               (GHC.CString.unpackAppendCString#
                                                                                  Multilinear.Index.$fShowTIndex13
                                                                                  (GHC.Base.augment
                                                                                     @ GHC.Types.Char
                                                                                     (\ @ b
                                                                                        (c :: GHC.Types.Char
                                                                                              -> b
                                                                                              -> b)[OneShot]
                                                                                        (n :: b)[OneShot] ->
                                                                                      GHC.Base.foldr
                                                                                        @ GHC.Types.Char
                                                                                        @ b
                                                                                        c
                                                                                        n
                                                                                        GHC.Show.$fShowMaybe1)
                                                                                     (case count2 of ww2 { GHC.Types.I# ww3 ->
                                                                                      case GHC.Show.$wshowSignedInt
                                                                                             11#
                                                                                             ww3
                                                                                             (GHC.Types.[]
                                                                                                @ GHC.Types.Char) of ww4 { (#,#) ww5 ww6 ->
                                                                                      GHC.Base.augment
                                                                                        @ GHC.Types.Char
                                                                                        (\ @ b
                                                                                           (c :: GHC.Types.Char
                                                                                                 -> b
                                                                                                 -> b)[OneShot]
                                                                                           (n :: b)[OneShot] ->
                                                                                         GHC.Base.foldr
                                                                                           @ GHC.Types.Char
                                                                                           @ b
                                                                                           c
                                                                                           n
                                                                                           (GHC.Types.:
                                                                                              @ GHC.Types.Char
                                                                                              ww5
                                                                                              ww6))
                                                                                        Multilinear.Index.$fShowTIndex6 } }))))))))))
                                                     GHC.Types.True
                                                     -> (Data.Vector.Fusion.Bundle.Monadic.foldlM'
                                                           @ Data.Vector.Fusion.Util.Id
                                                           @ (Multilinear.Generic.Tensor a)
                                                           @ (Multilinear.Generic.Tensor a)
                                                           @ Data.Vector.Vector
                                                           Data.Vector.Fusion.Util.$fMonadId
                                                           (\ (a1 :: Multilinear.Generic.Tensor a)
                                                              (b1 :: Multilinear.Generic.Tensor
                                                                       a)[OneShot] ->
                                                            Multilinear.Generic.$fBitsTensor_$c.|.
                                                              @ a
                                                              $dNum
                                                              $dBits
                                                              a1
                                                              b1)
                                                             `cast`
                                                           (<Multilinear.Generic.Tensor a>_R
                                                            ->_R <Multilinear.Generic.Tensor a>_R
                                                            ->_R Sym (Data.Vector.Fusion.Util.N:Id[0]
                                                                          <Multilinear.Generic.Tensor
                                                                             a>_R))
                                                           (Multilinear.Generic.Scalar
                                                              @ a
                                                              (GHC.Num.fromInteger @ a $dNum 0))
                                                           (Data.Vector.Fusion.Bundle.Monadic.zipWithM
                                                              @ Data.Vector.Fusion.Util.Id
                                                              @ a
                                                              @ (Multilinear.Generic.Tensor a)
                                                              @ (Multilinear.Generic.Tensor a)
                                                              @ Data.Vector.Vector
                                                              Data.Vector.Fusion.Util.$fMonadId
                                                              (\ (a1 :: a)
                                                                 (b1 :: Multilinear.Generic.Tensor
                                                                          a)[OneShot] ->
                                                               Multilinear.Generic.$fMultilinearTensora_$cfmap
                                                                 @ a
                                                                 @ a
                                                                 (Data.Bits..&. @ a $dBits a1)
                                                                 b1)
                                                                `cast`
                                                              (<a>_R
                                                               ->_R <Multilinear.Generic.Tensor a>_R
                                                               ->_R Sym (Data.Vector.Fusion.Util.N:Id[0]
                                                                             <Multilinear.Generic.Tensor
                                                                                a>_R))
                                                              (Data.Vector.Generic.stream
                                                                 @ Data.Vector.Vector
                                                                 @ a
                                                                 (Data.Vector.$fVectorVectora @ a)
                                                                 ts1')
                                                              (Data.Vector.Generic.stream
                                                                 @ Data.Vector.Vector
                                                                 @ (Multilinear.Generic.Tensor a)
                                                                 (Data.Vector.$fVectorVectora
                                                                    @ (Multilinear.Generic.Tensor
                                                                         a))
                                                                 ts2')))
                                                          `cast`
                                                        (Data.Vector.Fusion.Util.N:Id[0]
                                                             <Multilinear.Generic.Tensor a>_R) } }
                                           Multilinear.Generic.InfiniteTensor ds3 ts2'
                                           -> case ds3 of wild3 {
                                                DEFAULT -> fail GHC.Prim.void#
                                                Multilinear.Index.Infinite.Contravariant ds4
                                                -> (Data.Vector.Fusion.Bundle.Monadic.foldlM'
                                                      @ Data.Vector.Fusion.Util.Id
                                                      @ (Multilinear.Generic.Tensor a)
                                                      @ (Multilinear.Generic.Tensor a)
                                                      @ Data.Vector.Vector
                                                      Data.Vector.Fusion.Util.$fMonadId
                                                      (\ (a1 :: Multilinear.Generic.Tensor a)
                                                         (b1 :: Multilinear.Generic.Tensor
                                                                  a)[OneShot] ->
                                                       Multilinear.Generic.$fBitsTensor_$c.|.
                                                         @ a
                                                         $dNum
                                                         $dBits
                                                         a1
                                                         b1)
                                                        `cast`
                                                      (<Multilinear.Generic.Tensor a>_R
                                                       ->_R <Multilinear.Generic.Tensor a>_R
                                                       ->_R Sym (Data.Vector.Fusion.Util.N:Id[0]
                                                                     <Multilinear.Generic.Tensor
                                                                        a>_R))
                                                      (Multilinear.Generic.Scalar
                                                         @ a
                                                         (GHC.Num.fromInteger @ a $dNum 0))
                                                      (Data.Vector.Fusion.Bundle.Monadic.zipWithM
                                                         @ Data.Vector.Fusion.Util.Id
                                                         @ a
                                                         @ (Multilinear.Generic.Tensor a)
                                                         @ (Multilinear.Generic.Tensor a)
                                                         @ Data.Vector.Vector
                                                         Data.Vector.Fusion.Util.$fMonadId
                                                         (\ (a1 :: a)
                                                            (b1 :: Multilinear.Generic.Tensor
                                                                     a)[OneShot] ->
                                                          Multilinear.Generic.$fMultilinearTensora_$cfmap
                                                            @ a
                                                            @ a
                                                            (Data.Bits..&. @ a $dBits a1)
                                                            b1)
                                                           `cast`
                                                         (<a>_R
                                                          ->_R <Multilinear.Generic.Tensor a>_R
                                                          ->_R Sym (Data.Vector.Fusion.Util.N:Id[0]
                                                                        <Multilinear.Generic.Tensor
                                                                           a>_R))
                                                         (Data.Vector.Generic.stream
                                                            @ Data.Vector.Vector
                                                            @ a
                                                            (Data.Vector.$fVectorVectora @ a)
                                                            ts1')
                                                         (Data.Vector.Fusion.Bundle.Monadic.unsafeFromList
                                                            @ Data.Vector.Fusion.Util.Id
                                                            @ (Multilinear.Generic.Tensor a)
                                                            @ Data.Vector.Vector
                                                            Data.Vector.Fusion.Util.$fMonadId
                                                            Data.Vector.Fusion.Bundle.Size.Unknown
                                                            (GHC.Base.build
                                                               @ (Multilinear.Generic.Tensor a)
                                                               (\ @ b
                                                                  (c :: Multilinear.Generic.Tensor a
                                                                        -> b -> b)[OneShot]
                                                                  (nil :: b)[OneShot] ->
                                                                case GHC.Classes.ltInt
                                                                       (GHC.Types.I# 0#)
                                                                       count1 of wild4 {
                                                                  GHC.Types.False -> nil
                                                                  GHC.Types.True
                                                                  -> GHC.Base.foldr
                                                                       @ (Multilinear.Generic.Tensor
                                                                            a)
                                                                       @ (GHC.Types.Int -> b)
                                                                       (GHC.List.takeFB
                                                                          @ (Multilinear.Generic.Tensor
                                                                               a)
                                                                          @ b
                                                                          c
                                                                          nil)
                                                                       (GHC.List.flipSeqTake
                                                                          @ b
                                                                          nil)
                                                                       ts2'
                                                                       count1 })))))
                                                     `cast`
                                                   (Data.Vector.Fusion.Util.N:Id[0]
                                                        <Multilinear.Generic.Tensor a>_R) } } }
                                 Multilinear.Generic.FiniteTensor i1 ts1'
                                 -> case i1 of wild1 {
                                      DEFAULT -> fail GHC.Prim.void#
                                      Multilinear.Index.Finite.Covariant count1 ds2
                                      -> case ds1 of wild2 {
                                           DEFAULT -> fail GHC.Prim.void#
                                           Multilinear.Generic.SimpleFinite i2 ts2'
                                           -> case i2 of wild3 {
                                                DEFAULT -> fail GHC.Prim.void#
                                                Multilinear.Index.Finite.Contravariant count2 ds3
                                                -> case GHC.Classes.eqInt count1 count2 of wild4 {
                                                     GHC.Types.False
                                                     -> Multilinear.Generic.Err
                                                          @ a
                                                          (GHC.Base.augment
                                                             @ GHC.Types.Char
                                                             (\ @ b
                                                                (c :: GHC.Types.Char
                                                                      -> b -> b)[OneShot]
                                                                (n :: b)[OneShot] ->
                                                              GHC.CString.unpackFoldrCString#
                                                                @ b
                                                                "Tensor product: "#
                                                                c
                                                                n)
                                                             (GHC.Base.augment
                                                                @ GHC.Types.Char
                                                                (\ @ b
                                                                   (c :: GHC.Types.Char
                                                                         -> b -> b)[OneShot]
                                                                   (n :: b)[OneShot] ->
                                                                 GHC.Base.foldr
                                                                   @ GHC.Types.Char
                                                                   @ b
                                                                   c
                                                                   n
                                                                   Multilinear.Generic.incompatibleTypes)
                                                                (GHC.Base.augment
                                                                   @ GHC.Types.Char
                                                                   (\ @ b
                                                                      (c :: GHC.Types.Char
                                                                            -> b -> b)[OneShot]
                                                                      (n :: b)[OneShot] ->
                                                                    GHC.CString.unpackFoldrCString#
                                                                      @ b
                                                                      " - index1 is "#
                                                                      c
                                                                      n)
                                                                   (GHC.Base.augment
                                                                      @ GHC.Types.Char
                                                                      (\ @ b
                                                                         (c :: GHC.Types.Char
                                                                               -> b -> b)[OneShot]
                                                                         (n :: b)[OneShot] ->
                                                                       GHC.Base.foldr
                                                                         @ GHC.Types.Char
                                                                         @ b
                                                                         c
                                                                         n
                                                                         (GHC.CString.unpackAppendCString#
                                                                            Multilinear.Index.$fShowTIndex14
                                                                            (GHC.Base.augment
                                                                               @ GHC.Types.Char
                                                                               (\ @ b1
                                                                                  (c1 :: GHC.Types.Char
                                                                                         -> b1
                                                                                         -> b1)[OneShot]
                                                                                  (n1 :: b1)[OneShot] ->
                                                                                GHC.Base.foldr
                                                                                  @ GHC.Types.Char
                                                                                  @ b1
                                                                                  c1
                                                                                  n1
                                                                                  ds2)
                                                                               (GHC.CString.unpackAppendCString#
                                                                                  Multilinear.Index.$fShowTIndex13
                                                                                  (GHC.Base.augment
                                                                                     @ GHC.Types.Char
                                                                                     (\ @ b1
                                                                                        (c1 :: GHC.Types.Char
                                                                                               -> b1
                                                                                               -> b1)[OneShot]
                                                                                        (n1 :: b1)[OneShot] ->
                                                                                      GHC.Base.foldr
                                                                                        @ GHC.Types.Char
                                                                                        @ b1
                                                                                        c1
                                                                                        n1
                                                                                        GHC.Show.$fShowMaybe1)
                                                                                     (case count1 of ww2 { GHC.Types.I# ww3 ->
                                                                                      case GHC.Show.$wshowSignedInt
                                                                                             11#
                                                                                             ww3
                                                                                             (GHC.Types.[]
                                                                                                @ GHC.Types.Char) of ww4 { (#,#) ww5 ww6 ->
                                                                                      GHC.Base.augment
                                                                                        @ GHC.Types.Char
                                                                                        (\ @ b1
                                                                                           (c1 :: GHC.Types.Char
                                                                                                  -> b1
                                                                                                  -> b1)[OneShot]
                                                                                           (n1 :: b1)[OneShot] ->
                                                                                         GHC.Base.foldr
                                                                                           @ GHC.Types.Char
                                                                                           @ b1
                                                                                           c1
                                                                                           n1
                                                                                           (GHC.Types.:
                                                                                              @ GHC.Types.Char
                                                                                              ww5
                                                                                              ww6))
                                                                                        Multilinear.Index.$fShowTIndex10 } }))))))
                                                                      (GHC.Base.augment
                                                                         @ GHC.Types.Char
                                                                         (\ @ b
                                                                            (c :: GHC.Types.Char
                                                                                  -> b
                                                                                  -> b)[OneShot]
                                                                            (n :: b)[OneShot] ->
                                                                          GHC.CString.unpackFoldrCString#
                                                                            @ b
                                                                            " and index2 is "#
                                                                            c
                                                                            n)
                                                                         (GHC.CString.unpackAppendCString#
                                                                            Multilinear.Index.$fShowTIndex9
                                                                            (GHC.Base.augment
                                                                               @ GHC.Types.Char
                                                                               (\ @ b
                                                                                  (c :: GHC.Types.Char
                                                                                        -> b
                                                                                        -> b)[OneShot]
                                                                                  (n :: b)[OneShot] ->
                                                                                GHC.Base.foldr
                                                                                  @ GHC.Types.Char
                                                                                  @ b
                                                                                  c
                                                                                  n
                                                                                  ds3)
                                                                               (GHC.CString.unpackAppendCString#
                                                                                  Multilinear.Index.$fShowTIndex13
                                                                                  (GHC.Base.augment
                                                                                     @ GHC.Types.Char
                                                                                     (\ @ b
                                                                                        (c :: GHC.Types.Char
                                                                                              -> b
                                                                                              -> b)[OneShot]
                                                                                        (n :: b)[OneShot] ->
                                                                                      GHC.Base.foldr
                                                                                        @ GHC.Types.Char
                                                                                        @ b
                                                                                        c
                                                                                        n
                                                                                        GHC.Show.$fShowMaybe1)
                                                                                     (case count2 of ww2 { GHC.Types.I# ww3 ->
                                                                                      case GHC.Show.$wshowSignedInt
                                                                                             11#
                                                                                             ww3
                                                                                             (GHC.Types.[]
                                                                                                @ GHC.Types.Char) of ww4 { (#,#) ww5 ww6 ->
                                                                                      GHC.Base.augment
                                                                                        @ GHC.Types.Char
                                                                                        (\ @ b
                                                                                           (c :: GHC.Types.Char
                                                                                                 -> b
                                                                                                 -> b)[OneShot]
                                                                                           (n :: b)[OneShot] ->
                                                                                         GHC.Base.foldr
                                                                                           @ GHC.Types.Char
                                                                                           @ b
                                                                                           c
                                                                                           n
                                                                                           (GHC.Types.:
                                                                                              @ GHC.Types.Char
                                                                                              ww5
                                                                                              ww6))
                                                                                        Multilinear.Index.$fShowTIndex6 } }))))))))))
                                                     GHC.Types.True
                                                     -> (Data.Vector.Fusion.Bundle.Monadic.foldlM'
                                                           @ Data.Vector.Fusion.Util.Id
                                                           @ (Multilinear.Generic.Tensor a)
                                                           @ (Multilinear.Generic.Tensor a)
                                                           @ Data.Vector.Vector
                                                           Data.Vector.Fusion.Util.$fMonadId
                                                           (\ (a1 :: Multilinear.Generic.Tensor a)
                                                              (b1 :: Multilinear.Generic.Tensor
                                                                       a)[OneShot] ->
                                                            Multilinear.Generic.$fBitsTensor_$c.|.
                                                              @ a
                                                              $dNum
                                                              $dBits
                                                              a1
                                                              b1)
                                                             `cast`
                                                           (<Multilinear.Generic.Tensor a>_R
                                                            ->_R <Multilinear.Generic.Tensor a>_R
                                                            ->_R Sym (Data.Vector.Fusion.Util.N:Id[0]
                                                                          <Multilinear.Generic.Tensor
                                                                             a>_R))
                                                           (Multilinear.Generic.Scalar
                                                              @ a
                                                              (GHC.Num.fromInteger @ a $dNum 0))
                                                           (Data.Vector.Fusion.Bundle.Monadic.zipWithM
                                                              @ Data.Vector.Fusion.Util.Id
                                                              @ (Multilinear.Generic.Tensor a)
                                                              @ a
                                                              @ (Multilinear.Generic.Tensor a)
                                                              @ Data.Vector.Vector
                                                              Data.Vector.Fusion.Util.$fMonadId
                                                              (\ (a1 :: Multilinear.Generic.Tensor
                                                                          a)
                                                                 (b1 :: a)[OneShot] ->
                                                               Multilinear.Generic.$fMultilinearTensora_$cfmap
                                                                 @ a
                                                                 @ a
                                                                 (\ (ds4 :: a) ->
                                                                  Data.Bits..&. @ a $dBits ds4 b1)
                                                                 a1)
                                                                `cast`
                                                              (<Multilinear.Generic.Tensor a>_R
                                                               ->_R <a>_R
                                                               ->_R Sym (Data.Vector.Fusion.Util.N:Id[0]
                                                                             <Multilinear.Generic.Tensor
                                                                                a>_R))
                                                              (Data.Vector.Generic.stream
                                                                 @ Data.Vector.Vector
                                                                 @ (Multilinear.Generic.Tensor a)
                                                                 (Data.Vector.$fVectorVectora
                                                                    @ (Multilinear.Generic.Tensor
                                                                         a))
                                                                 ts1')
                                                              (Data.Vector.Generic.stream
                                                                 @ Data.Vector.Vector
                                                                 @ a
                                                                 (Data.Vector.$fVectorVectora @ a)
                                                                 ts2')))
                                                          `cast`
                                                        (Data.Vector.Fusion.Util.N:Id[0]
                                                             <Multilinear.Generic.Tensor a>_R) } }
                                           Multilinear.Generic.FiniteTensor i2 ts2'
                                           -> case i2 of wild3 {
                                                DEFAULT -> fail GHC.Prim.void#
                                                Multilinear.Index.Finite.Contravariant count2 ds3
                                                -> case GHC.Classes.eqInt count1 count2 of wild4 {
                                                     GHC.Types.False
                                                     -> Multilinear.Generic.Err
                                                          @ a
                                                          (GHC.Base.augment
                                                             @ GHC.Types.Char
                                                             (\ @ b
                                                                (c :: GHC.Types.Char
                                                                      -> b -> b)[OneShot]
                                                                (n :: b)[OneShot] ->
                                                              GHC.CString.unpackFoldrCString#
                                                                @ b
                                                                "Tensor product: "#
                                                                c
                                                                n)
                                                             (GHC.Base.augment
                                                                @ GHC.Types.Char
                                                                (\ @ b
                                                                   (c :: GHC.Types.Char
                                                                         -> b -> b)[OneShot]
                                                                   (n :: b)[OneShot] ->
                                                                 GHC.Base.foldr
                                                                   @ GHC.Types.Char
                                                                   @ b
                                                                   c
                                                                   n
                                                                   Multilinear.Generic.incompatibleTypes)
                                                                (GHC.Base.augment
                                                                   @ GHC.Types.Char
                                                                   (\ @ b
                                                                      (c :: GHC.Types.Char
                                                                            -> b -> b)[OneShot]
                                                                      (n :: b)[OneShot] ->
                                                                    GHC.CString.unpackFoldrCString#
                                                                      @ b
                                                                      " - index1 is "#
                                                                      c
                                                                      n)
                                                                   (GHC.Base.augment
                                                                      @ GHC.Types.Char
                                                                      (\ @ b
                                                                         (c :: GHC.Types.Char
                                                                               -> b -> b)[OneShot]
                                                                         (n :: b)[OneShot] ->
                                                                       GHC.Base.foldr
                                                                         @ GHC.Types.Char
                                                                         @ b
                                                                         c
                                                                         n
                                                                         (GHC.CString.unpackAppendCString#
                                                                            Multilinear.Index.$fShowTIndex14
                                                                            (GHC.Base.augment
                                                                               @ GHC.Types.Char
                                                                               (\ @ b1
                                                                                  (c1 :: GHC.Types.Char
                                                                                         -> b1
                                                                                         -> b1)[OneShot]
                                                                                  (n1 :: b1)[OneShot] ->
                                                                                GHC.Base.foldr
                                                                                  @ GHC.Types.Char
                                                                                  @ b1
                                                                                  c1
                                                                                  n1
                                                                                  ds2)
                                                                               (GHC.CString.unpackAppendCString#
                                                                                  Multilinear.Index.$fShowTIndex13
                                                                                  (GHC.Base.augment
                                                                                     @ GHC.Types.Char
                                                                                     (\ @ b1
                                                                                        (c1 :: GHC.Types.Char
                                                                                               -> b1
                                                                                               -> b1)[OneShot]
                                                                                        (n1 :: b1)[OneShot] ->
                                                                                      GHC.Base.foldr
                                                                                        @ GHC.Types.Char
                                                                                        @ b1
                                                                                        c1
                                                                                        n1
                                                                                        GHC.Show.$fShowMaybe1)
                                                                                     (case count1 of ww2 { GHC.Types.I# ww3 ->
                                                                                      case GHC.Show.$wshowSignedInt
                                                                                             11#
                                                                                             ww3
                                                                                             (GHC.Types.[]
                                                                                                @ GHC.Types.Char) of ww4 { (#,#) ww5 ww6 ->
                                                                                      GHC.Base.augment
                                                                                        @ GHC.Types.Char
                                                                                        (\ @ b1
                                                                                           (c1 :: GHC.Types.Char
                                                                                                  -> b1
                                                                                                  -> b1)[OneShot]
                                                                                           (n1 :: b1)[OneShot] ->
                                                                                         GHC.Base.foldr
                                                                                           @ GHC.Types.Char
                                                                                           @ b1
                                                                                           c1
                                                                                           n1
                                                                                           (GHC.Types.:
                                                                                              @ GHC.Types.Char
                                                                                              ww5
                                                                                              ww6))
                                                                                        Multilinear.Index.$fShowTIndex10 } }))))))
                                                                      (GHC.Base.augment
                                                                         @ GHC.Types.Char
                                                                         (\ @ b
                                                                            (c :: GHC.Types.Char
                                                                                  -> b
                                                                                  -> b)[OneShot]
                                                                            (n :: b)[OneShot] ->
                                                                          GHC.CString.unpackFoldrCString#
                                                                            @ b
                                                                            " and index2 is "#
                                                                            c
                                                                            n)
                                                                         (GHC.CString.unpackAppendCString#
                                                                            Multilinear.Index.$fShowTIndex9
                                                                            (GHC.Base.augment
                                                                               @ GHC.Types.Char
                                                                               (\ @ b
                                                                                  (c :: GHC.Types.Char
                                                                                        -> b
                                                                                        -> b)[OneShot]
                                                                                  (n :: b)[OneShot] ->
                                                                                GHC.Base.foldr
                                                                                  @ GHC.Types.Char
                                                                                  @ b
                                                                                  c
                                                                                  n
                                                                                  ds3)
                                                                               (GHC.CString.unpackAppendCString#
                                                                                  Multilinear.Index.$fShowTIndex13
                                                                                  (GHC.Base.augment
                                                                                     @ GHC.Types.Char
                                                                                     (\ @ b
                                                                                        (c :: GHC.Types.Char
                                                                                              -> b
                                                                                              -> b)[OneShot]
                                                                                        (n :: b)[OneShot] ->
                                                                                      GHC.Base.foldr
                                                                                        @ GHC.Types.Char
                                                                                        @ b
                                                                                        c
                                                                                        n
                                                                                        GHC.Show.$fShowMaybe1)
                                                                                     (case count2 of ww2 { GHC.Types.I# ww3 ->
                                                                                      case GHC.Show.$wshowSignedInt
                                                                                             11#
                                                                                             ww3
                                                                                             (GHC.Types.[]
                                                                                                @ GHC.Types.Char) of ww4 { (#,#) ww5 ww6 ->
                                                                                      GHC.Base.augment
                                                                                        @ GHC.Types.Char
                                                                                        (\ @ b
                                                                                           (c :: GHC.Types.Char
                                                                                                 -> b
                                                                                                 -> b)[OneShot]
                                                                                           (n :: b)[OneShot] ->
                                                                                         GHC.Base.foldr
                                                                                           @ GHC.Types.Char
                                                                                           @ b
                                                                                           c
                                                                                           n
                                                                                           (GHC.Types.:
                                                                                              @ GHC.Types.Char
                                                                                              ww5
                                                                                              ww6))
                                                                                        Multilinear.Index.$fShowTIndex6 } }))))))))))
                                                     GHC.Types.True
                                                     -> (Data.Vector.Fusion.Bundle.Monadic.foldlM'
                                                           @ Data.Vector.Fusion.Util.Id
                                                           @ (Multilinear.Generic.Tensor a)
                                                           @ (Multilinear.Generic.Tensor a)
                                                           @ Data.Vector.Vector
                                                           Data.Vector.Fusion.Util.$fMonadId
                                                           (\ (a1 :: Multilinear.Generic.Tensor a)
                                                              (b1 :: Multilinear.Generic.Tensor
                                                                       a)[OneShot] ->
                                                            Multilinear.Generic.$fBitsTensor_$c.|.
                                                              @ a
                                                              $dNum
                                                              $dBits
                                                              a1
                                                              b1)
                                                             `cast`
                                                           (<Multilinear.Generic.Tensor a>_R
                                                            ->_R <Multilinear.Generic.Tensor a>_R
                                                            ->_R Sym (Data.Vector.Fusion.Util.N:Id[0]
                                                                          <Multilinear.Generic.Tensor
                                                                             a>_R))
                                                           (Multilinear.Generic.Scalar
                                                              @ a
                                                              (GHC.Num.fromInteger @ a $dNum 0))
                                                           (Data.Vector.Fusion.Bundle.Monadic.zipWithM
                                                              @ Data.Vector.Fusion.Util.Id
                                                              @ (Multilinear.Generic.Tensor a)
                                                              @ (Multilinear.Generic.Tensor a)
                                                              @ (Multilinear.Generic.Tensor a)
                                                              @ Data.Vector.Vector
                                                              Data.Vector.Fusion.Util.$fMonadId
                                                              (\ (a1 :: Multilinear.Generic.Tensor
                                                                          a)
                                                                 (b1 :: Multilinear.Generic.Tensor
                                                                          a)[OneShot] ->
                                                               Multilinear.Generic.$fBitsTensor_$c.&.
                                                                 @ a
                                                                 $dNum
                                                                 $dBits
                                                                 a1
                                                                 b1)
                                                                `cast`
                                                              (<Multilinear.Generic.Tensor a>_R
                                                               ->_R <Multilinear.Generic.Tensor a>_R
                                                               ->_R Sym (Data.Vector.Fusion.Util.N:Id[0]
                                                                             <Multilinear.Generic.Tensor
                                                                                a>_R))
                                                              (Data.Vector.Generic.stream
                                                                 @ Data.Vector.Vector
                                                                 @ (Multilinear.Generic.Tensor a)
                                                                 (Data.Vector.$fVectorVectora
                                                                    @ (Multilinear.Generic.Tensor
                                                                         a))
                                                                 ts1')
                                                              (Data.Vector.Generic.stream
                                                                 @ Data.Vector.Vector
                                                                 @ (Multilinear.Generic.Tensor a)
                                                                 (Data.Vector.$fVectorVectora
                                                                    @ (Multilinear.Generic.Tensor
                                                                         a))
                                                                 ts2')))
                                                          `cast`
                                                        (Data.Vector.Fusion.Util.N:Id[0]
                                                             <Multilinear.Generic.Tensor a>_R) } }
                                           Multilinear.Generic.InfiniteTensor ds3 ts2'
                                           -> case ds3 of wild3 {
                                                DEFAULT -> fail GHC.Prim.void#
                                                Multilinear.Index.Infinite.Contravariant ds4
                                                -> (Data.Vector.Fusion.Bundle.Monadic.foldlM'
                                                      @ Data.Vector.Fusion.Util.Id
                                                      @ (Multilinear.Generic.Tensor a)
                                                      @ (Multilinear.Generic.Tensor a)
                                                      @ Data.Vector.Vector
                                                      Data.Vector.Fusion.Util.$fMonadId
                                                      (\ (a1 :: Multilinear.Generic.Tensor a)
                                                         (b1 :: Multilinear.Generic.Tensor
                                                                  a)[OneShot] ->
                                                       Multilinear.Generic.dot_$c+ @ a $dNum a1 b1)
                                                        `cast`
                                                      (<Multilinear.Generic.Tensor a>_R
                                                       ->_R <Multilinear.Generic.Tensor a>_R
                                                       ->_R Sym (Data.Vector.Fusion.Util.N:Id[0]
                                                                     <Multilinear.Generic.Tensor
                                                                        a>_R))
                                                      (Multilinear.Generic.Scalar
                                                         @ a
                                                         (GHC.Num.fromInteger @ a $dNum 0))
                                                      (Data.Vector.Fusion.Bundle.Monadic.zipWithM
                                                         @ Data.Vector.Fusion.Util.Id
                                                         @ (Multilinear.Generic.Tensor a)
                                                         @ (Multilinear.Generic.Tensor a)
                                                         @ (Multilinear.Generic.Tensor a)
                                                         @ Data.Vector.Vector
                                                         Data.Vector.Fusion.Util.$fMonadId
                                                         (\ (a1 :: Multilinear.Generic.Tensor a)
                                                            (b1 :: Multilinear.Generic.Tensor
                                                                     a)[OneShot] ->
                                                          Multilinear.Generic.dot_$c*
                                                            @ a
                                                            $dNum
                                                            a1
                                                            b1)
                                                           `cast`
                                                         (<Multilinear.Generic.Tensor a>_R
                                                          ->_R <Multilinear.Generic.Tensor a>_R
                                                          ->_R Sym (Data.Vector.Fusion.Util.N:Id[0]
                                                                        <Multilinear.Generic.Tensor
                                                                           a>_R))
                                                         (Data.Vector.Generic.stream
                                                            @ Data.Vector.Vector
                                                            @ (Multilinear.Generic.Tensor a)
                                                            (Data.Vector.$fVectorVectora
                                                               @ (Multilinear.Generic.Tensor a))
                                                            ts1')
                                                         (Data.Vector.Fusion.Bundle.Monadic.unsafeFromList
                                                            @ Data.Vector.Fusion.Util.Id
                                                            @ (Multilinear.Generic.Tensor a)
                                                            @ Data.Vector.Vector
                                                            Data.Vector.Fusion.Util.$fMonadId
                                                            Data.Vector.Fusion.Bundle.Size.Unknown
                                                            (GHC.Base.build
                                                               @ (Multilinear.Generic.Tensor a)
                                                               (\ @ b
                                                                  (c :: Multilinear.Generic.Tensor a
                                                                        -> b -> b)[OneShot]
                                                                  (nil :: b)[OneShot] ->
                                                                case GHC.Classes.ltInt
                                                                       (GHC.Types.I# 0#)
                                                                       count1 of wild4 {
                                                                  GHC.Types.False -> nil
                                                                  GHC.Types.True
                                                                  -> GHC.Base.foldr
                                                                       @ (Multilinear.Generic.Tensor
                                                                            a)
                                                                       @ (GHC.Types.Int -> b)
                                                                       (GHC.List.takeFB
                                                                          @ (Multilinear.Generic.Tensor
                                                                               a)
                                                                          @ b
                                                                          c
                                                                          nil)
                                                                       (GHC.List.flipSeqTake
                                                                          @ b
                                                                          nil)
                                                                       ts2'
                                                                       count1 })))))
                                                     `cast`
                                                   (Data.Vector.Fusion.Util.N:Id[0]
                                                        <Multilinear.Generic.Tensor a>_R) } } }
                                 Multilinear.Generic.InfiniteTensor ds2 ts1'
                                 -> case ds2 of wild1 {
                                      DEFAULT -> fail GHC.Prim.void#
                                      Multilinear.Index.Infinite.Covariant ds3
                                      -> case ds1 of wild2 {
                                           DEFAULT -> fail GHC.Prim.void#
                                           Multilinear.Generic.SimpleFinite ds4 ts2'
                                           -> case ds4 of wild3 {
                                                DEFAULT -> fail GHC.Prim.void#
                                                Multilinear.Index.Finite.Contravariant count2 ds5
                                                -> (Data.Vector.Fusion.Bundle.Monadic.foldlM'
                                                      @ Data.Vector.Fusion.Util.Id
                                                      @ (Multilinear.Generic.Tensor a)
                                                      @ (Multilinear.Generic.Tensor a)
                                                      @ Data.Vector.Vector
                                                      Data.Vector.Fusion.Util.$fMonadId
                                                      (\ (a1 :: Multilinear.Generic.Tensor a)
                                                         (b1 :: Multilinear.Generic.Tensor
                                                                  a)[OneShot] ->
                                                       Multilinear.Generic.$fBitsTensor_$c.|.
                                                         @ a
                                                         $dNum
                                                         $dBits
                                                         a1
                                                         b1)
                                                        `cast`
                                                      (<Multilinear.Generic.Tensor a>_R
                                                       ->_R <Multilinear.Generic.Tensor a>_R
                                                       ->_R Sym (Data.Vector.Fusion.Util.N:Id[0]
                                                                     <Multilinear.Generic.Tensor
                                                                        a>_R))
                                                      (Multilinear.Generic.Scalar
                                                         @ a
                                                         (GHC.Num.fromInteger @ a $dNum 0))
                                                      (Data.Vector.Fusion.Bundle.Monadic.zipWithM
                                                         @ Data.Vector.Fusion.Util.Id
                                                         @ (Multilinear.Generic.Tensor a)
                                                         @ a
                                                         @ (Multilinear.Generic.Tensor a)
                                                         @ Data.Vector.Vector
                                                         Data.Vector.Fusion.Util.$fMonadId
                                                         (\ (a1 :: Multilinear.Generic.Tensor a)
                                                            (b1 :: a)[OneShot] ->
                                                          Multilinear.Generic.$fMultilinearTensora_$cfmap
                                                            @ a
                                                            @ a
                                                            (\ (ds6 :: a) ->
                                                             Data.Bits..&. @ a $dBits ds6 b1)
                                                            a1)
                                                           `cast`
                                                         (<Multilinear.Generic.Tensor a>_R
                                                          ->_R <a>_R
                                                          ->_R Sym (Data.Vector.Fusion.Util.N:Id[0]
                                                                        <Multilinear.Generic.Tensor
                                                                           a>_R))
                                                         (Data.Vector.Fusion.Bundle.Monadic.unsafeFromList
                                                            @ Data.Vector.Fusion.Util.Id
                                                            @ (Multilinear.Generic.Tensor a)
                                                            @ Data.Vector.Vector
                                                            Data.Vector.Fusion.Util.$fMonadId
                                                            Data.Vector.Fusion.Bundle.Size.Unknown
                                                            (GHC.Base.build
                                                               @ (Multilinear.Generic.Tensor a)
                                                               (\ @ b
                                                                  (c :: Multilinear.Generic.Tensor a
                                                                        -> b -> b)[OneShot]
                                                                  (nil :: b)[OneShot] ->
                                                                case GHC.Classes.ltInt
                                                                       (GHC.Types.I# 0#)
                                                                       count2 of wild4 {
                                                                  GHC.Types.False -> nil
                                                                  GHC.Types.True
                                                                  -> GHC.Base.foldr
                                                                       @ (Multilinear.Generic.Tensor
                                                                            a)
                                                                       @ (GHC.Types.Int -> b)
                                                                       (GHC.List.takeFB
                                                                          @ (Multilinear.Generic.Tensor
                                                                               a)
                                                                          @ b
                                                                          c
                                                                          nil)
                                                                       (GHC.List.flipSeqTake
                                                                          @ b
                                                                          nil)
                                                                       ts1'
                                                                       count2 })))
                                                         (Data.Vector.Generic.stream
                                                            @ Data.Vector.Vector
                                                            @ a
                                                            (Data.Vector.$fVectorVectora @ a)
                                                            ts2')))
                                                     `cast`
                                                   (Data.Vector.Fusion.Util.N:Id[0]
                                                        <Multilinear.Generic.Tensor a>_R) }
                                           Multilinear.Generic.FiniteTensor ds4 ts2'
                                           -> case ds4 of wild3 {
                                                DEFAULT -> fail GHC.Prim.void#
                                                Multilinear.Index.Finite.Contravariant count2 ds5
                                                -> (Data.Vector.Fusion.Bundle.Monadic.foldlM'
                                                      @ Data.Vector.Fusion.Util.Id
                                                      @ (Multilinear.Generic.Tensor a)
                                                      @ (Multilinear.Generic.Tensor a)
                                                      @ Data.Vector.Vector
                                                      Data.Vector.Fusion.Util.$fMonadId
                                                      (\ (a1 :: Multilinear.Generic.Tensor a)
                                                         (b1 :: Multilinear.Generic.Tensor
                                                                  a)[OneShot] ->
                                                       Multilinear.Generic.dot_$c+ @ a $dNum a1 b1)
                                                        `cast`
                                                      (<Multilinear.Generic.Tensor a>_R
                                                       ->_R <Multilinear.Generic.Tensor a>_R
                                                       ->_R Sym (Data.Vector.Fusion.Util.N:Id[0]
                                                                     <Multilinear.Generic.Tensor
                                                                        a>_R))
                                                      (Multilinear.Generic.Scalar
                                                         @ a
                                                         (GHC.Num.fromInteger @ a $dNum 0))
                                                      (Data.Vector.Fusion.Bundle.Monadic.zipWithM
                                                         @ Data.Vector.Fusion.Util.Id
                                                         @ (Multilinear.Generic.Tensor a)
                                                         @ (Multilinear.Generic.Tensor a)
                                                         @ (Multilinear.Generic.Tensor a)
                                                         @ Data.Vector.Vector
                                                         Data.Vector.Fusion.Util.$fMonadId
                                                         (\ (a1 :: Multilinear.Generic.Tensor a)
                                                            (b1 :: Multilinear.Generic.Tensor
                                                                     a)[OneShot] ->
                                                          Multilinear.Generic.dot_$c*
                                                            @ a
                                                            $dNum
                                                            a1
                                                            b1)
                                                           `cast`
                                                         (<Multilinear.Generic.Tensor a>_R
                                                          ->_R <Multilinear.Generic.Tensor a>_R
                                                          ->_R Sym (Data.Vector.Fusion.Util.N:Id[0]
                                                                        <Multilinear.Generic.Tensor
                                                                           a>_R))
                                                         (Data.Vector.Fusion.Bundle.Monadic.unsafeFromList
                                                            @ Data.Vector.Fusion.Util.Id
                                                            @ (Multilinear.Generic.Tensor a)
                                                            @ Data.Vector.Vector
                                                            Data.Vector.Fusion.Util.$fMonadId
                                                            Data.Vector.Fusion.Bundle.Size.Unknown
                                                            (GHC.Base.build
                                                               @ (Multilinear.Generic.Tensor a)
                                                               (\ @ b
                                                                  (c :: Multilinear.Generic.Tensor a
                                                                        -> b -> b)[OneShot]
                                                                  (nil :: b)[OneShot] ->
                                                                case GHC.Classes.ltInt
                                                                       (GHC.Types.I# 0#)
                                                                       count2 of wild4 {
                                                                  GHC.Types.False -> nil
                                                                  GHC.Types.True
                                                                  -> GHC.Base.foldr
                                                                       @ (Multilinear.Generic.Tensor
                                                                            a)
                                                                       @ (GHC.Types.Int -> b)
                                                                       (GHC.List.takeFB
                                                                          @ (Multilinear.Generic.Tensor
                                                                               a)
                                                                          @ b
                                                                          c
                                                                          nil)
                                                                       (GHC.List.flipSeqTake
                                                                          @ b
                                                                          nil)
                                                                       ts1'
                                                                       count2 })))
                                                         (Data.Vector.Generic.stream
                                                            @ Data.Vector.Vector
                                                            @ (Multilinear.Generic.Tensor a)
                                                            (Data.Vector.$fVectorVectora
                                                               @ (Multilinear.Generic.Tensor a))
                                                            ts2')))
                                                     `cast`
                                                   (Data.Vector.Fusion.Util.N:Id[0]
                                                        <Multilinear.Generic.Tensor
                                                           a>_R) } } } }) -}
155b66cca210d0aa062cfee2ea4e962d
  contractionErr ::
    Multilinear.Index.TIndex
    -> Multilinear.Index.TIndex -> Multilinear.Generic.Tensor a
  {- Arity: 2, Strictness: <L,1*U><L,1*U>m5, Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ @ a
                   (i1' :: Multilinear.Index.TIndex)
                   (i2' :: Multilinear.Index.TIndex) ->
                 Multilinear.Generic.Err
                   @ a
                   (GHC.Base.augment
                      @ GHC.Types.Char
                      (\ @ b
                         (c :: GHC.Types.Char -> b -> b)[OneShot]
                         (n :: b)[OneShot] ->
                       GHC.CString.unpackFoldrCString# @ b "Tensor product: "# c n)
                      (GHC.Base.augment
                         @ GHC.Types.Char
                         (\ @ b
                            (c :: GHC.Types.Char -> b -> b)[OneShot]
                            (n :: b)[OneShot] ->
                          GHC.Base.foldr
                            @ GHC.Types.Char
                            @ b
                            c
                            n
                            Multilinear.Generic.incompatibleTypes)
                         (GHC.Base.augment
                            @ GHC.Types.Char
                            (\ @ b
                               (c :: GHC.Types.Char -> b -> b)[OneShot]
                               (n :: b)[OneShot] ->
                             GHC.CString.unpackFoldrCString# @ b " - index1 is "# c n)
                            (GHC.Base.augment
                               @ GHC.Types.Char
                               (\ @ b
                                  (c :: GHC.Types.Char -> b -> b)[OneShot]
                                  (n :: b)[OneShot] ->
                                GHC.Base.foldr
                                  @ GHC.Types.Char
                                  @ b
                                  c
                                  n
                                  (Multilinear.Index.$fShowTIndex_$cshow i1'))
                               (GHC.Base.augment
                                  @ GHC.Types.Char
                                  (\ @ b
                                     (c :: GHC.Types.Char -> b -> b)[OneShot]
                                     (n :: b)[OneShot] ->
                                   GHC.CString.unpackFoldrCString# @ b " and index2 is "# c n)
                                  (Multilinear.Index.$fShowTIndex_$cshow i2'))))))) -}
f03b26ba435cd4790f83c7a4329cfe09
  differentIndices :: GHC.Base.String
  {- Unfolding: (GHC.CString.unpackCString#
                   Multilinear.Generic.$fMultilinearTensora8) -}
3435455de223a292a66afccee7caf4fd
  dot ::
    GHC.Num.Num a =>
    Multilinear.Generic.Tensor a
    -> Multilinear.Generic.Tensor a -> Multilinear.Generic.Tensor a
  {- Arity: 3,
     Strictness: <L,U(C(C(U)),A,C(C(U)),A,A,A,C(U))><S,U><L,U>,
     Inline: (sat-args=2),
     Unfolding(loop-breaker): InlineRule (3, False, False)
                              (\ @ a
                                 ($dNum :: GHC.Num.Num a)
                                 (ds :: Multilinear.Generic.Tensor a)
                                 (ds1 :: Multilinear.Generic.Tensor a) ->
                               let {
                                 fail :: GHC.Prim.Void# -> Multilinear.Generic.Tensor a
                                   <join 1> {- Arity: 1 -}
                                 = \ (ds2 :: GHC.Prim.Void#)[OneShot] ->
                                   Multilinear.Generic.Err
                                     @ a
                                     (GHC.Base.augment
                                        @ GHC.Types.Char
                                        (\ @ b
                                           (c :: GHC.Types.Char -> b -> b)[OneShot]
                                           (n :: b)[OneShot] ->
                                         GHC.CString.unpackFoldrCString#
                                           @ b
                                           "Tensor product: "#
                                           c
                                           n)
                                        (GHC.Base.augment
                                           @ GHC.Types.Char
                                           (\ @ b
                                              (c :: GHC.Types.Char -> b -> b)[OneShot]
                                              (n :: b)[OneShot] ->
                                            GHC.Base.foldr
                                              @ GHC.Types.Char
                                              @ b
                                              c
                                              n
                                              Multilinear.Generic.incompatibleTypes)
                                           (GHC.Base.augment
                                              @ GHC.Types.Char
                                              (\ @ b
                                                 (c :: GHC.Types.Char -> b -> b)[OneShot]
                                                 (n :: b)[OneShot] ->
                                               GHC.CString.unpackFoldrCString#
                                                 @ b
                                                 " - index1 is "#
                                                 c
                                                 n)
                                              (GHC.Base.augment
                                                 @ GHC.Types.Char
                                                 (\ @ b
                                                    (c :: GHC.Types.Char -> b -> b)[OneShot]
                                                    (n :: b)[OneShot] ->
                                                  case ds of wild {
                                                    Multilinear.Generic.Scalar ds3
                                                    -> case GHC.Err.error
                                                              @ 'GHC.Types.LiftedRep
                                                              @ Multilinear.Index.TIndex
                                                              (GHC.Stack.Types.PushCallStack
                                                                 (GHC.Base.build
                                                                    @ GHC.Types.Char
                                                                    (\ @ b1 ->
                                                                     GHC.CString.unpackFoldrCString#
                                                                       @ b1
                                                                       "error"#))
                                                                 (GHC.Stack.Types.SrcLoc
                                                                    (GHC.Base.build
                                                                       @ GHC.Types.Char
                                                                       (\ @ b1 ->
                                                                        GHC.CString.unpackFoldrCString#
                                                                          @ b1
                                                                          "Multilinear-0.8.0.0-4dpV53DlxV5EwwV6FZreVP"#))
                                                                    (GHC.Base.build
                                                                       @ GHC.Types.Char
                                                                       (\ @ b1 ->
                                                                        GHC.CString.unpackFoldrCString#
                                                                          @ b1
                                                                          "Multilinear.Generic"#))
                                                                    (GHC.Base.build
                                                                       @ GHC.Types.Char
                                                                       (\ @ b1 ->
                                                                        GHC.CString.unpackFoldrCString#
                                                                          @ b1
                                                                          "src\\Multilinear\\Generic.hs"#))
                                                                    (GHC.Types.I# 140#)
                                                                    (GHC.Types.I# 27#)
                                                                    (GHC.Types.I# 140#)
                                                                    (GHC.Types.I# 46#))
                                                                 GHC.Stack.Types.EmptyCallStack)
                                                                `cast`
                                                              (Sym (GHC.Classes.N:IP[0]
                                                                        <"callStack">_N
                                                                        <GHC.Stack.Types.CallStack>_N))
                                                              Multilinear.Generic.scalarIndices
                                                       ret_ty b
                                                       of {}
                                                    Multilinear.Generic.SimpleFinite i ds3
                                                    -> case i of wild1 {
                                                         Multilinear.Index.Finite.Covariant size name
                                                         -> GHC.Base.foldr
                                                              @ GHC.Types.Char
                                                              @ b
                                                              c
                                                              n
                                                              (GHC.CString.unpackAppendCString#
                                                                 Multilinear.Index.$fShowTIndex14
                                                                 (GHC.Base.augment
                                                                    @ GHC.Types.Char
                                                                    (\ @ b1
                                                                       (c1 :: GHC.Types.Char
                                                                              -> b1 -> b1)[OneShot]
                                                                       (n1 :: b1)[OneShot] ->
                                                                     GHC.Base.foldr
                                                                       @ GHC.Types.Char
                                                                       @ b1
                                                                       c1
                                                                       n1
                                                                       name)
                                                                    (GHC.CString.unpackAppendCString#
                                                                       Multilinear.Index.$fShowTIndex13
                                                                       (GHC.Base.augment
                                                                          @ GHC.Types.Char
                                                                          (\ @ b1
                                                                             (c1 :: GHC.Types.Char
                                                                                    -> b1
                                                                                    -> b1)[OneShot]
                                                                             (n1 :: b1)[OneShot] ->
                                                                           GHC.Base.foldr
                                                                             @ GHC.Types.Char
                                                                             @ b1
                                                                             c1
                                                                             n1
                                                                             GHC.Show.$fShowMaybe1)
                                                                          (case size of ww2 { GHC.Types.I# ww3 ->
                                                                           case GHC.Show.$wshowSignedInt
                                                                                  11#
                                                                                  ww3
                                                                                  (GHC.Types.[]
                                                                                     @ GHC.Types.Char) of ww4 { (#,#) ww5 ww6 ->
                                                                           GHC.Base.augment
                                                                             @ GHC.Types.Char
                                                                             (\ @ b1
                                                                                (c1 :: GHC.Types.Char
                                                                                       -> b1
                                                                                       -> b1)[OneShot]
                                                                                (n1 :: b1)[OneShot] ->
                                                                              GHC.Base.foldr
                                                                                @ GHC.Types.Char
                                                                                @ b1
                                                                                c1
                                                                                n1
                                                                                (GHC.Types.:
                                                                                   @ GHC.Types.Char
                                                                                   ww5
                                                                                   ww6))
                                                                             Multilinear.Index.$fShowTIndex10 } })))))
                                                         Multilinear.Index.Finite.Contravariant size name
                                                         -> GHC.Base.foldr
                                                              @ GHC.Types.Char
                                                              @ b
                                                              c
                                                              n
                                                              (GHC.CString.unpackAppendCString#
                                                                 Multilinear.Index.$fShowTIndex9
                                                                 (GHC.Base.augment
                                                                    @ GHC.Types.Char
                                                                    (\ @ b1
                                                                       (c1 :: GHC.Types.Char
                                                                              -> b1 -> b1)[OneShot]
                                                                       (n1 :: b1)[OneShot] ->
                                                                     GHC.Base.foldr
                                                                       @ GHC.Types.Char
                                                                       @ b1
                                                                       c1
                                                                       n1
                                                                       name)
                                                                    (GHC.CString.unpackAppendCString#
                                                                       Multilinear.Index.$fShowTIndex13
                                                                       (GHC.Base.augment
                                                                          @ GHC.Types.Char
                                                                          (\ @ b1
                                                                             (c1 :: GHC.Types.Char
                                                                                    -> b1
                                                                                    -> b1)[OneShot]
                                                                             (n1 :: b1)[OneShot] ->
                                                                           GHC.Base.foldr
                                                                             @ GHC.Types.Char
                                                                             @ b1
                                                                             c1
                                                                             n1
                                                                             GHC.Show.$fShowMaybe1)
                                                                          (case size of ww2 { GHC.Types.I# ww3 ->
                                                                           case GHC.Show.$wshowSignedInt
                                                                                  11#
                                                                                  ww3
                                                                                  (GHC.Types.[]
                                                                                     @ GHC.Types.Char) of ww4 { (#,#) ww5 ww6 ->
                                                                           GHC.Base.augment
                                                                             @ GHC.Types.Char
                                                                             (\ @ b1
                                                                                (c1 :: GHC.Types.Char
                                                                                       -> b1
                                                                                       -> b1)[OneShot]
                                                                                (n1 :: b1)[OneShot] ->
                                                                              GHC.Base.foldr
                                                                                @ GHC.Types.Char
                                                                                @ b1
                                                                                c1
                                                                                n1
                                                                                (GHC.Types.:
                                                                                   @ GHC.Types.Char
                                                                                   ww5
                                                                                   ww6))
                                                                             Multilinear.Index.$fShowTIndex6 } })))))
                                                         Multilinear.Index.Finite.Indifferent size name
                                                         -> GHC.Base.foldr
                                                              @ GHC.Types.Char
                                                              @ b
                                                              c
                                                              n
                                                              (GHC.CString.unpackAppendCString#
                                                                 Multilinear.Index.$fShowTIndex5
                                                                 (GHC.Base.augment
                                                                    @ GHC.Types.Char
                                                                    (\ @ b1
                                                                       (c1 :: GHC.Types.Char
                                                                              -> b1 -> b1)[OneShot]
                                                                       (n1 :: b1)[OneShot] ->
                                                                     GHC.Base.foldr
                                                                       @ GHC.Types.Char
                                                                       @ b1
                                                                       c1
                                                                       n1
                                                                       name)
                                                                    (GHC.CString.unpackAppendCString#
                                                                       Multilinear.Index.$fShowTIndex13
                                                                       (GHC.Base.augment
                                                                          @ GHC.Types.Char
                                                                          (\ @ b1
                                                                             (c1 :: GHC.Types.Char
                                                                                    -> b1
                                                                                    -> b1)[OneShot]
                                                                             (n1 :: b1)[OneShot] ->
                                                                           GHC.Base.foldr
                                                                             @ GHC.Types.Char
                                                                             @ b1
                                                                             c1
                                                                             n1
                                                                             GHC.Show.$fShowMaybe1)
                                                                          (case size of ww2 { GHC.Types.I# ww3 ->
                                                                           case GHC.Show.$wshowSignedInt
                                                                                  11#
                                                                                  ww3
                                                                                  (GHC.Types.[]
                                                                                     @ GHC.Types.Char) of ww4 { (#,#) ww5 ww6 ->
                                                                           GHC.Base.augment
                                                                             @ GHC.Types.Char
                                                                             (\ @ b1
                                                                                (c1 :: GHC.Types.Char
                                                                                       -> b1
                                                                                       -> b1)[OneShot]
                                                                                (n1 :: b1)[OneShot] ->
                                                                              GHC.Base.foldr
                                                                                @ GHC.Types.Char
                                                                                @ b1
                                                                                c1
                                                                                n1
                                                                                (GHC.Types.:
                                                                                   @ GHC.Types.Char
                                                                                   ww5
                                                                                   ww6))
                                                                             Multilinear.Index.$fShowTIndex2 } }))))) }
                                                    Multilinear.Generic.FiniteTensor i ds3
                                                    -> case i of wild1 {
                                                         Multilinear.Index.Finite.Covariant size name
                                                         -> GHC.Base.foldr
                                                              @ GHC.Types.Char
                                                              @ b
                                                              c
                                                              n
                                                              (GHC.CString.unpackAppendCString#
                                                                 Multilinear.Index.$fShowTIndex14
                                                                 (GHC.Base.augment
                                                                    @ GHC.Types.Char
                                                                    (\ @ b1
                                                                       (c1 :: GHC.Types.Char
                                                                              -> b1 -> b1)[OneShot]
                                                                       (n1 :: b1)[OneShot] ->
                                                                     GHC.Base.foldr
                                                                       @ GHC.Types.Char
                                                                       @ b1
                                                                       c1
                                                                       n1
                                                                       name)
                                                                    (GHC.CString.unpackAppendCString#
                                                                       Multilinear.Index.$fShowTIndex13
                                                                       (GHC.Base.augment
                                                                          @ GHC.Types.Char
                                                                          (\ @ b1
                                                                             (c1 :: GHC.Types.Char
                                                                                    -> b1
                                                                                    -> b1)[OneShot]
                                                                             (n1 :: b1)[OneShot] ->
                                                                           GHC.Base.foldr
                                                                             @ GHC.Types.Char
                                                                             @ b1
                                                                             c1
                                                                             n1
                                                                             GHC.Show.$fShowMaybe1)
                                                                          (case size of ww2 { GHC.Types.I# ww3 ->
                                                                           case GHC.Show.$wshowSignedInt
                                                                                  11#
                                                                                  ww3
                                                                                  (GHC.Types.[]
                                                                                     @ GHC.Types.Char) of ww4 { (#,#) ww5 ww6 ->
                                                                           GHC.Base.augment
                                                                             @ GHC.Types.Char
                                                                             (\ @ b1
                                                                                (c1 :: GHC.Types.Char
                                                                                       -> b1
                                                                                       -> b1)[OneShot]
                                                                                (n1 :: b1)[OneShot] ->
                                                                              GHC.Base.foldr
                                                                                @ GHC.Types.Char
                                                                                @ b1
                                                                                c1
                                                                                n1
                                                                                (GHC.Types.:
                                                                                   @ GHC.Types.Char
                                                                                   ww5
                                                                                   ww6))
                                                                             Multilinear.Index.$fShowTIndex10 } })))))
                                                         Multilinear.Index.Finite.Contravariant size name
                                                         -> GHC.Base.foldr
                                                              @ GHC.Types.Char
                                                              @ b
                                                              c
                                                              n
                                                              (GHC.CString.unpackAppendCString#
                                                                 Multilinear.Index.$fShowTIndex9
                                                                 (GHC.Base.augment
                                                                    @ GHC.Types.Char
                                                                    (\ @ b1
                                                                       (c1 :: GHC.Types.Char
                                                                              -> b1 -> b1)[OneShot]
                                                                       (n1 :: b1)[OneShot] ->
                                                                     GHC.Base.foldr
                                                                       @ GHC.Types.Char
                                                                       @ b1
                                                                       c1
                                                                       n1
                                                                       name)
                                                                    (GHC.CString.unpackAppendCString#
                                                                       Multilinear.Index.$fShowTIndex13
                                                                       (GHC.Base.augment
                                                                          @ GHC.Types.Char
                                                                          (\ @ b1
                                                                             (c1 :: GHC.Types.Char
                                                                                    -> b1
                                                                                    -> b1)[OneShot]
                                                                             (n1 :: b1)[OneShot] ->
                                                                           GHC.Base.foldr
                                                                             @ GHC.Types.Char
                                                                             @ b1
                                                                             c1
                                                                             n1
                                                                             GHC.Show.$fShowMaybe1)
                                                                          (case size of ww2 { GHC.Types.I# ww3 ->
                                                                           case GHC.Show.$wshowSignedInt
                                                                                  11#
                                                                                  ww3
                                                                                  (GHC.Types.[]
                                                                                     @ GHC.Types.Char) of ww4 { (#,#) ww5 ww6 ->
                                                                           GHC.Base.augment
                                                                             @ GHC.Types.Char
                                                                             (\ @ b1
                                                                                (c1 :: GHC.Types.Char
                                                                                       -> b1
                                                                                       -> b1)[OneShot]
                                                                                (n1 :: b1)[OneShot] ->
                                                                              GHC.Base.foldr
                                                                                @ GHC.Types.Char
                                                                                @ b1
                                                                                c1
                                                                                n1
                                                                                (GHC.Types.:
                                                                                   @ GHC.Types.Char
                                                                                   ww5
                                                                                   ww6))
                                                                             Multilinear.Index.$fShowTIndex6 } })))))
                                                         Multilinear.Index.Finite.Indifferent size name
                                                         -> GHC.Base.foldr
                                                              @ GHC.Types.Char
                                                              @ b
                                                              c
                                                              n
                                                              (GHC.CString.unpackAppendCString#
                                                                 Multilinear.Index.$fShowTIndex5
                                                                 (GHC.Base.augment
                                                                    @ GHC.Types.Char
                                                                    (\ @ b1
                                                                       (c1 :: GHC.Types.Char
                                                                              -> b1 -> b1)[OneShot]
                                                                       (n1 :: b1)[OneShot] ->
                                                                     GHC.Base.foldr
                                                                       @ GHC.Types.Char
                                                                       @ b1
                                                                       c1
                                                                       n1
                                                                       name)
                                                                    (GHC.CString.unpackAppendCString#
                                                                       Multilinear.Index.$fShowTIndex13
                                                                       (GHC.Base.augment
                                                                          @ GHC.Types.Char
                                                                          (\ @ b1
                                                                             (c1 :: GHC.Types.Char
                                                                                    -> b1
                                                                                    -> b1)[OneShot]
                                                                             (n1 :: b1)[OneShot] ->
                                                                           GHC.Base.foldr
                                                                             @ GHC.Types.Char
                                                                             @ b1
                                                                             c1
                                                                             n1
                                                                             GHC.Show.$fShowMaybe1)
                                                                          (case size of ww2 { GHC.Types.I# ww3 ->
                                                                           case GHC.Show.$wshowSignedInt
                                                                                  11#
                                                                                  ww3
                                                                                  (GHC.Types.[]
                                                                                     @ GHC.Types.Char) of ww4 { (#,#) ww5 ww6 ->
                                                                           GHC.Base.augment
                                                                             @ GHC.Types.Char
                                                                             (\ @ b1
                                                                                (c1 :: GHC.Types.Char
                                                                                       -> b1
                                                                                       -> b1)[OneShot]
                                                                                (n1 :: b1)[OneShot] ->
                                                                              GHC.Base.foldr
                                                                                @ GHC.Types.Char
                                                                                @ b1
                                                                                c1
                                                                                n1
                                                                                (GHC.Types.:
                                                                                   @ GHC.Types.Char
                                                                                   ww5
                                                                                   ww6))
                                                                             Multilinear.Index.$fShowTIndex2 } }))))) }
                                                    Multilinear.Generic.InfiniteTensor i ds3
                                                    -> case i of wild1 {
                                                         Multilinear.Index.Infinite.Covariant name
                                                         -> GHC.Base.foldr
                                                              @ GHC.Types.Char
                                                              @ b
                                                              c
                                                              n
                                                              (GHC.CString.unpackAppendCString#
                                                                 Multilinear.Index.$fShowTIndex14
                                                                 (GHC.Base.augment
                                                                    @ GHC.Types.Char
                                                                    (\ @ b1
                                                                       (c1 :: GHC.Types.Char
                                                                              -> b1 -> b1)[OneShot]
                                                                       (n1 :: b1)[OneShot] ->
                                                                     GHC.Base.foldr
                                                                       @ GHC.Types.Char
                                                                       @ b1
                                                                       c1
                                                                       n1
                                                                       name)
                                                                    (GHC.CString.unpackAppendCString#
                                                                       Multilinear.Index.$fShowTIndex13
                                                                       Multilinear.Index.$fShowTIndex12)))
                                                         Multilinear.Index.Infinite.Contravariant name
                                                         -> GHC.Base.foldr
                                                              @ GHC.Types.Char
                                                              @ b
                                                              c
                                                              n
                                                              (GHC.CString.unpackAppendCString#
                                                                 Multilinear.Index.$fShowTIndex9
                                                                 (GHC.Base.augment
                                                                    @ GHC.Types.Char
                                                                    (\ @ b1
                                                                       (c1 :: GHC.Types.Char
                                                                              -> b1 -> b1)[OneShot]
                                                                       (n1 :: b1)[OneShot] ->
                                                                     GHC.Base.foldr
                                                                       @ GHC.Types.Char
                                                                       @ b1
                                                                       c1
                                                                       n1
                                                                       name)
                                                                    (GHC.CString.unpackAppendCString#
                                                                       Multilinear.Index.$fShowTIndex13
                                                                       Multilinear.Index.$fShowTIndex8)))
                                                         Multilinear.Index.Infinite.Indifferent name
                                                         -> GHC.Base.foldr
                                                              @ GHC.Types.Char
                                                              @ b
                                                              c
                                                              n
                                                              (GHC.CString.unpackAppendCString#
                                                                 Multilinear.Index.$fShowTIndex5
                                                                 (GHC.Base.augment
                                                                    @ GHC.Types.Char
                                                                    (\ @ b1
                                                                       (c1 :: GHC.Types.Char
                                                                              -> b1 -> b1)[OneShot]
                                                                       (n1 :: b1)[OneShot] ->
                                                                     GHC.Base.foldr
                                                                       @ GHC.Types.Char
                                                                       @ b1
                                                                       c1
                                                                       n1
                                                                       name)
                                                                    (GHC.CString.unpackAppendCString#
                                                                       Multilinear.Index.$fShowTIndex13
                                                                       Multilinear.Index.$fShowTIndex4))) }
                                                    Multilinear.Generic.Err msg
                                                    -> case GHC.Err.error
                                                              @ 'GHC.Types.LiftedRep
                                                              @ Multilinear.Index.TIndex
                                                              (GHC.Stack.Types.PushCallStack
                                                                 (GHC.Base.build
                                                                    @ GHC.Types.Char
                                                                    (\ @ b1 ->
                                                                     GHC.CString.unpackFoldrCString#
                                                                       @ b1
                                                                       "error"#))
                                                                 (GHC.Stack.Types.SrcLoc
                                                                    (GHC.Base.build
                                                                       @ GHC.Types.Char
                                                                       (\ @ b1 ->
                                                                        GHC.CString.unpackFoldrCString#
                                                                          @ b1
                                                                          "Multilinear-0.8.0.0-4dpV53DlxV5EwwV6FZreVP"#))
                                                                    (GHC.Base.build
                                                                       @ GHC.Types.Char
                                                                       (\ @ b1 ->
                                                                        GHC.CString.unpackFoldrCString#
                                                                          @ b1
                                                                          "Multilinear.Generic"#))
                                                                    (GHC.Base.build
                                                                       @ GHC.Types.Char
                                                                       (\ @ b1 ->
                                                                        GHC.CString.unpackFoldrCString#
                                                                          @ b1
                                                                          "src\\Multilinear\\Generic.hs"#))
                                                                    (GHC.Types.I# 144#)
                                                                    (GHC.Types.I# 27#)
                                                                    (GHC.Types.I# 144#)
                                                                    (GHC.Types.I# 36#))
                                                                 GHC.Stack.Types.EmptyCallStack)
                                                                `cast`
                                                              (Sym (GHC.Classes.N:IP[0]
                                                                        <"callStack">_N
                                                                        <GHC.Stack.Types.CallStack>_N))
                                                              msg
                                                       ret_ty b
                                                       of {} })
                                                 (GHC.Base.augment
                                                    @ GHC.Types.Char
                                                    (\ @ b
                                                       (c :: GHC.Types.Char -> b -> b)[OneShot]
                                                       (n :: b)[OneShot] ->
                                                     GHC.CString.unpackFoldrCString#
                                                       @ b
                                                       " and index2 is "#
                                                       c
                                                       n)
                                                    (case ds1 of wild {
                                                       Multilinear.Generic.Scalar ds3
                                                       -> case GHC.Err.error
                                                                 @ 'GHC.Types.LiftedRep
                                                                 @ Multilinear.Index.TIndex
                                                                 (GHC.Stack.Types.PushCallStack
                                                                    (GHC.Base.build
                                                                       @ GHC.Types.Char
                                                                       (\ @ b ->
                                                                        GHC.CString.unpackFoldrCString#
                                                                          @ b
                                                                          "error"#))
                                                                    (GHC.Stack.Types.SrcLoc
                                                                       (GHC.Base.build
                                                                          @ GHC.Types.Char
                                                                          (\ @ b ->
                                                                           GHC.CString.unpackFoldrCString#
                                                                             @ b
                                                                             "Multilinear-0.8.0.0-4dpV53DlxV5EwwV6FZreVP"#))
                                                                       (GHC.Base.build
                                                                          @ GHC.Types.Char
                                                                          (\ @ b ->
                                                                           GHC.CString.unpackFoldrCString#
                                                                             @ b
                                                                             "Multilinear.Generic"#))
                                                                       (GHC.Base.build
                                                                          @ GHC.Types.Char
                                                                          (\ @ b ->
                                                                           GHC.CString.unpackFoldrCString#
                                                                             @ b
                                                                             "src\\Multilinear\\Generic.hs"#))
                                                                       (GHC.Types.I# 140#)
                                                                       (GHC.Types.I# 27#)
                                                                       (GHC.Types.I# 140#)
                                                                       (GHC.Types.I# 46#))
                                                                    GHC.Stack.Types.EmptyCallStack)
                                                                   `cast`
                                                                 (Sym (GHC.Classes.N:IP[0]
                                                                           <"callStack">_N
                                                                           <GHC.Stack.Types.CallStack>_N))
                                                                 Multilinear.Generic.scalarIndices
                                                          ret_ty [GHC.Types.Char]
                                                          of {}
                                                       Multilinear.Generic.SimpleFinite i ds3
                                                       -> case i of wild1 {
                                                            Multilinear.Index.Finite.Covariant size name
                                                            -> GHC.CString.unpackAppendCString#
                                                                 Multilinear.Index.$fShowTIndex14
                                                                 (GHC.Base.augment
                                                                    @ GHC.Types.Char
                                                                    (\ @ b
                                                                       (c :: GHC.Types.Char
                                                                             -> b -> b)[OneShot]
                                                                       (n :: b)[OneShot] ->
                                                                     GHC.Base.foldr
                                                                       @ GHC.Types.Char
                                                                       @ b
                                                                       c
                                                                       n
                                                                       name)
                                                                    (GHC.CString.unpackAppendCString#
                                                                       Multilinear.Index.$fShowTIndex13
                                                                       (GHC.Base.augment
                                                                          @ GHC.Types.Char
                                                                          (\ @ b
                                                                             (c :: GHC.Types.Char
                                                                                   -> b
                                                                                   -> b)[OneShot]
                                                                             (n :: b)[OneShot] ->
                                                                           GHC.Base.foldr
                                                                             @ GHC.Types.Char
                                                                             @ b
                                                                             c
                                                                             n
                                                                             GHC.Show.$fShowMaybe1)
                                                                          (case size of ww2 { GHC.Types.I# ww3 ->
                                                                           case GHC.Show.$wshowSignedInt
                                                                                  11#
                                                                                  ww3
                                                                                  (GHC.Types.[]
                                                                                     @ GHC.Types.Char) of ww4 { (#,#) ww5 ww6 ->
                                                                           GHC.Base.augment
                                                                             @ GHC.Types.Char
                                                                             (\ @ b
                                                                                (c :: GHC.Types.Char
                                                                                      -> b
                                                                                      -> b)[OneShot]
                                                                                (n :: b)[OneShot] ->
                                                                              GHC.Base.foldr
                                                                                @ GHC.Types.Char
                                                                                @ b
                                                                                c
                                                                                n
                                                                                (GHC.Types.:
                                                                                   @ GHC.Types.Char
                                                                                   ww5
                                                                                   ww6))
                                                                             Multilinear.Index.$fShowTIndex10 } }))))
                                                            Multilinear.Index.Finite.Contravariant size name
                                                            -> GHC.CString.unpackAppendCString#
                                                                 Multilinear.Index.$fShowTIndex9
                                                                 (GHC.Base.augment
                                                                    @ GHC.Types.Char
                                                                    (\ @ b
                                                                       (c :: GHC.Types.Char
                                                                             -> b -> b)[OneShot]
                                                                       (n :: b)[OneShot] ->
                                                                     GHC.Base.foldr
                                                                       @ GHC.Types.Char
                                                                       @ b
                                                                       c
                                                                       n
                                                                       name)
                                                                    (GHC.CString.unpackAppendCString#
                                                                       Multilinear.Index.$fShowTIndex13
                                                                       (GHC.Base.augment
                                                                          @ GHC.Types.Char
                                                                          (\ @ b
                                                                             (c :: GHC.Types.Char
                                                                                   -> b
                                                                                   -> b)[OneShot]
                                                                             (n :: b)[OneShot] ->
                                                                           GHC.Base.foldr
                                                                             @ GHC.Types.Char
                                                                             @ b
                                                                             c
                                                                             n
                                                                             GHC.Show.$fShowMaybe1)
                                                                          (case size of ww2 { GHC.Types.I# ww3 ->
                                                                           case GHC.Show.$wshowSignedInt
                                                                                  11#
                                                                                  ww3
                                                                                  (GHC.Types.[]
                                                                                     @ GHC.Types.Char) of ww4 { (#,#) ww5 ww6 ->
                                                                           GHC.Base.augment
                                                                             @ GHC.Types.Char
                                                                             (\ @ b
                                                                                (c :: GHC.Types.Char
                                                                                      -> b
                                                                                      -> b)[OneShot]
                                                                                (n :: b)[OneShot] ->
                                                                              GHC.Base.foldr
                                                                                @ GHC.Types.Char
                                                                                @ b
                                                                                c
                                                                                n
                                                                                (GHC.Types.:
                                                                                   @ GHC.Types.Char
                                                                                   ww5
                                                                                   ww6))
                                                                             Multilinear.Index.$fShowTIndex6 } }))))
                                                            Multilinear.Index.Finite.Indifferent size name
                                                            -> GHC.CString.unpackAppendCString#
                                                                 Multilinear.Index.$fShowTIndex5
                                                                 (GHC.Base.augment
                                                                    @ GHC.Types.Char
                                                                    (\ @ b
                                                                       (c :: GHC.Types.Char
                                                                             -> b -> b)[OneShot]
                                                                       (n :: b)[OneShot] ->
                                                                     GHC.Base.foldr
                                                                       @ GHC.Types.Char
                                                                       @ b
                                                                       c
                                                                       n
                                                                       name)
                                                                    (GHC.CString.unpackAppendCString#
                                                                       Multilinear.Index.$fShowTIndex13
                                                                       (GHC.Base.augment
                                                                          @ GHC.Types.Char
                                                                          (\ @ b
                                                                             (c :: GHC.Types.Char
                                                                                   -> b
                                                                                   -> b)[OneShot]
                                                                             (n :: b)[OneShot] ->
                                                                           GHC.Base.foldr
                                                                             @ GHC.Types.Char
                                                                             @ b
                                                                             c
                                                                             n
                                                                             GHC.Show.$fShowMaybe1)
                                                                          (case size of ww2 { GHC.Types.I# ww3 ->
                                                                           case GHC.Show.$wshowSignedInt
                                                                                  11#
                                                                                  ww3
                                                                                  (GHC.Types.[]
                                                                                     @ GHC.Types.Char) of ww4 { (#,#) ww5 ww6 ->
                                                                           GHC.Base.augment
                                                                             @ GHC.Types.Char
                                                                             (\ @ b
                                                                                (c :: GHC.Types.Char
                                                                                      -> b
                                                                                      -> b)[OneShot]
                                                                                (n :: b)[OneShot] ->
                                                                              GHC.Base.foldr
                                                                                @ GHC.Types.Char
                                                                                @ b
                                                                                c
                                                                                n
                                                                                (GHC.Types.:
                                                                                   @ GHC.Types.Char
                                                                                   ww5
                                                                                   ww6))
                                                                             Multilinear.Index.$fShowTIndex2 } })))) }
                                                       Multilinear.Generic.FiniteTensor i ds3
                                                       -> case i of wild1 {
                                                            Multilinear.Index.Finite.Covariant size name
                                                            -> GHC.CString.unpackAppendCString#
                                                                 Multilinear.Index.$fShowTIndex14
                                                                 (GHC.Base.augment
                                                                    @ GHC.Types.Char
                                                                    (\ @ b
                                                                       (c :: GHC.Types.Char
                                                                             -> b -> b)[OneShot]
                                                                       (n :: b)[OneShot] ->
                                                                     GHC.Base.foldr
                                                                       @ GHC.Types.Char
                                                                       @ b
                                                                       c
                                                                       n
                                                                       name)
                                                                    (GHC.CString.unpackAppendCString#
                                                                       Multilinear.Index.$fShowTIndex13
                                                                       (GHC.Base.augment
                                                                          @ GHC.Types.Char
                                                                          (\ @ b
                                                                             (c :: GHC.Types.Char
                                                                                   -> b
                                                                                   -> b)[OneShot]
                                                                             (n :: b)[OneShot] ->
                                                                           GHC.Base.foldr
                                                                             @ GHC.Types.Char
                                                                             @ b
                                                                             c
                                                                             n
                                                                             GHC.Show.$fShowMaybe1)
                                                                          (case size of ww2 { GHC.Types.I# ww3 ->
                                                                           case GHC.Show.$wshowSignedInt
                                                                                  11#
                                                                                  ww3
                                                                                  (GHC.Types.[]
                                                                                     @ GHC.Types.Char) of ww4 { (#,#) ww5 ww6 ->
                                                                           GHC.Base.augment
                                                                             @ GHC.Types.Char
                                                                             (\ @ b
                                                                                (c :: GHC.Types.Char
                                                                                      -> b
                                                                                      -> b)[OneShot]
                                                                                (n :: b)[OneShot] ->
                                                                              GHC.Base.foldr
                                                                                @ GHC.Types.Char
                                                                                @ b
                                                                                c
                                                                                n
                                                                                (GHC.Types.:
                                                                                   @ GHC.Types.Char
                                                                                   ww5
                                                                                   ww6))
                                                                             Multilinear.Index.$fShowTIndex10 } }))))
                                                            Multilinear.Index.Finite.Contravariant size name
                                                            -> GHC.CString.unpackAppendCString#
                                                                 Multilinear.Index.$fShowTIndex9
                                                                 (GHC.Base.augment
                                                                    @ GHC.Types.Char
                                                                    (\ @ b
                                                                       (c :: GHC.Types.Char
                                                                             -> b -> b)[OneShot]
                                                                       (n :: b)[OneShot] ->
                                                                     GHC.Base.foldr
                                                                       @ GHC.Types.Char
                                                                       @ b
                                                                       c
                                                                       n
                                                                       name)
                                                                    (GHC.CString.unpackAppendCString#
                                                                       Multilinear.Index.$fShowTIndex13
                                                                       (GHC.Base.augment
                                                                          @ GHC.Types.Char
                                                                          (\ @ b
                                                                             (c :: GHC.Types.Char
                                                                                   -> b
                                                                                   -> b)[OneShot]
                                                                             (n :: b)[OneShot] ->
                                                                           GHC.Base.foldr
                                                                             @ GHC.Types.Char
                                                                             @ b
                                                                             c
                                                                             n
                                                                             GHC.Show.$fShowMaybe1)
                                                                          (case size of ww2 { GHC.Types.I# ww3 ->
                                                                           case GHC.Show.$wshowSignedInt
                                                                                  11#
                                                                                  ww3
                                                                                  (GHC.Types.[]
                                                                                     @ GHC.Types.Char) of ww4 { (#,#) ww5 ww6 ->
                                                                           GHC.Base.augment
                                                                             @ GHC.Types.Char
                                                                             (\ @ b
                                                                                (c :: GHC.Types.Char
                                                                                      -> b
                                                                                      -> b)[OneShot]
                                                                                (n :: b)[OneShot] ->
                                                                              GHC.Base.foldr
                                                                                @ GHC.Types.Char
                                                                                @ b
                                                                                c
                                                                                n
                                                                                (GHC.Types.:
                                                                                   @ GHC.Types.Char
                                                                                   ww5
                                                                                   ww6))
                                                                             Multilinear.Index.$fShowTIndex6 } }))))
                                                            Multilinear.Index.Finite.Indifferent size name
                                                            -> GHC.CString.unpackAppendCString#
                                                                 Multilinear.Index.$fShowTIndex5
                                                                 (GHC.Base.augment
                                                                    @ GHC.Types.Char
                                                                    (\ @ b
                                                                       (c :: GHC.Types.Char
                                                                             -> b -> b)[OneShot]
                                                                       (n :: b)[OneShot] ->
                                                                     GHC.Base.foldr
                                                                       @ GHC.Types.Char
                                                                       @ b
                                                                       c
                                                                       n
                                                                       name)
                                                                    (GHC.CString.unpackAppendCString#
                                                                       Multilinear.Index.$fShowTIndex13
                                                                       (GHC.Base.augment
                                                                          @ GHC.Types.Char
                                                                          (\ @ b
                                                                             (c :: GHC.Types.Char
                                                                                   -> b
                                                                                   -> b)[OneShot]
                                                                             (n :: b)[OneShot] ->
                                                                           GHC.Base.foldr
                                                                             @ GHC.Types.Char
                                                                             @ b
                                                                             c
                                                                             n
                                                                             GHC.Show.$fShowMaybe1)
                                                                          (case size of ww2 { GHC.Types.I# ww3 ->
                                                                           case GHC.Show.$wshowSignedInt
                                                                                  11#
                                                                                  ww3
                                                                                  (GHC.Types.[]
                                                                                     @ GHC.Types.Char) of ww4 { (#,#) ww5 ww6 ->
                                                                           GHC.Base.augment
                                                                             @ GHC.Types.Char
                                                                             (\ @ b
                                                                                (c :: GHC.Types.Char
                                                                                      -> b
                                                                                      -> b)[OneShot]
                                                                                (n :: b)[OneShot] ->
                                                                              GHC.Base.foldr
                                                                                @ GHC.Types.Char
                                                                                @ b
                                                                                c
                                                                                n
                                                                                (GHC.Types.:
                                                                                   @ GHC.Types.Char
                                                                                   ww5
                                                                                   ww6))
                                                                             Multilinear.Index.$fShowTIndex2 } })))) }
                                                       Multilinear.Generic.InfiniteTensor i ds3
                                                       -> case i of wild1 {
                                                            Multilinear.Index.Infinite.Covariant name
                                                            -> GHC.CString.unpackAppendCString#
                                                                 Multilinear.Index.$fShowTIndex14
                                                                 (GHC.Base.augment
                                                                    @ GHC.Types.Char
                                                                    (\ @ b
                                                                       (c :: GHC.Types.Char
                                                                             -> b -> b)[OneShot]
                                                                       (n :: b)[OneShot] ->
                                                                     GHC.Base.foldr
                                                                       @ GHC.Types.Char
                                                                       @ b
                                                                       c
                                                                       n
                                                                       name)
                                                                    (GHC.CString.unpackAppendCString#
                                                                       Multilinear.Index.$fShowTIndex13
                                                                       Multilinear.Index.$fShowTIndex12))
                                                            Multilinear.Index.Infinite.Contravariant name
                                                            -> GHC.CString.unpackAppendCString#
                                                                 Multilinear.Index.$fShowTIndex9
                                                                 (GHC.Base.augment
                                                                    @ GHC.Types.Char
                                                                    (\ @ b
                                                                       (c :: GHC.Types.Char
                                                                             -> b -> b)[OneShot]
                                                                       (n :: b)[OneShot] ->
                                                                     GHC.Base.foldr
                                                                       @ GHC.Types.Char
                                                                       @ b
                                                                       c
                                                                       n
                                                                       name)
                                                                    (GHC.CString.unpackAppendCString#
                                                                       Multilinear.Index.$fShowTIndex13
                                                                       Multilinear.Index.$fShowTIndex8))
                                                            Multilinear.Index.Infinite.Indifferent name
                                                            -> GHC.CString.unpackAppendCString#
                                                                 Multilinear.Index.$fShowTIndex5
                                                                 (GHC.Base.augment
                                                                    @ GHC.Types.Char
                                                                    (\ @ b
                                                                       (c :: GHC.Types.Char
                                                                             -> b -> b)[OneShot]
                                                                       (n :: b)[OneShot] ->
                                                                     GHC.Base.foldr
                                                                       @ GHC.Types.Char
                                                                       @ b
                                                                       c
                                                                       n
                                                                       name)
                                                                    (GHC.CString.unpackAppendCString#
                                                                       Multilinear.Index.$fShowTIndex13
                                                                       Multilinear.Index.$fShowTIndex4)) }
                                                       Multilinear.Generic.Err msg
                                                       -> case GHC.Err.error
                                                                 @ 'GHC.Types.LiftedRep
                                                                 @ Multilinear.Index.TIndex
                                                                 (GHC.Stack.Types.PushCallStack
                                                                    (GHC.Base.build
                                                                       @ GHC.Types.Char
                                                                       (\ @ b ->
                                                                        GHC.CString.unpackFoldrCString#
                                                                          @ b
                                                                          "error"#))
                                                                    (GHC.Stack.Types.SrcLoc
                                                                       (GHC.Base.build
                                                                          @ GHC.Types.Char
                                                                          (\ @ b ->
                                                                           GHC.CString.unpackFoldrCString#
                                                                             @ b
                                                                             "Multilinear-0.8.0.0-4dpV53DlxV5EwwV6FZreVP"#))
                                                                       (GHC.Base.build
                                                                          @ GHC.Types.Char
                                                                          (\ @ b ->
                                                                           GHC.CString.unpackFoldrCString#
                                                                             @ b
                                                                             "Multilinear.Generic"#))
                                                                       (GHC.Base.build
                                                                          @ GHC.Types.Char
                                                                          (\ @ b ->
                                                                           GHC.CString.unpackFoldrCString#
                                                                             @ b
                                                                             "src\\Multilinear\\Generic.hs"#))
                                                                       (GHC.Types.I# 144#)
                                                                       (GHC.Types.I# 27#)
                                                                       (GHC.Types.I# 144#)
                                                                       (GHC.Types.I# 36#))
                                                                    GHC.Stack.Types.EmptyCallStack)
                                                                   `cast`
                                                                 (Sym (GHC.Classes.N:IP[0]
                                                                           <"callStack">_N
                                                                           <GHC.Stack.Types.CallStack>_N))
                                                                 msg
                                                          ret_ty [GHC.Types.Char]
                                                          of {} }))))))
                               } in
                               case ds of wild {
                                 DEFAULT -> fail GHC.Prim.void#
                                 Multilinear.Generic.SimpleFinite i1 ts1'
                                 -> case i1 of wild1 {
                                      Multilinear.Index.Finite.Covariant count1 ds2
                                      -> case ds1 of wild2 {
                                           DEFAULT -> fail GHC.Prim.void#
                                           Multilinear.Generic.SimpleFinite i2 ts2'
                                           -> case i2 of wild3 {
                                                Multilinear.Index.Finite.Covariant count2 ds3
                                                -> case GHC.Classes.eqInt count1 count2 of wild4 {
                                                     GHC.Types.False
                                                     -> Multilinear.Generic.Err
                                                          @ a
                                                          (GHC.Base.augment
                                                             @ GHC.Types.Char
                                                             (\ @ b
                                                                (c :: GHC.Types.Char
                                                                      -> b -> b)[OneShot]
                                                                (n :: b)[OneShot] ->
                                                              GHC.CString.unpackFoldrCString#
                                                                @ b
                                                                "Tensor product: "#
                                                                c
                                                                n)
                                                             (GHC.Base.augment
                                                                @ GHC.Types.Char
                                                                (\ @ b
                                                                   (c :: GHC.Types.Char
                                                                         -> b -> b)[OneShot]
                                                                   (n :: b)[OneShot] ->
                                                                 GHC.Base.foldr
                                                                   @ GHC.Types.Char
                                                                   @ b
                                                                   c
                                                                   n
                                                                   Multilinear.Generic.incompatibleTypes)
                                                                (GHC.Base.augment
                                                                   @ GHC.Types.Char
                                                                   (\ @ b
                                                                      (c :: GHC.Types.Char
                                                                            -> b -> b)[OneShot]
                                                                      (n :: b)[OneShot] ->
                                                                    GHC.CString.unpackFoldrCString#
                                                                      @ b
                                                                      " - index1 is "#
                                                                      c
                                                                      n)
                                                                   (GHC.Base.augment
                                                                      @ GHC.Types.Char
                                                                      (\ @ b
                                                                         (c :: GHC.Types.Char
                                                                               -> b -> b)[OneShot]
                                                                         (n :: b)[OneShot] ->
                                                                       GHC.Base.foldr
                                                                         @ GHC.Types.Char
                                                                         @ b
                                                                         c
                                                                         n
                                                                         (GHC.CString.unpackAppendCString#
                                                                            Multilinear.Index.$fShowTIndex14
                                                                            (GHC.Base.augment
                                                                               @ GHC.Types.Char
                                                                               (\ @ b1
                                                                                  (c1 :: GHC.Types.Char
                                                                                         -> b1
                                                                                         -> b1)[OneShot]
                                                                                  (n1 :: b1)[OneShot] ->
                                                                                GHC.Base.foldr
                                                                                  @ GHC.Types.Char
                                                                                  @ b1
                                                                                  c1
                                                                                  n1
                                                                                  ds2)
                                                                               (GHC.CString.unpackAppendCString#
                                                                                  Multilinear.Index.$fShowTIndex13
                                                                                  (GHC.Base.augment
                                                                                     @ GHC.Types.Char
                                                                                     (\ @ b1
                                                                                        (c1 :: GHC.Types.Char
                                                                                               -> b1
                                                                                               -> b1)[OneShot]
                                                                                        (n1 :: b1)[OneShot] ->
                                                                                      GHC.Base.foldr
                                                                                        @ GHC.Types.Char
                                                                                        @ b1
                                                                                        c1
                                                                                        n1
                                                                                        GHC.Show.$fShowMaybe1)
                                                                                     (case count1 of ww2 { GHC.Types.I# ww3 ->
                                                                                      case GHC.Show.$wshowSignedInt
                                                                                             11#
                                                                                             ww3
                                                                                             (GHC.Types.[]
                                                                                                @ GHC.Types.Char) of ww4 { (#,#) ww5 ww6 ->
                                                                                      GHC.Base.augment
                                                                                        @ GHC.Types.Char
                                                                                        (\ @ b1
                                                                                           (c1 :: GHC.Types.Char
                                                                                                  -> b1
                                                                                                  -> b1)[OneShot]
                                                                                           (n1 :: b1)[OneShot] ->
                                                                                         GHC.Base.foldr
                                                                                           @ GHC.Types.Char
                                                                                           @ b1
                                                                                           c1
                                                                                           n1
                                                                                           (GHC.Types.:
                                                                                              @ GHC.Types.Char
                                                                                              ww5
                                                                                              ww6))
                                                                                        Multilinear.Index.$fShowTIndex10 } }))))))
                                                                      (GHC.Base.augment
                                                                         @ GHC.Types.Char
                                                                         (\ @ b
                                                                            (c :: GHC.Types.Char
                                                                                  -> b
                                                                                  -> b)[OneShot]
                                                                            (n :: b)[OneShot] ->
                                                                          GHC.CString.unpackFoldrCString#
                                                                            @ b
                                                                            " and index2 is "#
                                                                            c
                                                                            n)
                                                                         (GHC.CString.unpackAppendCString#
                                                                            Multilinear.Index.$fShowTIndex14
                                                                            (GHC.Base.augment
                                                                               @ GHC.Types.Char
                                                                               (\ @ b
                                                                                  (c :: GHC.Types.Char
                                                                                        -> b
                                                                                        -> b)[OneShot]
                                                                                  (n :: b)[OneShot] ->
                                                                                GHC.Base.foldr
                                                                                  @ GHC.Types.Char
                                                                                  @ b
                                                                                  c
                                                                                  n
                                                                                  ds3)
                                                                               (GHC.CString.unpackAppendCString#
                                                                                  Multilinear.Index.$fShowTIndex13
                                                                                  (GHC.Base.augment
                                                                                     @ GHC.Types.Char
                                                                                     (\ @ b
                                                                                        (c :: GHC.Types.Char
                                                                                              -> b
                                                                                              -> b)[OneShot]
                                                                                        (n :: b)[OneShot] ->
                                                                                      GHC.Base.foldr
                                                                                        @ GHC.Types.Char
                                                                                        @ b
                                                                                        c
                                                                                        n
                                                                                        GHC.Show.$fShowMaybe1)
                                                                                     (case count2 of ww2 { GHC.Types.I# ww3 ->
                                                                                      case GHC.Show.$wshowSignedInt
                                                                                             11#
                                                                                             ww3
                                                                                             (GHC.Types.[]
                                                                                                @ GHC.Types.Char) of ww4 { (#,#) ww5 ww6 ->
                                                                                      GHC.Base.augment
                                                                                        @ GHC.Types.Char
                                                                                        (\ @ b
                                                                                           (c :: GHC.Types.Char
                                                                                                 -> b
                                                                                                 -> b)[OneShot]
                                                                                           (n :: b)[OneShot] ->
                                                                                         GHC.Base.foldr
                                                                                           @ GHC.Types.Char
                                                                                           @ b
                                                                                           c
                                                                                           n
                                                                                           (GHC.Types.:
                                                                                              @ GHC.Types.Char
                                                                                              ww5
                                                                                              ww6))
                                                                                        Multilinear.Index.$fShowTIndex10 } }))))))))))
                                                     GHC.Types.True
                                                     -> Multilinear.Generic.SimpleFinite
                                                          @ a
                                                          wild1
                                                          (let {
                                                             f :: a -> a -> a = GHC.Num.* @ a $dNum
                                                           } in
                                                           Data.Vector.Generic.new
                                                             @ Data.Vector.Vector
                                                             @ a
                                                             (Data.Vector.$fVectorVectora @ a)
                                                             (Data.Vector.Generic.New.unstream
                                                                @ Data.Vector.Vector
                                                                @ a
                                                                (Data.Vector.$fVectorVectora @ a)
                                                                (Data.Vector.Fusion.Bundle.Monadic.zipWithM
                                                                   @ Data.Vector.Fusion.Util.Id
                                                                   @ a
                                                                   @ a
                                                                   @ a
                                                                   @ Data.Vector.Vector
                                                                   Data.Vector.Fusion.Util.$fMonadId
                                                                   (\ (a1 :: a)
                                                                      (b1 :: a)[OneShot] ->
                                                                    f a1 b1)
                                                                     `cast`
                                                                   (<a>_R
                                                                    ->_R <a>_R
                                                                    ->_R Sym (Data.Vector.Fusion.Util.N:Id[0]
                                                                                  <a>_R))
                                                                   (Data.Vector.Generic.stream
                                                                      @ Data.Vector.Vector
                                                                      @ a
                                                                      (Data.Vector.$fVectorVectora
                                                                         @ a)
                                                                      ts1')
                                                                   (Data.Vector.Generic.stream
                                                                      @ Data.Vector.Vector
                                                                      @ a
                                                                      (Data.Vector.$fVectorVectora
                                                                         @ a)
                                                                      ts2')))) }
                                                Multilinear.Index.Finite.Contravariant count2 ds3
                                                -> case GHC.Classes.eqInt count1 count2 of wild4 {
                                                     GHC.Types.False
                                                     -> Multilinear.Generic.Err
                                                          @ a
                                                          (GHC.Base.augment
                                                             @ GHC.Types.Char
                                                             (\ @ b
                                                                (c :: GHC.Types.Char
                                                                      -> b -> b)[OneShot]
                                                                (n :: b)[OneShot] ->
                                                              GHC.CString.unpackFoldrCString#
                                                                @ b
                                                                "Tensor product: "#
                                                                c
                                                                n)
                                                             (GHC.Base.augment
                                                                @ GHC.Types.Char
                                                                (\ @ b
                                                                   (c :: GHC.Types.Char
                                                                         -> b -> b)[OneShot]
                                                                   (n :: b)[OneShot] ->
                                                                 GHC.Base.foldr
                                                                   @ GHC.Types.Char
                                                                   @ b
                                                                   c
                                                                   n
                                                                   Multilinear.Generic.incompatibleTypes)
                                                                (GHC.Base.augment
                                                                   @ GHC.Types.Char
                                                                   (\ @ b
                                                                      (c :: GHC.Types.Char
                                                                            -> b -> b)[OneShot]
                                                                      (n :: b)[OneShot] ->
                                                                    GHC.CString.unpackFoldrCString#
                                                                      @ b
                                                                      " - index1 is "#
                                                                      c
                                                                      n)
                                                                   (GHC.Base.augment
                                                                      @ GHC.Types.Char
                                                                      (\ @ b
                                                                         (c :: GHC.Types.Char
                                                                               -> b -> b)[OneShot]
                                                                         (n :: b)[OneShot] ->
                                                                       GHC.Base.foldr
                                                                         @ GHC.Types.Char
                                                                         @ b
                                                                         c
                                                                         n
                                                                         (GHC.CString.unpackAppendCString#
                                                                            Multilinear.Index.$fShowTIndex14
                                                                            (GHC.Base.augment
                                                                               @ GHC.Types.Char
                                                                               (\ @ b1
                                                                                  (c1 :: GHC.Types.Char
                                                                                         -> b1
                                                                                         -> b1)[OneShot]
                                                                                  (n1 :: b1)[OneShot] ->
                                                                                GHC.Base.foldr
                                                                                  @ GHC.Types.Char
                                                                                  @ b1
                                                                                  c1
                                                                                  n1
                                                                                  ds2)
                                                                               (GHC.CString.unpackAppendCString#
                                                                                  Multilinear.Index.$fShowTIndex13
                                                                                  (GHC.Base.augment
                                                                                     @ GHC.Types.Char
                                                                                     (\ @ b1
                                                                                        (c1 :: GHC.Types.Char
                                                                                               -> b1
                                                                                               -> b1)[OneShot]
                                                                                        (n1 :: b1)[OneShot] ->
                                                                                      GHC.Base.foldr
                                                                                        @ GHC.Types.Char
                                                                                        @ b1
                                                                                        c1
                                                                                        n1
                                                                                        GHC.Show.$fShowMaybe1)
                                                                                     (case count1 of ww2 { GHC.Types.I# ww3 ->
                                                                                      case GHC.Show.$wshowSignedInt
                                                                                             11#
                                                                                             ww3
                                                                                             (GHC.Types.[]
                                                                                                @ GHC.Types.Char) of ww4 { (#,#) ww5 ww6 ->
                                                                                      GHC.Base.augment
                                                                                        @ GHC.Types.Char
                                                                                        (\ @ b1
                                                                                           (c1 :: GHC.Types.Char
                                                                                                  -> b1
                                                                                                  -> b1)[OneShot]
                                                                                           (n1 :: b1)[OneShot] ->
                                                                                         GHC.Base.foldr
                                                                                           @ GHC.Types.Char
                                                                                           @ b1
                                                                                           c1
                                                                                           n1
                                                                                           (GHC.Types.:
                                                                                              @ GHC.Types.Char
                                                                                              ww5
                                                                                              ww6))
                                                                                        Multilinear.Index.$fShowTIndex10 } }))))))
                                                                      (GHC.Base.augment
                                                                         @ GHC.Types.Char
                                                                         (\ @ b
                                                                            (c :: GHC.Types.Char
                                                                                  -> b
                                                                                  -> b)[OneShot]
                                                                            (n :: b)[OneShot] ->
                                                                          GHC.CString.unpackFoldrCString#
                                                                            @ b
                                                                            " and index2 is "#
                                                                            c
                                                                            n)
                                                                         (GHC.CString.unpackAppendCString#
                                                                            Multilinear.Index.$fShowTIndex9
                                                                            (GHC.Base.augment
                                                                               @ GHC.Types.Char
                                                                               (\ @ b
                                                                                  (c :: GHC.Types.Char
                                                                                        -> b
                                                                                        -> b)[OneShot]
                                                                                  (n :: b)[OneShot] ->
                                                                                GHC.Base.foldr
                                                                                  @ GHC.Types.Char
                                                                                  @ b
                                                                                  c
                                                                                  n
                                                                                  ds3)
                                                                               (GHC.CString.unpackAppendCString#
                                                                                  Multilinear.Index.$fShowTIndex13
                                                                                  (GHC.Base.augment
                                                                                     @ GHC.Types.Char
                                                                                     (\ @ b
                                                                                        (c :: GHC.Types.Char
                                                                                              -> b
                                                                                              -> b)[OneShot]
                                                                                        (n :: b)[OneShot] ->
                                                                                      GHC.Base.foldr
                                                                                        @ GHC.Types.Char
                                                                                        @ b
                                                                                        c
                                                                                        n
                                                                                        GHC.Show.$fShowMaybe1)
                                                                                     (case count2 of ww2 { GHC.Types.I# ww3 ->
                                                                                      case GHC.Show.$wshowSignedInt
                                                                                             11#
                                                                                             ww3
                                                                                             (GHC.Types.[]
                                                                                                @ GHC.Types.Char) of ww4 { (#,#) ww5 ww6 ->
                                                                                      GHC.Base.augment
                                                                                        @ GHC.Types.Char
                                                                                        (\ @ b
                                                                                           (c :: GHC.Types.Char
                                                                                                 -> b
                                                                                                 -> b)[OneShot]
                                                                                           (n :: b)[OneShot] ->
                                                                                         GHC.Base.foldr
                                                                                           @ GHC.Types.Char
                                                                                           @ b
                                                                                           c
                                                                                           n
                                                                                           (GHC.Types.:
                                                                                              @ GHC.Types.Char
                                                                                              ww5
                                                                                              ww6))
                                                                                        Multilinear.Index.$fShowTIndex6 } }))))))))))
                                                     GHC.Types.True
                                                     -> Multilinear.Generic.Scalar
                                                          @ a
                                                          (let {
                                                             f :: a -> a -> a = GHC.Num.+ @ a $dNum
                                                           } in
                                                           let {
                                                             f1 :: a -> a -> a = GHC.Num.* @ a $dNum
                                                           } in
                                                           (Data.Vector.Fusion.Bundle.Monadic.foldlM'
                                                              @ Data.Vector.Fusion.Util.Id
                                                              @ a
                                                              @ a
                                                              @ Data.Vector.Vector
                                                              Data.Vector.Fusion.Util.$fMonadId
                                                              (\ (a1 :: a) (b1 :: a)[OneShot] ->
                                                               f a1 b1)
                                                                `cast`
                                                              (<a>_R
                                                               ->_R <a>_R
                                                               ->_R Sym (Data.Vector.Fusion.Util.N:Id[0]
                                                                             <a>_R))
                                                              (GHC.Num.fromInteger @ a $dNum 0)
                                                              (Data.Vector.Fusion.Bundle.Monadic.zipWithM
                                                                 @ Data.Vector.Fusion.Util.Id
                                                                 @ a
                                                                 @ a
                                                                 @ a
                                                                 @ Data.Vector.Vector
                                                                 Data.Vector.Fusion.Util.$fMonadId
                                                                 (\ (a1 :: a) (b1 :: a)[OneShot] ->
                                                                  f1 a1 b1)
                                                                   `cast`
                                                                 (<a>_R
                                                                  ->_R <a>_R
                                                                  ->_R Sym (Data.Vector.Fusion.Util.N:Id[0]
                                                                                <a>_R))
                                                                 (Data.Vector.Generic.stream
                                                                    @ Data.Vector.Vector
                                                                    @ a
                                                                    (Data.Vector.$fVectorVectora
                                                                       @ a)
                                                                    ts1')
                                                                 (Data.Vector.Generic.stream
                                                                    @ Data.Vector.Vector
                                                                    @ a
                                                                    (Data.Vector.$fVectorVectora
                                                                       @ a)
                                                                    ts2')))
                                                             `cast`
                                                           (Data.Vector.Fusion.Util.N:Id[0]
                                                                <a>_R)) }
                                                Multilinear.Index.Finite.Indifferent ipv ipv1
                                                -> fail GHC.Prim.void# }
                                           Multilinear.Generic.FiniteTensor i2 ts2'
                                           -> case i2 of wild3 {
                                                Multilinear.Index.Finite.Covariant count2 ds3
                                                -> case GHC.Classes.eqInt count1 count2 of wild4 {
                                                     GHC.Types.False
                                                     -> Multilinear.Generic.Err
                                                          @ a
                                                          (GHC.Base.augment
                                                             @ GHC.Types.Char
                                                             (\ @ b
                                                                (c :: GHC.Types.Char
                                                                      -> b -> b)[OneShot]
                                                                (n :: b)[OneShot] ->
                                                              GHC.CString.unpackFoldrCString#
                                                                @ b
                                                                "Tensor product: "#
                                                                c
                                                                n)
                                                             (GHC.Base.augment
                                                                @ GHC.Types.Char
                                                                (\ @ b
                                                                   (c :: GHC.Types.Char
                                                                         -> b -> b)[OneShot]
                                                                   (n :: b)[OneShot] ->
                                                                 GHC.Base.foldr
                                                                   @ GHC.Types.Char
                                                                   @ b
                                                                   c
                                                                   n
                                                                   Multilinear.Generic.incompatibleTypes)
                                                                (GHC.Base.augment
                                                                   @ GHC.Types.Char
                                                                   (\ @ b
                                                                      (c :: GHC.Types.Char
                                                                            -> b -> b)[OneShot]
                                                                      (n :: b)[OneShot] ->
                                                                    GHC.CString.unpackFoldrCString#
                                                                      @ b
                                                                      " - index1 is "#
                                                                      c
                                                                      n)
                                                                   (GHC.Base.augment
                                                                      @ GHC.Types.Char
                                                                      (\ @ b
                                                                         (c :: GHC.Types.Char
                                                                               -> b -> b)[OneShot]
                                                                         (n :: b)[OneShot] ->
                                                                       GHC.Base.foldr
                                                                         @ GHC.Types.Char
                                                                         @ b
                                                                         c
                                                                         n
                                                                         (GHC.CString.unpackAppendCString#
                                                                            Multilinear.Index.$fShowTIndex14
                                                                            (GHC.Base.augment
                                                                               @ GHC.Types.Char
                                                                               (\ @ b1
                                                                                  (c1 :: GHC.Types.Char
                                                                                         -> b1
                                                                                         -> b1)[OneShot]
                                                                                  (n1 :: b1)[OneShot] ->
                                                                                GHC.Base.foldr
                                                                                  @ GHC.Types.Char
                                                                                  @ b1
                                                                                  c1
                                                                                  n1
                                                                                  ds2)
                                                                               (GHC.CString.unpackAppendCString#
                                                                                  Multilinear.Index.$fShowTIndex13
                                                                                  (GHC.Base.augment
                                                                                     @ GHC.Types.Char
                                                                                     (\ @ b1
                                                                                        (c1 :: GHC.Types.Char
                                                                                               -> b1
                                                                                               -> b1)[OneShot]
                                                                                        (n1 :: b1)[OneShot] ->
                                                                                      GHC.Base.foldr
                                                                                        @ GHC.Types.Char
                                                                                        @ b1
                                                                                        c1
                                                                                        n1
                                                                                        GHC.Show.$fShowMaybe1)
                                                                                     (case count1 of ww2 { GHC.Types.I# ww3 ->
                                                                                      case GHC.Show.$wshowSignedInt
                                                                                             11#
                                                                                             ww3
                                                                                             (GHC.Types.[]
                                                                                                @ GHC.Types.Char) of ww4 { (#,#) ww5 ww6 ->
                                                                                      GHC.Base.augment
                                                                                        @ GHC.Types.Char
                                                                                        (\ @ b1
                                                                                           (c1 :: GHC.Types.Char
                                                                                                  -> b1
                                                                                                  -> b1)[OneShot]
                                                                                           (n1 :: b1)[OneShot] ->
                                                                                         GHC.Base.foldr
                                                                                           @ GHC.Types.Char
                                                                                           @ b1
                                                                                           c1
                                                                                           n1
                                                                                           (GHC.Types.:
                                                                                              @ GHC.Types.Char
                                                                                              ww5
                                                                                              ww6))
                                                                                        Multilinear.Index.$fShowTIndex10 } }))))))
                                                                      (GHC.Base.augment
                                                                         @ GHC.Types.Char
                                                                         (\ @ b
                                                                            (c :: GHC.Types.Char
                                                                                  -> b
                                                                                  -> b)[OneShot]
                                                                            (n :: b)[OneShot] ->
                                                                          GHC.CString.unpackFoldrCString#
                                                                            @ b
                                                                            " and index2 is "#
                                                                            c
                                                                            n)
                                                                         (GHC.CString.unpackAppendCString#
                                                                            Multilinear.Index.$fShowTIndex14
                                                                            (GHC.Base.augment
                                                                               @ GHC.Types.Char
                                                                               (\ @ b
                                                                                  (c :: GHC.Types.Char
                                                                                        -> b
                                                                                        -> b)[OneShot]
                                                                                  (n :: b)[OneShot] ->
                                                                                GHC.Base.foldr
                                                                                  @ GHC.Types.Char
                                                                                  @ b
                                                                                  c
                                                                                  n
                                                                                  ds3)
                                                                               (GHC.CString.unpackAppendCString#
                                                                                  Multilinear.Index.$fShowTIndex13
                                                                                  (GHC.Base.augment
                                                                                     @ GHC.Types.Char
                                                                                     (\ @ b
                                                                                        (c :: GHC.Types.Char
                                                                                              -> b
                                                                                              -> b)[OneShot]
                                                                                        (n :: b)[OneShot] ->
                                                                                      GHC.Base.foldr
                                                                                        @ GHC.Types.Char
                                                                                        @ b
                                                                                        c
                                                                                        n
                                                                                        GHC.Show.$fShowMaybe1)
                                                                                     (case count2 of ww2 { GHC.Types.I# ww3 ->
                                                                                      case GHC.Show.$wshowSignedInt
                                                                                             11#
                                                                                             ww3
                                                                                             (GHC.Types.[]
                                                                                                @ GHC.Types.Char) of ww4 { (#,#) ww5 ww6 ->
                                                                                      GHC.Base.augment
                                                                                        @ GHC.Types.Char
                                                                                        (\ @ b
                                                                                           (c :: GHC.Types.Char
                                                                                                 -> b
                                                                                                 -> b)[OneShot]
                                                                                           (n :: b)[OneShot] ->
                                                                                         GHC.Base.foldr
                                                                                           @ GHC.Types.Char
                                                                                           @ b
                                                                                           c
                                                                                           n
                                                                                           (GHC.Types.:
                                                                                              @ GHC.Types.Char
                                                                                              ww5
                                                                                              ww6))
                                                                                        Multilinear.Index.$fShowTIndex10 } }))))))))))
                                                     GHC.Types.True
                                                     -> Multilinear.Generic.FiniteTensor
                                                          @ a
                                                          wild1
                                                          (Data.Vector.Generic.new
                                                             @ Data.Vector.Vector
                                                             @ (Multilinear.Generic.Tensor a)
                                                             (Data.Vector.$fVectorVectora
                                                                @ (Multilinear.Generic.Tensor a))
                                                             (Data.Vector.Generic.New.unstream
                                                                @ Data.Vector.Vector
                                                                @ (Multilinear.Generic.Tensor a)
                                                                (Data.Vector.$fVectorVectora
                                                                   @ (Multilinear.Generic.Tensor a))
                                                                (Data.Vector.Fusion.Bundle.Monadic.zipWithM
                                                                   @ Data.Vector.Fusion.Util.Id
                                                                   @ a
                                                                   @ (Multilinear.Generic.Tensor a)
                                                                   @ (Multilinear.Generic.Tensor a)
                                                                   @ Data.Vector.Vector
                                                                   Data.Vector.Fusion.Util.$fMonadId
                                                                   (\ (a1 :: a)
                                                                      (b1 :: Multilinear.Generic.Tensor
                                                                               a)[OneShot] ->
                                                                    Multilinear.Generic.dot_$c*.
                                                                      @ a
                                                                      $dNum
                                                                      a1
                                                                      b1)
                                                                     `cast`
                                                                   (<a>_R
                                                                    ->_R <Multilinear.Generic.Tensor
                                                                            a>_R
                                                                    ->_R Sym (Data.Vector.Fusion.Util.N:Id[0]
                                                                                  <Multilinear.Generic.Tensor
                                                                                     a>_R))
                                                                   (Data.Vector.Generic.stream
                                                                      @ Data.Vector.Vector
                                                                      @ a
                                                                      (Data.Vector.$fVectorVectora
                                                                         @ a)
                                                                      ts1')
                                                                   (Data.Vector.Generic.stream
                                                                      @ Data.Vector.Vector
                                                                      @ (Multilinear.Generic.Tensor
                                                                           a)
                                                                      (Data.Vector.$fVectorVectora
                                                                         @ (Multilinear.Generic.Tensor
                                                                              a))
                                                                      ts2')))) }
                                                Multilinear.Index.Finite.Contravariant count2 ds3
                                                -> case GHC.Classes.eqInt count1 count2 of wild4 {
                                                     GHC.Types.False
                                                     -> Multilinear.Generic.Err
                                                          @ a
                                                          (GHC.Base.augment
                                                             @ GHC.Types.Char
                                                             (\ @ b
                                                                (c :: GHC.Types.Char
                                                                      -> b -> b)[OneShot]
                                                                (n :: b)[OneShot] ->
                                                              GHC.CString.unpackFoldrCString#
                                                                @ b
                                                                "Tensor product: "#
                                                                c
                                                                n)
                                                             (GHC.Base.augment
                                                                @ GHC.Types.Char
                                                                (\ @ b
                                                                   (c :: GHC.Types.Char
                                                                         -> b -> b)[OneShot]
                                                                   (n :: b)[OneShot] ->
                                                                 GHC.Base.foldr
                                                                   @ GHC.Types.Char
                                                                   @ b
                                                                   c
                                                                   n
                                                                   Multilinear.Generic.incompatibleTypes)
                                                                (GHC.Base.augment
                                                                   @ GHC.Types.Char
                                                                   (\ @ b
                                                                      (c :: GHC.Types.Char
                                                                            -> b -> b)[OneShot]
                                                                      (n :: b)[OneShot] ->
                                                                    GHC.CString.unpackFoldrCString#
                                                                      @ b
                                                                      " - index1 is "#
                                                                      c
                                                                      n)
                                                                   (GHC.Base.augment
                                                                      @ GHC.Types.Char
                                                                      (\ @ b
                                                                         (c :: GHC.Types.Char
                                                                               -> b -> b)[OneShot]
                                                                         (n :: b)[OneShot] ->
                                                                       GHC.Base.foldr
                                                                         @ GHC.Types.Char
                                                                         @ b
                                                                         c
                                                                         n
                                                                         (GHC.CString.unpackAppendCString#
                                                                            Multilinear.Index.$fShowTIndex14
                                                                            (GHC.Base.augment
                                                                               @ GHC.Types.Char
                                                                               (\ @ b1
                                                                                  (c1 :: GHC.Types.Char
                                                                                         -> b1
                                                                                         -> b1)[OneShot]
                                                                                  (n1 :: b1)[OneShot] ->
                                                                                GHC.Base.foldr
                                                                                  @ GHC.Types.Char
                                                                                  @ b1
                                                                                  c1
                                                                                  n1
                                                                                  ds2)
                                                                               (GHC.CString.unpackAppendCString#
                                                                                  Multilinear.Index.$fShowTIndex13
                                                                                  (GHC.Base.augment
                                                                                     @ GHC.Types.Char
                                                                                     (\ @ b1
                                                                                        (c1 :: GHC.Types.Char
                                                                                               -> b1
                                                                                               -> b1)[OneShot]
                                                                                        (n1 :: b1)[OneShot] ->
                                                                                      GHC.Base.foldr
                                                                                        @ GHC.Types.Char
                                                                                        @ b1
                                                                                        c1
                                                                                        n1
                                                                                        GHC.Show.$fShowMaybe1)
                                                                                     (case count1 of ww2 { GHC.Types.I# ww3 ->
                                                                                      case GHC.Show.$wshowSignedInt
                                                                                             11#
                                                                                             ww3
                                                                                             (GHC.Types.[]
                                                                                                @ GHC.Types.Char) of ww4 { (#,#) ww5 ww6 ->
                                                                                      GHC.Base.augment
                                                                                        @ GHC.Types.Char
                                                                                        (\ @ b1
                                                                                           (c1 :: GHC.Types.Char
                                                                                                  -> b1
                                                                                                  -> b1)[OneShot]
                                                                                           (n1 :: b1)[OneShot] ->
                                                                                         GHC.Base.foldr
                                                                                           @ GHC.Types.Char
                                                                                           @ b1
                                                                                           c1
                                                                                           n1
                                                                                           (GHC.Types.:
                                                                                              @ GHC.Types.Char
                                                                                              ww5
                                                                                              ww6))
                                                                                        Multilinear.Index.$fShowTIndex10 } }))))))
                                                                      (GHC.Base.augment
                                                                         @ GHC.Types.Char
                                                                         (\ @ b
                                                                            (c :: GHC.Types.Char
                                                                                  -> b
                                                                                  -> b)[OneShot]
                                                                            (n :: b)[OneShot] ->
                                                                          GHC.CString.unpackFoldrCString#
                                                                            @ b
                                                                            " and index2 is "#
                                                                            c
                                                                            n)
                                                                         (GHC.CString.unpackAppendCString#
                                                                            Multilinear.Index.$fShowTIndex9
                                                                            (GHC.Base.augment
                                                                               @ GHC.Types.Char
                                                                               (\ @ b
                                                                                  (c :: GHC.Types.Char
                                                                                        -> b
                                                                                        -> b)[OneShot]
                                                                                  (n :: b)[OneShot] ->
                                                                                GHC.Base.foldr
                                                                                  @ GHC.Types.Char
                                                                                  @ b
                                                                                  c
                                                                                  n
                                                                                  ds3)
                                                                               (GHC.CString.unpackAppendCString#
                                                                                  Multilinear.Index.$fShowTIndex13
                                                                                  (GHC.Base.augment
                                                                                     @ GHC.Types.Char
                                                                                     (\ @ b
                                                                                        (c :: GHC.Types.Char
                                                                                              -> b
                                                                                              -> b)[OneShot]
                                                                                        (n :: b)[OneShot] ->
                                                                                      GHC.Base.foldr
                                                                                        @ GHC.Types.Char
                                                                                        @ b
                                                                                        c
                                                                                        n
                                                                                        GHC.Show.$fShowMaybe1)
                                                                                     (case count2 of ww2 { GHC.Types.I# ww3 ->
                                                                                      case GHC.Show.$wshowSignedInt
                                                                                             11#
                                                                                             ww3
                                                                                             (GHC.Types.[]
                                                                                                @ GHC.Types.Char) of ww4 { (#,#) ww5 ww6 ->
                                                                                      GHC.Base.augment
                                                                                        @ GHC.Types.Char
                                                                                        (\ @ b
                                                                                           (c :: GHC.Types.Char
                                                                                                 -> b
                                                                                                 -> b)[OneShot]
                                                                                           (n :: b)[OneShot] ->
                                                                                         GHC.Base.foldr
                                                                                           @ GHC.Types.Char
                                                                                           @ b
                                                                                           c
                                                                                           n
                                                                                           (GHC.Types.:
                                                                                              @ GHC.Types.Char
                                                                                              ww5
                                                                                              ww6))
                                                                                        Multilinear.Index.$fShowTIndex6 } }))))))))))
                                                     GHC.Types.True
                                                     -> (Data.Vector.Fusion.Bundle.Monadic.foldlM'
                                                           @ Data.Vector.Fusion.Util.Id
                                                           @ (Multilinear.Generic.Tensor a)
                                                           @ (Multilinear.Generic.Tensor a)
                                                           @ Data.Vector.Vector
                                                           Data.Vector.Fusion.Util.$fMonadId
                                                           (\ (a1 :: Multilinear.Generic.Tensor a)
                                                              (b1 :: Multilinear.Generic.Tensor
                                                                       a)[OneShot] ->
                                                            Multilinear.Generic.dot_$c+
                                                              @ a
                                                              $dNum
                                                              a1
                                                              b1)
                                                             `cast`
                                                           (<Multilinear.Generic.Tensor a>_R
                                                            ->_R <Multilinear.Generic.Tensor a>_R
                                                            ->_R Sym (Data.Vector.Fusion.Util.N:Id[0]
                                                                          <Multilinear.Generic.Tensor
                                                                             a>_R))
                                                           (Multilinear.Generic.Scalar
                                                              @ a
                                                              (GHC.Num.fromInteger @ a $dNum 0))
                                                           (Data.Vector.Fusion.Bundle.Monadic.zipWithM
                                                              @ Data.Vector.Fusion.Util.Id
                                                              @ a
                                                              @ (Multilinear.Generic.Tensor a)
                                                              @ (Multilinear.Generic.Tensor a)
                                                              @ Data.Vector.Vector
                                                              Data.Vector.Fusion.Util.$fMonadId
                                                              (\ (a1 :: a)
                                                                 (b1 :: Multilinear.Generic.Tensor
                                                                          a)[OneShot] ->
                                                               Multilinear.Generic.dot_$c*.
                                                                 @ a
                                                                 $dNum
                                                                 a1
                                                                 b1)
                                                                `cast`
                                                              (<a>_R
                                                               ->_R <Multilinear.Generic.Tensor a>_R
                                                               ->_R Sym (Data.Vector.Fusion.Util.N:Id[0]
                                                                             <Multilinear.Generic.Tensor
                                                                                a>_R))
                                                              (Data.Vector.Generic.stream
                                                                 @ Data.Vector.Vector
                                                                 @ a
                                                                 (Data.Vector.$fVectorVectora @ a)
                                                                 ts1')
                                                              (Data.Vector.Generic.stream
                                                                 @ Data.Vector.Vector
                                                                 @ (Multilinear.Generic.Tensor a)
                                                                 (Data.Vector.$fVectorVectora
                                                                    @ (Multilinear.Generic.Tensor
                                                                         a))
                                                                 ts2')))
                                                          `cast`
                                                        (Data.Vector.Fusion.Util.N:Id[0]
                                                             <Multilinear.Generic.Tensor a>_R) }
                                                Multilinear.Index.Finite.Indifferent ipv ipv1
                                                -> fail GHC.Prim.void# }
                                           Multilinear.Generic.InfiniteTensor ds3 ts2'
                                           -> case ds3 of wild3 {
                                                Multilinear.Index.Infinite.Covariant ds4
                                                -> Multilinear.Generic.InfiniteTensor
                                                     @ a
                                                     wild3
                                                     (GHC.Base.build
                                                        @ (Multilinear.Generic.Tensor a)
                                                        (\ @ b
                                                           (c :: Multilinear.Generic.Tensor a
                                                                 -> b -> b)[OneShot]
                                                           (n :: b)[OneShot] ->
                                                         Data.Vector.Fusion.Bundle.toListFB
                                                           @ (Multilinear.Generic.Tensor a)
                                                           @ b
                                                           @ Data.Vector.Vector
                                                           c
                                                           n
                                                           (Data.Vector.Fusion.Bundle.Monadic.zipWithM
                                                              @ Data.Vector.Fusion.Util.Id
                                                              @ a
                                                              @ (Multilinear.Generic.Tensor a)
                                                              @ (Multilinear.Generic.Tensor a)
                                                              @ Data.Vector.Vector
                                                              Data.Vector.Fusion.Util.$fMonadId
                                                              (\ (a1 :: a)
                                                                 (b1 :: Multilinear.Generic.Tensor
                                                                          a)[OneShot] ->
                                                               Multilinear.Generic.dot_$c*.
                                                                 @ a
                                                                 $dNum
                                                                 a1
                                                                 b1)
                                                                `cast`
                                                              (<a>_R
                                                               ->_R <Multilinear.Generic.Tensor a>_R
                                                               ->_R Sym (Data.Vector.Fusion.Util.N:Id[0]
                                                                             <Multilinear.Generic.Tensor
                                                                                a>_R))
                                                              (Data.Vector.Generic.stream
                                                                 @ Data.Vector.Vector
                                                                 @ a
                                                                 (Data.Vector.$fVectorVectora @ a)
                                                                 ts1')
                                                              (Data.Vector.Fusion.Bundle.Monadic.unsafeFromList
                                                                 @ Data.Vector.Fusion.Util.Id
                                                                 @ (Multilinear.Generic.Tensor a)
                                                                 @ Data.Vector.Vector
                                                                 Data.Vector.Fusion.Util.$fMonadId
                                                                 Data.Vector.Fusion.Bundle.Size.Unknown
                                                                 (GHC.Base.build
                                                                    @ (Multilinear.Generic.Tensor a)
                                                                    (\ @ b1
                                                                       (c1 :: Multilinear.Generic.Tensor
                                                                                a
                                                                              -> b1 -> b1)[OneShot]
                                                                       (nil :: b1)[OneShot] ->
                                                                     case GHC.Classes.ltInt
                                                                            (GHC.Types.I# 0#)
                                                                            count1 of wild4 {
                                                                       GHC.Types.False -> nil
                                                                       GHC.Types.True
                                                                       -> GHC.Base.foldr
                                                                            @ (Multilinear.Generic.Tensor
                                                                                 a)
                                                                            @ (GHC.Types.Int -> b1)
                                                                            (GHC.List.takeFB
                                                                               @ (Multilinear.Generic.Tensor
                                                                                    a)
                                                                               @ b1
                                                                               c1
                                                                               nil)
                                                                            (GHC.List.flipSeqTake
                                                                               @ b1
                                                                               nil)
                                                                            ts2'
                                                                            count1 }))))))
                                                Multilinear.Index.Infinite.Contravariant ds4
                                                -> (Data.Vector.Fusion.Bundle.Monadic.foldlM'
                                                      @ Data.Vector.Fusion.Util.Id
                                                      @ (Multilinear.Generic.Tensor a)
                                                      @ (Multilinear.Generic.Tensor a)
                                                      @ Data.Vector.Vector
                                                      Data.Vector.Fusion.Util.$fMonadId
                                                      (\ (a1 :: Multilinear.Generic.Tensor a)
                                                         (b1 :: Multilinear.Generic.Tensor
                                                                  a)[OneShot] ->
                                                       Multilinear.Generic.dot_$c+ @ a $dNum a1 b1)
                                                        `cast`
                                                      (<Multilinear.Generic.Tensor a>_R
                                                       ->_R <Multilinear.Generic.Tensor a>_R
                                                       ->_R Sym (Data.Vector.Fusion.Util.N:Id[0]
                                                                     <Multilinear.Generic.Tensor
                                                                        a>_R))
                                                      (Multilinear.Generic.Scalar
                                                         @ a
                                                         (GHC.Num.fromInteger @ a $dNum 0))
                                                      (Data.Vector.Fusion.Bundle.Monadic.zipWithM
                                                         @ Data.Vector.Fusion.Util.Id
                                                         @ a
                                                         @ (Multilinear.Generic.Tensor a)
                                                         @ (Multilinear.Generic.Tensor a)
                                                         @ Data.Vector.Vector
                                                         Data.Vector.Fusion.Util.$fMonadId
                                                         (\ (a1 :: a)
                                                            (b1 :: Multilinear.Generic.Tensor
                                                                     a)[OneShot] ->
                                                          Multilinear.Generic.dot_$c*.
                                                            @ a
                                                            $dNum
                                                            a1
                                                            b1)
                                                           `cast`
                                                         (<a>_R
                                                          ->_R <Multilinear.Generic.Tensor a>_R
                                                          ->_R Sym (Data.Vector.Fusion.Util.N:Id[0]
                                                                        <Multilinear.Generic.Tensor
                                                                           a>_R))
                                                         (Data.Vector.Generic.stream
                                                            @ Data.Vector.Vector
                                                            @ a
                                                            (Data.Vector.$fVectorVectora @ a)
                                                            ts1')
                                                         (Data.Vector.Fusion.Bundle.Monadic.unsafeFromList
                                                            @ Data.Vector.Fusion.Util.Id
                                                            @ (Multilinear.Generic.Tensor a)
                                                            @ Data.Vector.Vector
                                                            Data.Vector.Fusion.Util.$fMonadId
                                                            Data.Vector.Fusion.Bundle.Size.Unknown
                                                            (GHC.Base.build
                                                               @ (Multilinear.Generic.Tensor a)
                                                               (\ @ b
                                                                  (c :: Multilinear.Generic.Tensor a
                                                                        -> b -> b)[OneShot]
                                                                  (nil :: b)[OneShot] ->
                                                                case GHC.Classes.ltInt
                                                                       (GHC.Types.I# 0#)
                                                                       count1 of wild4 {
                                                                  GHC.Types.False -> nil
                                                                  GHC.Types.True
                                                                  -> GHC.Base.foldr
                                                                       @ (Multilinear.Generic.Tensor
                                                                            a)
                                                                       @ (GHC.Types.Int -> b)
                                                                       (GHC.List.takeFB
                                                                          @ (Multilinear.Generic.Tensor
                                                                               a)
                                                                          @ b
                                                                          c
                                                                          nil)
                                                                       (GHC.List.flipSeqTake
                                                                          @ b
                                                                          nil)
                                                                       ts2'
                                                                       count1 })))))
                                                     `cast`
                                                   (Data.Vector.Fusion.Util.N:Id[0]
                                                        <Multilinear.Generic.Tensor a>_R)
                                                Multilinear.Index.Infinite.Indifferent ipv
                                                -> fail GHC.Prim.void# } }
                                      Multilinear.Index.Finite.Contravariant count1 ds2
                                      -> case ds1 of wild2 {
                                           DEFAULT -> fail GHC.Prim.void#
                                           Multilinear.Generic.SimpleFinite i2 ts2'
                                           -> case i2 of wild3 {
                                                DEFAULT -> fail GHC.Prim.void#
                                                Multilinear.Index.Finite.Contravariant count2 ds3
                                                -> case GHC.Classes.eqInt count1 count2 of wild4 {
                                                     GHC.Types.False
                                                     -> Multilinear.Generic.Err
                                                          @ a
                                                          (GHC.Base.augment
                                                             @ GHC.Types.Char
                                                             (\ @ b
                                                                (c :: GHC.Types.Char
                                                                      -> b -> b)[OneShot]
                                                                (n :: b)[OneShot] ->
                                                              GHC.CString.unpackFoldrCString#
                                                                @ b
                                                                "Tensor product: "#
                                                                c
                                                                n)
                                                             (GHC.Base.augment
                                                                @ GHC.Types.Char
                                                                (\ @ b
                                                                   (c :: GHC.Types.Char
                                                                         -> b -> b)[OneShot]
                                                                   (n :: b)[OneShot] ->
                                                                 GHC.Base.foldr
                                                                   @ GHC.Types.Char
                                                                   @ b
                                                                   c
                                                                   n
                                                                   Multilinear.Generic.incompatibleTypes)
                                                                (GHC.Base.augment
                                                                   @ GHC.Types.Char
                                                                   (\ @ b
                                                                      (c :: GHC.Types.Char
                                                                            -> b -> b)[OneShot]
                                                                      (n :: b)[OneShot] ->
                                                                    GHC.CString.unpackFoldrCString#
                                                                      @ b
                                                                      " - index1 is "#
                                                                      c
                                                                      n)
                                                                   (GHC.Base.augment
                                                                      @ GHC.Types.Char
                                                                      (\ @ b
                                                                         (c :: GHC.Types.Char
                                                                               -> b -> b)[OneShot]
                                                                         (n :: b)[OneShot] ->
                                                                       GHC.Base.foldr
                                                                         @ GHC.Types.Char
                                                                         @ b
                                                                         c
                                                                         n
                                                                         (GHC.CString.unpackAppendCString#
                                                                            Multilinear.Index.$fShowTIndex9
                                                                            (GHC.Base.augment
                                                                               @ GHC.Types.Char
                                                                               (\ @ b1
                                                                                  (c1 :: GHC.Types.Char
                                                                                         -> b1
                                                                                         -> b1)[OneShot]
                                                                                  (n1 :: b1)[OneShot] ->
                                                                                GHC.Base.foldr
                                                                                  @ GHC.Types.Char
                                                                                  @ b1
                                                                                  c1
                                                                                  n1
                                                                                  ds2)
                                                                               (GHC.CString.unpackAppendCString#
                                                                                  Multilinear.Index.$fShowTIndex13
                                                                                  (GHC.Base.augment
                                                                                     @ GHC.Types.Char
                                                                                     (\ @ b1
                                                                                        (c1 :: GHC.Types.Char
                                                                                               -> b1
                                                                                               -> b1)[OneShot]
                                                                                        (n1 :: b1)[OneShot] ->
                                                                                      GHC.Base.foldr
                                                                                        @ GHC.Types.Char
                                                                                        @ b1
                                                                                        c1
                                                                                        n1
                                                                                        GHC.Show.$fShowMaybe1)
                                                                                     (case count1 of ww2 { GHC.Types.I# ww3 ->
                                                                                      case GHC.Show.$wshowSignedInt
                                                                                             11#
                                                                                             ww3
                                                                                             (GHC.Types.[]
                                                                                                @ GHC.Types.Char) of ww4 { (#,#) ww5 ww6 ->
                                                                                      GHC.Base.augment
                                                                                        @ GHC.Types.Char
                                                                                        (\ @ b1
                                                                                           (c1 :: GHC.Types.Char
                                                                                                  -> b1
                                                                                                  -> b1)[OneShot]
                                                                                           (n1 :: b1)[OneShot] ->
                                                                                         GHC.Base.foldr
                                                                                           @ GHC.Types.Char
                                                                                           @ b1
                                                                                           c1
                                                                                           n1
                                                                                           (GHC.Types.:
                                                                                              @ GHC.Types.Char
                                                                                              ww5
                                                                                              ww6))
                                                                                        Multilinear.Index.$fShowTIndex6 } }))))))
                                                                      (GHC.Base.augment
                                                                         @ GHC.Types.Char
                                                                         (\ @ b
                                                                            (c :: GHC.Types.Char
                                                                                  -> b
                                                                                  -> b)[OneShot]
                                                                            (n :: b)[OneShot] ->
                                                                          GHC.CString.unpackFoldrCString#
                                                                            @ b
                                                                            " and index2 is "#
                                                                            c
                                                                            n)
                                                                         (GHC.CString.unpackAppendCString#
                                                                            Multilinear.Index.$fShowTIndex9
                                                                            (GHC.Base.augment
                                                                               @ GHC.Types.Char
                                                                               (\ @ b
                                                                                  (c :: GHC.Types.Char
                                                                                        -> b
                                                                                        -> b)[OneShot]
                                                                                  (n :: b)[OneShot] ->
                                                                                GHC.Base.foldr
                                                                                  @ GHC.Types.Char
                                                                                  @ b
                                                                                  c
                                                                                  n
                                                                                  ds3)
                                                                               (GHC.CString.unpackAppendCString#
                                                                                  Multilinear.Index.$fShowTIndex13
                                                                                  (GHC.Base.augment
                                                                                     @ GHC.Types.Char
                                                                                     (\ @ b
                                                                                        (c :: GHC.Types.Char
                                                                                              -> b
                                                                                              -> b)[OneShot]
                                                                                        (n :: b)[OneShot] ->
                                                                                      GHC.Base.foldr
                                                                                        @ GHC.Types.Char
                                                                                        @ b
                                                                                        c
                                                                                        n
                                                                                        GHC.Show.$fShowMaybe1)
                                                                                     (case count2 of ww2 { GHC.Types.I# ww3 ->
                                                                                      case GHC.Show.$wshowSignedInt
                                                                                             11#
                                                                                             ww3
                                                                                             (GHC.Types.[]
                                                                                                @ GHC.Types.Char) of ww4 { (#,#) ww5 ww6 ->
                                                                                      GHC.Base.augment
                                                                                        @ GHC.Types.Char
                                                                                        (\ @ b
                                                                                           (c :: GHC.Types.Char
                                                                                                 -> b
                                                                                                 -> b)[OneShot]
                                                                                           (n :: b)[OneShot] ->
                                                                                         GHC.Base.foldr
                                                                                           @ GHC.Types.Char
                                                                                           @ b
                                                                                           c
                                                                                           n
                                                                                           (GHC.Types.:
                                                                                              @ GHC.Types.Char
                                                                                              ww5
                                                                                              ww6))
                                                                                        Multilinear.Index.$fShowTIndex6 } }))))))))))
                                                     GHC.Types.True
                                                     -> Multilinear.Generic.SimpleFinite
                                                          @ a
                                                          wild1
                                                          (let {
                                                             f :: a -> a -> a = GHC.Num.* @ a $dNum
                                                           } in
                                                           Data.Vector.Generic.new
                                                             @ Data.Vector.Vector
                                                             @ a
                                                             (Data.Vector.$fVectorVectora @ a)
                                                             (Data.Vector.Generic.New.unstream
                                                                @ Data.Vector.Vector
                                                                @ a
                                                                (Data.Vector.$fVectorVectora @ a)
                                                                (Data.Vector.Fusion.Bundle.Monadic.zipWithM
                                                                   @ Data.Vector.Fusion.Util.Id
                                                                   @ a
                                                                   @ a
                                                                   @ a
                                                                   @ Data.Vector.Vector
                                                                   Data.Vector.Fusion.Util.$fMonadId
                                                                   (\ (a1 :: a)
                                                                      (b1 :: a)[OneShot] ->
                                                                    f a1 b1)
                                                                     `cast`
                                                                   (<a>_R
                                                                    ->_R <a>_R
                                                                    ->_R Sym (Data.Vector.Fusion.Util.N:Id[0]
                                                                                  <a>_R))
                                                                   (Data.Vector.Generic.stream
                                                                      @ Data.Vector.Vector
                                                                      @ a
                                                                      (Data.Vector.$fVectorVectora
                                                                         @ a)
                                                                      ts1')
                                                                   (Data.Vector.Generic.stream
                                                                      @ Data.Vector.Vector
                                                                      @ a
                                                                      (Data.Vector.$fVectorVectora
                                                                         @ a)
                                                                      ts2')))) } }
                                           Multilinear.Generic.FiniteTensor i2 ts2'
                                           -> case i2 of wild3 {
                                                DEFAULT -> fail GHC.Prim.void#
                                                Multilinear.Index.Finite.Contravariant count2 ds3
                                                -> case GHC.Classes.eqInt count1 count2 of wild4 {
                                                     GHC.Types.False
                                                     -> Multilinear.Generic.Err
                                                          @ a
                                                          (GHC.Base.augment
                                                             @ GHC.Types.Char
                                                             (\ @ b
                                                                (c :: GHC.Types.Char
                                                                      -> b -> b)[OneShot]
                                                                (n :: b)[OneShot] ->
                                                              GHC.CString.unpackFoldrCString#
                                                                @ b
                                                                "Tensor product: "#
                                                                c
                                                                n)
                                                             (GHC.Base.augment
                                                                @ GHC.Types.Char
                                                                (\ @ b
                                                                   (c :: GHC.Types.Char
                                                                         -> b -> b)[OneShot]
                                                                   (n :: b)[OneShot] ->
                                                                 GHC.Base.foldr
                                                                   @ GHC.Types.Char
                                                                   @ b
                                                                   c
                                                                   n
                                                                   Multilinear.Generic.incompatibleTypes)
                                                                (GHC.Base.augment
                                                                   @ GHC.Types.Char
                                                                   (\ @ b
                                                                      (c :: GHC.Types.Char
                                                                            -> b -> b)[OneShot]
                                                                      (n :: b)[OneShot] ->
                                                                    GHC.CString.unpackFoldrCString#
                                                                      @ b
                                                                      " - index1 is "#
                                                                      c
                                                                      n)
                                                                   (GHC.Base.augment
                                                                      @ GHC.Types.Char
                                                                      (\ @ b
                                                                         (c :: GHC.Types.Char
                                                                               -> b -> b)[OneShot]
                                                                         (n :: b)[OneShot] ->
                                                                       GHC.Base.foldr
                                                                         @ GHC.Types.Char
                                                                         @ b
                                                                         c
                                                                         n
                                                                         (GHC.CString.unpackAppendCString#
                                                                            Multilinear.Index.$fShowTIndex9
                                                                            (GHC.Base.augment
                                                                               @ GHC.Types.Char
                                                                               (\ @ b1
                                                                                  (c1 :: GHC.Types.Char
                                                                                         -> b1
                                                                                         -> b1)[OneShot]
                                                                                  (n1 :: b1)[OneShot] ->
                                                                                GHC.Base.foldr
                                                                                  @ GHC.Types.Char
                                                                                  @ b1
                                                                                  c1
                                                                                  n1
                                                                                  ds2)
                                                                               (GHC.CString.unpackAppendCString#
                                                                                  Multilinear.Index.$fShowTIndex13
                                                                                  (GHC.Base.augment
                                                                                     @ GHC.Types.Char
                                                                                     (\ @ b1
                                                                                        (c1 :: GHC.Types.Char
                                                                                               -> b1
                                                                                               -> b1)[OneShot]
                                                                                        (n1 :: b1)[OneShot] ->
                                                                                      GHC.Base.foldr
                                                                                        @ GHC.Types.Char
                                                                                        @ b1
                                                                                        c1
                                                                                        n1
                                                                                        GHC.Show.$fShowMaybe1)
                                                                                     (case count1 of ww2 { GHC.Types.I# ww3 ->
                                                                                      case GHC.Show.$wshowSignedInt
                                                                                             11#
                                                                                             ww3
                                                                                             (GHC.Types.[]
                                                                                                @ GHC.Types.Char) of ww4 { (#,#) ww5 ww6 ->
                                                                                      GHC.Base.augment
                                                                                        @ GHC.Types.Char
                                                                                        (\ @ b1
                                                                                           (c1 :: GHC.Types.Char
                                                                                                  -> b1
                                                                                                  -> b1)[OneShot]
                                                                                           (n1 :: b1)[OneShot] ->
                                                                                         GHC.Base.foldr
                                                                                           @ GHC.Types.Char
                                                                                           @ b1
                                                                                           c1
                                                                                           n1
                                                                                           (GHC.Types.:
                                                                                              @ GHC.Types.Char
                                                                                              ww5
                                                                                              ww6))
                                                                                        Multilinear.Index.$fShowTIndex6 } }))))))
                                                                      (GHC.Base.augment
                                                                         @ GHC.Types.Char
                                                                         (\ @ b
                                                                            (c :: GHC.Types.Char
                                                                                  -> b
                                                                                  -> b)[OneShot]
                                                                            (n :: b)[OneShot] ->
                                                                          GHC.CString.unpackFoldrCString#
                                                                            @ b
                                                                            " and index2 is "#
                                                                            c
                                                                            n)
                                                                         (GHC.CString.unpackAppendCString#
                                                                            Multilinear.Index.$fShowTIndex9
                                                                            (GHC.Base.augment
                                                                               @ GHC.Types.Char
                                                                               (\ @ b
                                                                                  (c :: GHC.Types.Char
                                                                                        -> b
                                                                                        -> b)[OneShot]
                                                                                  (n :: b)[OneShot] ->
                                                                                GHC.Base.foldr
                                                                                  @ GHC.Types.Char
                                                                                  @ b
                                                                                  c
                                                                                  n
                                                                                  ds3)
                                                                               (GHC.CString.unpackAppendCString#
                                                                                  Multilinear.Index.$fShowTIndex13
                                                                                  (GHC.Base.augment
                                                                                     @ GHC.Types.Char
                                                                                     (\ @ b
                                                                                        (c :: GHC.Types.Char
                                                                                              -> b
                                                                                              -> b)[OneShot]
                                                                                        (n :: b)[OneShot] ->
                                                                                      GHC.Base.foldr
                                                                                        @ GHC.Types.Char
                                                                                        @ b
                                                                                        c
                                                                                        n
                                                                                        GHC.Show.$fShowMaybe1)
                                                                                     (case count2 of ww2 { GHC.Types.I# ww3 ->
                                                                                      case GHC.Show.$wshowSignedInt
                                                                                             11#
                                                                                             ww3
                                                                                             (GHC.Types.[]
                                                                                                @ GHC.Types.Char) of ww4 { (#,#) ww5 ww6 ->
                                                                                      GHC.Base.augment
                                                                                        @ GHC.Types.Char
                                                                                        (\ @ b
                                                                                           (c :: GHC.Types.Char
                                                                                                 -> b
                                                                                                 -> b)[OneShot]
                                                                                           (n :: b)[OneShot] ->
                                                                                         GHC.Base.foldr
                                                                                           @ GHC.Types.Char
                                                                                           @ b
                                                                                           c
                                                                                           n
                                                                                           (GHC.Types.:
                                                                                              @ GHC.Types.Char
                                                                                              ww5
                                                                                              ww6))
                                                                                        Multilinear.Index.$fShowTIndex6 } }))))))))))
                                                     GHC.Types.True
                                                     -> Multilinear.Generic.FiniteTensor
                                                          @ a
                                                          wild1
                                                          (Data.Vector.Generic.new
                                                             @ Data.Vector.Vector
                                                             @ (Multilinear.Generic.Tensor a)
                                                             (Data.Vector.$fVectorVectora
                                                                @ (Multilinear.Generic.Tensor a))
                                                             (Data.Vector.Generic.New.unstream
                                                                @ Data.Vector.Vector
                                                                @ (Multilinear.Generic.Tensor a)
                                                                (Data.Vector.$fVectorVectora
                                                                   @ (Multilinear.Generic.Tensor a))
                                                                (Data.Vector.Fusion.Bundle.Monadic.zipWithM
                                                                   @ Data.Vector.Fusion.Util.Id
                                                                   @ a
                                                                   @ (Multilinear.Generic.Tensor a)
                                                                   @ (Multilinear.Generic.Tensor a)
                                                                   @ Data.Vector.Vector
                                                                   Data.Vector.Fusion.Util.$fMonadId
                                                                   (\ (a1 :: a)
                                                                      (b1 :: Multilinear.Generic.Tensor
                                                                               a)[OneShot] ->
                                                                    Multilinear.Generic.dot_$c*.
                                                                      @ a
                                                                      $dNum
                                                                      a1
                                                                      b1)
                                                                     `cast`
                                                                   (<a>_R
                                                                    ->_R <Multilinear.Generic.Tensor
                                                                            a>_R
                                                                    ->_R Sym (Data.Vector.Fusion.Util.N:Id[0]
                                                                                  <Multilinear.Generic.Tensor
                                                                                     a>_R))
                                                                   (Data.Vector.Generic.stream
                                                                      @ Data.Vector.Vector
                                                                      @ a
                                                                      (Data.Vector.$fVectorVectora
                                                                         @ a)
                                                                      ts1')
                                                                   (Data.Vector.Generic.stream
                                                                      @ Data.Vector.Vector
                                                                      @ (Multilinear.Generic.Tensor
                                                                           a)
                                                                      (Data.Vector.$fVectorVectora
                                                                         @ (Multilinear.Generic.Tensor
                                                                              a))
                                                                      ts2')))) } }
                                           Multilinear.Generic.InfiniteTensor i2 ts2'
                                           -> case i2 of wild3 {
                                                DEFAULT -> fail GHC.Prim.void#
                                                Multilinear.Index.Infinite.Contravariant ds3
                                                -> Multilinear.Generic.InfiniteTensor
                                                     @ a
                                                     wild3
                                                     (GHC.Base.build
                                                        @ (Multilinear.Generic.Tensor a)
                                                        (\ @ b
                                                           (c :: Multilinear.Generic.Tensor a
                                                                 -> b -> b)[OneShot]
                                                           (n :: b)[OneShot] ->
                                                         Data.Vector.Fusion.Bundle.toListFB
                                                           @ (Multilinear.Generic.Tensor a)
                                                           @ b
                                                           @ Data.Vector.Vector
                                                           c
                                                           n
                                                           (Data.Vector.Fusion.Bundle.Monadic.zipWithM
                                                              @ Data.Vector.Fusion.Util.Id
                                                              @ a
                                                              @ (Multilinear.Generic.Tensor a)
                                                              @ (Multilinear.Generic.Tensor a)
                                                              @ Data.Vector.Vector
                                                              Data.Vector.Fusion.Util.$fMonadId
                                                              (\ (a1 :: a)
                                                                 (b1 :: Multilinear.Generic.Tensor
                                                                          a)[OneShot] ->
                                                               Multilinear.Generic.dot_$c*.
                                                                 @ a
                                                                 $dNum
                                                                 a1
                                                                 b1)
                                                                `cast`
                                                              (<a>_R
                                                               ->_R <Multilinear.Generic.Tensor a>_R
                                                               ->_R Sym (Data.Vector.Fusion.Util.N:Id[0]
                                                                             <Multilinear.Generic.Tensor
                                                                                a>_R))
                                                              (Data.Vector.Generic.stream
                                                                 @ Data.Vector.Vector
                                                                 @ a
                                                                 (Data.Vector.$fVectorVectora @ a)
                                                                 ts1')
                                                              (Data.Vector.Fusion.Bundle.Monadic.unsafeFromList
                                                                 @ Data.Vector.Fusion.Util.Id
                                                                 @ (Multilinear.Generic.Tensor a)
                                                                 @ Data.Vector.Vector
                                                                 Data.Vector.Fusion.Util.$fMonadId
                                                                 Data.Vector.Fusion.Bundle.Size.Unknown
                                                                 (GHC.Base.build
                                                                    @ (Multilinear.Generic.Tensor a)
                                                                    (\ @ b1
                                                                       (c1 :: Multilinear.Generic.Tensor
                                                                                a
                                                                              -> b1 -> b1)[OneShot]
                                                                       (nil :: b1)[OneShot] ->
                                                                     case GHC.Classes.ltInt
                                                                            (GHC.Types.I# 0#)
                                                                            count1 of wild4 {
                                                                       GHC.Types.False -> nil
                                                                       GHC.Types.True
                                                                       -> GHC.Base.foldr
                                                                            @ (Multilinear.Generic.Tensor
                                                                                 a)
                                                                            @ (GHC.Types.Int -> b1)
                                                                            (GHC.List.takeFB
                                                                               @ (Multilinear.Generic.Tensor
                                                                                    a)
                                                                               @ b1
                                                                               c1
                                                                               nil)
                                                                            (GHC.List.flipSeqTake
                                                                               @ b1
                                                                               nil)
                                                                            ts2'
                                                                            count1 })))))) } }
                                      Multilinear.Index.Finite.Indifferent ipv ipv1
                                      -> fail GHC.Prim.void# }
                                 Multilinear.Generic.FiniteTensor i1 ts1'
                                 -> case i1 of wild1 {
                                      Multilinear.Index.Finite.Covariant count1 ds2
                                      -> case ds1 of wild2 {
                                           DEFAULT -> fail GHC.Prim.void#
                                           Multilinear.Generic.SimpleFinite i2 ts2'
                                           -> case i2 of wild3 {
                                                Multilinear.Index.Finite.Covariant count2 ds3
                                                -> case GHC.Classes.eqInt count1 count2 of wild4 {
                                                     GHC.Types.False
                                                     -> Multilinear.Generic.Err
                                                          @ a
                                                          (GHC.Base.augment
                                                             @ GHC.Types.Char
                                                             (\ @ b
                                                                (c :: GHC.Types.Char
                                                                      -> b -> b)[OneShot]
                                                                (n :: b)[OneShot] ->
                                                              GHC.CString.unpackFoldrCString#
                                                                @ b
                                                                "Tensor product: "#
                                                                c
                                                                n)
                                                             (GHC.Base.augment
                                                                @ GHC.Types.Char
                                                                (\ @ b
                                                                   (c :: GHC.Types.Char
                                                                         -> b -> b)[OneShot]
                                                                   (n :: b)[OneShot] ->
                                                                 GHC.Base.foldr
                                                                   @ GHC.Types.Char
                                                                   @ b
                                                                   c
                                                                   n
                                                                   Multilinear.Generic.incompatibleTypes)
                                                                (GHC.Base.augment
                                                                   @ GHC.Types.Char
                                                                   (\ @ b
                                                                      (c :: GHC.Types.Char
                                                                            -> b -> b)[OneShot]
                                                                      (n :: b)[OneShot] ->
                                                                    GHC.CString.unpackFoldrCString#
                                                                      @ b
                                                                      " - index1 is "#
                                                                      c
                                                                      n)
                                                                   (GHC.Base.augment
                                                                      @ GHC.Types.Char
                                                                      (\ @ b
                                                                         (c :: GHC.Types.Char
                                                                               -> b -> b)[OneShot]
                                                                         (n :: b)[OneShot] ->
                                                                       GHC.Base.foldr
                                                                         @ GHC.Types.Char
                                                                         @ b
                                                                         c
                                                                         n
                                                                         (GHC.CString.unpackAppendCString#
                                                                            Multilinear.Index.$fShowTIndex14
                                                                            (GHC.Base.augment
                                                                               @ GHC.Types.Char
                                                                               (\ @ b1
                                                                                  (c1 :: GHC.Types.Char
                                                                                         -> b1
                                                                                         -> b1)[OneShot]
                                                                                  (n1 :: b1)[OneShot] ->
                                                                                GHC.Base.foldr
                                                                                  @ GHC.Types.Char
                                                                                  @ b1
                                                                                  c1
                                                                                  n1
                                                                                  ds2)
                                                                               (GHC.CString.unpackAppendCString#
                                                                                  Multilinear.Index.$fShowTIndex13
                                                                                  (GHC.Base.augment
                                                                                     @ GHC.Types.Char
                                                                                     (\ @ b1
                                                                                        (c1 :: GHC.Types.Char
                                                                                               -> b1
                                                                                               -> b1)[OneShot]
                                                                                        (n1 :: b1)[OneShot] ->
                                                                                      GHC.Base.foldr
                                                                                        @ GHC.Types.Char
                                                                                        @ b1
                                                                                        c1
                                                                                        n1
                                                                                        GHC.Show.$fShowMaybe1)
                                                                                     (case count1 of ww2 { GHC.Types.I# ww3 ->
                                                                                      case GHC.Show.$wshowSignedInt
                                                                                             11#
                                                                                             ww3
                                                                                             (GHC.Types.[]
                                                                                                @ GHC.Types.Char) of ww4 { (#,#) ww5 ww6 ->
                                                                                      GHC.Base.augment
                                                                                        @ GHC.Types.Char
                                                                                        (\ @ b1
                                                                                           (c1 :: GHC.Types.Char
                                                                                                  -> b1
                                                                                                  -> b1)[OneShot]
                                                                                           (n1 :: b1)[OneShot] ->
                                                                                         GHC.Base.foldr
                                                                                           @ GHC.Types.Char
                                                                                           @ b1
                                                                                           c1
                                                                                           n1
                                                                                           (GHC.Types.:
                                                                                              @ GHC.Types.Char
                                                                                              ww5
                                                                                              ww6))
                                                                                        Multilinear.Index.$fShowTIndex10 } }))))))
                                                                      (GHC.Base.augment
                                                                         @ GHC.Types.Char
                                                                         (\ @ b
                                                                            (c :: GHC.Types.Char
                                                                                  -> b
                                                                                  -> b)[OneShot]
                                                                            (n :: b)[OneShot] ->
                                                                          GHC.CString.unpackFoldrCString#
                                                                            @ b
                                                                            " and index2 is "#
                                                                            c
                                                                            n)
                                                                         (GHC.CString.unpackAppendCString#
                                                                            Multilinear.Index.$fShowTIndex14
                                                                            (GHC.Base.augment
                                                                               @ GHC.Types.Char
                                                                               (\ @ b
                                                                                  (c :: GHC.Types.Char
                                                                                        -> b
                                                                                        -> b)[OneShot]
                                                                                  (n :: b)[OneShot] ->
                                                                                GHC.Base.foldr
                                                                                  @ GHC.Types.Char
                                                                                  @ b
                                                                                  c
                                                                                  n
                                                                                  ds3)
                                                                               (GHC.CString.unpackAppendCString#
                                                                                  Multilinear.Index.$fShowTIndex13
                                                                                  (GHC.Base.augment
                                                                                     @ GHC.Types.Char
                                                                                     (\ @ b
                                                                                        (c :: GHC.Types.Char
                                                                                              -> b
                                                                                              -> b)[OneShot]
                                                                                        (n :: b)[OneShot] ->
                                                                                      GHC.Base.foldr
                                                                                        @ GHC.Types.Char
                                                                                        @ b
                                                                                        c
                                                                                        n
                                                                                        GHC.Show.$fShowMaybe1)
                                                                                     (case count2 of ww2 { GHC.Types.I# ww3 ->
                                                                                      case GHC.Show.$wshowSignedInt
                                                                                             11#
                                                                                             ww3
                                                                                             (GHC.Types.[]
                                                                                                @ GHC.Types.Char) of ww4 { (#,#) ww5 ww6 ->
                                                                                      GHC.Base.augment
                                                                                        @ GHC.Types.Char
                                                                                        (\ @ b
                                                                                           (c :: GHC.Types.Char
                                                                                                 -> b
                                                                                                 -> b)[OneShot]
                                                                                           (n :: b)[OneShot] ->
                                                                                         GHC.Base.foldr
                                                                                           @ GHC.Types.Char
                                                                                           @ b
                                                                                           c
                                                                                           n
                                                                                           (GHC.Types.:
                                                                                              @ GHC.Types.Char
                                                                                              ww5
                                                                                              ww6))
                                                                                        Multilinear.Index.$fShowTIndex10 } }))))))))))
                                                     GHC.Types.True
                                                     -> Multilinear.Generic.FiniteTensor
                                                          @ a
                                                          wild1
                                                          (Data.Vector.Generic.new
                                                             @ Data.Vector.Vector
                                                             @ (Multilinear.Generic.Tensor a)
                                                             (Data.Vector.$fVectorVectora
                                                                @ (Multilinear.Generic.Tensor a))
                                                             (Data.Vector.Generic.New.unstream
                                                                @ Data.Vector.Vector
                                                                @ (Multilinear.Generic.Tensor a)
                                                                (Data.Vector.$fVectorVectora
                                                                   @ (Multilinear.Generic.Tensor a))
                                                                (Data.Vector.Fusion.Bundle.Monadic.zipWithM
                                                                   @ Data.Vector.Fusion.Util.Id
                                                                   @ (Multilinear.Generic.Tensor a)
                                                                   @ a
                                                                   @ (Multilinear.Generic.Tensor a)
                                                                   @ Data.Vector.Vector
                                                                   Data.Vector.Fusion.Util.$fMonadId
                                                                   (\ (a1 :: Multilinear.Generic.Tensor
                                                                               a)
                                                                      (b1 :: a)[OneShot] ->
                                                                    Multilinear.Generic.dot_$c.*
                                                                      @ a
                                                                      $dNum
                                                                      a1
                                                                      b1)
                                                                     `cast`
                                                                   (<Multilinear.Generic.Tensor a>_R
                                                                    ->_R <a>_R
                                                                    ->_R Sym (Data.Vector.Fusion.Util.N:Id[0]
                                                                                  <Multilinear.Generic.Tensor
                                                                                     a>_R))
                                                                   (Data.Vector.Generic.stream
                                                                      @ Data.Vector.Vector
                                                                      @ (Multilinear.Generic.Tensor
                                                                           a)
                                                                      (Data.Vector.$fVectorVectora
                                                                         @ (Multilinear.Generic.Tensor
                                                                              a))
                                                                      ts1')
                                                                   (Data.Vector.Generic.stream
                                                                      @ Data.Vector.Vector
                                                                      @ a
                                                                      (Data.Vector.$fVectorVectora
                                                                         @ a)
                                                                      ts2')))) }
                                                Multilinear.Index.Finite.Contravariant count2 ds3
                                                -> case GHC.Classes.eqInt count1 count2 of wild4 {
                                                     GHC.Types.False
                                                     -> Multilinear.Generic.Err
                                                          @ a
                                                          (GHC.Base.augment
                                                             @ GHC.Types.Char
                                                             (\ @ b
                                                                (c :: GHC.Types.Char
                                                                      -> b -> b)[OneShot]
                                                                (n :: b)[OneShot] ->
                                                              GHC.CString.unpackFoldrCString#
                                                                @ b
                                                                "Tensor product: "#
                                                                c
                                                                n)
                                                             (GHC.Base.augment
                                                                @ GHC.Types.Char
                                                                (\ @ b
                                                                   (c :: GHC.Types.Char
                                                                         -> b -> b)[OneShot]
                                                                   (n :: b)[OneShot] ->
                                                                 GHC.Base.foldr
                                                                   @ GHC.Types.Char
                                                                   @ b
                                                                   c
                                                                   n
                                                                   Multilinear.Generic.incompatibleTypes)
                                                                (GHC.Base.augment
                                                                   @ GHC.Types.Char
                                                                   (\ @ b
                                                                      (c :: GHC.Types.Char
                                                                            -> b -> b)[OneShot]
                                                                      (n :: b)[OneShot] ->
                                                                    GHC.CString.unpackFoldrCString#
                                                                      @ b
                                                                      " - index1 is "#
                                                                      c
                                                                      n)
                                                                   (GHC.Base.augment
                                                                      @ GHC.Types.Char
                                                                      (\ @ b
                                                                         (c :: GHC.Types.Char
                                                                               -> b -> b)[OneShot]
                                                                         (n :: b)[OneShot] ->
                                                                       GHC.Base.foldr
                                                                         @ GHC.Types.Char
                                                                         @ b
                                                                         c
                                                                         n
                                                                         (GHC.CString.unpackAppendCString#
                                                                            Multilinear.Index.$fShowTIndex14
                                                                            (GHC.Base.augment
                                                                               @ GHC.Types.Char
                                                                               (\ @ b1
                                                                                  (c1 :: GHC.Types.Char
                                                                                         -> b1
                                                                                         -> b1)[OneShot]
                                                                                  (n1 :: b1)[OneShot] ->
                                                                                GHC.Base.foldr
                                                                                  @ GHC.Types.Char
                                                                                  @ b1
                                                                                  c1
                                                                                  n1
                                                                                  ds2)
                                                                               (GHC.CString.unpackAppendCString#
                                                                                  Multilinear.Index.$fShowTIndex13
                                                                                  (GHC.Base.augment
                                                                                     @ GHC.Types.Char
                                                                                     (\ @ b1
                                                                                        (c1 :: GHC.Types.Char
                                                                                               -> b1
                                                                                               -> b1)[OneShot]
                                                                                        (n1 :: b1)[OneShot] ->
                                                                                      GHC.Base.foldr
                                                                                        @ GHC.Types.Char
                                                                                        @ b1
                                                                                        c1
                                                                                        n1
                                                                                        GHC.Show.$fShowMaybe1)
                                                                                     (case count1 of ww2 { GHC.Types.I# ww3 ->
                                                                                      case GHC.Show.$wshowSignedInt
                                                                                             11#
                                                                                             ww3
                                                                                             (GHC.Types.[]
                                                                                                @ GHC.Types.Char) of ww4 { (#,#) ww5 ww6 ->
                                                                                      GHC.Base.augment
                                                                                        @ GHC.Types.Char
                                                                                        (\ @ b1
                                                                                           (c1 :: GHC.Types.Char
                                                                                                  -> b1
                                                                                                  -> b1)[OneShot]
                                                                                           (n1 :: b1)[OneShot] ->
                                                                                         GHC.Base.foldr
                                                                                           @ GHC.Types.Char
                                                                                           @ b1
                                                                                           c1
                                                                                           n1
                                                                                           (GHC.Types.:
                                                                                              @ GHC.Types.Char
                                                                                              ww5
                                                                                              ww6))
                                                                                        Multilinear.Index.$fShowTIndex10 } }))))))
                                                                      (GHC.Base.augment
                                                                         @ GHC.Types.Char
                                                                         (\ @ b
                                                                            (c :: GHC.Types.Char
                                                                                  -> b
                                                                                  -> b)[OneShot]
                                                                            (n :: b)[OneShot] ->
                                                                          GHC.CString.unpackFoldrCString#
                                                                            @ b
                                                                            " and index2 is "#
                                                                            c
                                                                            n)
                                                                         (GHC.CString.unpackAppendCString#
                                                                            Multilinear.Index.$fShowTIndex9
                                                                            (GHC.Base.augment
                                                                               @ GHC.Types.Char
                                                                               (\ @ b
                                                                                  (c :: GHC.Types.Char
                                                                                        -> b
                                                                                        -> b)[OneShot]
                                                                                  (n :: b)[OneShot] ->
                                                                                GHC.Base.foldr
                                                                                  @ GHC.Types.Char
                                                                                  @ b
                                                                                  c
                                                                                  n
                                                                                  ds3)
                                                                               (GHC.CString.unpackAppendCString#
                                                                                  Multilinear.Index.$fShowTIndex13
                                                                                  (GHC.Base.augment
                                                                                     @ GHC.Types.Char
                                                                                     (\ @ b
                                                                                        (c :: GHC.Types.Char
                                                                                              -> b
                                                                                              -> b)[OneShot]
                                                                                        (n :: b)[OneShot] ->
                                                                                      GHC.Base.foldr
                                                                                        @ GHC.Types.Char
                                                                                        @ b
                                                                                        c
                                                                                        n
                                                                                        GHC.Show.$fShowMaybe1)
                                                                                     (case count2 of ww2 { GHC.Types.I# ww3 ->
                                                                                      case GHC.Show.$wshowSignedInt
                                                                                             11#
                                                                                             ww3
                                                                                             (GHC.Types.[]
                                                                                                @ GHC.Types.Char) of ww4 { (#,#) ww5 ww6 ->
                                                                                      GHC.Base.augment
                                                                                        @ GHC.Types.Char
                                                                                        (\ @ b
                                                                                           (c :: GHC.Types.Char
                                                                                                 -> b
                                                                                                 -> b)[OneShot]
                                                                                           (n :: b)[OneShot] ->
                                                                                         GHC.Base.foldr
                                                                                           @ GHC.Types.Char
                                                                                           @ b
                                                                                           c
                                                                                           n
                                                                                           (GHC.Types.:
                                                                                              @ GHC.Types.Char
                                                                                              ww5
                                                                                              ww6))
                                                                                        Multilinear.Index.$fShowTIndex6 } }))))))))))
                                                     GHC.Types.True
                                                     -> (Data.Vector.Fusion.Bundle.Monadic.foldlM'
                                                           @ Data.Vector.Fusion.Util.Id
                                                           @ (Multilinear.Generic.Tensor a)
                                                           @ (Multilinear.Generic.Tensor a)
                                                           @ Data.Vector.Vector
                                                           Data.Vector.Fusion.Util.$fMonadId
                                                           (\ (a1 :: Multilinear.Generic.Tensor a)
                                                              (b1 :: Multilinear.Generic.Tensor
                                                                       a)[OneShot] ->
                                                            Multilinear.Generic.dot_$c+
                                                              @ a
                                                              $dNum
                                                              a1
                                                              b1)
                                                             `cast`
                                                           (<Multilinear.Generic.Tensor a>_R
                                                            ->_R <Multilinear.Generic.Tensor a>_R
                                                            ->_R Sym (Data.Vector.Fusion.Util.N:Id[0]
                                                                          <Multilinear.Generic.Tensor
                                                                             a>_R))
                                                           (Multilinear.Generic.Scalar
                                                              @ a
                                                              (GHC.Num.fromInteger @ a $dNum 0))
                                                           (Data.Vector.Fusion.Bundle.Monadic.zipWithM
                                                              @ Data.Vector.Fusion.Util.Id
                                                              @ (Multilinear.Generic.Tensor a)
                                                              @ a
                                                              @ (Multilinear.Generic.Tensor a)
                                                              @ Data.Vector.Vector
                                                              Data.Vector.Fusion.Util.$fMonadId
                                                              (\ (a1 :: Multilinear.Generic.Tensor
                                                                          a)
                                                                 (b1 :: a)[OneShot] ->
                                                               Multilinear.Generic.dot_$c.*
                                                                 @ a
                                                                 $dNum
                                                                 a1
                                                                 b1)
                                                                `cast`
                                                              (<Multilinear.Generic.Tensor a>_R
                                                               ->_R <a>_R
                                                               ->_R Sym (Data.Vector.Fusion.Util.N:Id[0]
                                                                             <Multilinear.Generic.Tensor
                                                                                a>_R))
                                                              (Data.Vector.Generic.stream
                                                                 @ Data.Vector.Vector
                                                                 @ (Multilinear.Generic.Tensor a)
                                                                 (Data.Vector.$fVectorVectora
                                                                    @ (Multilinear.Generic.Tensor
                                                                         a))
                                                                 ts1')
                                                              (Data.Vector.Generic.stream
                                                                 @ Data.Vector.Vector
                                                                 @ a
                                                                 (Data.Vector.$fVectorVectora @ a)
                                                                 ts2')))
                                                          `cast`
                                                        (Data.Vector.Fusion.Util.N:Id[0]
                                                             <Multilinear.Generic.Tensor a>_R) }
                                                Multilinear.Index.Finite.Indifferent ipv ipv1
                                                -> fail GHC.Prim.void# }
                                           Multilinear.Generic.FiniteTensor i2 ts2'
                                           -> case i2 of wild3 {
                                                Multilinear.Index.Finite.Covariant count2 ds3
                                                -> case GHC.Classes.eqInt count1 count2 of wild4 {
                                                     GHC.Types.False
                                                     -> Multilinear.Generic.Err
                                                          @ a
                                                          (GHC.Base.augment
                                                             @ GHC.Types.Char
                                                             (\ @ b
                                                                (c :: GHC.Types.Char
                                                                      -> b -> b)[OneShot]
                                                                (n :: b)[OneShot] ->
                                                              GHC.CString.unpackFoldrCString#
                                                                @ b
                                                                "Tensor product: "#
                                                                c
                                                                n)
                                                             (GHC.Base.augment
                                                                @ GHC.Types.Char
                                                                (\ @ b
                                                                   (c :: GHC.Types.Char
                                                                         -> b -> b)[OneShot]
                                                                   (n :: b)[OneShot] ->
                                                                 GHC.Base.foldr
                                                                   @ GHC.Types.Char
                                                                   @ b
                                                                   c
                                                                   n
                                                                   Multilinear.Generic.incompatibleTypes)
                                                                (GHC.Base.augment
                                                                   @ GHC.Types.Char
                                                                   (\ @ b
                                                                      (c :: GHC.Types.Char
                                                                            -> b -> b)[OneShot]
                                                                      (n :: b)[OneShot] ->
                                                                    GHC.CString.unpackFoldrCString#
                                                                      @ b
                                                                      " - index1 is "#
                                                                      c
                                                                      n)
                                                                   (GHC.Base.augment
                                                                      @ GHC.Types.Char
                                                                      (\ @ b
                                                                         (c :: GHC.Types.Char
                                                                               -> b -> b)[OneShot]
                                                                         (n :: b)[OneShot] ->
                                                                       GHC.Base.foldr
                                                                         @ GHC.Types.Char
                                                                         @ b
                                                                         c
                                                                         n
                                                                         (GHC.CString.unpackAppendCString#
                                                                            Multilinear.Index.$fShowTIndex14
                                                                            (GHC.Base.augment
                                                                               @ GHC.Types.Char
                                                                               (\ @ b1
                                                                                  (c1 :: GHC.Types.Char
                                                                                         -> b1
                                                                                         -> b1)[OneShot]
                                                                                  (n1 :: b1)[OneShot] ->
                                                                                GHC.Base.foldr
                                                                                  @ GHC.Types.Char
                                                                                  @ b1
                                                                                  c1
                                                                                  n1
                                                                                  ds2)
                                                                               (GHC.CString.unpackAppendCString#
                                                                                  Multilinear.Index.$fShowTIndex13
                                                                                  (GHC.Base.augment
                                                                                     @ GHC.Types.Char
                                                                                     (\ @ b1
                                                                                        (c1 :: GHC.Types.Char
                                                                                               -> b1
                                                                                               -> b1)[OneShot]
                                                                                        (n1 :: b1)[OneShot] ->
                                                                                      GHC.Base.foldr
                                                                                        @ GHC.Types.Char
                                                                                        @ b1
                                                                                        c1
                                                                                        n1
                                                                                        GHC.Show.$fShowMaybe1)
                                                                                     (case count1 of ww2 { GHC.Types.I# ww3 ->
                                                                                      case GHC.Show.$wshowSignedInt
                                                                                             11#
                                                                                             ww3
                                                                                             (GHC.Types.[]
                                                                                                @ GHC.Types.Char) of ww4 { (#,#) ww5 ww6 ->
                                                                                      GHC.Base.augment
                                                                                        @ GHC.Types.Char
                                                                                        (\ @ b1
                                                                                           (c1 :: GHC.Types.Char
                                                                                                  -> b1
                                                                                                  -> b1)[OneShot]
                                                                                           (n1 :: b1)[OneShot] ->
                                                                                         GHC.Base.foldr
                                                                                           @ GHC.Types.Char
                                                                                           @ b1
                                                                                           c1
                                                                                           n1
                                                                                           (GHC.Types.:
                                                                                              @ GHC.Types.Char
                                                                                              ww5
                                                                                              ww6))
                                                                                        Multilinear.Index.$fShowTIndex10 } }))))))
                                                                      (GHC.Base.augment
                                                                         @ GHC.Types.Char
                                                                         (\ @ b
                                                                            (c :: GHC.Types.Char
                                                                                  -> b
                                                                                  -> b)[OneShot]
                                                                            (n :: b)[OneShot] ->
                                                                          GHC.CString.unpackFoldrCString#
                                                                            @ b
                                                                            " and index2 is "#
                                                                            c
                                                                            n)
                                                                         (GHC.CString.unpackAppendCString#
                                                                            Multilinear.Index.$fShowTIndex14
                                                                            (GHC.Base.augment
                                                                               @ GHC.Types.Char
                                                                               (\ @ b
                                                                                  (c :: GHC.Types.Char
                                                                                        -> b
                                                                                        -> b)[OneShot]
                                                                                  (n :: b)[OneShot] ->
                                                                                GHC.Base.foldr
                                                                                  @ GHC.Types.Char
                                                                                  @ b
                                                                                  c
                                                                                  n
                                                                                  ds3)
                                                                               (GHC.CString.unpackAppendCString#
                                                                                  Multilinear.Index.$fShowTIndex13
                                                                                  (GHC.Base.augment
                                                                                     @ GHC.Types.Char
                                                                                     (\ @ b
                                                                                        (c :: GHC.Types.Char
                                                                                              -> b
                                                                                              -> b)[OneShot]
                                                                                        (n :: b)[OneShot] ->
                                                                                      GHC.Base.foldr
                                                                                        @ GHC.Types.Char
                                                                                        @ b
                                                                                        c
                                                                                        n
                                                                                        GHC.Show.$fShowMaybe1)
                                                                                     (case count2 of ww2 { GHC.Types.I# ww3 ->
                                                                                      case GHC.Show.$wshowSignedInt
                                                                                             11#
                                                                                             ww3
                                                                                             (GHC.Types.[]
                                                                                                @ GHC.Types.Char) of ww4 { (#,#) ww5 ww6 ->
                                                                                      GHC.Base.augment
                                                                                        @ GHC.Types.Char
                                                                                        (\ @ b
                                                                                           (c :: GHC.Types.Char
                                                                                                 -> b
                                                                                                 -> b)[OneShot]
                                                                                           (n :: b)[OneShot] ->
                                                                                         GHC.Base.foldr
                                                                                           @ GHC.Types.Char
                                                                                           @ b
                                                                                           c
                                                                                           n
                                                                                           (GHC.Types.:
                                                                                              @ GHC.Types.Char
                                                                                              ww5
                                                                                              ww6))
                                                                                        Multilinear.Index.$fShowTIndex10 } }))))))))))
                                                     GHC.Types.True
                                                     -> Multilinear.Generic.FiniteTensor
                                                          @ a
                                                          wild1
                                                          (Data.Vector.Generic.new
                                                             @ Data.Vector.Vector
                                                             @ (Multilinear.Generic.Tensor a)
                                                             (Data.Vector.$fVectorVectora
                                                                @ (Multilinear.Generic.Tensor a))
                                                             (Data.Vector.Generic.New.unstream
                                                                @ Data.Vector.Vector
                                                                @ (Multilinear.Generic.Tensor a)
                                                                (Data.Vector.$fVectorVectora
                                                                   @ (Multilinear.Generic.Tensor a))
                                                                (Data.Vector.Fusion.Bundle.Monadic.zipWithM
                                                                   @ Data.Vector.Fusion.Util.Id
                                                                   @ (Multilinear.Generic.Tensor a)
                                                                   @ (Multilinear.Generic.Tensor a)
                                                                   @ (Multilinear.Generic.Tensor a)
                                                                   @ Data.Vector.Vector
                                                                   Data.Vector.Fusion.Util.$fMonadId
                                                                   (\ (a1 :: Multilinear.Generic.Tensor
                                                                               a)
                                                                      (b1 :: Multilinear.Generic.Tensor
                                                                               a)[OneShot] ->
                                                                    Multilinear.Generic.dot_$c*
                                                                      @ a
                                                                      $dNum
                                                                      a1
                                                                      b1)
                                                                     `cast`
                                                                   (<Multilinear.Generic.Tensor a>_R
                                                                    ->_R <Multilinear.Generic.Tensor
                                                                            a>_R
                                                                    ->_R Sym (Data.Vector.Fusion.Util.N:Id[0]
                                                                                  <Multilinear.Generic.Tensor
                                                                                     a>_R))
                                                                   (Data.Vector.Generic.stream
                                                                      @ Data.Vector.Vector
                                                                      @ (Multilinear.Generic.Tensor
                                                                           a)
                                                                      (Data.Vector.$fVectorVectora
                                                                         @ (Multilinear.Generic.Tensor
                                                                              a))
                                                                      ts1')
                                                                   (Data.Vector.Generic.stream
                                                                      @ Data.Vector.Vector
                                                                      @ (Multilinear.Generic.Tensor
                                                                           a)
                                                                      (Data.Vector.$fVectorVectora
                                                                         @ (Multilinear.Generic.Tensor
                                                                              a))
                                                                      ts2')))) }
                                                Multilinear.Index.Finite.Contravariant count2 ds3
                                                -> case GHC.Classes.eqInt count1 count2 of wild4 {
                                                     GHC.Types.False
                                                     -> Multilinear.Generic.Err
                                                          @ a
                                                          (GHC.Base.augment
                                                             @ GHC.Types.Char
                                                             (\ @ b
                                                                (c :: GHC.Types.Char
                                                                      -> b -> b)[OneShot]
                                                                (n :: b)[OneShot] ->
                                                              GHC.CString.unpackFoldrCString#
                                                                @ b
                                                                "Tensor product: "#
                                                                c
                                                                n)
                                                             (GHC.Base.augment
                                                                @ GHC.Types.Char
                                                                (\ @ b
                                                                   (c :: GHC.Types.Char
                                                                         -> b -> b)[OneShot]
                                                                   (n :: b)[OneShot] ->
                                                                 GHC.Base.foldr
                                                                   @ GHC.Types.Char
                                                                   @ b
                                                                   c
                                                                   n
                                                                   Multilinear.Generic.incompatibleTypes)
                                                                (GHC.Base.augment
                                                                   @ GHC.Types.Char
                                                                   (\ @ b
                                                                      (c :: GHC.Types.Char
                                                                            -> b -> b)[OneShot]
                                                                      (n :: b)[OneShot] ->
                                                                    GHC.CString.unpackFoldrCString#
                                                                      @ b
                                                                      " - index1 is "#
                                                                      c
                                                                      n)
                                                                   (GHC.Base.augment
                                                                      @ GHC.Types.Char
                                                                      (\ @ b
                                                                         (c :: GHC.Types.Char
                                                                               -> b -> b)[OneShot]
                                                                         (n :: b)[OneShot] ->
                                                                       GHC.Base.foldr
                                                                         @ GHC.Types.Char
                                                                         @ b
                                                                         c
                                                                         n
                                                                         (GHC.CString.unpackAppendCString#
                                                                            Multilinear.Index.$fShowTIndex14
                                                                            (GHC.Base.augment
                                                                               @ GHC.Types.Char
                                                                               (\ @ b1
                                                                                  (c1 :: GHC.Types.Char
                                                                                         -> b1
                                                                                         -> b1)[OneShot]
                                                                                  (n1 :: b1)[OneShot] ->
                                                                                GHC.Base.foldr
                                                                                  @ GHC.Types.Char
                                                                                  @ b1
                                                                                  c1
                                                                                  n1
                                                                                  ds2)
                                                                               (GHC.CString.unpackAppendCString#
                                                                                  Multilinear.Index.$fShowTIndex13
                                                                                  (GHC.Base.augment
                                                                                     @ GHC.Types.Char
                                                                                     (\ @ b1
                                                                                        (c1 :: GHC.Types.Char
                                                                                               -> b1
                                                                                               -> b1)[OneShot]
                                                                                        (n1 :: b1)[OneShot] ->
                                                                                      GHC.Base.foldr
                                                                                        @ GHC.Types.Char
                                                                                        @ b1
                                                                                        c1
                                                                                        n1
                                                                                        GHC.Show.$fShowMaybe1)
                                                                                     (case count1 of ww2 { GHC.Types.I# ww3 ->
                                                                                      case GHC.Show.$wshowSignedInt
                                                                                             11#
                                                                                             ww3
                                                                                             (GHC.Types.[]
                                                                                                @ GHC.Types.Char) of ww4 { (#,#) ww5 ww6 ->
                                                                                      GHC.Base.augment
                                                                                        @ GHC.Types.Char
                                                                                        (\ @ b1
                                                                                           (c1 :: GHC.Types.Char
                                                                                                  -> b1
                                                                                                  -> b1)[OneShot]
                                                                                           (n1 :: b1)[OneShot] ->
                                                                                         GHC.Base.foldr
                                                                                           @ GHC.Types.Char
                                                                                           @ b1
                                                                                           c1
                                                                                           n1
                                                                                           (GHC.Types.:
                                                                                              @ GHC.Types.Char
                                                                                              ww5
                                                                                              ww6))
                                                                                        Multilinear.Index.$fShowTIndex10 } }))))))
                                                                      (GHC.Base.augment
                                                                         @ GHC.Types.Char
                                                                         (\ @ b
                                                                            (c :: GHC.Types.Char
                                                                                  -> b
                                                                                  -> b)[OneShot]
                                                                            (n :: b)[OneShot] ->
                                                                          GHC.CString.unpackFoldrCString#
                                                                            @ b
                                                                            " and index2 is "#
                                                                            c
                                                                            n)
                                                                         (GHC.CString.unpackAppendCString#
                                                                            Multilinear.Index.$fShowTIndex9
                                                                            (GHC.Base.augment
                                                                               @ GHC.Types.Char
                                                                               (\ @ b
                                                                                  (c :: GHC.Types.Char
                                                                                        -> b
                                                                                        -> b)[OneShot]
                                                                                  (n :: b)[OneShot] ->
                                                                                GHC.Base.foldr
                                                                                  @ GHC.Types.Char
                                                                                  @ b
                                                                                  c
                                                                                  n
                                                                                  ds3)
                                                                               (GHC.CString.unpackAppendCString#
                                                                                  Multilinear.Index.$fShowTIndex13
                                                                                  (GHC.Base.augment
                                                                                     @ GHC.Types.Char
                                                                                     (\ @ b
                                                                                        (c :: GHC.Types.Char
                                                                                              -> b
                                                                                              -> b)[OneShot]
                                                                                        (n :: b)[OneShot] ->
                                                                                      GHC.Base.foldr
                                                                                        @ GHC.Types.Char
                                                                                        @ b
                                                                                        c
                                                                                        n
                                                                                        GHC.Show.$fShowMaybe1)
                                                                                     (case count2 of ww2 { GHC.Types.I# ww3 ->
                                                                                      case GHC.Show.$wshowSignedInt
                                                                                             11#
                                                                                             ww3
                                                                                             (GHC.Types.[]
                                                                                                @ GHC.Types.Char) of ww4 { (#,#) ww5 ww6 ->
                                                                                      GHC.Base.augment
                                                                                        @ GHC.Types.Char
                                                                                        (\ @ b
                                                                                           (c :: GHC.Types.Char
                                                                                                 -> b
                                                                                                 -> b)[OneShot]
                                                                                           (n :: b)[OneShot] ->
                                                                                         GHC.Base.foldr
                                                                                           @ GHC.Types.Char
                                                                                           @ b
                                                                                           c
                                                                                           n
                                                                                           (GHC.Types.:
                                                                                              @ GHC.Types.Char
                                                                                              ww5
                                                                                              ww6))
                                                                                        Multilinear.Index.$fShowTIndex6 } }))))))))))
                                                     GHC.Types.True
                                                     -> (Data.Vector.Fusion.Bundle.Monadic.foldlM'
                                                           @ Data.Vector.Fusion.Util.Id
                                                           @ (Multilinear.Generic.Tensor a)
                                                           @ (Multilinear.Generic.Tensor a)
                                                           @ Data.Vector.Vector
                                                           Data.Vector.Fusion.Util.$fMonadId
                                                           (\ (a1 :: Multilinear.Generic.Tensor a)
                                                              (b1 :: Multilinear.Generic.Tensor
                                                                       a)[OneShot] ->
                                                            Multilinear.Generic.dot_$c+
                                                              @ a
                                                              $dNum
                                                              a1
                                                              b1)
                                                             `cast`
                                                           (<Multilinear.Generic.Tensor a>_R
                                                            ->_R <Multilinear.Generic.Tensor a>_R
                                                            ->_R Sym (Data.Vector.Fusion.Util.N:Id[0]
                                                                          <Multilinear.Generic.Tensor
                                                                             a>_R))
                                                           (Multilinear.Generic.Scalar
                                                              @ a
                                                              (GHC.Num.fromInteger @ a $dNum 0))
                                                           (Data.Vector.Fusion.Bundle.Monadic.zipWithM
                                                              @ Data.Vector.Fusion.Util.Id
                                                              @ (Multilinear.Generic.Tensor a)
                                                              @ (Multilinear.Generic.Tensor a)
                                                              @ (Multilinear.Generic.Tensor a)
                                                              @ Data.Vector.Vector
                                                              Data.Vector.Fusion.Util.$fMonadId
                                                              (\ (a1 :: Multilinear.Generic.Tensor
                                                                          a)
                                                                 (b1 :: Multilinear.Generic.Tensor
                                                                          a)[OneShot] ->
                                                               Multilinear.Generic.dot_$c*
                                                                 @ a
                                                                 $dNum
                                                                 a1
                                                                 b1)
                                                                `cast`
                                                              (<Multilinear.Generic.Tensor a>_R
                                                               ->_R <Multilinear.Generic.Tensor a>_R
                                                               ->_R Sym (Data.Vector.Fusion.Util.N:Id[0]
                                                                             <Multilinear.Generic.Tensor
                                                                                a>_R))
                                                              (Data.Vector.Generic.stream
                                                                 @ Data.Vector.Vector
                                                                 @ (Multilinear.Generic.Tensor a)
                                                                 (Data.Vector.$fVectorVectora
                                                                    @ (Multilinear.Generic.Tensor
                                                                         a))
                                                                 ts1')
                                                              (Data.Vector.Generic.stream
                                                                 @ Data.Vector.Vector
                                                                 @ (Multilinear.Generic.Tensor a)
                                                                 (Data.Vector.$fVectorVectora
                                                                    @ (Multilinear.Generic.Tensor
                                                                         a))
                                                                 ts2')))
                                                          `cast`
                                                        (Data.Vector.Fusion.Util.N:Id[0]
                                                             <Multilinear.Generic.Tensor a>_R) }
                                                Multilinear.Index.Finite.Indifferent ipv ipv1
                                                -> fail GHC.Prim.void# }
                                           Multilinear.Generic.InfiniteTensor ds3 ts2'
                                           -> case ds3 of wild3 {
                                                Multilinear.Index.Infinite.Covariant ds4
                                                -> Multilinear.Generic.InfiniteTensor
                                                     @ a
                                                     wild3
                                                     (GHC.Base.build
                                                        @ (Multilinear.Generic.Tensor a)
                                                        (\ @ b
                                                           (c :: Multilinear.Generic.Tensor a
                                                                 -> b -> b)[OneShot]
                                                           (n :: b)[OneShot] ->
                                                         Data.Vector.Fusion.Bundle.toListFB
                                                           @ (Multilinear.Generic.Tensor a)
                                                           @ b
                                                           @ Data.Vector.Vector
                                                           c
                                                           n
                                                           (Data.Vector.Fusion.Bundle.Monadic.zipWithM
                                                              @ Data.Vector.Fusion.Util.Id
                                                              @ (Multilinear.Generic.Tensor a)
                                                              @ (Multilinear.Generic.Tensor a)
                                                              @ (Multilinear.Generic.Tensor a)
                                                              @ Data.Vector.Vector
                                                              Data.Vector.Fusion.Util.$fMonadId
                                                              (\ (a1 :: Multilinear.Generic.Tensor
                                                                          a)
                                                                 (b1 :: Multilinear.Generic.Tensor
                                                                          a)[OneShot] ->
                                                               Multilinear.Generic.dot_$c*
                                                                 @ a
                                                                 $dNum
                                                                 a1
                                                                 b1)
                                                                `cast`
                                                              (<Multilinear.Generic.Tensor a>_R
                                                               ->_R <Multilinear.Generic.Tensor a>_R
                                                               ->_R Sym (Data.Vector.Fusion.Util.N:Id[0]
                                                                             <Multilinear.Generic.Tensor
                                                                                a>_R))
                                                              (Data.Vector.Generic.stream
                                                                 @ Data.Vector.Vector
                                                                 @ (Multilinear.Generic.Tensor a)
                                                                 (Data.Vector.$fVectorVectora
                                                                    @ (Multilinear.Generic.Tensor
                                                                         a))
                                                                 ts1')
                                                              (Data.Vector.Fusion.Bundle.Monadic.unsafeFromList
                                                                 @ Data.Vector.Fusion.Util.Id
                                                                 @ (Multilinear.Generic.Tensor a)
                                                                 @ Data.Vector.Vector
                                                                 Data.Vector.Fusion.Util.$fMonadId
                                                                 Data.Vector.Fusion.Bundle.Size.Unknown
                                                                 (GHC.Base.build
                                                                    @ (Multilinear.Generic.Tensor a)
                                                                    (\ @ b1
                                                                       (c1 :: Multilinear.Generic.Tensor
                                                                                a
                                                                              -> b1 -> b1)[OneShot]
                                                                       (nil :: b1)[OneShot] ->
                                                                     case GHC.Classes.ltInt
                                                                            (GHC.Types.I# 0#)
                                                                            count1 of wild4 {
                                                                       GHC.Types.False -> nil
                                                                       GHC.Types.True
                                                                       -> GHC.Base.foldr
                                                                            @ (Multilinear.Generic.Tensor
                                                                                 a)
                                                                            @ (GHC.Types.Int -> b1)
                                                                            (GHC.List.takeFB
                                                                               @ (Multilinear.Generic.Tensor
                                                                                    a)
                                                                               @ b1
                                                                               c1
                                                                               nil)
                                                                            (GHC.List.flipSeqTake
                                                                               @ b1
                                                                               nil)
                                                                            ts2'
                                                                            count1 }))))))
                                                Multilinear.Index.Infinite.Contravariant ds4
                                                -> (Data.Vector.Fusion.Bundle.Monadic.foldlM'
                                                      @ Data.Vector.Fusion.Util.Id
                                                      @ (Multilinear.Generic.Tensor a)
                                                      @ (Multilinear.Generic.Tensor a)
                                                      @ Data.Vector.Vector
                                                      Data.Vector.Fusion.Util.$fMonadId
                                                      (\ (a1 :: Multilinear.Generic.Tensor a)
                                                         (b1 :: Multilinear.Generic.Tensor
                                                                  a)[OneShot] ->
                                                       Multilinear.Generic.dot_$c+ @ a $dNum a1 b1)
                                                        `cast`
                                                      (<Multilinear.Generic.Tensor a>_R
                                                       ->_R <Multilinear.Generic.Tensor a>_R
                                                       ->_R Sym (Data.Vector.Fusion.Util.N:Id[0]
                                                                     <Multilinear.Generic.Tensor
                                                                        a>_R))
                                                      (Multilinear.Generic.Scalar
                                                         @ a
                                                         (GHC.Num.fromInteger @ a $dNum 0))
                                                      (Data.Vector.Fusion.Bundle.Monadic.zipWithM
                                                         @ Data.Vector.Fusion.Util.Id
                                                         @ (Multilinear.Generic.Tensor a)
                                                         @ (Multilinear.Generic.Tensor a)
                                                         @ (Multilinear.Generic.Tensor a)
                                                         @ Data.Vector.Vector
                                                         Data.Vector.Fusion.Util.$fMonadId
                                                         (\ (a1 :: Multilinear.Generic.Tensor a)
                                                            (b1 :: Multilinear.Generic.Tensor
                                                                     a)[OneShot] ->
                                                          Multilinear.Generic.dot_$c*
                                                            @ a
                                                            $dNum
                                                            a1
                                                            b1)
                                                           `cast`
                                                         (<Multilinear.Generic.Tensor a>_R
                                                          ->_R <Multilinear.Generic.Tensor a>_R
                                                          ->_R Sym (Data.Vector.Fusion.Util.N:Id[0]
                                                                        <Multilinear.Generic.Tensor
                                                                           a>_R))
                                                         (Data.Vector.Generic.stream
                                                            @ Data.Vector.Vector
                                                            @ (Multilinear.Generic.Tensor a)
                                                            (Data.Vector.$fVectorVectora
                                                               @ (Multilinear.Generic.Tensor a))
                                                            ts1')
                                                         (Data.Vector.Fusion.Bundle.Monadic.unsafeFromList
                                                            @ Data.Vector.Fusion.Util.Id
                                                            @ (Multilinear.Generic.Tensor a)
                                                            @ Data.Vector.Vector
                                                            Data.Vector.Fusion.Util.$fMonadId
                                                            Data.Vector.Fusion.Bundle.Size.Unknown
                                                            (GHC.Base.build
                                                               @ (Multilinear.Generic.Tensor a)
                                                               (\ @ b
                                                                  (c :: Multilinear.Generic.Tensor a
                                                                        -> b -> b)[OneShot]
                                                                  (nil :: b)[OneShot] ->
                                                                case GHC.Classes.ltInt
                                                                       (GHC.Types.I# 0#)
                                                                       count1 of wild4 {
                                                                  GHC.Types.False -> nil
                                                                  GHC.Types.True
                                                                  -> GHC.Base.foldr
                                                                       @ (Multilinear.Generic.Tensor
                                                                            a)
                                                                       @ (GHC.Types.Int -> b)
                                                                       (GHC.List.takeFB
                                                                          @ (Multilinear.Generic.Tensor
                                                                               a)
                                                                          @ b
                                                                          c
                                                                          nil)
                                                                       (GHC.List.flipSeqTake
                                                                          @ b
                                                                          nil)
                                                                       ts2'
                                                                       count1 })))))
                                                     `cast`
                                                   (Data.Vector.Fusion.Util.N:Id[0]
                                                        <Multilinear.Generic.Tensor a>_R)
                                                Multilinear.Index.Infinite.Indifferent ipv
                                                -> fail GHC.Prim.void# } }
                                      Multilinear.Index.Finite.Contravariant count1 ds2
                                      -> case ds1 of wild2 {
                                           DEFAULT -> fail GHC.Prim.void#
                                           Multilinear.Generic.SimpleFinite i2 ts2'
                                           -> case i2 of wild3 {
                                                DEFAULT -> fail GHC.Prim.void#
                                                Multilinear.Index.Finite.Contravariant count2 ds3
                                                -> case GHC.Classes.eqInt count1 count2 of wild4 {
                                                     GHC.Types.False
                                                     -> Multilinear.Generic.Err
                                                          @ a
                                                          (GHC.Base.augment
                                                             @ GHC.Types.Char
                                                             (\ @ b
                                                                (c :: GHC.Types.Char
                                                                      -> b -> b)[OneShot]
                                                                (n :: b)[OneShot] ->
                                                              GHC.CString.unpackFoldrCString#
                                                                @ b
                                                                "Tensor product: "#
                                                                c
                                                                n)
                                                             (GHC.Base.augment
                                                                @ GHC.Types.Char
                                                                (\ @ b
                                                                   (c :: GHC.Types.Char
                                                                         -> b -> b)[OneShot]
                                                                   (n :: b)[OneShot] ->
                                                                 GHC.Base.foldr
                                                                   @ GHC.Types.Char
                                                                   @ b
                                                                   c
                                                                   n
                                                                   Multilinear.Generic.incompatibleTypes)
                                                                (GHC.Base.augment
                                                                   @ GHC.Types.Char
                                                                   (\ @ b
                                                                      (c :: GHC.Types.Char
                                                                            -> b -> b)[OneShot]
                                                                      (n :: b)[OneShot] ->
                                                                    GHC.CString.unpackFoldrCString#
                                                                      @ b
                                                                      " - index1 is "#
                                                                      c
                                                                      n)
                                                                   (GHC.Base.augment
                                                                      @ GHC.Types.Char
                                                                      (\ @ b
                                                                         (c :: GHC.Types.Char
                                                                               -> b -> b)[OneShot]
                                                                         (n :: b)[OneShot] ->
                                                                       GHC.Base.foldr
                                                                         @ GHC.Types.Char
                                                                         @ b
                                                                         c
                                                                         n
                                                                         (GHC.CString.unpackAppendCString#
                                                                            Multilinear.Index.$fShowTIndex9
                                                                            (GHC.Base.augment
                                                                               @ GHC.Types.Char
                                                                               (\ @ b1
                                                                                  (c1 :: GHC.Types.Char
                                                                                         -> b1
                                                                                         -> b1)[OneShot]
                                                                                  (n1 :: b1)[OneShot] ->
                                                                                GHC.Base.foldr
                                                                                  @ GHC.Types.Char
                                                                                  @ b1
                                                                                  c1
                                                                                  n1
                                                                                  ds2)
                                                                               (GHC.CString.unpackAppendCString#
                                                                                  Multilinear.Index.$fShowTIndex13
                                                                                  (GHC.Base.augment
                                                                                     @ GHC.Types.Char
                                                                                     (\ @ b1
                                                                                        (c1 :: GHC.Types.Char
                                                                                               -> b1
                                                                                               -> b1)[OneShot]
                                                                                        (n1 :: b1)[OneShot] ->
                                                                                      GHC.Base.foldr
                                                                                        @ GHC.Types.Char
                                                                                        @ b1
                                                                                        c1
                                                                                        n1
                                                                                        GHC.Show.$fShowMaybe1)
                                                                                     (case count1 of ww2 { GHC.Types.I# ww3 ->
                                                                                      case GHC.Show.$wshowSignedInt
                                                                                             11#
                                                                                             ww3
                                                                                             (GHC.Types.[]
                                                                                                @ GHC.Types.Char) of ww4 { (#,#) ww5 ww6 ->
                                                                                      GHC.Base.augment
                                                                                        @ GHC.Types.Char
                                                                                        (\ @ b1
                                                                                           (c1 :: GHC.Types.Char
                                                                                                  -> b1
                                                                                                  -> b1)[OneShot]
                                                                                           (n1 :: b1)[OneShot] ->
                                                                                         GHC.Base.foldr
                                                                                           @ GHC.Types.Char
                                                                                           @ b1
                                                                                           c1
                                                                                           n1
                                                                                           (GHC.Types.:
                                                                                              @ GHC.Types.Char
                                                                                              ww5
                                                                                              ww6))
                                                                                        Multilinear.Index.$fShowTIndex6 } }))))))
                                                                      (GHC.Base.augment
                                                                         @ GHC.Types.Char
                                                                         (\ @ b
                                                                            (c :: GHC.Types.Char
                                                                                  -> b
                                                                                  -> b)[OneShot]
                                                                            (n :: b)[OneShot] ->
                                                                          GHC.CString.unpackFoldrCString#
                                                                            @ b
                                                                            " and index2 is "#
                                                                            c
                                                                            n)
                                                                         (GHC.CString.unpackAppendCString#
                                                                            Multilinear.Index.$fShowTIndex9
                                                                            (GHC.Base.augment
                                                                               @ GHC.Types.Char
                                                                               (\ @ b
                                                                                  (c :: GHC.Types.Char
                                                                                        -> b
                                                                                        -> b)[OneShot]
                                                                                  (n :: b)[OneShot] ->
                                                                                GHC.Base.foldr
                                                                                  @ GHC.Types.Char
                                                                                  @ b
                                                                                  c
                                                                                  n
                                                                                  ds3)
                                                                               (GHC.CString.unpackAppendCString#
                                                                                  Multilinear.Index.$fShowTIndex13
                                                                                  (GHC.Base.augment
                                                                                     @ GHC.Types.Char
                                                                                     (\ @ b
                                                                                        (c :: GHC.Types.Char
                                                                                              -> b
                                                                                              -> b)[OneShot]
                                                                                        (n :: b)[OneShot] ->
                                                                                      GHC.Base.foldr
                                                                                        @ GHC.Types.Char
                                                                                        @ b
                                                                                        c
                                                                                        n
                                                                                        GHC.Show.$fShowMaybe1)
                                                                                     (case count2 of ww2 { GHC.Types.I# ww3 ->
                                                                                      case GHC.Show.$wshowSignedInt
                                                                                             11#
                                                                                             ww3
                                                                                             (GHC.Types.[]
                                                                                                @ GHC.Types.Char) of ww4 { (#,#) ww5 ww6 ->
                                                                                      GHC.Base.augment
                                                                                        @ GHC.Types.Char
                                                                                        (\ @ b
                                                                                           (c :: GHC.Types.Char
                                                                                                 -> b
                                                                                                 -> b)[OneShot]
                                                                                           (n :: b)[OneShot] ->
                                                                                         GHC.Base.foldr
                                                                                           @ GHC.Types.Char
                                                                                           @ b
                                                                                           c
                                                                                           n
                                                                                           (GHC.Types.:
                                                                                              @ GHC.Types.Char
                                                                                              ww5
                                                                                              ww6))
                                                                                        Multilinear.Index.$fShowTIndex6 } }))))))))))
                                                     GHC.Types.True
                                                     -> Multilinear.Generic.FiniteTensor
                                                          @ a
                                                          wild1
                                                          (Data.Vector.Generic.new
                                                             @ Data.Vector.Vector
                                                             @ (Multilinear.Generic.Tensor a)
                                                             (Data.Vector.$fVectorVectora
                                                                @ (Multilinear.Generic.Tensor a))
                                                             (Data.Vector.Generic.New.unstream
                                                                @ Data.Vector.Vector
                                                                @ (Multilinear.Generic.Tensor a)
                                                                (Data.Vector.$fVectorVectora
                                                                   @ (Multilinear.Generic.Tensor a))
                                                                (Data.Vector.Fusion.Bundle.Monadic.zipWithM
                                                                   @ Data.Vector.Fusion.Util.Id
                                                                   @ (Multilinear.Generic.Tensor a)
                                                                   @ a
                                                                   @ (Multilinear.Generic.Tensor a)
                                                                   @ Data.Vector.Vector
                                                                   Data.Vector.Fusion.Util.$fMonadId
                                                                   (\ (a1 :: Multilinear.Generic.Tensor
                                                                               a)
                                                                      (b1 :: a)[OneShot] ->
                                                                    Multilinear.Generic.dot_$c.*
                                                                      @ a
                                                                      $dNum
                                                                      a1
                                                                      b1)
                                                                     `cast`
                                                                   (<Multilinear.Generic.Tensor a>_R
                                                                    ->_R <a>_R
                                                                    ->_R Sym (Data.Vector.Fusion.Util.N:Id[0]
                                                                                  <Multilinear.Generic.Tensor
                                                                                     a>_R))
                                                                   (Data.Vector.Generic.stream
                                                                      @ Data.Vector.Vector
                                                                      @ (Multilinear.Generic.Tensor
                                                                           a)
                                                                      (Data.Vector.$fVectorVectora
                                                                         @ (Multilinear.Generic.Tensor
                                                                              a))
                                                                      ts1')
                                                                   (Data.Vector.Generic.stream
                                                                      @ Data.Vector.Vector
                                                                      @ a
                                                                      (Data.Vector.$fVectorVectora
                                                                         @ a)
                                                                      ts2')))) } }
                                           Multilinear.Generic.FiniteTensor i2 ts2'
                                           -> case i2 of wild3 {
                                                DEFAULT -> fail GHC.Prim.void#
                                                Multilinear.Index.Finite.Contravariant count2 ds3
                                                -> case GHC.Classes.eqInt count1 count2 of wild4 {
                                                     GHC.Types.False
                                                     -> Multilinear.Generic.Err
                                                          @ a
                                                          (GHC.Base.augment
                                                             @ GHC.Types.Char
                                                             (\ @ b
                                                                (c :: GHC.Types.Char
                                                                      -> b -> b)[OneShot]
                                                                (n :: b)[OneShot] ->
                                                              GHC.CString.unpackFoldrCString#
                                                                @ b
                                                                "Tensor product: "#
                                                                c
                                                                n)
                                                             (GHC.Base.augment
                                                                @ GHC.Types.Char
                                                                (\ @ b
                                                                   (c :: GHC.Types.Char
                                                                         -> b -> b)[OneShot]
                                                                   (n :: b)[OneShot] ->
                                                                 GHC.Base.foldr
                                                                   @ GHC.Types.Char
                                                                   @ b
                                                                   c
                                                                   n
                                                                   Multilinear.Generic.incompatibleTypes)
                                                                (GHC.Base.augment
                                                                   @ GHC.Types.Char
                                                                   (\ @ b
                                                                      (c :: GHC.Types.Char
                                                                            -> b -> b)[OneShot]
                                                                      (n :: b)[OneShot] ->
                                                                    GHC.CString.unpackFoldrCString#
                                                                      @ b
                                                                      " - index1 is "#
                                                                      c
                                                                      n)
                                                                   (GHC.Base.augment
                                                                      @ GHC.Types.Char
                                                                      (\ @ b
                                                                         (c :: GHC.Types.Char
                                                                               -> b -> b)[OneShot]
                                                                         (n :: b)[OneShot] ->
                                                                       GHC.Base.foldr
                                                                         @ GHC.Types.Char
                                                                         @ b
                                                                         c
                                                                         n
                                                                         (GHC.CString.unpackAppendCString#
                                                                            Multilinear.Index.$fShowTIndex9
                                                                            (GHC.Base.augment
                                                                               @ GHC.Types.Char
                                                                               (\ @ b1
                                                                                  (c1 :: GHC.Types.Char
                                                                                         -> b1
                                                                                         -> b1)[OneShot]
                                                                                  (n1 :: b1)[OneShot] ->
                                                                                GHC.Base.foldr
                                                                                  @ GHC.Types.Char
                                                                                  @ b1
                                                                                  c1
                                                                                  n1
                                                                                  ds2)
                                                                               (GHC.CString.unpackAppendCString#
                                                                                  Multilinear.Index.$fShowTIndex13
                                                                                  (GHC.Base.augment
                                                                                     @ GHC.Types.Char
                                                                                     (\ @ b1
                                                                                        (c1 :: GHC.Types.Char
                                                                                               -> b1
                                                                                               -> b1)[OneShot]
                                                                                        (n1 :: b1)[OneShot] ->
                                                                                      GHC.Base.foldr
                                                                                        @ GHC.Types.Char
                                                                                        @ b1
                                                                                        c1
                                                                                        n1
                                                                                        GHC.Show.$fShowMaybe1)
                                                                                     (case count1 of ww2 { GHC.Types.I# ww3 ->
                                                                                      case GHC.Show.$wshowSignedInt
                                                                                             11#
                                                                                             ww3
                                                                                             (GHC.Types.[]
                                                                                                @ GHC.Types.Char) of ww4 { (#,#) ww5 ww6 ->
                                                                                      GHC.Base.augment
                                                                                        @ GHC.Types.Char
                                                                                        (\ @ b1
                                                                                           (c1 :: GHC.Types.Char
                                                                                                  -> b1
                                                                                                  -> b1)[OneShot]
                                                                                           (n1 :: b1)[OneShot] ->
                                                                                         GHC.Base.foldr
                                                                                           @ GHC.Types.Char
                                                                                           @ b1
                                                                                           c1
                                                                                           n1
                                                                                           (GHC.Types.:
                                                                                              @ GHC.Types.Char
                                                                                              ww5
                                                                                              ww6))
                                                                                        Multilinear.Index.$fShowTIndex6 } }))))))
                                                                      (GHC.Base.augment
                                                                         @ GHC.Types.Char
                                                                         (\ @ b
                                                                            (c :: GHC.Types.Char
                                                                                  -> b
                                                                                  -> b)[OneShot]
                                                                            (n :: b)[OneShot] ->
                                                                          GHC.CString.unpackFoldrCString#
                                                                            @ b
                                                                            " and index2 is "#
                                                                            c
                                                                            n)
                                                                         (GHC.CString.unpackAppendCString#
                                                                            Multilinear.Index.$fShowTIndex9
                                                                            (GHC.Base.augment
                                                                               @ GHC.Types.Char
                                                                               (\ @ b
                                                                                  (c :: GHC.Types.Char
                                                                                        -> b
                                                                                        -> b)[OneShot]
                                                                                  (n :: b)[OneShot] ->
                                                                                GHC.Base.foldr
                                                                                  @ GHC.Types.Char
                                                                                  @ b
                                                                                  c
                                                                                  n
                                                                                  ds3)
                                                                               (GHC.CString.unpackAppendCString#
                                                                                  Multilinear.Index.$fShowTIndex13
                                                                                  (GHC.Base.augment
                                                                                     @ GHC.Types.Char
                                                                                     (\ @ b
                                                                                        (c :: GHC.Types.Char
                                                                                              -> b
                                                                                              -> b)[OneShot]
                                                                                        (n :: b)[OneShot] ->
                                                                                      GHC.Base.foldr
                                                                                        @ GHC.Types.Char
                                                                                        @ b
                                                                                        c
                                                                                        n
                                                                                        GHC.Show.$fShowMaybe1)
                                                                                     (case count2 of ww2 { GHC.Types.I# ww3 ->
                                                                                      case GHC.Show.$wshowSignedInt
                                                                                             11#
                                                                                             ww3
                                                                                             (GHC.Types.[]
                                                                                                @ GHC.Types.Char) of ww4 { (#,#) ww5 ww6 ->
                                                                                      GHC.Base.augment
                                                                                        @ GHC.Types.Char
                                                                                        (\ @ b
                                                                                           (c :: GHC.Types.Char
                                                                                                 -> b
                                                                                                 -> b)[OneShot]
                                                                                           (n :: b)[OneShot] ->
                                                                                         GHC.Base.foldr
                                                                                           @ GHC.Types.Char
                                                                                           @ b
                                                                                           c
                                                                                           n
                                                                                           (GHC.Types.:
                                                                                              @ GHC.Types.Char
                                                                                              ww5
                                                                                              ww6))
                                                                                        Multilinear.Index.$fShowTIndex6 } }))))))))))
                                                     GHC.Types.True
                                                     -> Multilinear.Generic.FiniteTensor
                                                          @ a
                                                          wild1
                                                          (Data.Vector.Generic.new
                                                             @ Data.Vector.Vector
                                                             @ (Multilinear.Generic.Tensor a)
                                                             (Data.Vector.$fVectorVectora
                                                                @ (Multilinear.Generic.Tensor a))
                                                             (Data.Vector.Generic.New.unstream
                                                                @ Data.Vector.Vector
                                                                @ (Multilinear.Generic.Tensor a)
                                                                (Data.Vector.$fVectorVectora
                                                                   @ (Multilinear.Generic.Tensor a))
                                                                (Data.Vector.Fusion.Bundle.Monadic.zipWithM
                                                                   @ Data.Vector.Fusion.Util.Id
                                                                   @ (Multilinear.Generic.Tensor a)
                                                                   @ (Multilinear.Generic.Tensor a)
                                                                   @ (Multilinear.Generic.Tensor a)
                                                                   @ Data.Vector.Vector
                                                                   Data.Vector.Fusion.Util.$fMonadId
                                                                   (\ (a1 :: Multilinear.Generic.Tensor
                                                                               a)
                                                                      (b1 :: Multilinear.Generic.Tensor
                                                                               a)[OneShot] ->
                                                                    Multilinear.Generic.dot_$c*
                                                                      @ a
                                                                      $dNum
                                                                      a1
                                                                      b1)
                                                                     `cast`
                                                                   (<Multilinear.Generic.Tensor a>_R
                                                                    ->_R <Multilinear.Generic.Tensor
                                                                            a>_R
                                                                    ->_R Sym (Data.Vector.Fusion.Util.N:Id[0]
                                                                                  <Multilinear.Generic.Tensor
                                                                                     a>_R))
                                                                   (Data.Vector.Generic.stream
                                                                      @ Data.Vector.Vector
                                                                      @ (Multilinear.Generic.Tensor
                                                                           a)
                                                                      (Data.Vector.$fVectorVectora
                                                                         @ (Multilinear.Generic.Tensor
                                                                              a))
                                                                      ts1')
                                                                   (Data.Vector.Generic.stream
                                                                      @ Data.Vector.Vector
                                                                      @ (Multilinear.Generic.Tensor
                                                                           a)
                                                                      (Data.Vector.$fVectorVectora
                                                                         @ (Multilinear.Generic.Tensor
                                                                              a))
                                                                      ts2')))) } }
                                           Multilinear.Generic.InfiniteTensor i2 ts2'
                                           -> case i2 of wild3 {
                                                DEFAULT -> fail GHC.Prim.void#
                                                Multilinear.Index.Infinite.Contravariant ds3
                                                -> Multilinear.Generic.InfiniteTensor
                                                     @ a
                                                     wild3
                                                     (GHC.Base.build
                                                        @ (Multilinear.Generic.Tensor a)
                                                        (\ @ b
                                                           (c :: Multilinear.Generic.Tensor a
                                                                 -> b -> b)[OneShot]
                                                           (n :: b)[OneShot] ->
                                                         Data.Vector.Fusion.Bundle.toListFB
                                                           @ (Multilinear.Generic.Tensor a)
                                                           @ b
                                                           @ Data.Vector.Vector
                                                           c
                                                           n
                                                           (Data.Vector.Fusion.Bundle.Monadic.zipWithM
                                                              @ Data.Vector.Fusion.Util.Id
                                                              @ (Multilinear.Generic.Tensor a)
                                                              @ (Multilinear.Generic.Tensor a)
                                                              @ (Multilinear.Generic.Tensor a)
                                                              @ Data.Vector.Vector
                                                              Data.Vector.Fusion.Util.$fMonadId
                                                              (\ (a1 :: Multilinear.Generic.Tensor
                                                                          a)
                                                                 (b1 :: Multilinear.Generic.Tensor
                                                                          a)[OneShot] ->
                                                               Multilinear.Generic.dot_$c*
                                                                 @ a
                                                                 $dNum
                                                                 a1
                                                                 b1)
                                                                `cast`
                                                              (<Multilinear.Generic.Tensor a>_R
                                                               ->_R <Multilinear.Generic.Tensor a>_R
                                                               ->_R Sym (Data.Vector.Fusion.Util.N:Id[0]
                                                                             <Multilinear.Generic.Tensor
                                                                                a>_R))
                                                              (Data.Vector.Generic.stream
                                                                 @ Data.Vector.Vector
                                                                 @ (Multilinear.Generic.Tensor a)
                                                                 (Data.Vector.$fVectorVectora
                                                                    @ (Multilinear.Generic.Tensor
                                                                         a))
                                                                 ts1')
                                                              (Data.Vector.Fusion.Bundle.Monadic.unsafeFromList
                                                                 @ Data.Vector.Fusion.Util.Id
                                                                 @ (Multilinear.Generic.Tensor a)
                                                                 @ Data.Vector.Vector
                                                                 Data.Vector.Fusion.Util.$fMonadId
                                                                 Data.Vector.Fusion.Bundle.Size.Unknown
                                                                 (GHC.Base.build
                                                                    @ (Multilinear.Generic.Tensor a)
                                                                    (\ @ b1
                                                                       (c1 :: Multilinear.Generic.Tensor
                                                                                a
                                                                              -> b1 -> b1)[OneShot]
                                                                       (nil :: b1)[OneShot] ->
                                                                     case GHC.Classes.ltInt
                                                                            (GHC.Types.I# 0#)
                                                                            count1 of wild4 {
                                                                       GHC.Types.False -> nil
                                                                       GHC.Types.True
                                                                       -> GHC.Base.foldr
                                                                            @ (Multilinear.Generic.Tensor
                                                                                 a)
                                                                            @ (GHC.Types.Int -> b1)
                                                                            (GHC.List.takeFB
                                                                               @ (Multilinear.Generic.Tensor
                                                                                    a)
                                                                               @ b1
                                                                               c1
                                                                               nil)
                                                                            (GHC.List.flipSeqTake
                                                                               @ b1
                                                                               nil)
                                                                            ts2'
                                                                            count1 })))))) } }
                                      Multilinear.Index.Finite.Indifferent ipv ipv1
                                      -> fail GHC.Prim.void# }
                                 Multilinear.Generic.InfiniteTensor ds2 ts1'
                                 -> case ds2 of wild1 {
                                      Multilinear.Index.Infinite.Covariant ds3
                                      -> case ds1 of wild2 {
                                           DEFAULT -> fail GHC.Prim.void#
                                           Multilinear.Generic.SimpleFinite ds4 ts2'
                                           -> case ds4 of wild3 {
                                                Multilinear.Index.Finite.Covariant count2 ds5
                                                -> Multilinear.Generic.InfiniteTensor
                                                     @ a
                                                     wild1
                                                     (GHC.Base.build
                                                        @ (Multilinear.Generic.Tensor a)
                                                        (\ @ b
                                                           (c :: Multilinear.Generic.Tensor a
                                                                 -> b -> b)[OneShot]
                                                           (n :: b)[OneShot] ->
                                                         Data.Vector.Fusion.Bundle.toListFB
                                                           @ (Multilinear.Generic.Tensor a)
                                                           @ b
                                                           @ Data.Vector.Vector
                                                           c
                                                           n
                                                           (Data.Vector.Fusion.Bundle.Monadic.zipWithM
                                                              @ Data.Vector.Fusion.Util.Id
                                                              @ (Multilinear.Generic.Tensor a)
                                                              @ a
                                                              @ (Multilinear.Generic.Tensor a)
                                                              @ Data.Vector.Vector
                                                              Data.Vector.Fusion.Util.$fMonadId
                                                              (\ (a1 :: Multilinear.Generic.Tensor
                                                                          a)
                                                                 (b1 :: a)[OneShot] ->
                                                               Multilinear.Generic.dot_$c.*
                                                                 @ a
                                                                 $dNum
                                                                 a1
                                                                 b1)
                                                                `cast`
                                                              (<Multilinear.Generic.Tensor a>_R
                                                               ->_R <a>_R
                                                               ->_R Sym (Data.Vector.Fusion.Util.N:Id[0]
                                                                             <Multilinear.Generic.Tensor
                                                                                a>_R))
                                                              (Data.Vector.Fusion.Bundle.Monadic.unsafeFromList
                                                                 @ Data.Vector.Fusion.Util.Id
                                                                 @ (Multilinear.Generic.Tensor a)
                                                                 @ Data.Vector.Vector
                                                                 Data.Vector.Fusion.Util.$fMonadId
                                                                 Data.Vector.Fusion.Bundle.Size.Unknown
                                                                 (GHC.Base.build
                                                                    @ (Multilinear.Generic.Tensor a)
                                                                    (\ @ b1
                                                                       (c1 :: Multilinear.Generic.Tensor
                                                                                a
                                                                              -> b1 -> b1)[OneShot]
                                                                       (nil :: b1)[OneShot] ->
                                                                     case GHC.Classes.ltInt
                                                                            (GHC.Types.I# 0#)
                                                                            count2 of wild4 {
                                                                       GHC.Types.False -> nil
                                                                       GHC.Types.True
                                                                       -> GHC.Base.foldr
                                                                            @ (Multilinear.Generic.Tensor
                                                                                 a)
                                                                            @ (GHC.Types.Int -> b1)
                                                                            (GHC.List.takeFB
                                                                               @ (Multilinear.Generic.Tensor
                                                                                    a)
                                                                               @ b1
                                                                               c1
                                                                               nil)
                                                                            (GHC.List.flipSeqTake
                                                                               @ b1
                                                                               nil)
                                                                            ts1'
                                                                            count2 })))
                                                              (Data.Vector.Generic.stream
                                                                 @ Data.Vector.Vector
                                                                 @ a
                                                                 (Data.Vector.$fVectorVectora @ a)
                                                                 ts2'))))
                                                Multilinear.Index.Finite.Contravariant count2 ds5
                                                -> (Data.Vector.Fusion.Bundle.Monadic.foldlM'
                                                      @ Data.Vector.Fusion.Util.Id
                                                      @ (Multilinear.Generic.Tensor a)
                                                      @ (Multilinear.Generic.Tensor a)
                                                      @ Data.Vector.Vector
                                                      Data.Vector.Fusion.Util.$fMonadId
                                                      (\ (a1 :: Multilinear.Generic.Tensor a)
                                                         (b1 :: Multilinear.Generic.Tensor
                                                                  a)[OneShot] ->
                                                       Multilinear.Generic.dot_$c+ @ a $dNum a1 b1)
                                                        `cast`
                                                      (<Multilinear.Generic.Tensor a>_R
                                                       ->_R <Multilinear.Generic.Tensor a>_R
                                                       ->_R Sym (Data.Vector.Fusion.Util.N:Id[0]
                                                                     <Multilinear.Generic.Tensor
                                                                        a>_R))
                                                      (Multilinear.Generic.Scalar
                                                         @ a
                                                         (GHC.Num.fromInteger @ a $dNum 0))
                                                      (Data.Vector.Fusion.Bundle.Monadic.zipWithM
                                                         @ Data.Vector.Fusion.Util.Id
                                                         @ (Multilinear.Generic.Tensor a)
                                                         @ a
                                                         @ (Multilinear.Generic.Tensor a)
                                                         @ Data.Vector.Vector
                                                         Data.Vector.Fusion.Util.$fMonadId
                                                         (\ (a1 :: Multilinear.Generic.Tensor a)
                                                            (b1 :: a)[OneShot] ->
                                                          Multilinear.Generic.dot_$c.*
                                                            @ a
                                                            $dNum
                                                            a1
                                                            b1)
                                                           `cast`
                                                         (<Multilinear.Generic.Tensor a>_R
                                                          ->_R <a>_R
                                                          ->_R Sym (Data.Vector.Fusion.Util.N:Id[0]
                                                                        <Multilinear.Generic.Tensor
                                                                           a>_R))
                                                         (Data.Vector.Fusion.Bundle.Monadic.unsafeFromList
                                                            @ Data.Vector.Fusion.Util.Id
                                                            @ (Multilinear.Generic.Tensor a)
                                                            @ Data.Vector.Vector
                                                            Data.Vector.Fusion.Util.$fMonadId
                                                            Data.Vector.Fusion.Bundle.Size.Unknown
                                                            (GHC.Base.build
                                                               @ (Multilinear.Generic.Tensor a)
                                                               (\ @ b
                                                                  (c :: Multilinear.Generic.Tensor a
                                                                        -> b -> b)[OneShot]
                                                                  (nil :: b)[OneShot] ->
                                                                case GHC.Classes.ltInt
                                                                       (GHC.Types.I# 0#)
                                                                       count2 of wild4 {
                                                                  GHC.Types.False -> nil
                                                                  GHC.Types.True
                                                                  -> GHC.Base.foldr
                                                                       @ (Multilinear.Generic.Tensor
                                                                            a)
                                                                       @ (GHC.Types.Int -> b)
                                                                       (GHC.List.takeFB
                                                                          @ (Multilinear.Generic.Tensor
                                                                               a)
                                                                          @ b
                                                                          c
                                                                          nil)
                                                                       (GHC.List.flipSeqTake
                                                                          @ b
                                                                          nil)
                                                                       ts1'
                                                                       count2 })))
                                                         (Data.Vector.Generic.stream
                                                            @ Data.Vector.Vector
                                                            @ a
                                                            (Data.Vector.$fVectorVectora @ a)
                                                            ts2')))
                                                     `cast`
                                                   (Data.Vector.Fusion.Util.N:Id[0]
                                                        <Multilinear.Generic.Tensor a>_R)
                                                Multilinear.Index.Finite.Indifferent ipv ipv1
                                                -> fail GHC.Prim.void# }
                                           Multilinear.Generic.FiniteTensor ds4 ts2'
                                           -> case ds4 of wild3 {
                                                Multilinear.Index.Finite.Covariant count2 ds5
                                                -> Multilinear.Generic.InfiniteTensor
                                                     @ a
                                                     wild1
                                                     (GHC.Base.build
                                                        @ (Multilinear.Generic.Tensor a)
                                                        (\ @ b
                                                           (c :: Multilinear.Generic.Tensor a
                                                                 -> b -> b)[OneShot]
                                                           (n :: b)[OneShot] ->
                                                         Data.Vector.Fusion.Bundle.toListFB
                                                           @ (Multilinear.Generic.Tensor a)
                                                           @ b
                                                           @ Data.Vector.Vector
                                                           c
                                                           n
                                                           (Data.Vector.Fusion.Bundle.Monadic.zipWithM
                                                              @ Data.Vector.Fusion.Util.Id
                                                              @ (Multilinear.Generic.Tensor a)
                                                              @ (Multilinear.Generic.Tensor a)
                                                              @ (Multilinear.Generic.Tensor a)
                                                              @ Data.Vector.Vector
                                                              Data.Vector.Fusion.Util.$fMonadId
                                                              (\ (a1 :: Multilinear.Generic.Tensor
                                                                          a)
                                                                 (b1 :: Multilinear.Generic.Tensor
                                                                          a)[OneShot] ->
                                                               Multilinear.Generic.dot_$c*
                                                                 @ a
                                                                 $dNum
                                                                 a1
                                                                 b1)
                                                                `cast`
                                                              (<Multilinear.Generic.Tensor a>_R
                                                               ->_R <Multilinear.Generic.Tensor a>_R
                                                               ->_R Sym (Data.Vector.Fusion.Util.N:Id[0]
                                                                             <Multilinear.Generic.Tensor
                                                                                a>_R))
                                                              (Data.Vector.Fusion.Bundle.Monadic.unsafeFromList
                                                                 @ Data.Vector.Fusion.Util.Id
                                                                 @ (Multilinear.Generic.Tensor a)
                                                                 @ Data.Vector.Vector
                                                                 Data.Vector.Fusion.Util.$fMonadId
                                                                 Data.Vector.Fusion.Bundle.Size.Unknown
                                                                 (GHC.Base.build
                                                                    @ (Multilinear.Generic.Tensor a)
                                                                    (\ @ b1
                                                                       (c1 :: Multilinear.Generic.Tensor
                                                                                a
                                                                              -> b1 -> b1)[OneShot]
                                                                       (nil :: b1)[OneShot] ->
                                                                     case GHC.Classes.ltInt
                                                                            (GHC.Types.I# 0#)
                                                                            count2 of wild4 {
                                                                       GHC.Types.False -> nil
                                                                       GHC.Types.True
                                                                       -> GHC.Base.foldr
                                                                            @ (Multilinear.Generic.Tensor
                                                                                 a)
                                                                            @ (GHC.Types.Int -> b1)
                                                                            (GHC.List.takeFB
                                                                               @ (Multilinear.Generic.Tensor
                                                                                    a)
                                                                               @ b1
                                                                               c1
                                                                               nil)
                                                                            (GHC.List.flipSeqTake
                                                                               @ b1
                                                                               nil)
                                                                            ts1'
                                                                            count2 })))
                                                              (Data.Vector.Generic.stream
                                                                 @ Data.Vector.Vector
                                                                 @ (Multilinear.Generic.Tensor a)
                                                                 (Data.Vector.$fVectorVectora
                                                                    @ (Multilinear.Generic.Tensor
                                                                         a))
                                                                 ts2'))))
                                                Multilinear.Index.Finite.Contravariant count2 ds5
                                                -> (Data.Vector.Fusion.Bundle.Monadic.foldlM'
                                                      @ Data.Vector.Fusion.Util.Id
                                                      @ (Multilinear.Generic.Tensor a)
                                                      @ (Multilinear.Generic.Tensor a)
                                                      @ Data.Vector.Vector
                                                      Data.Vector.Fusion.Util.$fMonadId
                                                      (\ (a1 :: Multilinear.Generic.Tensor a)
                                                         (b1 :: Multilinear.Generic.Tensor
                                                                  a)[OneShot] ->
                                                       Multilinear.Generic.dot_$c+ @ a $dNum a1 b1)
                                                        `cast`
                                                      (<Multilinear.Generic.Tensor a>_R
                                                       ->_R <Multilinear.Generic.Tensor a>_R
                                                       ->_R Sym (Data.Vector.Fusion.Util.N:Id[0]
                                                                     <Multilinear.Generic.Tensor
                                                                        a>_R))
                                                      (Multilinear.Generic.Scalar
                                                         @ a
                                                         (GHC.Num.fromInteger @ a $dNum 0))
                                                      (Data.Vector.Fusion.Bundle.Monadic.zipWithM
                                                         @ Data.Vector.Fusion.Util.Id
                                                         @ (Multilinear.Generic.Tensor a)
                                                         @ (Multilinear.Generic.Tensor a)
                                                         @ (Multilinear.Generic.Tensor a)
                                                         @ Data.Vector.Vector
                                                         Data.Vector.Fusion.Util.$fMonadId
                                                         (\ (a1 :: Multilinear.Generic.Tensor a)
                                                            (b1 :: Multilinear.Generic.Tensor
                                                                     a)[OneShot] ->
                                                          Multilinear.Generic.dot_$c*
                                                            @ a
                                                            $dNum
                                                            a1
                                                            b1)
                                                           `cast`
                                                         (<Multilinear.Generic.Tensor a>_R
                                                          ->_R <Multilinear.Generic.Tensor a>_R
                                                          ->_R Sym (Data.Vector.Fusion.Util.N:Id[0]
                                                                        <Multilinear.Generic.Tensor
                                                                           a>_R))
                                                         (Data.Vector.Fusion.Bundle.Monadic.unsafeFromList
                                                            @ Data.Vector.Fusion.Util.Id
                                                            @ (Multilinear.Generic.Tensor a)
                                                            @ Data.Vector.Vector
                                                            Data.Vector.Fusion.Util.$fMonadId
                                                            Data.Vector.Fusion.Bundle.Size.Unknown
                                                            (GHC.Base.build
                                                               @ (Multilinear.Generic.Tensor a)
                                                               (\ @ b
                                                                  (c :: Multilinear.Generic.Tensor a
                                                                        -> b -> b)[OneShot]
                                                                  (nil :: b)[OneShot] ->
                                                                case GHC.Classes.ltInt
                                                                       (GHC.Types.I# 0#)
                                                                       count2 of wild4 {
                                                                  GHC.Types.False -> nil
                                                                  GHC.Types.True
                                                                  -> GHC.Base.foldr
                                                                       @ (Multilinear.Generic.Tensor
                                                                            a)
                                                                       @ (GHC.Types.Int -> b)
                                                                       (GHC.List.takeFB
                                                                          @ (Multilinear.Generic.Tensor
                                                                               a)
                                                                          @ b
                                                                          c
                                                                          nil)
                                                                       (GHC.List.flipSeqTake
                                                                          @ b
                                                                          nil)
                                                                       ts1'
                                                                       count2 })))
                                                         (Data.Vector.Generic.stream
                                                            @ Data.Vector.Vector
                                                            @ (Multilinear.Generic.Tensor a)
                                                            (Data.Vector.$fVectorVectora
                                                               @ (Multilinear.Generic.Tensor a))
                                                            ts2')))
                                                     `cast`
                                                   (Data.Vector.Fusion.Util.N:Id[0]
                                                        <Multilinear.Generic.Tensor a>_R)
                                                Multilinear.Index.Finite.Indifferent ipv ipv1
                                                -> fail GHC.Prim.void# } }
                                      Multilinear.Index.Infinite.Contravariant ds3
                                      -> case ds1 of wild2 {
                                           DEFAULT -> fail GHC.Prim.void#
                                           Multilinear.Generic.SimpleFinite ds4 ts2'
                                           -> case ds4 of wild3 {
                                                DEFAULT -> fail GHC.Prim.void#
                                                Multilinear.Index.Finite.Contravariant count2 ds5
                                                -> Multilinear.Generic.InfiniteTensor
                                                     @ a
                                                     wild1
                                                     (GHC.Base.build
                                                        @ (Multilinear.Generic.Tensor a)
                                                        (\ @ b
                                                           (c :: Multilinear.Generic.Tensor a
                                                                 -> b -> b)[OneShot]
                                                           (n :: b)[OneShot] ->
                                                         Data.Vector.Fusion.Bundle.toListFB
                                                           @ (Multilinear.Generic.Tensor a)
                                                           @ b
                                                           @ Data.Vector.Vector
                                                           c
                                                           n
                                                           (Data.Vector.Fusion.Bundle.Monadic.zipWithM
                                                              @ Data.Vector.Fusion.Util.Id
                                                              @ (Multilinear.Generic.Tensor a)
                                                              @ a
                                                              @ (Multilinear.Generic.Tensor a)
                                                              @ Data.Vector.Vector
                                                              Data.Vector.Fusion.Util.$fMonadId
                                                              (\ (a1 :: Multilinear.Generic.Tensor
                                                                          a)
                                                                 (b1 :: a)[OneShot] ->
                                                               Multilinear.Generic.dot_$c.*
                                                                 @ a
                                                                 $dNum
                                                                 a1
                                                                 b1)
                                                                `cast`
                                                              (<Multilinear.Generic.Tensor a>_R
                                                               ->_R <a>_R
                                                               ->_R Sym (Data.Vector.Fusion.Util.N:Id[0]
                                                                             <Multilinear.Generic.Tensor
                                                                                a>_R))
                                                              (Data.Vector.Fusion.Bundle.Monadic.unsafeFromList
                                                                 @ Data.Vector.Fusion.Util.Id
                                                                 @ (Multilinear.Generic.Tensor a)
                                                                 @ Data.Vector.Vector
                                                                 Data.Vector.Fusion.Util.$fMonadId
                                                                 Data.Vector.Fusion.Bundle.Size.Unknown
                                                                 (GHC.Base.build
                                                                    @ (Multilinear.Generic.Tensor a)
                                                                    (\ @ b1
                                                                       (c1 :: Multilinear.Generic.Tensor
                                                                                a
                                                                              -> b1 -> b1)[OneShot]
                                                                       (nil :: b1)[OneShot] ->
                                                                     case GHC.Classes.ltInt
                                                                            (GHC.Types.I# 0#)
                                                                            count2 of wild4 {
                                                                       GHC.Types.False -> nil
                                                                       GHC.Types.True
                                                                       -> GHC.Base.foldr
                                                                            @ (Multilinear.Generic.Tensor
                                                                                 a)
                                                                            @ (GHC.Types.Int -> b1)
                                                                            (GHC.List.takeFB
                                                                               @ (Multilinear.Generic.Tensor
                                                                                    a)
                                                                               @ b1
                                                                               c1
                                                                               nil)
                                                                            (GHC.List.flipSeqTake
                                                                               @ b1
                                                                               nil)
                                                                            ts1'
                                                                            count2 })))
                                                              (Data.Vector.Generic.stream
                                                                 @ Data.Vector.Vector
                                                                 @ a
                                                                 (Data.Vector.$fVectorVectora @ a)
                                                                 ts2')))) }
                                           Multilinear.Generic.FiniteTensor ds4 ts2'
                                           -> case ds4 of wild3 {
                                                DEFAULT -> fail GHC.Prim.void#
                                                Multilinear.Index.Finite.Contravariant count2 ds5
                                                -> Multilinear.Generic.InfiniteTensor
                                                     @ a
                                                     wild1
                                                     (GHC.Base.build
                                                        @ (Multilinear.Generic.Tensor a)
                                                        (\ @ b
                                                           (c :: Multilinear.Generic.Tensor a
                                                                 -> b -> b)[OneShot]
                                                           (n :: b)[OneShot] ->
                                                         Data.Vector.Fusion.Bundle.toListFB
                                                           @ (Multilinear.Generic.Tensor a)
                                                           @ b
                                                           @ Data.Vector.Vector
                                                           c
                                                           n
                                                           (Data.Vector.Fusion.Bundle.Monadic.zipWithM
                                                              @ Data.Vector.Fusion.Util.Id
                                                              @ (Multilinear.Generic.Tensor a)
                                                              @ (Multilinear.Generic.Tensor a)
                                                              @ (Multilinear.Generic.Tensor a)
                                                              @ Data.Vector.Vector
                                                              Data.Vector.Fusion.Util.$fMonadId
                                                              (\ (a1 :: Multilinear.Generic.Tensor
                                                                          a)
                                                                 (b1 :: Multilinear.Generic.Tensor
                                                                          a)[OneShot] ->
                                                               Multilinear.Generic.dot_$c*
                                                                 @ a
                                                                 $dNum
                                                                 a1
                                                                 b1)
                                                                `cast`
                                                              (<Multilinear.Generic.Tensor a>_R
                                                               ->_R <Multilinear.Generic.Tensor a>_R
                                                               ->_R Sym (Data.Vector.Fusion.Util.N:Id[0]
                                                                             <Multilinear.Generic.Tensor
                                                                                a>_R))
                                                              (Data.Vector.Fusion.Bundle.Monadic.unsafeFromList
                                                                 @ Data.Vector.Fusion.Util.Id
                                                                 @ (Multilinear.Generic.Tensor a)
                                                                 @ Data.Vector.Vector
                                                                 Data.Vector.Fusion.Util.$fMonadId
                                                                 Data.Vector.Fusion.Bundle.Size.Unknown
                                                                 (GHC.Base.build
                                                                    @ (Multilinear.Generic.Tensor a)
                                                                    (\ @ b1
                                                                       (c1 :: Multilinear.Generic.Tensor
                                                                                a
                                                                              -> b1 -> b1)[OneShot]
                                                                       (nil :: b1)[OneShot] ->
                                                                     case GHC.Classes.ltInt
                                                                            (GHC.Types.I# 0#)
                                                                            count2 of wild4 {
                                                                       GHC.Types.False -> nil
                                                                       GHC.Types.True
                                                                       -> GHC.Base.foldr
                                                                            @ (Multilinear.Generic.Tensor
                                                                                 a)
                                                                            @ (GHC.Types.Int -> b1)
                                                                            (GHC.List.takeFB
                                                                               @ (Multilinear.Generic.Tensor
                                                                                    a)
                                                                               @ b1
                                                                               c1
                                                                               nil)
                                                                            (GHC.List.flipSeqTake
                                                                               @ b1
                                                                               nil)
                                                                            ts1'
                                                                            count2 })))
                                                              (Data.Vector.Generic.stream
                                                                 @ Data.Vector.Vector
                                                                 @ (Multilinear.Generic.Tensor a)
                                                                 (Data.Vector.$fVectorVectora
                                                                    @ (Multilinear.Generic.Tensor
                                                                         a))
                                                                 ts2')))) } }
                                      Multilinear.Index.Infinite.Indifferent ipv
                                      -> fail GHC.Prim.void# } }) -}
0ffa1175e675197212605a70201cecae
  dot1 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Incompatible tensor types!"#) -}
3435455de223a292a66afccee7caf4fd
  dot_$c* ::
    GHC.Num.Num a =>
    Multilinear.Generic.Tensor a
    -> Multilinear.Generic.Tensor a -> Multilinear.Generic.Tensor a
  {- Arity: 3,
     Strictness: <L,U(C(C(U)),A,C(C(U)),A,A,A,C(U))><S,U><S,U>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (3, False, False)
                (\ @ a
                   ($dNum :: GHC.Num.Num a)
                   (t1 :: Multilinear.Generic.Tensor a)
                   (t2 :: Multilinear.Generic.Tensor a) ->
                 let {
                   commonIndices :: [GHC.Base.String]
                   = GHC.Base.build
                       @ [GHC.Types.Char]
                       (\ @ b
                          (c :: [GHC.Types.Char] -> b -> b)[OneShot]
                          (n :: b)[OneShot] ->
                        GHC.Base.foldr
                          @ Multilinear.Index.TIndex
                          @ b
                          (GHC.Base.mapFB
                             @ [GHC.Types.Char]
                             @ b
                             @ Multilinear.Index.TIndex
                             (GHC.List.filterFB
                                @ [GHC.Types.Char]
                                @ b
                                c
                                (let {
                                   ds :: [GHC.Base.String]
                                   = GHC.Base.build
                                       @ [GHC.Types.Char]
                                       (\ @ b1
                                          (c1 :: [GHC.Types.Char] -> b1 -> b1)[OneShot]
                                          (n1 :: b1)[OneShot] ->
                                        GHC.Base.foldr
                                          @ Multilinear.Index.TIndex
                                          @ b1
                                          (GHC.Base.mapFB
                                             @ [GHC.Types.Char]
                                             @ b1
                                             @ Multilinear.Index.TIndex
                                             c1
                                             Multilinear.Index.tIndexName)
                                          n1
                                          (Multilinear.Generic.$fMultilinearTensora_$cindices
                                             @ a
                                             $dNum
                                             t2))
                                 } in
                                 \ (ds1 :: GHC.Base.String) ->
                                 GHC.List.elem
                                   @ GHC.Base.String
                                   GHC.Classes.$fEq[]_$s$fEq[]1
                                   ds1
                                   ds))
                             Multilinear.Index.tIndexName)
                          n
                          (Multilinear.Generic.$fMultilinearTensora_$cindices @ a $dNum t1))
                 } in
                 Multilinear.Generic.mergeScalars
                   @ a
                   (Multilinear.Generic._elemByElem'
                      @ a
                      $dNum
                      (GHC.Base.foldr
                         @ GHC.Base.String
                         @ (Multilinear.Generic.Tensor a -> Multilinear.Generic.Tensor a)
                         (\ (ds :: GHC.Base.String)
                            (ds1 :: Multilinear.Generic.Tensor a
                                    -> Multilinear.Generic.Tensor a)[OneShot]
                            (v :: Multilinear.Generic.Tensor a)[OneShot] ->
                          case v of z { DEFAULT ->
                          ds1
                            (Multilinear.Generic.$fMultilinearTensora_$cshiftRightmost
                               @ a
                               $dNum
                               z
                               ds) })
                         (GHC.Base.id @ (Multilinear.Generic.Tensor a))
                         commonIndices
                         t1)
                      (GHC.Base.foldr
                         @ GHC.Base.String
                         @ (Multilinear.Generic.Tensor a -> Multilinear.Generic.Tensor a)
                         (\ (ds :: GHC.Base.String)
                            (ds1 :: Multilinear.Generic.Tensor a
                                    -> Multilinear.Generic.Tensor a)[OneShot]
                            (v :: Multilinear.Generic.Tensor a)[OneShot] ->
                          case v of z { DEFAULT ->
                          ds1
                            (Multilinear.Generic.$fMultilinearTensora_$cshiftRightmost
                               @ a
                               $dNum
                               z
                               ds) })
                         (GHC.Base.id @ (Multilinear.Generic.Tensor a))
                         commonIndices
                         t2)
                      (GHC.Num.* @ a $dNum)
                      (Multilinear.Generic.dot @ a $dNum))) -}
3435455de223a292a66afccee7caf4fd
  dot_$c*. ::
    GHC.Num.Num a =>
    a -> Multilinear.Generic.Tensor a -> Multilinear.Generic.Tensor a
  {- Arity: 3,
     Strictness: <L,1*U(A,A,1*C1(C(U)),A,A,A,A)><L,U><S,1*U>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (3, False, False)
                (\ @ a
                   ($dNum :: GHC.Num.Num a)
                   (x :: a)
                   (t :: Multilinear.Generic.Tensor a) ->
                 Multilinear.Generic.$fMultilinearTensora_$cfmap
                   @ a
                   @ a
                   (GHC.Num.* @ a $dNum x)
                   t) -}
3435455de223a292a66afccee7caf4fd
  dot_$c+ ::
    GHC.Num.Num a =>
    Multilinear.Generic.Tensor a
    -> Multilinear.Generic.Tensor a -> Multilinear.Generic.Tensor a
  {- Arity: 3, Strictness: <L,U(C(C(U)),A,A,A,A,A,A)><S,U><S,U>,
     Inline: (sat-args=2),
     Unfolding(loop-breaker): InlineRule (3, False, False)
                              (\ @ a
                                 ($dNum :: GHC.Num.Num a)
                                 (t1 :: Multilinear.Generic.Tensor a)
                                 (t2 :: Multilinear.Generic.Tensor a) ->
                               let {
                                 commonIndices :: [GHC.Base.String]
                                 = GHC.Base.build
                                     @ [GHC.Types.Char]
                                     (\ @ b
                                        (c :: [GHC.Types.Char] -> b -> b)[OneShot]
                                        (n :: b)[OneShot] ->
                                      GHC.Base.foldr
                                        @ Multilinear.Index.TIndex
                                        @ b
                                        (GHC.Base.mapFB
                                           @ [GHC.Types.Char]
                                           @ b
                                           @ Multilinear.Index.TIndex
                                           (GHC.List.filterFB
                                              @ [GHC.Types.Char]
                                              @ b
                                              c
                                              (let {
                                                 ds :: [GHC.Base.String]
                                                 = GHC.Base.build
                                                     @ [GHC.Types.Char]
                                                     (\ @ b1
                                                        (c1 :: [GHC.Types.Char]
                                                               -> b1 -> b1)[OneShot]
                                                        (n1 :: b1)[OneShot] ->
                                                      GHC.Base.foldr
                                                        @ Multilinear.Index.TIndex
                                                        @ b1
                                                        (GHC.Base.mapFB
                                                           @ [GHC.Types.Char]
                                                           @ b1
                                                           @ Multilinear.Index.TIndex
                                                           c1
                                                           Multilinear.Index.tIndexName)
                                                        n1
                                                        (Multilinear.Generic.$fMultilinearTensora_$cindices
                                                           @ a
                                                           $dNum
                                                           t2))
                                               } in
                                               \ (ds1 :: GHC.Base.String) ->
                                               GHC.List.elem
                                                 @ GHC.Base.String
                                                 GHC.Classes.$fEq[]_$s$fEq[]1
                                                 ds1
                                                 ds))
                                           Multilinear.Index.tIndexName)
                                        n
                                        (Multilinear.Generic.$fMultilinearTensora_$cindices
                                           @ a
                                           $dNum
                                           t1))
                               } in
                               Multilinear.Generic.mergeScalars
                                 @ a
                                 (Multilinear.Generic._elemByElem'
                                    @ a
                                    $dNum
                                    (GHC.Base.foldr
                                       @ GHC.Base.String
                                       @ (Multilinear.Generic.Tensor a
                                          -> Multilinear.Generic.Tensor a)
                                       (\ (ds :: GHC.Base.String)
                                          (ds1 :: Multilinear.Generic.Tensor a
                                                  -> Multilinear.Generic.Tensor a)[OneShot]
                                          (v :: Multilinear.Generic.Tensor a)[OneShot] ->
                                        case v of z { DEFAULT ->
                                        ds1
                                          (Multilinear.Generic.$fMultilinearTensora_$cshiftRightmost
                                             @ a
                                             $dNum
                                             z
                                             ds) })
                                       (GHC.Base.id @ (Multilinear.Generic.Tensor a))
                                       commonIndices
                                       t1)
                                    (GHC.Base.foldr
                                       @ GHC.Base.String
                                       @ (Multilinear.Generic.Tensor a
                                          -> Multilinear.Generic.Tensor a)
                                       (\ (ds :: GHC.Base.String)
                                          (ds1 :: Multilinear.Generic.Tensor a
                                                  -> Multilinear.Generic.Tensor a)[OneShot]
                                          (v :: Multilinear.Generic.Tensor a)[OneShot] ->
                                        case v of z { DEFAULT ->
                                        ds1
                                          (Multilinear.Generic.$fMultilinearTensora_$cshiftRightmost
                                             @ a
                                             $dNum
                                             z
                                             ds) })
                                       (GHC.Base.id @ (Multilinear.Generic.Tensor a))
                                       commonIndices
                                       t2)
                                    (GHC.Num.+ @ a $dNum)
                                    (Multilinear.Generic.zipT
                                       @ a
                                       $dNum
                                       (Multilinear.Generic.dot_$c+ @ a $dNum)
                                       (Multilinear.Generic.dot_$c.+ @ a $dNum)
                                       (Multilinear.Generic.dot_$c+. @ a $dNum)
                                       (GHC.Num.+ @ a $dNum)))) -}
3435455de223a292a66afccee7caf4fd
  dot_$c+. ::
    GHC.Num.Num a =>
    a -> Multilinear.Generic.Tensor a -> Multilinear.Generic.Tensor a
  {- Arity: 3,
     Strictness: <L,1*U(1*C1(C(U)),A,A,A,A,A,A)><L,U><S,1*U>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (3, False, False)
                (\ @ a
                   ($dNum :: GHC.Num.Num a)
                   (x :: a)
                   (t :: Multilinear.Generic.Tensor a) ->
                 Multilinear.Generic.$fMultilinearTensora_$cfmap
                   @ a
                   @ a
                   (GHC.Num.+ @ a $dNum x)
                   t) -}
3435455de223a292a66afccee7caf4fd
  dot_$c.* ::
    GHC.Num.Num a =>
    Multilinear.Generic.Tensor a -> a -> Multilinear.Generic.Tensor a
  {- Arity: 3, Strictness: <L,U(A,A,C(C1(U)),A,A,A,A)><S,1*U><L,U>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (3, False, False)
                (\ @ a
                   ($dNum :: GHC.Num.Num a)
                   (t :: Multilinear.Generic.Tensor a)
                   (x :: a) ->
                 Multilinear.Generic.$fMultilinearTensora_$cfmap
                   @ a
                   @ a
                   (\ (ds :: a) -> GHC.Num.* @ a $dNum ds x)
                   t) -}
3435455de223a292a66afccee7caf4fd
  dot_$c.+ ::
    GHC.Num.Num a =>
    Multilinear.Generic.Tensor a -> a -> Multilinear.Generic.Tensor a
  {- Arity: 3, Strictness: <L,U(C(C1(U)),A,A,A,A,A,A)><S,1*U><L,U>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (3, False, False)
                (\ @ a
                   ($dNum :: GHC.Num.Num a)
                   (t :: Multilinear.Generic.Tensor a)
                   (x :: a) ->
                 Multilinear.Generic.$fMultilinearTensora_$cfmap
                   @ a
                   @ a
                   (\ (ds :: a) -> GHC.Num.+ @ a $dNum ds x)
                   t) -}
3435455de223a292a66afccee7caf4fd
  errMessage :: Multilinear.Generic.Tensor a -> GHC.Base.String
  RecSel Left Multilinear.Generic.Tensor
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ @ a (ds :: Multilinear.Generic.Tensor a) ->
                 case ds of wild {
                   DEFAULT -> Multilinear.Generic.errMessage1
                   Multilinear.Generic.Err ds1 -> ds1 }) -}
dea76953e22a637e0b4e4a8a997161ec
  errMessage1 :: GHC.Base.String
  {- Strictness: x -}
3435455de223a292a66afccee7caf4fd
  firstElem :: Multilinear.Generic.Tensor a -> a
  {- Arity: 1, Strictness: <S,1*U>, Inline: (sat-args=1),
     Unfolding(loop-breaker): InlineRule (1, False, False)
                              (\ @ a ->
                               let {
                                 loc :: [GHC.Types.Char]
                                 = GHC.Base.build
                                     @ GHC.Types.Char
                                     (\ @ b ->
                                      GHC.CString.unpackFoldrCString#
                                        @ b
                                        "Multilinear-0.8.0.0-4dpV53DlxV5EwwV6FZreVP"#)
                               } in
                               let {
                                 loc1 :: [GHC.Types.Char]
                                 = GHC.Base.build
                                     @ GHC.Types.Char
                                     (\ @ b ->
                                      GHC.CString.unpackFoldrCString# @ b "Multilinear.Generic"#)
                               } in
                               let {
                                 loc2 :: [GHC.Types.Char]
                                 = GHC.Base.build
                                     @ GHC.Types.Char
                                     (\ @ b ->
                                      GHC.CString.unpackFoldrCString#
                                        @ b
                                        "src\\Multilinear\\Generic.hs"#)
                               } in
                               let {
                                 loc3 :: GHC.Types.Int = GHC.Types.I# 164#
                               } in
                               let {
                                 loc4 :: GHC.Types.Int = GHC.Types.I# 28#
                               } in
                               let {
                                 loc5 :: GHC.Types.Int = GHC.Types.I# 164#
                               } in
                               let {
                                 loc6 :: GHC.Types.Int = GHC.Types.I# 37#
                               } in
                               let {
                                 $dIP :: [GHC.Types.Char]
                                 = GHC.Base.build
                                     @ GHC.Types.Char
                                     (\ @ b -> GHC.CString.unpackFoldrCString# @ b "error"#)
                               } in
                               let {
                                 $dIP1 :: GHC.Stack.Types.SrcLoc
                                 = GHC.Stack.Types.SrcLoc loc loc1 loc2 loc3 loc4 loc5 loc6
                               } in
                               let {
                                 $dIP2 :: GHC.Stack.Types.CallStack
                                 = GHC.Stack.Types.PushCallStack
                                     $dIP
                                     $dIP1
                                     GHC.Stack.Types.EmptyCallStack
                               } in
                               \ (x :: Multilinear.Generic.Tensor a) ->
                               case x of wild {
                                 Multilinear.Generic.Scalar val -> val
                                 Multilinear.Generic.SimpleFinite ds ts
                                 -> Data.Vector.Generic.head
                                      @ Data.Vector.Vector
                                      @ a
                                      (Data.Vector.$fVectorVectora @ a)
                                      ts
                                 Multilinear.Generic.FiniteTensor ds ts
                                 -> Multilinear.Generic.firstElem
                                      @ a
                                      (Data.Vector.Generic.head
                                         @ Data.Vector.Vector
                                         @ (Multilinear.Generic.Tensor a)
                                         (Data.Vector.$fVectorVectora
                                            @ (Multilinear.Generic.Tensor a))
                                         ts)
                                 Multilinear.Generic.InfiniteTensor ds ts
                                 -> Multilinear.Generic.firstElem
                                      @ a
                                      (GHC.List.head @ (Multilinear.Generic.Tensor a) ts)
                                 Multilinear.Generic.Err msg
                                 -> GHC.Err.error
                                      @ 'GHC.Types.LiftedRep
                                      @ a
                                      $dIP2
                                        `cast`
                                      (Sym (GHC.Classes.N:IP[0]
                                                <"callStack">_N <GHC.Stack.Types.CallStack>_N))
                                      msg }) -}
7e7c2829c52e8c0e8c6d45a1765f7a62
  incompatibleTypes :: GHC.Base.String
  {- Unfolding: (GHC.CString.unpackCString#
                   Multilinear.Generic.dot1) -}
5fe5ebbabfa898cd9eeee9e54db18274
  indexNotFound :: GHC.Base.String
  {- Unfolding: (GHC.CString.unpackCString#
                   Multilinear.Generic.$fMultilinearTensora14) -}
1666c348733c763b855c76dc94271a8b
  infiniteIndex :: GHC.Base.String
  {- Unfolding: (GHC.CString.unpackCString#
                   Multilinear.Generic.$fMultilinearTensora13) -}
1afa4e686eb335b04641b90d112d6375
  isFiniteTensor :: Multilinear.Generic.Tensor a -> GHC.Types.Bool
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Inline: (sat-args=1),
     Unfolding: InlineRule (1, False, False)
                (\ @ a (x :: Multilinear.Generic.Tensor a) ->
                 case x of wild {
                   DEFAULT -> GHC.Types.False
                   Multilinear.Generic.FiniteTensor ds ds1 -> GHC.Types.True }) -}
3a2b0df16ea855e78a76ada2cee32e78
  isInfiniteTensor :: Multilinear.Generic.Tensor a -> GHC.Types.Bool
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Inline: (sat-args=1),
     Unfolding: InlineRule (1, False, False)
                (\ @ a (x :: Multilinear.Generic.Tensor a) ->
                 case x of wild {
                   DEFAULT -> GHC.Types.False
                   Multilinear.Generic.InfiniteTensor ds ds1 -> GHC.Types.True }) -}
5084651f919359eff7fab5489c296755
  isScalar :: Multilinear.Generic.Tensor a -> GHC.Types.Bool
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Inline: (sat-args=1),
     Unfolding: InlineRule (1, False, False)
                (\ @ a (x :: Multilinear.Generic.Tensor a) ->
                 case x of wild {
                   DEFAULT -> GHC.Types.False
                   Multilinear.Generic.Scalar ds -> GHC.Types.True }) -}
0acdda33d3d4ef0e7a1c6b512595b6ff
  isSimple :: Multilinear.Generic.Tensor a -> GHC.Types.Bool
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Inline: (sat-args=1),
     Unfolding: InlineRule (1, False, False)
                (\ @ a (x :: Multilinear.Generic.Tensor a) ->
                 case x of wild {
                   DEFAULT -> GHC.Types.False
                   Multilinear.Generic.SimpleFinite ds ds1 -> GHC.Types.True }) -}
3435455de223a292a66afccee7caf4fd
  mergeScalars ::
    Multilinear.Generic.Tensor a -> Multilinear.Generic.Tensor a
  {- Arity: 1, Strictness: <S,1*U>, Inline: (sat-args=1),
     Unfolding(loop-breaker): InlineRule (1, False, False)
                              (\ @ a (x :: Multilinear.Generic.Tensor a) ->
                               case x of wild {
                                 DEFAULT -> wild
                                 Multilinear.Generic.FiniteTensor index1 ts1
                                 -> case Data.Vector.Generic.!
                                           @ Data.Vector.Vector
                                           @ (Multilinear.Generic.Tensor a)
                                           (Data.Vector.$fVectorVectora
                                              @ (Multilinear.Generic.Tensor a))
                                           ts1
                                           (GHC.Types.I# 0#) of wild1 {
                                      DEFAULT
                                      -> Multilinear.Generic.FiniteTensor
                                           @ a
                                           index1
                                           (Data.Vector.Generic.new
                                              @ Data.Vector.Vector
                                              @ (Multilinear.Generic.Tensor a)
                                              (Data.Vector.$fVectorVectora
                                                 @ (Multilinear.Generic.Tensor a))
                                              (Data.Vector.Generic.New.unstream
                                                 @ Data.Vector.Vector
                                                 @ (Multilinear.Generic.Tensor a)
                                                 (Data.Vector.$fVectorVectora
                                                    @ (Multilinear.Generic.Tensor a))
                                                 (Data.Vector.Fusion.Bundle.inplace
                                                    @ (Multilinear.Generic.Tensor a)
                                                    @ (Multilinear.Generic.Tensor a)
                                                    @ Data.Vector.Vector
                                                    (\ @ m :: * -> *
                                                       ($dMonad :: GHC.Base.Monad m)[OneShot] ->
                                                     Data.Vector.Fusion.Stream.Monadic.mapM
                                                       @ m
                                                       @ (Multilinear.Generic.Tensor a)
                                                       @ (Multilinear.Generic.Tensor a)
                                                       $dMonad
                                                       (let {
                                                          f1 :: Multilinear.Generic.Tensor a
                                                                -> m (Multilinear.Generic.Tensor a)
                                                          = GHC.Base.return
                                                              @ m
                                                              $dMonad
                                                              @ (Multilinear.Generic.Tensor a)
                                                        } in
                                                        \ (x1 :: Multilinear.Generic.Tensor a) ->
                                                        f1
                                                          (Multilinear.Generic.mergeScalars
                                                             @ a
                                                             x1)))
                                                    (GHC.Base.id
                                                       @ Data.Vector.Fusion.Bundle.Size.Size)
                                                    (Data.Vector.Generic.stream
                                                       @ Data.Vector.Vector
                                                       @ (Multilinear.Generic.Tensor a)
                                                       (Data.Vector.$fVectorVectora
                                                          @ (Multilinear.Generic.Tensor a))
                                                       ts1))))
                                      Multilinear.Generic.Scalar ds
                                      -> Multilinear.Generic.SimpleFinite
                                           @ a
                                           index1
                                           (Data.Vector.Generic.new
                                              @ Data.Vector.Vector
                                              @ a
                                              (Data.Vector.$fVectorVectora @ a)
                                              (Data.Vector.Generic.New.unstream
                                                 @ Data.Vector.Vector
                                                 @ a
                                                 (Data.Vector.$fVectorVectora @ a)
                                                 (Data.Vector.Fusion.Bundle.inplace
                                                    @ (Multilinear.Generic.Tensor a)
                                                    @ a
                                                    @ Data.Vector.Vector
                                                    (\ @ m :: * -> *
                                                       ($dMonad :: GHC.Base.Monad m)[OneShot] ->
                                                     Data.Vector.Fusion.Stream.Monadic.mapM
                                                       @ m
                                                       @ (Multilinear.Generic.Tensor a)
                                                       @ a
                                                       $dMonad
                                                       (let {
                                                          f1 :: a -> m a
                                                          = GHC.Base.return @ m $dMonad @ a
                                                        } in
                                                        \ (x1 :: Multilinear.Generic.Tensor a) ->
                                                        f1
                                                          (case x1 of wild2 {
                                                             DEFAULT
                                                             -> Multilinear.Generic.mergeScalars1
                                                                  @ a
                                                             Multilinear.Generic.Scalar ds1
                                                             -> ds1 })))
                                                    (GHC.Base.id
                                                       @ Data.Vector.Fusion.Bundle.Size.Size)
                                                    (Data.Vector.Generic.stream
                                                       @ Data.Vector.Vector
                                                       @ (Multilinear.Generic.Tensor a)
                                                       (Data.Vector.$fVectorVectora
                                                          @ (Multilinear.Generic.Tensor a))
                                                       ts1)))) } }) -}
cc2886027488b3228bf816a804cfc922
  mergeScalars1 :: a
  {- Strictness: x -}
3435455de223a292a66afccee7caf4fd
  mergeScalars_$smergeScalars ::
    Multilinear.Index.Finite.Index
    -> Data.Vector.Vector (Multilinear.Generic.Tensor a)
    -> Multilinear.Generic.Tensor a
  {- Arity: 2, Strictness: <L,U><S(SSS),1*U(U,U,U)> -}
ce31fa59e3facd46ecad169a25555d61
  scalarIndices :: GHC.Base.String
  {- Unfolding: (GHC.CString.unpackCString#
                   Multilinear.Generic.!1) -}
3435455de223a292a66afccee7caf4fd
  scalarVal :: Multilinear.Generic.Tensor a -> a
  RecSel Left Multilinear.Generic.Tensor
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ @ a (ds :: Multilinear.Generic.Tensor a) ->
                 case ds of wild {
                   DEFAULT -> Multilinear.Generic.mergeScalars1 @ a
                   Multilinear.Generic.Scalar ds1 -> ds1 }) -}
3435455de223a292a66afccee7caf4fd
  tensorFiniteIndex ::
    Multilinear.Generic.Tensor a -> Multilinear.Index.Finite.Index
  RecSel Left Multilinear.Generic.Tensor
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ @ a (ds :: Multilinear.Generic.Tensor a) ->
                 case ds of wild {
                   DEFAULT -> Multilinear.Generic.$fMultilinearTensora12
                   Multilinear.Generic.SimpleFinite ds1 ds2 -> ds1
                   Multilinear.Generic.FiniteTensor ds1 ds2 -> ds1 }) -}
af27ed4ec21f4196d2bb65cbc6dfd814
  tensorIndex ::
    Multilinear.Generic.Tensor a -> Multilinear.Index.TIndex
  {- Arity: 1, Strictness: <S,1*U>, Inline: (sat-args=1),
     Unfolding: InlineRule (1, False, False)
                (\ @ a ->
                 let {
                   loc :: [GHC.Types.Char]
                   = GHC.Base.build
                       @ GHC.Types.Char
                       (\ @ b ->
                        GHC.CString.unpackFoldrCString#
                          @ b
                          "Multilinear-0.8.0.0-4dpV53DlxV5EwwV6FZreVP"#)
                 } in
                 let {
                   loc1 :: [GHC.Types.Char]
                   = GHC.Base.build
                       @ GHC.Types.Char
                       (\ @ b ->
                        GHC.CString.unpackFoldrCString# @ b "Multilinear.Generic"#)
                 } in
                 let {
                   loc2 :: [GHC.Types.Char]
                   = GHC.Base.build
                       @ GHC.Types.Char
                       (\ @ b ->
                        GHC.CString.unpackFoldrCString#
                          @ b
                          "src\\Multilinear\\Generic.hs"#)
                 } in
                 let {
                   loc3 :: GHC.Types.Int = GHC.Types.I# 144#
                 } in
                 let {
                   loc4 :: GHC.Types.Int = GHC.Types.I# 27#
                 } in
                 let {
                   loc5 :: GHC.Types.Int = GHC.Types.I# 144#
                 } in
                 let {
                   loc6 :: GHC.Types.Int = GHC.Types.I# 36#
                 } in
                 let {
                   $dIP :: [GHC.Types.Char]
                   = GHC.Base.build
                       @ GHC.Types.Char
                       (\ @ b -> GHC.CString.unpackFoldrCString# @ b "error"#)
                 } in
                 let {
                   $dIP1 :: GHC.Stack.Types.SrcLoc
                   = GHC.Stack.Types.SrcLoc loc loc1 loc2 loc3 loc4 loc5 loc6
                 } in
                 let {
                   $dIP2 :: GHC.Stack.Types.CallStack
                   = GHC.Stack.Types.PushCallStack
                       $dIP
                       $dIP1
                       GHC.Stack.Types.EmptyCallStack
                 } in
                 let {
                   loc7 :: [GHC.Types.Char]
                   = GHC.Base.build
                       @ GHC.Types.Char
                       (\ @ b ->
                        GHC.CString.unpackFoldrCString#
                          @ b
                          "Multilinear-0.8.0.0-4dpV53DlxV5EwwV6FZreVP"#)
                 } in
                 let {
                   loc8 :: [GHC.Types.Char]
                   = GHC.Base.build
                       @ GHC.Types.Char
                       (\ @ b ->
                        GHC.CString.unpackFoldrCString# @ b "Multilinear.Generic"#)
                 } in
                 let {
                   loc9 :: [GHC.Types.Char]
                   = GHC.Base.build
                       @ GHC.Types.Char
                       (\ @ b ->
                        GHC.CString.unpackFoldrCString#
                          @ b
                          "src\\Multilinear\\Generic.hs"#)
                 } in
                 let {
                   loc10 :: GHC.Types.Int = GHC.Types.I# 140#
                 } in
                 let {
                   loc11 :: GHC.Types.Int = GHC.Types.I# 27#
                 } in
                 let {
                   loc12 :: GHC.Types.Int = GHC.Types.I# 140#
                 } in
                 let {
                   loc13 :: GHC.Types.Int = GHC.Types.I# 46#
                 } in
                 let {
                   $dIP3 :: [GHC.Types.Char]
                   = GHC.Base.build
                       @ GHC.Types.Char
                       (\ @ b -> GHC.CString.unpackFoldrCString# @ b "error"#)
                 } in
                 let {
                   $dIP4 :: GHC.Stack.Types.SrcLoc
                   = GHC.Stack.Types.SrcLoc loc7 loc8 loc9 loc10 loc11 loc12 loc13
                 } in
                 let {
                   $dIP5 :: GHC.Stack.Types.CallStack
                   = GHC.Stack.Types.PushCallStack
                       $dIP3
                       $dIP4
                       GHC.Stack.Types.EmptyCallStack
                 } in
                 \ (x :: Multilinear.Generic.Tensor a) ->
                 case x of wild {
                   Multilinear.Generic.Scalar ds
                   -> GHC.Err.error
                        @ 'GHC.Types.LiftedRep
                        @ Multilinear.Index.TIndex
                        $dIP5
                          `cast`
                        (Sym (GHC.Classes.N:IP[0]
                                  <"callStack">_N <GHC.Stack.Types.CallStack>_N))
                        Multilinear.Generic.scalarIndices
                   Multilinear.Generic.SimpleFinite i ds
                   -> Multilinear.Index.Finite.$fIndexIndex_$ctoTIndex i
                   Multilinear.Generic.FiniteTensor i ds
                   -> Multilinear.Index.Finite.$fIndexIndex_$ctoTIndex i
                   Multilinear.Generic.InfiniteTensor i ds
                   -> Multilinear.Index.Infinite.$fIndexIndex_$ctoTIndex i
                   Multilinear.Generic.Err msg
                   -> GHC.Err.error
                        @ 'GHC.Types.LiftedRep
                        @ Multilinear.Index.TIndex
                        $dIP2
                          `cast`
                        (Sym (GHC.Classes.N:IP[0]
                                  <"callStack">_N <GHC.Stack.Types.CallStack>_N))
                        msg }) -}
3435455de223a292a66afccee7caf4fd
  tensorInfiniteIndex ::
    Multilinear.Generic.Tensor a -> Multilinear.Index.Infinite.Index
  RecSel Left Multilinear.Generic.Tensor
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ @ a (ds :: Multilinear.Generic.Tensor a) ->
                 case ds of wild {
                   DEFAULT -> Multilinear.Generic.$fMultilinearTensora9
                   Multilinear.Generic.InfiniteTensor ds1 ds2 -> ds1 }) -}
3435455de223a292a66afccee7caf4fd
  tensorScalars ::
    Multilinear.Generic.Tensor a -> Data.Vector.Vector a
  RecSel Left Multilinear.Generic.Tensor
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ @ a (ds :: Multilinear.Generic.Tensor a) ->
                 case ds of wild {
                   DEFAULT -> Multilinear.Generic.$fMultilinearTensora10 @ a
                   Multilinear.Generic.SimpleFinite ds1 ds2 -> ds2 }) -}
3435455de223a292a66afccee7caf4fd
  tensorsFinite ::
    Multilinear.Generic.Tensor a
    -> Data.Vector.Vector (Multilinear.Generic.Tensor a)
  RecSel Left Multilinear.Generic.Tensor
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ @ a (ds :: Multilinear.Generic.Tensor a) ->
                 case ds of wild {
                   DEFAULT -> Multilinear.Generic.$fMultilinearTensora11 @ a
                   Multilinear.Generic.FiniteTensor ds1 ds2 -> ds2 }) -}
3435455de223a292a66afccee7caf4fd
  tensorsInfinite ::
    Multilinear.Generic.Tensor a -> [Multilinear.Generic.Tensor a]
  RecSel Left Multilinear.Generic.Tensor
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ @ a (ds :: Multilinear.Generic.Tensor a) ->
                 case ds of wild {
                   DEFAULT -> Multilinear.Generic.tensorsInfinite1 @ a
                   Multilinear.Generic.InfiniteTensor ds1 ds2 -> ds2 }) -}
3435455de223a292a66afccee7caf4fd
  tensorsInfinite1 :: [Multilinear.Generic.Tensor a]
  {- Strictness: x -}
3435455de223a292a66afccee7caf4fd
  zipT ::
    GHC.Num.Num a =>
    (Multilinear.Generic.Tensor a
     -> Multilinear.Generic.Tensor a -> Multilinear.Generic.Tensor a)
    -> (Multilinear.Generic.Tensor a
        -> a -> Multilinear.Generic.Tensor a)
    -> (a
        -> Multilinear.Generic.Tensor a -> Multilinear.Generic.Tensor a)
    -> (a -> a -> a)
    -> Multilinear.Generic.Tensor a
    -> Multilinear.Generic.Tensor a
    -> Multilinear.Generic.Tensor a
  {- Arity: 7,
     Strictness: <L,A><L,C(C1(U))><L,C(C1(U))><L,C(C1(U))><L,C(C1(U))><S,1*U><L,1*U>,
     Inline: (sat-args=6),
     Unfolding: InlineRule (7, False, False)
                (\ @ a
                   ($dNum :: GHC.Num.Num a)
                   (ds :: Multilinear.Generic.Tensor a
                          -> Multilinear.Generic.Tensor a -> Multilinear.Generic.Tensor a)
                   (ds1 :: Multilinear.Generic.Tensor a
                           -> a -> Multilinear.Generic.Tensor a)
                   (ds2 :: a
                           -> Multilinear.Generic.Tensor a -> Multilinear.Generic.Tensor a)
                   (f :: a -> a -> a)
                   (ds3 :: Multilinear.Generic.Tensor a)
                   (ds4 :: Multilinear.Generic.Tensor a) ->
                 case ds3 of wild {
                   Multilinear.Generic.Scalar ipv
                   -> case ds4 of wild1 {
                        DEFAULT
                        -> Multilinear.Generic.Err @ a Multilinear.Generic.scalarIndices
                        Multilinear.Generic.Err msg -> Multilinear.Generic.Err @ a msg }
                   Multilinear.Generic.SimpleFinite index1 v1
                   -> case ds4 of wild1 {
                        Multilinear.Generic.Scalar ipv
                        -> Multilinear.Generic.Err @ a Multilinear.Generic.scalarIndices
                        Multilinear.Generic.SimpleFinite index2 v2
                        -> case Multilinear.Index.Finite.$fEqIndex_$c==
                                  index1
                                  index2 of wild2 {
                             GHC.Types.False
                             -> Multilinear.Generic.Err
                                  @ a
                                  Multilinear.Generic.incompatibleTypes
                             GHC.Types.True
                             -> Multilinear.Generic.SimpleFinite
                                  @ a
                                  index1
                                  (Data.Vector.Generic.new
                                     @ Data.Vector.Vector
                                     @ a
                                     (Data.Vector.$fVectorVectora @ a)
                                     (Data.Vector.Generic.New.unstream
                                        @ Data.Vector.Vector
                                        @ a
                                        (Data.Vector.$fVectorVectora @ a)
                                        (Data.Vector.Fusion.Bundle.Monadic.zipWithM
                                           @ Data.Vector.Fusion.Util.Id
                                           @ a
                                           @ a
                                           @ a
                                           @ Data.Vector.Vector
                                           Data.Vector.Fusion.Util.$fMonadId
                                           (\ (a1 :: a) (b1 :: a)[OneShot] -> f a1 b1)
                                             `cast`
                                           (<a>_R
                                            ->_R <a>_R
                                            ->_R Sym (Data.Vector.Fusion.Util.N:Id[0] <a>_R))
                                           (Data.Vector.Generic.stream
                                              @ Data.Vector.Vector
                                              @ a
                                              (Data.Vector.$fVectorVectora @ a)
                                              v1)
                                           (Data.Vector.Generic.stream
                                              @ Data.Vector.Vector
                                              @ a
                                              (Data.Vector.$fVectorVectora @ a)
                                              v2)))) }
                        Multilinear.Generic.FiniteTensor index2 v2
                        -> case Multilinear.Index.Finite.$fEqIndex_$c==
                                  index1
                                  index2 of wild2 {
                             GHC.Types.False
                             -> Multilinear.Generic.Err
                                  @ a
                                  Multilinear.Generic.incompatibleTypes
                             GHC.Types.True
                             -> Multilinear.Generic.FiniteTensor
                                  @ a
                                  index1
                                  (Data.Vector.Generic.new
                                     @ Data.Vector.Vector
                                     @ (Multilinear.Generic.Tensor a)
                                     (Data.Vector.$fVectorVectora @ (Multilinear.Generic.Tensor a))
                                     (Data.Vector.Generic.New.unstream
                                        @ Data.Vector.Vector
                                        @ (Multilinear.Generic.Tensor a)
                                        (Data.Vector.$fVectorVectora
                                           @ (Multilinear.Generic.Tensor a))
                                        (Data.Vector.Fusion.Bundle.Monadic.zipWithM
                                           @ Data.Vector.Fusion.Util.Id
                                           @ a
                                           @ (Multilinear.Generic.Tensor a)
                                           @ (Multilinear.Generic.Tensor a)
                                           @ Data.Vector.Vector
                                           Data.Vector.Fusion.Util.$fMonadId
                                           (\ (a1 :: a)
                                              (b1 :: Multilinear.Generic.Tensor a)[OneShot] ->
                                            ds2 a1 b1)
                                             `cast`
                                           (<a>_R
                                            ->_R <Multilinear.Generic.Tensor a>_R
                                            ->_R Sym (Data.Vector.Fusion.Util.N:Id[0]
                                                          <Multilinear.Generic.Tensor a>_R))
                                           (Data.Vector.Generic.stream
                                              @ Data.Vector.Vector
                                              @ a
                                              (Data.Vector.$fVectorVectora @ a)
                                              v1)
                                           (Data.Vector.Generic.stream
                                              @ Data.Vector.Vector
                                              @ (Multilinear.Generic.Tensor a)
                                              (Data.Vector.$fVectorVectora
                                                 @ (Multilinear.Generic.Tensor a))
                                              v2)))) }
                        Multilinear.Generic.InfiniteTensor ds5 v2
                        -> Multilinear.Generic.FiniteTensor
                             @ a
                             index1
                             (Data.Vector.Generic.new
                                @ Data.Vector.Vector
                                @ (Multilinear.Generic.Tensor a)
                                (Data.Vector.$fVectorVectora @ (Multilinear.Generic.Tensor a))
                                (Data.Vector.Generic.New.unstream
                                   @ Data.Vector.Vector
                                   @ (Multilinear.Generic.Tensor a)
                                   (Data.Vector.$fVectorVectora @ (Multilinear.Generic.Tensor a))
                                   (Data.Vector.Fusion.Bundle.Monadic.zipWithM
                                      @ Data.Vector.Fusion.Util.Id
                                      @ a
                                      @ (Multilinear.Generic.Tensor a)
                                      @ (Multilinear.Generic.Tensor a)
                                      @ Data.Vector.Vector
                                      Data.Vector.Fusion.Util.$fMonadId
                                      (\ (a1 :: a) (b1 :: Multilinear.Generic.Tensor a)[OneShot] ->
                                       ds2 a1 b1)
                                        `cast`
                                      (<a>_R
                                       ->_R <Multilinear.Generic.Tensor a>_R
                                       ->_R Sym (Data.Vector.Fusion.Util.N:Id[0]
                                                     <Multilinear.Generic.Tensor a>_R))
                                      (Data.Vector.Generic.stream
                                         @ Data.Vector.Vector
                                         @ a
                                         (Data.Vector.$fVectorVectora @ a)
                                         v1)
                                      (Data.Vector.Fusion.Bundle.Monadic.unsafeFromList
                                         @ Data.Vector.Fusion.Util.Id
                                         @ (Multilinear.Generic.Tensor a)
                                         @ Data.Vector.Vector
                                         Data.Vector.Fusion.Util.$fMonadId
                                         Data.Vector.Fusion.Bundle.Size.Unknown
                                         (let {
                                            n :: Data.Vector.Fusion.Util.Id GHC.Types.Int
                                            = Data.Vector.Fusion.Bundle.Monadic.length
                                                @ Data.Vector.Fusion.Util.Id
                                                @ Data.Vector.Vector
                                                @ a
                                                Data.Vector.Fusion.Util.$fMonadId
                                                (Data.Vector.Fusion.Bundle.Monadic.fromVector
                                                   @ Data.Vector.Fusion.Util.Id
                                                   @ Data.Vector.Vector
                                                   @ a
                                                   Data.Vector.Fusion.Util.$fMonadId
                                                   (Data.Vector.$fVectorVectora @ a)
                                                   v1)
                                          } in
                                          GHC.Base.build
                                            @ (Multilinear.Generic.Tensor a)
                                            (\ @ b
                                               (c :: Multilinear.Generic.Tensor a
                                                     -> b -> b)[OneShot]
                                               (nil :: b)[OneShot] ->
                                             case GHC.Classes.ltInt
                                                    (GHC.Types.I# 0#)
                                                    n `cast`
                                                    (Data.Vector.Fusion.Util.N:Id[0]
                                                         <GHC.Types.Int>_R) of wild2 {
                                               GHC.Types.False -> nil
                                               GHC.Types.True
                                               -> GHC.Base.foldr
                                                    @ (Multilinear.Generic.Tensor a)
                                                    @ (GHC.Types.Int -> b)
                                                    (GHC.List.takeFB
                                                       @ (Multilinear.Generic.Tensor a)
                                                       @ b
                                                       c
                                                       nil)
                                                    (GHC.List.flipSeqTake @ b nil)
                                                    v2
                                                    n `cast`
                                                    (Data.Vector.Fusion.Util.N:Id[0]
                                                         <GHC.Types.Int>_R) }))))))
                        Multilinear.Generic.Err msg -> Multilinear.Generic.Err @ a msg }
                   Multilinear.Generic.FiniteTensor index1 v1
                   -> case ds4 of wild1 {
                        Multilinear.Generic.Scalar ipv
                        -> Multilinear.Generic.Err @ a Multilinear.Generic.scalarIndices
                        Multilinear.Generic.SimpleFinite index2 v2
                        -> case Multilinear.Index.Finite.$fEqIndex_$c==
                                  index1
                                  index2 of wild2 {
                             GHC.Types.False
                             -> Multilinear.Generic.Err
                                  @ a
                                  Multilinear.Generic.incompatibleTypes
                             GHC.Types.True
                             -> Multilinear.Generic.FiniteTensor
                                  @ a
                                  index1
                                  (Data.Vector.Generic.new
                                     @ Data.Vector.Vector
                                     @ (Multilinear.Generic.Tensor a)
                                     (Data.Vector.$fVectorVectora @ (Multilinear.Generic.Tensor a))
                                     (Data.Vector.Generic.New.unstream
                                        @ Data.Vector.Vector
                                        @ (Multilinear.Generic.Tensor a)
                                        (Data.Vector.$fVectorVectora
                                           @ (Multilinear.Generic.Tensor a))
                                        (Data.Vector.Fusion.Bundle.Monadic.zipWithM
                                           @ Data.Vector.Fusion.Util.Id
                                           @ (Multilinear.Generic.Tensor a)
                                           @ a
                                           @ (Multilinear.Generic.Tensor a)
                                           @ Data.Vector.Vector
                                           Data.Vector.Fusion.Util.$fMonadId
                                           (\ (a1 :: Multilinear.Generic.Tensor a)
                                              (b1 :: a)[OneShot] ->
                                            ds1 a1 b1)
                                             `cast`
                                           (<Multilinear.Generic.Tensor a>_R
                                            ->_R <a>_R
                                            ->_R Sym (Data.Vector.Fusion.Util.N:Id[0]
                                                          <Multilinear.Generic.Tensor a>_R))
                                           (Data.Vector.Generic.stream
                                              @ Data.Vector.Vector
                                              @ (Multilinear.Generic.Tensor a)
                                              (Data.Vector.$fVectorVectora
                                                 @ (Multilinear.Generic.Tensor a))
                                              v1)
                                           (Data.Vector.Generic.stream
                                              @ Data.Vector.Vector
                                              @ a
                                              (Data.Vector.$fVectorVectora @ a)
                                              v2)))) }
                        Multilinear.Generic.FiniteTensor index2 v2
                        -> case Multilinear.Index.Finite.$fEqIndex_$c==
                                  index1
                                  index2 of wild2 {
                             GHC.Types.False
                             -> Multilinear.Generic.Err
                                  @ a
                                  Multilinear.Generic.incompatibleTypes
                             GHC.Types.True
                             -> Multilinear.Generic.FiniteTensor
                                  @ a
                                  index1
                                  (Data.Vector.Generic.new
                                     @ Data.Vector.Vector
                                     @ (Multilinear.Generic.Tensor a)
                                     (Data.Vector.$fVectorVectora @ (Multilinear.Generic.Tensor a))
                                     (Data.Vector.Generic.New.unstream
                                        @ Data.Vector.Vector
                                        @ (Multilinear.Generic.Tensor a)
                                        (Data.Vector.$fVectorVectora
                                           @ (Multilinear.Generic.Tensor a))
                                        (Data.Vector.Fusion.Bundle.Monadic.zipWithM
                                           @ Data.Vector.Fusion.Util.Id
                                           @ (Multilinear.Generic.Tensor a)
                                           @ (Multilinear.Generic.Tensor a)
                                           @ (Multilinear.Generic.Tensor a)
                                           @ Data.Vector.Vector
                                           Data.Vector.Fusion.Util.$fMonadId
                                           (\ (a1 :: Multilinear.Generic.Tensor a)
                                              (b1 :: Multilinear.Generic.Tensor a)[OneShot] ->
                                            ds a1 b1)
                                             `cast`
                                           (<Multilinear.Generic.Tensor a>_R
                                            ->_R <Multilinear.Generic.Tensor a>_R
                                            ->_R Sym (Data.Vector.Fusion.Util.N:Id[0]
                                                          <Multilinear.Generic.Tensor a>_R))
                                           (Data.Vector.Generic.stream
                                              @ Data.Vector.Vector
                                              @ (Multilinear.Generic.Tensor a)
                                              (Data.Vector.$fVectorVectora
                                                 @ (Multilinear.Generic.Tensor a))
                                              v1)
                                           (Data.Vector.Generic.stream
                                              @ Data.Vector.Vector
                                              @ (Multilinear.Generic.Tensor a)
                                              (Data.Vector.$fVectorVectora
                                                 @ (Multilinear.Generic.Tensor a))
                                              v2)))) }
                        Multilinear.Generic.InfiniteTensor ds5 v2
                        -> Multilinear.Generic.FiniteTensor
                             @ a
                             index1
                             (Data.Vector.Generic.new
                                @ Data.Vector.Vector
                                @ (Multilinear.Generic.Tensor a)
                                (Data.Vector.$fVectorVectora @ (Multilinear.Generic.Tensor a))
                                (Data.Vector.Generic.New.unstream
                                   @ Data.Vector.Vector
                                   @ (Multilinear.Generic.Tensor a)
                                   (Data.Vector.$fVectorVectora @ (Multilinear.Generic.Tensor a))
                                   (Data.Vector.Fusion.Bundle.Monadic.zipWithM
                                      @ Data.Vector.Fusion.Util.Id
                                      @ (Multilinear.Generic.Tensor a)
                                      @ (Multilinear.Generic.Tensor a)
                                      @ (Multilinear.Generic.Tensor a)
                                      @ Data.Vector.Vector
                                      Data.Vector.Fusion.Util.$fMonadId
                                      (\ (a1 :: Multilinear.Generic.Tensor a)
                                         (b1 :: Multilinear.Generic.Tensor a)[OneShot] ->
                                       ds a1 b1)
                                        `cast`
                                      (<Multilinear.Generic.Tensor a>_R
                                       ->_R <Multilinear.Generic.Tensor a>_R
                                       ->_R Sym (Data.Vector.Fusion.Util.N:Id[0]
                                                     <Multilinear.Generic.Tensor a>_R))
                                      (Data.Vector.Generic.stream
                                         @ Data.Vector.Vector
                                         @ (Multilinear.Generic.Tensor a)
                                         (Data.Vector.$fVectorVectora
                                            @ (Multilinear.Generic.Tensor a))
                                         v1)
                                      (Data.Vector.Fusion.Bundle.Monadic.unsafeFromList
                                         @ Data.Vector.Fusion.Util.Id
                                         @ (Multilinear.Generic.Tensor a)
                                         @ Data.Vector.Vector
                                         Data.Vector.Fusion.Util.$fMonadId
                                         Data.Vector.Fusion.Bundle.Size.Unknown
                                         (let {
                                            n :: Data.Vector.Fusion.Util.Id GHC.Types.Int
                                            = Data.Vector.Fusion.Bundle.Monadic.length
                                                @ Data.Vector.Fusion.Util.Id
                                                @ Data.Vector.Vector
                                                @ (Multilinear.Generic.Tensor a)
                                                Data.Vector.Fusion.Util.$fMonadId
                                                (Data.Vector.Fusion.Bundle.Monadic.fromVector
                                                   @ Data.Vector.Fusion.Util.Id
                                                   @ Data.Vector.Vector
                                                   @ (Multilinear.Generic.Tensor a)
                                                   Data.Vector.Fusion.Util.$fMonadId
                                                   (Data.Vector.$fVectorVectora
                                                      @ (Multilinear.Generic.Tensor a))
                                                   v1)
                                          } in
                                          GHC.Base.build
                                            @ (Multilinear.Generic.Tensor a)
                                            (\ @ b
                                               (c :: Multilinear.Generic.Tensor a
                                                     -> b -> b)[OneShot]
                                               (nil :: b)[OneShot] ->
                                             case GHC.Classes.ltInt
                                                    (GHC.Types.I# 0#)
                                                    n `cast`
                                                    (Data.Vector.Fusion.Util.N:Id[0]
                                                         <GHC.Types.Int>_R) of wild2 {
                                               GHC.Types.False -> nil
                                               GHC.Types.True
                                               -> GHC.Base.foldr
                                                    @ (Multilinear.Generic.Tensor a)
                                                    @ (GHC.Types.Int -> b)
                                                    (GHC.List.takeFB
                                                       @ (Multilinear.Generic.Tensor a)
                                                       @ b
                                                       c
                                                       nil)
                                                    (GHC.List.flipSeqTake @ b nil)
                                                    v2
                                                    n `cast`
                                                    (Data.Vector.Fusion.Util.N:Id[0]
                                                         <GHC.Types.Int>_R) }))))))
                        Multilinear.Generic.Err msg -> Multilinear.Generic.Err @ a msg }
                   Multilinear.Generic.InfiniteTensor index1 v1
                   -> case ds4 of wild1 {
                        Multilinear.Generic.Scalar ipv
                        -> Multilinear.Generic.Err @ a Multilinear.Generic.scalarIndices
                        Multilinear.Generic.SimpleFinite index2 v2
                        -> Multilinear.Generic.FiniteTensor
                             @ a
                             index2
                             (Data.Vector.Generic.new
                                @ Data.Vector.Vector
                                @ (Multilinear.Generic.Tensor a)
                                (Data.Vector.$fVectorVectora @ (Multilinear.Generic.Tensor a))
                                (Data.Vector.Generic.New.unstream
                                   @ Data.Vector.Vector
                                   @ (Multilinear.Generic.Tensor a)
                                   (Data.Vector.$fVectorVectora @ (Multilinear.Generic.Tensor a))
                                   (Data.Vector.Fusion.Bundle.Monadic.zipWithM
                                      @ Data.Vector.Fusion.Util.Id
                                      @ (Multilinear.Generic.Tensor a)
                                      @ a
                                      @ (Multilinear.Generic.Tensor a)
                                      @ Data.Vector.Vector
                                      Data.Vector.Fusion.Util.$fMonadId
                                      (\ (a1 :: Multilinear.Generic.Tensor a) (b1 :: a)[OneShot] ->
                                       ds1 a1 b1)
                                        `cast`
                                      (<Multilinear.Generic.Tensor a>_R
                                       ->_R <a>_R
                                       ->_R Sym (Data.Vector.Fusion.Util.N:Id[0]
                                                     <Multilinear.Generic.Tensor a>_R))
                                      (Data.Vector.Fusion.Bundle.Monadic.unsafeFromList
                                         @ Data.Vector.Fusion.Util.Id
                                         @ (Multilinear.Generic.Tensor a)
                                         @ Data.Vector.Vector
                                         Data.Vector.Fusion.Util.$fMonadId
                                         Data.Vector.Fusion.Bundle.Size.Unknown
                                         (let {
                                            n :: Data.Vector.Fusion.Util.Id GHC.Types.Int
                                            = Data.Vector.Fusion.Bundle.Monadic.length
                                                @ Data.Vector.Fusion.Util.Id
                                                @ Data.Vector.Vector
                                                @ a
                                                Data.Vector.Fusion.Util.$fMonadId
                                                (Data.Vector.Fusion.Bundle.Monadic.fromVector
                                                   @ Data.Vector.Fusion.Util.Id
                                                   @ Data.Vector.Vector
                                                   @ a
                                                   Data.Vector.Fusion.Util.$fMonadId
                                                   (Data.Vector.$fVectorVectora @ a)
                                                   v2)
                                          } in
                                          GHC.Base.build
                                            @ (Multilinear.Generic.Tensor a)
                                            (\ @ b
                                               (c :: Multilinear.Generic.Tensor a
                                                     -> b -> b)[OneShot]
                                               (nil :: b)[OneShot] ->
                                             case GHC.Classes.ltInt
                                                    (GHC.Types.I# 0#)
                                                    n `cast`
                                                    (Data.Vector.Fusion.Util.N:Id[0]
                                                         <GHC.Types.Int>_R) of wild2 {
                                               GHC.Types.False -> nil
                                               GHC.Types.True
                                               -> GHC.Base.foldr
                                                    @ (Multilinear.Generic.Tensor a)
                                                    @ (GHC.Types.Int -> b)
                                                    (GHC.List.takeFB
                                                       @ (Multilinear.Generic.Tensor a)
                                                       @ b
                                                       c
                                                       nil)
                                                    (GHC.List.flipSeqTake @ b nil)
                                                    v1
                                                    n `cast`
                                                    (Data.Vector.Fusion.Util.N:Id[0]
                                                         <GHC.Types.Int>_R) })))
                                      (Data.Vector.Generic.stream
                                         @ Data.Vector.Vector
                                         @ a
                                         (Data.Vector.$fVectorVectora @ a)
                                         v2))))
                        Multilinear.Generic.FiniteTensor index2 v2
                        -> Multilinear.Generic.FiniteTensor
                             @ a
                             index2
                             (Data.Vector.Generic.new
                                @ Data.Vector.Vector
                                @ (Multilinear.Generic.Tensor a)
                                (Data.Vector.$fVectorVectora @ (Multilinear.Generic.Tensor a))
                                (Data.Vector.Generic.New.unstream
                                   @ Data.Vector.Vector
                                   @ (Multilinear.Generic.Tensor a)
                                   (Data.Vector.$fVectorVectora @ (Multilinear.Generic.Tensor a))
                                   (Data.Vector.Fusion.Bundle.Monadic.zipWithM
                                      @ Data.Vector.Fusion.Util.Id
                                      @ (Multilinear.Generic.Tensor a)
                                      @ (Multilinear.Generic.Tensor a)
                                      @ (Multilinear.Generic.Tensor a)
                                      @ Data.Vector.Vector
                                      Data.Vector.Fusion.Util.$fMonadId
                                      (\ (a1 :: Multilinear.Generic.Tensor a)
                                         (b1 :: Multilinear.Generic.Tensor a)[OneShot] ->
                                       ds a1 b1)
                                        `cast`
                                      (<Multilinear.Generic.Tensor a>_R
                                       ->_R <Multilinear.Generic.Tensor a>_R
                                       ->_R Sym (Data.Vector.Fusion.Util.N:Id[0]
                                                     <Multilinear.Generic.Tensor a>_R))
                                      (Data.Vector.Fusion.Bundle.Monadic.unsafeFromList
                                         @ Data.Vector.Fusion.Util.Id
                                         @ (Multilinear.Generic.Tensor a)
                                         @ Data.Vector.Vector
                                         Data.Vector.Fusion.Util.$fMonadId
                                         Data.Vector.Fusion.Bundle.Size.Unknown
                                         (let {
                                            n :: Data.Vector.Fusion.Util.Id GHC.Types.Int
                                            = Data.Vector.Fusion.Bundle.Monadic.length
                                                @ Data.Vector.Fusion.Util.Id
                                                @ Data.Vector.Vector
                                                @ (Multilinear.Generic.Tensor a)
                                                Data.Vector.Fusion.Util.$fMonadId
                                                (Data.Vector.Fusion.Bundle.Monadic.fromVector
                                                   @ Data.Vector.Fusion.Util.Id
                                                   @ Data.Vector.Vector
                                                   @ (Multilinear.Generic.Tensor a)
                                                   Data.Vector.Fusion.Util.$fMonadId
                                                   (Data.Vector.$fVectorVectora
                                                      @ (Multilinear.Generic.Tensor a))
                                                   v2)
                                          } in
                                          GHC.Base.build
                                            @ (Multilinear.Generic.Tensor a)
                                            (\ @ b
                                               (c :: Multilinear.Generic.Tensor a
                                                     -> b -> b)[OneShot]
                                               (nil :: b)[OneShot] ->
                                             case GHC.Classes.ltInt
                                                    (GHC.Types.I# 0#)
                                                    n `cast`
                                                    (Data.Vector.Fusion.Util.N:Id[0]
                                                         <GHC.Types.Int>_R) of wild2 {
                                               GHC.Types.False -> nil
                                               GHC.Types.True
                                               -> GHC.Base.foldr
                                                    @ (Multilinear.Generic.Tensor a)
                                                    @ (GHC.Types.Int -> b)
                                                    (GHC.List.takeFB
                                                       @ (Multilinear.Generic.Tensor a)
                                                       @ b
                                                       c
                                                       nil)
                                                    (GHC.List.flipSeqTake @ b nil)
                                                    v1
                                                    n `cast`
                                                    (Data.Vector.Fusion.Util.N:Id[0]
                                                         <GHC.Types.Int>_R) })))
                                      (Data.Vector.Generic.stream
                                         @ Data.Vector.Vector
                                         @ (Multilinear.Generic.Tensor a)
                                         (Data.Vector.$fVectorVectora
                                            @ (Multilinear.Generic.Tensor a))
                                         v2))))
                        Multilinear.Generic.InfiniteTensor index2 v2
                        -> case Multilinear.Index.Infinite.$fEqIndex_$c==
                                  index1
                                  index2 of wild2 {
                             GHC.Types.False
                             -> Multilinear.Generic.Err
                                  @ a
                                  Multilinear.Generic.incompatibleTypes
                             GHC.Types.True
                             -> Multilinear.Generic.InfiniteTensor
                                  @ a
                                  index1
                                  (GHC.Base.build
                                     @ (Multilinear.Generic.Tensor a)
                                     (\ @ b1
                                        (c1 :: Multilinear.Generic.Tensor a -> b1 -> b1)[OneShot]
                                        (n :: b1)[OneShot] ->
                                      GHC.List.foldr2
                                        @ (Multilinear.Generic.Tensor a)
                                        @ (Multilinear.Generic.Tensor a)
                                        @ b1
                                        (GHC.List.zipWithFB
                                           @ (Multilinear.Generic.Tensor a)
                                           @ b1
                                           @ b1
                                           @ (Multilinear.Generic.Tensor a)
                                           @ (Multilinear.Generic.Tensor a)
                                           c1
                                           ds)
                                        n
                                        v1
                                        v2)) }
                        Multilinear.Generic.Err msg -> Multilinear.Generic.Err @ a msg }
                   Multilinear.Generic.Err msg
                   -> Multilinear.Generic.Err @ a msg }) -}
instance Multilinear.Accessible [Multilinear.Generic.Tensor, .]
  = Multilinear.Generic.$fAccessibleTensora
instance Data.Bits.Bits [Multilinear.Generic.Tensor]
  = Multilinear.Generic.$fBitsTensor
instance GHC.Classes.Eq [Multilinear.Generic.Tensor]
  = Multilinear.Generic.$fEqTensor
instance GHC.Float.Floating [Multilinear.Generic.Tensor]
  = Multilinear.Generic.$fFloatingTensor
instance GHC.Real.Fractional [Multilinear.Generic.Tensor]
  = Multilinear.Generic.$fFractionalTensor
instance Data.Aeson.Types.FromJSON.FromJSON [Multilinear.Generic.Tensor]
  = Multilinear.Generic.$fFromJSONTensor
instance GHC.Base.Functor [Multilinear.Generic.Tensor]
  = Multilinear.Generic.$fFunctorTensor
instance GHC.Generics.Generic [Multilinear.Generic.Tensor]
  = Multilinear.Generic.$fGenericTensor
instance GHC.Base.Monoid [Multilinear.Generic.Tensor]
  = Multilinear.Generic.$fMonoidTensor
instance Multilinear.Multilinear [Multilinear.Generic.Tensor, .]
  = Multilinear.Generic.$fMultilinearTensora
instance Control.DeepSeq.NFData [Multilinear.Generic.Tensor]
  = Multilinear.Generic.$fNFDataTensor
instance GHC.Num.Num [Multilinear.Generic.Tensor]
  = Multilinear.Generic.$fNumTensor
instance GHC.Classes.Ord [Multilinear.Generic.Tensor]
  = Multilinear.Generic.$fOrdTensor
instance Data.Serialize.Serialize [Multilinear.Generic.Tensor]
  = Multilinear.Generic.$fSerializeTensor
instance GHC.Show.Show [Multilinear.Generic.Tensor]
  = Multilinear.Generic.$fShowTensor
instance Data.Aeson.Types.ToJSON.ToJSON [Multilinear.Generic.Tensor]
  = Multilinear.Generic.$fToJSONTensor
family instance GHC.Generics.Rep [Multilinear.Generic.Tensor]
  = Multilinear.Generic.Rep_Tensor
"SC:$cfmap1" forall @ a
                    (sc :: Multilinear.Index.Finite.Index)
                    (sc1 :: Data.Vector.Vector a)
                    (sc2 :: a -> a)
  Multilinear.Generic.$fMultilinearTensora_$cfmap @ a
                                                  @ a
                                                  sc2
                                                  (Multilinear.Generic.SimpleFinite @ a sc sc1)
  = Multilinear.Generic.$fMultilinearTensora_$s$cfmap @ a sc sc1 sc2
"SC:$w$c$|0" [0] forall @ a
                        (sc :: [GHC.Types.Char])
                        (sc1 :: [GHC.Types.Char])
                        (sc2 :: Multilinear.Generic.Tensor a)
  Multilinear.Generic.$w$c$| @ a sc2 (sc, sc1)
  = Multilinear.Generic.$fMultilinearTensora_$s$w$c$| @ a sc sc1 sc2
"SC:$w$cindices0" [0] forall @ a
                             (sc :: Multilinear.Index.Finite.Index)
                             (sc1 :: Data.Vector.Vector (Multilinear.Generic.Tensor a))
  Multilinear.Generic.$w$cindices @ a
                                  (Multilinear.Generic.FiniteTensor @ a sc sc1)
  = Multilinear.Generic.$fMultilinearTensora_$s$w$cindices1
      @ a
      sc
      sc1
"SC:$w$cindices1" [0] forall @ a
                             (sc :: Multilinear.Index.Infinite.Index)
                             (sc1 :: [Multilinear.Generic.Tensor a])
  Multilinear.Generic.$w$cindices @ a
                                  (Multilinear.Generic.InfiniteTensor @ a sc sc1)
  = Multilinear.Generic.$fMultilinearTensora_$s$w$cindices @ a sc sc1
"SC:firstElem1" forall @ a
                       (sc :: Multilinear.Index.Finite.Index)
                       (sc1 :: GHC.Prim.Int#)
                       (sc2 :: GHC.Prim.Int#)
                       (sc3 :: GHC.Prim.Array# (Multilinear.Generic.Tensor a))
  Multilinear.Generic.firstElem @ a
                                (Multilinear.Generic.FiniteTensor
                                   @ a
                                   sc
                                   (Data.Vector.Vector
                                      @ (Multilinear.Generic.Tensor a)
                                      sc1
                                      sc2
                                      sc3))
  = Multilinear.Generic.$fBitsTensor_$sfirstElem1 @ a sc sc1 sc2 sc3
"SC:firstElem2" forall @ a
                       (sc :: Multilinear.Index.Infinite.Index)
                       (sc1 :: Multilinear.Generic.Tensor a)
                       (sc2 :: [Multilinear.Generic.Tensor a])
  Multilinear.Generic.firstElem @ a
                                (Multilinear.Generic.InfiniteTensor
                                   @ a
                                   sc
                                   (GHC.Types.: @ (Multilinear.Generic.Tensor a) sc1 sc2))
  = Multilinear.Generic.$fBitsTensor_$sfirstElem @ a sc sc1 sc2
"SC:mergeScalars0" forall @ a
                          (sc :: Multilinear.Index.Finite.Index)
                          (sc1 :: Data.Vector.Vector (Multilinear.Generic.Tensor a))
  Multilinear.Generic.mergeScalars @ a
                                   (Multilinear.Generic.FiniteTensor @ a sc sc1)
  = Multilinear.Generic.mergeScalars_$smergeScalars @ a sc sc1
"SPEC/Multilinear.Generic $fConstructorMetaMetaCons @ "Err" @ 'PrefixI @ 'True" [orphan] forall (v2 :: GHC.Generics.SingI
                                                                                                         'GHC.Types.True)
                                                                                                (v1 :: GHC.Generics.SingI
                                                                                                         'GHC.Generics.PrefixI)
                                                                                                (v :: GHC.TypeLits.KnownSymbol
                                                                                                        "Err")
  GHC.Generics.$fConstructorMetaMetaCons @ "Err"
                                         @ 'GHC.Generics.PrefixI
                                         @ 'GHC.Types.True
                                         v
                                         v1
                                         v2
  = Multilinear.Generic.$s$fConstructorMetaMetaCons
"SPEC/Multilinear.Generic $fConstructorMetaMetaCons @ "FiniteTensor" @ 'PrefixI @ 'True" [orphan] forall (v2 :: GHC.Generics.SingI
                                                                                                                  'GHC.Types.True)
                                                                                                         (v1 :: GHC.Generics.SingI
                                                                                                                  'GHC.Generics.PrefixI)
                                                                                                         (v :: GHC.TypeLits.KnownSymbol
                                                                                                                 "FiniteTensor")
  GHC.Generics.$fConstructorMetaMetaCons @ "FiniteTensor"
                                         @ 'GHC.Generics.PrefixI
                                         @ 'GHC.Types.True
                                         v
                                         v1
                                         v2
  = Multilinear.Generic.$s$fConstructorMetaMetaCons6
"SPEC/Multilinear.Generic $fConstructorMetaMetaCons @ "InfiniteTensor" @ 'PrefixI @ 'True" [orphan] forall (v2 :: GHC.Generics.SingI
                                                                                                                    'GHC.Types.True)
                                                                                                           (v1 :: GHC.Generics.SingI
                                                                                                                    'GHC.Generics.PrefixI)
                                                                                                           (v :: GHC.TypeLits.KnownSymbol
                                                                                                                   "InfiniteTensor")
  GHC.Generics.$fConstructorMetaMetaCons @ "InfiniteTensor"
                                         @ 'GHC.Generics.PrefixI
                                         @ 'GHC.Types.True
                                         v
                                         v1
                                         v2
  = Multilinear.Generic.$s$fConstructorMetaMetaCons3
"SPEC/Multilinear.Generic $fConstructorMetaMetaCons @ "Scalar" @ 'PrefixI @ 'True" [orphan] forall (v2 :: GHC.Generics.SingI
                                                                                                            'GHC.Types.True)
                                                                                                   (v1 :: GHC.Generics.SingI
                                                                                                            'GHC.Generics.PrefixI)
                                                                                                   (v :: GHC.TypeLits.KnownSymbol
                                                                                                           "Scalar")
  GHC.Generics.$fConstructorMetaMetaCons @ "Scalar"
                                         @ 'GHC.Generics.PrefixI
                                         @ 'GHC.Types.True
                                         v
                                         v1
                                         v2
  = Multilinear.Generic.$s$fConstructorMetaMetaCons12
"SPEC/Multilinear.Generic $fConstructorMetaMetaCons @ "SimpleFinite" @ 'PrefixI @ 'True" [orphan] forall (v2 :: GHC.Generics.SingI
                                                                                                                  'GHC.Types.True)
                                                                                                         (v1 :: GHC.Generics.SingI
                                                                                                                  'GHC.Generics.PrefixI)
                                                                                                         (v :: GHC.TypeLits.KnownSymbol
                                                                                                                 "SimpleFinite")
  GHC.Generics.$fConstructorMetaMetaCons @ "SimpleFinite"
                                         @ 'GHC.Generics.PrefixI
                                         @ 'GHC.Types.True
                                         v
                                         v1
                                         v2
  = Multilinear.Generic.$s$fConstructorMetaMetaCons9
"SPEC/Multilinear.Generic $fFromJSON[] @ Char" [orphan] forall (v :: Data.Aeson.Types.FromJSON.FromJSON
                                                                       GHC.Types.Char)
  Data.Aeson.Types.FromJSON.$fFromJSON[] @ GHC.Types.Char v
  = Multilinear.Generic.$s$fFromJSON[]
"SPEC/Multilinear.Generic $fSelectorMetaMetaSel @ ('Just
                                                    "errMessage") @ 'NoSourceUnpackedness @ 'NoSourceStrictness @ 'DecidedLazy" [orphan] forall (v3 :: GHC.Generics.SingI
                                                                                                                                                                                                                  'GHC.Generics.DecidedLazy)
                                                                                                                                                                                                         (v2 :: GHC.Generics.SingI
                                                                                                                                                                                                                  'GHC.Generics.NoSourceStrictness)
                                                                                                                                                                                                         (v1 :: GHC.Generics.SingI
                                                                                                                                                                                                                  'GHC.Generics.NoSourceUnpackedness)
                                                                                                                                                                                                         (v :: GHC.Generics.SingI
                                                                                                                                                                                                                 ('GHC.Base.Just
                                                                                                                                                                                                                    "errMessage"))
  GHC.Generics.$fSelectorMetaMetaSel @ ('GHC.Base.Just "errMessage")
                                     @ 'GHC.Generics.NoSourceUnpackedness
                                     @ 'GHC.Generics.NoSourceStrictness
                                     @ 'GHC.Generics.DecidedLazy
                                     v
                                     v1
                                     v2
                                     v3
  = Multilinear.Generic.$s$fSelectorMetaMetaSel
"SPEC/Multilinear.Generic $fSelectorMetaMetaSel @ ('Just
                                                    "scalarVal") @ 'NoSourceUnpackedness @ 'NoSourceStrictness @ 'DecidedLazy" [orphan] forall (v3 :: GHC.Generics.SingI
                                                                                                                                                                                                                 'GHC.Generics.DecidedLazy)
                                                                                                                                                                                                        (v2 :: GHC.Generics.SingI
                                                                                                                                                                                                                 'GHC.Generics.NoSourceStrictness)
                                                                                                                                                                                                        (v1 :: GHC.Generics.SingI
                                                                                                                                                                                                                 'GHC.Generics.NoSourceUnpackedness)
                                                                                                                                                                                                        (v :: GHC.Generics.SingI
                                                                                                                                                                                                                ('GHC.Base.Just
                                                                                                                                                                                                                   "scalarVal"))
  GHC.Generics.$fSelectorMetaMetaSel @ ('GHC.Base.Just "scalarVal")
                                     @ 'GHC.Generics.NoSourceUnpackedness
                                     @ 'GHC.Generics.NoSourceStrictness
                                     @ 'GHC.Generics.DecidedLazy
                                     v
                                     v1
                                     v2
                                     v3
  = Multilinear.Generic.$s$fSelectorMetaMetaSel6
"SPEC/Multilinear.Generic $fSelectorMetaMetaSel @ ('Just
                                                    "tensorFiniteIndex") @ 'NoSourceUnpackedness @ 'NoSourceStrictness @ 'DecidedLazy" [orphan] forall (v3 :: GHC.Generics.SingI
                                                                                                                                                                                                                         'GHC.Generics.DecidedLazy)
                                                                                                                                                                                                                (v2 :: GHC.Generics.SingI
                                                                                                                                                                                                                         'GHC.Generics.NoSourceStrictness)
                                                                                                                                                                                                                (v1 :: GHC.Generics.SingI
                                                                                                                                                                                                                         'GHC.Generics.NoSourceUnpackedness)
                                                                                                                                                                                                                (v :: GHC.Generics.SingI
                                                                                                                                                                                                                        ('GHC.Base.Just
                                                                                                                                                                                                                           "tensorFiniteIndex"))
  GHC.Generics.$fSelectorMetaMetaSel @ ('GHC.Base.Just
                                          "tensorFiniteIndex")
                                     @ 'GHC.Generics.NoSourceUnpackedness
                                     @ 'GHC.Generics.NoSourceStrictness
                                     @ 'GHC.Generics.DecidedLazy
                                     v
                                     v1
                                     v2
                                     v3
  = Multilinear.Generic.$s$fSelectorMetaMetaSel5
"SPEC/Multilinear.Generic $fSelectorMetaMetaSel @ ('Just
                                                    "tensorInfiniteIndex") @ 'NoSourceUnpackedness @ 'NoSourceStrictness @ 'DecidedLazy" [orphan] forall (v3 :: GHC.Generics.SingI
                                                                                                                                                                                                                           'GHC.Generics.DecidedLazy)
                                                                                                                                                                                                                  (v2 :: GHC.Generics.SingI
                                                                                                                                                                                                                           'GHC.Generics.NoSourceStrictness)
                                                                                                                                                                                                                  (v1 :: GHC.Generics.SingI
                                                                                                                                                                                                                           'GHC.Generics.NoSourceUnpackedness)
                                                                                                                                                                                                                  (v :: GHC.Generics.SingI
                                                                                                                                                                                                                          ('GHC.Base.Just
                                                                                                                                                                                                                             "tensorInfiniteIndex"))
  GHC.Generics.$fSelectorMetaMetaSel @ ('GHC.Base.Just
                                          "tensorInfiniteIndex")
                                     @ 'GHC.Generics.NoSourceUnpackedness
                                     @ 'GHC.Generics.NoSourceStrictness
                                     @ 'GHC.Generics.DecidedLazy
                                     v
                                     v1
                                     v2
                                     v3
  = Multilinear.Generic.$s$fSelectorMetaMetaSel2
"SPEC/Multilinear.Generic $fSelectorMetaMetaSel @ ('Just
                                                    "tensorScalars") @ 'NoSourceUnpackedness @ 'NoSourceStrictness @ 'DecidedLazy" [orphan] forall (v3 :: GHC.Generics.SingI
                                                                                                                                                                                                                     'GHC.Generics.DecidedLazy)
                                                                                                                                                                                                            (v2 :: GHC.Generics.SingI
                                                                                                                                                                                                                     'GHC.Generics.NoSourceStrictness)
                                                                                                                                                                                                            (v1 :: GHC.Generics.SingI
                                                                                                                                                                                                                     'GHC.Generics.NoSourceUnpackedness)
                                                                                                                                                                                                            (v :: GHC.Generics.SingI
                                                                                                                                                                                                                    ('GHC.Base.Just
                                                                                                                                                                                                                       "tensorScalars"))
  GHC.Generics.$fSelectorMetaMetaSel @ ('GHC.Base.Just
                                          "tensorScalars")
                                     @ 'GHC.Generics.NoSourceUnpackedness
                                     @ 'GHC.Generics.NoSourceStrictness
                                     @ 'GHC.Generics.DecidedLazy
                                     v
                                     v1
                                     v2
                                     v3
  = Multilinear.Generic.$s$fSelectorMetaMetaSel4
"SPEC/Multilinear.Generic $fSelectorMetaMetaSel @ ('Just
                                                    "tensorsFinite") @ 'NoSourceUnpackedness @ 'NoSourceStrictness @ 'DecidedLazy" [orphan] forall (v3 :: GHC.Generics.SingI
                                                                                                                                                                                                                     'GHC.Generics.DecidedLazy)
                                                                                                                                                                                                            (v2 :: GHC.Generics.SingI
                                                                                                                                                                                                                     'GHC.Generics.NoSourceStrictness)
                                                                                                                                                                                                            (v1 :: GHC.Generics.SingI
                                                                                                                                                                                                                     'GHC.Generics.NoSourceUnpackedness)
                                                                                                                                                                                                            (v :: GHC.Generics.SingI
                                                                                                                                                                                                                    ('GHC.Base.Just
                                                                                                                                                                                                                       "tensorsFinite"))
  GHC.Generics.$fSelectorMetaMetaSel @ ('GHC.Base.Just
                                          "tensorsFinite")
                                     @ 'GHC.Generics.NoSourceUnpackedness
                                     @ 'GHC.Generics.NoSourceStrictness
                                     @ 'GHC.Generics.DecidedLazy
                                     v
                                     v1
                                     v2
                                     v3
  = Multilinear.Generic.$s$fSelectorMetaMetaSel3
"SPEC/Multilinear.Generic $fSelectorMetaMetaSel @ ('Just
                                                    "tensorsInfinite") @ 'NoSourceUnpackedness @ 'NoSourceStrictness @ 'DecidedLazy" [orphan] forall (v3 :: GHC.Generics.SingI
                                                                                                                                                                                                                       'GHC.Generics.DecidedLazy)
                                                                                                                                                                                                              (v2 :: GHC.Generics.SingI
                                                                                                                                                                                                                       'GHC.Generics.NoSourceStrictness)
                                                                                                                                                                                                              (v1 :: GHC.Generics.SingI
                                                                                                                                                                                                                       'GHC.Generics.NoSourceUnpackedness)
                                                                                                                                                                                                              (v :: GHC.Generics.SingI
                                                                                                                                                                                                                      ('GHC.Base.Just
                                                                                                                                                                                                                         "tensorsInfinite"))
  GHC.Generics.$fSelectorMetaMetaSel @ ('GHC.Base.Just
                                          "tensorsInfinite")
                                     @ 'GHC.Generics.NoSourceUnpackedness
                                     @ 'GHC.Generics.NoSourceStrictness
                                     @ 'GHC.Generics.DecidedLazy
                                     v
                                     v1
                                     v2
                                     v3
  = Multilinear.Generic.$s$fSelectorMetaMetaSel1
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: none
require own pkg trusted: False

